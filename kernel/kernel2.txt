<center><font color=red font=5>初始化阶段一些固定值的检索</font></center>
<1>控制寄存器CR0-CR3
CR0的位0为启用保护模式位（PE），位31为开启分页标志（PG）
CR1保留
CR2保存页错误的线性地址
CR3页目录表寄存器，高20位含有页目录表基地址，低12位保留。因此页目录表为页(4K)对齐的。
<2>段描述符
<font color=blue>特权级0的数据段类型为：0x92</font>
<font color=blue>特权级0的代码段类型为：0x9a</font>
<font color=blue>特权级3的数据段类型为：0xf2</font>
<font color=blue>特权级3的代码段类型为：0xfa</font>
--------------下列为系统段，应用段位标志（S）=0------------------
<font color=blue>特权级3的LDT类型为	 ：0xe2</font>（存在位=1，DPL=3，应用段位=0，LDT类型=2。0B11100010）
<font color=blue>特权级3的TSS类型为	 ：0xe9</font>（存在位=1，DPL=3，应用段位=0，TSS类型=9。0B11101001）
<font color=blue>32位中断门的段类型为 ：0x8e</font>（存在位=1，DPL=0，应用段位=0，中断门类型=e。0B10001110）
<font color=blue>32为陷阱门的段类型为 ：0xef</font>（存在位=1，DPL=3，应用段位=0，陷阱门类型=f。0B11101111）
关于陷阱门，由于其DPL=3，因此这是特权级3进入并执行特权级0代码的入口，这也是linux系统中断(0x80)所使用的类型。
借此可以执行特权级0的代码的途径。
<3>页目录、页表及表项格式
由于分页要求的每个页面大小为4K，并且都必须对齐于4K地址边界，而每个页目录、页表都必须要求放在一个页面内，因此
页目录和页表当然也必须是4K对齐的。页目录的基地址存放在CR3中，在32位系统中，由于页目录和页表配合最大的寻址空间
为4GB，因此若实现每个进程可拥有4GB虚拟内存空间时，可使每个进程都拥有各自独立的页目录和页表即可实现，所以对不
同的进程加载不同的页目录。由于页表（页目录）是4K对齐的，所以页表（页目录）的基地址的低12位就都是0，因此每个表
项格式中页帧地址只需高20位表示，低12位可存储该页帧的属性。
线性地址转换为物理地址的过程大致为：
1、页目录表（物理地址）由CR3确定
2、线性地址的高10位（每个表项为4位，共可寻址1024个页表）作为页目录表中的索引，查找对应的页表基地址（物理地址）。
3、依据索引值，获得页表的基地址以及页属性，再以线性地址的中10位作为页表中的索引，查找到目标页的基地址（物理地址）。
4、获取的目标页的基地址的高20位与线性地址的低12位组合而成为真正的物理地址。






















