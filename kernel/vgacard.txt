<a name=boot09></a><font color=red size=5>VGA硬件概述</font>
虽然与现代视频设备相比，VGA芯片是一个相当简单的硬件，但它可能是编程更复杂的设备之一，尤其是在过去，知道如何使用这个特定的设备就足以建立相当的声誉。虽然目前是一款传统设备，但它是开始练习视频驱动程序技能的好地方。虽然一个完整的VGA驱动程序可能会让USB控制器看起来微不足道，但幸运的是，有许多快捷方式可供选择。
未涵盖的内容
虽然本页试图全面概述VGA的功能，但它并没有完全涵盖整个图形集。毕竟，视频卡只会将内存中的字节转换为背面连接器上的信号。在wiki中，确定要放入内存的字节通常很少涉及——有绘制像素和设置单个字符的示例，但您的操作系统将确定图像形成哪些像素，以及哪些字符是标题屏幕的一部分。
在远程端，监视器有自己处理信号的方式。视频卡需要许多由显示器指定的设置，每种分辨率都有自己的设置集。您可以通过使用一组方程来找到自己的设置集，但您可以跳过这一步，重新使用示例设置中提供的示例之一。CRTC章节对它们进行了详细解释。
开始使用
网络上有相当多的模式设置代码。基本步骤包括计算所需的寄存器值，将其写入VGA，然后继续绘图。您需要：
端口I/O：VGA需要8位读/写和16位写。
MMIO:VGA使用对0xA0000-0xBFFF的无缓存字节访问。在某些情况下，也允许更大的写入。
为每个VGA组件读写寄存器的函数——因为寄存器比端口多得多，所以你需要一个包装器来实现这一点。
包含VGA显示设置的结构。要获得要设置的内容的详细列表，可以使用示例寄存器设置部分。请记住，您可能还需要一个在绘图过程中发生变化的事物的结构，例如颜色和偏移。
将该结构写入设备的函数
填充该结构的函数。您最初也可以使用硬编码结构。
硬件组件
VGA可以分为几个部分。从历史上看，VGA的前身EGA有几个芯片来执行系统中的每个部分。这些芯片可以使用I/O总线根据您的喜好进行配置。在VGA上，这些已合并到一个芯片中（DAC除外）。
下图显示了哪些单位负责哪些部分：
https://wiki.osdev.org/File:VGA_overview.gif
然而，此图是为了简化编程，不应被视为正确。
VGA寄存器
VGA有很多（超过300个！）内部寄存器，但在I/O地址空间中只占用很短的范围。为了应对这种情况，许多寄存器都被编入了索引。这意味着您用要写入的寄存器编号填充一个字段，然后读取或写入另一个字段以获取/设置实际寄存器的值。
所有寄存器都以8位访问。寄存器中未使用的部分应正式保留，尽管许多程序只是将其设置为零。但是，并非VGA中存在的所有字段都在此处记录，因此您要么查找其他引用，要么保留未记录的字段。
在下面的文档中，提供了端口号和可能的索引。端口通常是索引寄存器的基本端口，或者是单个寄存器的实际端口。
请注意，PCI板不会在其配置空间中报告VGA地址，并且这些地址无法重新映射。因此，不可能同时在VGA模式下正确操作两张卡。
端口0x3C0
此端口令人困惑：您将索引和数据字节写入同一端口。VGA会跟踪下一次写入应该是索引还是数据字节。然而，初始状态未知。通过从端口0x3DA读取，它将进入索引状态。要读取内容，请将索引馈送到端口0x3C0，然后从0x3C1读取值（然后读取0x3DA，因为未定义VGA接下来是需要数据字节还是索引字节）。
端口0x3C2
这是杂项输出寄存器。它使用端口0x3C2进行写入，0x3CC进行读取。此寄存器的位0控制其他几个寄存器的位置：如果清除，端口0x3D4映射到0x3B4，端口0x3DA映射到0x3BA。为了可读性，只列出了第一个端口，并假设设置了位0。
端口0x3C4、0x3CE、0x3D4
这些是最常用的索引寄存器。将索引字节写入给定的端口，然后可以从端口+1读取/写入数据字节。一些程序使用单个16位访问而不是两个字节访问进行写入，这实际上是一样的。（执行此操作时请注意字节顺序）
端口0x3D4有一些额外的要求-它需要在响应此地址之前设置杂项输出寄存器的位0（如果清除，这些端口将出现在0x3B4）。此外，0x3D4的寄存器0-7由保护位（索引0x11的位7）进行写保护
端口0x3C6
端口0x3C6只包含DAC掩码寄存器，可以通过此端口上的简单读/写操作轻松访问。在正常情况下，它应该包含0xff。
端口0x3C8
端口0x3C8、0x3C9和0x3C7控制DAC。DAC中的每个寄存器由18位组成，每个颜色分量为6位。要写入颜色，请将颜色索引写入端口0x3C8，然后按红色、绿色、蓝色的顺序将3个字节写入0x3C9。如果你想写入多个连续的DAC条目，你只需要将第一个条目的索引写入0x3C8，然后按照
红、绿、蓝、红、绿和蓝的顺序将所有值写入0x3C9。访问的DAC条目将在每写入三个字节后自动递增。要读取DAC条目，请将要读取的索引写入0x3C7，然后以类似的方式从端口0x3C9读取字节（与写入一样，索引将在每读取三个字节后递增）
视频存储器布局
视频存储器由四个“平面”（单个单元）的存储器组成，每个单元的大小为64KB，为VGA提供256k的视频存储器。与之相连的是序列器，它解释此内存以生成颜色，这些颜色被馈送到后续阶段。颜色在这种记忆中的组织方式主要取决于颜色深度。
关于如何从主机访问内存的具体细节可以通过阅读图形控制器来找到，关于渲染视频内存的详细信息可以通过阅读序列器来找到。
16种彩色图形模式下的内存布局
16种颜色意味着每种颜色使用4位。VGA有四个平面，对于每个像素，每个平面保存每个像素的一位。由于每个像素的信息分散在四个存储位置，这是最困难的存储模型。
每个地址的第7位包含关于第一个像素的信息，第6位包含关于下一个像素的数据，以此类推。
平面0包含所有像素的第一位，平面1包含第二位，以此类推。
 	one byte
Bits 	7 	6 	5 	4 	3 	2 	1 	0
Plane 0 	0 	0 	0 	0 	1 	1 	1 	1
Plane 1 	0 	0 	1 	1 	1 	1 	0 	0
Plane 2 	0 	1 	1 	0 	0 	1 	1 	0
Plane 3 	0 	1 	0 	1 	0 	1 	0 	1
Colors displayed 	0000 (0) 	1100 (12) 	0110 (6) 	1010 (10) 	0011 (3) 	1111 (15) 	0101 (5) 	1001 (9) 

