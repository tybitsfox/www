<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Making a Compiler - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"f82e36607cefbe494db9afaa","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Making_a_Compiler","wgTitle":"Making a Compiler","wgCurRevisionId":28074,"wgRevisionId":28074,"wgArticleId":3408,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["In Progress","Compiler Development"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Making_a_Compiler","wgRelevantArticleId":3408,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],
"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Making_a_Compiler rootpage-Making_a_Compiler skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Making a Compiler</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Making_a_Compiler#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Making_a_Compiler#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p><a href="./File:Under_Construction.png" class="image" title="This page is under construction!"><img alt="This page is under construction!" src="images/1/14/Under_Construction.png" decoding="async" width="50" height="50" data-file-width="50" data-file-height="50" /></a>
This page or section is a work in progress and may thus be incomplete. Its content may be changed in the near future.
</p>
</td>
<td>
</td></tr></tbody></table>
</center>
<p>So you want to make your own <a href="Compiler" title="Compiler">compiler</a>, from scratch?
</p><p>That won't be easy. Some compilers are comparable in complexity to entire simple operating systems.
</p><p>Still, it can be a fun and/or educational project. Here are some things you should know before you get started:
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Making_a_Compiler#Pros_and_Cons"><span class="tocnumber">1</span> <span class="toctext">Pros and Cons</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Making_a_Compiler#Terminology"><span class="tocnumber">2</span> <span class="toctext">Terminology</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Making_a_Compiler#Internals"><span class="tocnumber">3</span> <span class="toctext">Internals</span></a>
<ul>
<li class="toclevel-2 tocsection-4"><a href="Making_a_Compiler#Front_End"><span class="tocnumber">3.1</span> <span class="toctext">Front End</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="Making_a_Compiler#Middle_End"><span class="tocnumber">3.2</span> <span class="toctext">Middle End</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="Making_a_Compiler#Back_End"><span class="tocnumber">3.3</span> <span class="toctext">Back End</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-7"><a href="Making_a_Compiler#See_Also"><span class="tocnumber">4</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-8"><a href="Making_a_Compiler#External_Links"><span class="tocnumber">4.1</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Pros_and_Cons">Pros and Cons</span></h2>
<p>Why write a compiler instead of using an existing one?
</p><p>Pros:
</p>
<ul><li>A compiler for the language you want and the target you want might simply does not exist.</li>
<li>Educational, you get a better idea of <a href="How_kernel,_compiler,_and_C_library_work_together" title="How kernel, compiler, and C library work together">how the kernel, compiler, and the run-time libraries work together</a>, and what it takes to implement a language.</li>
<li>Speaking of, you can implement your own new programming language, right then and there! How cool is that?</li>
<li>You can do just about anything with the program being compiled:
<ul><li>Add debugging data in your favorite format</li>
<li>Add profiling aids</li>
<li>Re-write and re-arrange parts of the program</li>
<li>Optimize for something specific</li>
<li>Throw it out and replace it with another program</li></ul></li>
<li>The compiled programs would fit your machine or OS like a glove, even if it's a new OS you're developing.</li></ul>
<p>Cons:
</p>
<ul><li>Complete understanding of the language required. Always keep the official language spec at hand.</li>
<li>Understanding of assembly specific to your target is also required.</li>
<li>Most of the notes on <a href="Getting_Started#Getting_motivated" title="Getting Started">OSDev motivation</a> apply to compilers as well.</li>
<li>It will be tricky to fully comply with the language spec.</li>
<li>You would have to be really, really good at this if you wish to compete with GCC in terms of size/speed optimization of the compiled code.</li></ul>
<h2><span class="mw-headline" id="Terminology">Terminology</span></h2>
<p>Well, if you're still up to it, let's now look at how compilers work:
</p><p><a href="./File:Compilers1.png" class="image"><img alt="Compilers1.png" src="images/2/2e/Compilers1.png" decoding="async" width="400" height="300" data-file-width="400" data-file-height="300" /></a>
</p><p>Terminology:
</p>
<ul><li>The "Host" is the environment where the compiler itself runs.</li>
<li>The "Target" is where the compiled program is meant to run.</li>
<li>The "run-time" is a set resources (libraries, processes, etc) that exist on the Target. Two machines with identical hardware that differ in availability of run-time resources are sometimes thought of as different targets, as a program might run on one but not the other.</li>
<li>The "<a href="Executable_Formats" title="Executable Formats">executable</a>" is a file containing information necessary for the Target to launch the program. It can be a flat binary, but is usually more elaborate, containing for example linking and re-location information.</li>
<li>The "link" signifies that the program knows how to interface with the run-time, and relies on the run-time for some of it's functionality. It is created by the <a href="Linkers" title="Linkers">linker</a>, and does not exist in free-standing programs (i.e. OS kernel).</li></ul>
<p>If the host and the target are the same the product is a "native executable". This is what you see 99% of the time.
If the compiler is capable of producing an executable for a target different from the host, it's a "cross-compiler".
If the compiler is capable of compiling itself, it's "self-hosting".
</p>
<h2><span class="mw-headline" id="Internals">Internals</span></h2>
<div class="floatright"><a href="./File:Compilers2.png" class="image"><img alt="Compilers2.png" src="images/9/99/Compilers2.png" decoding="async" width="400" height="997" data-file-width="400" data-file-height="997" /></a></div>
<p>Compilers also have a peculiar internal structure. You do not have to replicate the one described here exactly, but it's a good road map for now. Generally, the task of compiling a program is subdivided into several individual tasks:
</p>
<ul><li>The <b>Front End</b> takes the source code for some specific language, and outputs a universal "intermediate representation" (IR).</li>
<li>The <b>Middle End</b> (optional) takes the intermediate representation, changes it in some way, and outputs it back.</li>
<li>The <b>Back End</b> takes the IR and outputs an executable for a specific target.</li></ul>
<p>The idea for this division is that by having a collection of different front-ends, and different back ends, you can compile a program in any language, to any target, because the IR is the same for all of them.
</p>
<h3><span class="mw-headline" id="Front_End">Front End</span></h3>
<ul><li>First of all, the front end usually includes some sort of user interface, so that files and options can be accepted. Then, there are several stages of processing.</li>
<li>For C-like languages, a <b>pre-processor</b> copies and pastes the code from header files, removes comments performs macro expansion and does other relatively simple tasks.</li>
<li>Then, a <b>scanner</b> (or <b>tokenizer</b>) breaks up the source file into a series of tokens, representing basic words of a language (i.e. identifiers, number and string constants, keywords like "if" and "while", punctuation marks and semicolons)</li>
<li>Then, a <b>parser</b> reads the stream of tokens and constructs a <b>parse tree</b>, a tree-like structure that represents the structure of the source code. In terms of language-making, each source code file is a "sentence" of the language, and every sentence, if it is valid, follows a specific syntax.</li>
<li>Next, a <b>semantic analyzer</b> walks the parse tree and determines the specific meaning of each part of that "sentence". For instance, if a statement is a declaration, it adds an entry to a symbol table, and if it is an expression involving a variable, it substitutes an address of the known variable from the symbol table for the variable inside the expression.</li>
<li>Finally, the Front End generates an <b>Intermediate Representation</b>, which captures all the information specific to the source code of the program. A good IR says everything that the source says and more, and also captures additional requirements that the language places on the program. It can be in the form of a <b>parse tree</b>, <b>abstract syntax tree</b>, <b>three address code</b> or something more exotic.</li></ul>
<p>It's worth noting that this break-up is purely for convenience of the compiler developer. Most types of <b>parsers</b> can easily read a stream of characters as opposed to a stream of tokens, and so do not need a separate scanner. Some very powerful classes of parsers can even determine the semantic meaning of statements <i>before they're even done reading</i>, and so do not need a semantic analyzer. They might be more difficult to understand and work with, though.
</p>
<h3><span class="mw-headline" id="Middle_End">Middle End</span></h3>
<p>Applies a whole bunch of algorithms meant to try and make the program more efficient. I'm not really familiar with this part, so I won't go into details. Since all it does is optimization, you could omit it for simplicity.
</p>
<h3><span class="mw-headline" id="Back_End">Back End</span></h3>
<ul><li>First, the <b>code generator</b> reads an intermediate representation, and emits assembly-like code, the only difference being that it assumes a machine with infinite number of registers (or some other resource) for simplicity.</li>
<li>Second, a <b>register allocator</b> juggles available registers on the CPU by deciding when a variable is to be stored in a register or in memory. This part has <i>major</i> impact on performance. Once it's done, the assembly-like code becomes true <b>assembly</b>.</li>
<li>Then, an <b>assembler</b> reads the assembly and outputs <b>machine code</b>. Usually, the code still has some unresolved references, so the machine code is put inside an <b>object file</b>.</li>
<li>Next, a <b>linker</b> satisfies every unresolved reference in an object file by linking it against a library and substituting a pointer to the resource being referred to inside the library. The linker also supplies necessary information to locate the relevant library when linking dynamically, or, when linking statically, some or all of a particular library might be embedded in the object file. The linker is sometimes thought of as being separate from the back end or even the compiler, but the truth is, the operation of a particular linker is specific to the target (or a family of targets) that it links for, so I included it in this category.</li></ul>
<ul><li>Finally, the back end converts the object file with all references resolved into an executable by adding meta-data necessary for the Target's program loading mechanism to recognize the program, load it, dynamically link it if necessary, and run it.</li></ul>
<p><br />
Soon, I'll go over how to actually write each of those. [editor's note: "soon" doesn't seem to be that soon after all]
</p>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<h3><span class="mw-headline" id="External_Links">External Links</span></h3>
<ul><li><a rel="nofollow" class="external text" href="https://craftinginterpreters.com/">Crafting Interpreters</a> - has a very good and approachable description of lexing, parsing, and ASTs. Also covers compiling to bytecode, with techniques that can be adapted to emit unoptimized machine code.</li>
<li><a rel="nofollow" class="external text" href="https://www.cs.cornell.edu/courses/cs6120/2020fa/self-guided/">CS 6120: Advanced Compilers: The Self-Guided Online Course</a> - an introduction to various code optimization techniques</li>
<li><a rel="nofollow" class="external text" href="https://cfallin.org/blog/2023/01/20/cranelift-isle/">Cranelift's Instruction Selector DSL, ISLE: Term-Rewriting Made Practical</a> - an example of how instruction selection can be accomplished</li>
<li><a rel="nofollow" class="external text" href="https://cfallin.org/blog/2022/06/09/cranelift-regalloc2/">Cranelift, Part 4: A New Register Allocator</a> - an example of a non-trivial register allocation technique</li>
<li><a rel="nofollow" class="external text" href="https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-egraph.md">Cranelift: Using E-Graphs for Verified, Cooperating Middle-End Optimizations</a> - describes an interesting technique for solving the phase-ordering problem</li></ul>
<!-- 
NewPP limit report
Cached time: 20250212010431
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.021 seconds
Real time usage: 0.022 seconds
Preprocessor visited node count: 34/1000000
Post‐expand include size: 358/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.761      1 Template:In_Progress
100.00%    0.761      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3408-0!canonical and timestamp 20250212010431 and revision id 28074.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Making_a_Compiler&amp;oldid=28074">https://wiki.osdev.org/index.php?title=Making_a_Compiler&amp;oldid=28074</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="./Category:In_Progress" title="Category:In Progress">In Progress</a></li><li><a href="./Category:Compiler_Development" title="Category:Compiler Development">Compiler Development</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Making+a+Compiler" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Making_a_Compiler#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Making_a_Compiler" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:Making_a_Compiler" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Making_a_Compiler"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Making_a_Compiler&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Making_a_Compiler&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Making_a_Compiler" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Making_a_Compiler" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Making_a_Compiler&amp;oldid=28074" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Making_a_Compiler&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 9 July 2023, at 20:47.</li>
	<li id="footer-info-0">This page has been accessed 5,974 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Making_a_Compiler&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.021","walltime":"0.022","ppvisitednodes":{"value":34,"limit":1000000},"postexpandincludesize":{"value":358,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":0,"limit":5000000},"timingprofile":["100.00%    0.761      1 Template:In_Progress","100.00%    0.761      1 -total"]},"cachereport":{"timestamp":"20250212010431","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":113});});</script>
</body>
</html>