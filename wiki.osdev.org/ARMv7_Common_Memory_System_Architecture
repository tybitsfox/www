<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>ARMv7 Common Memory System Architecture - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"349c20b092f87430533f8749","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"ARMv7_Common_Memory_System_Architecture","wgTitle":"ARMv7 Common Memory System Architecture","wgCurRevisionId":27995,"wgRevisionId":27995,"wgArticleId":4017,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["ARM"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"ARMv7_Common_Memory_System_Architecture","wgRelevantArticleId":4017,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove"
:[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-ARMv7_Common_Memory_System_Architecture rootpage-ARMv7_Common_Memory_System_Architecture skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">ARMv7 Common Memory System Architecture</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="ARMv7_Common_Memory_System_Architecture#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="ARMv7_Common_Memory_System_Architecture#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="ARMv7_Common_Memory_System_Architecture#Introduction"><span class="tocnumber">1</span> <span class="toctext">Introduction</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="ARMv7_Common_Memory_System_Architecture#Components_of_the_CMSA"><span class="tocnumber">2</span> <span class="toctext">Components of the CMSA</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="ARMv7_Common_Memory_System_Architecture#Caches"><span class="tocnumber">2.1</span> <span class="toctext">Caches</span></a>
<ul>
<li class="toclevel-3 tocsection-4"><a href="ARMv7_Common_Memory_System_Architecture#Cache_policies"><span class="tocnumber">2.1.1</span> <span class="toctext">Cache policies</span></a></li>
<li class="toclevel-3 tocsection-5"><a href="ARMv7_Common_Memory_System_Architecture#Cache_allocation_hints"><span class="tocnumber">2.1.2</span> <span class="toctext">Cache allocation hints</span></a></li>
<li class="toclevel-3 tocsection-6"><a href="ARMv7_Common_Memory_System_Architecture#Cache_topology"><span class="tocnumber">2.1.3</span> <span class="toctext">Cache topology</span></a>
<ul>
<li class="toclevel-4 tocsection-7"><a href="ARMv7_Common_Memory_System_Architecture#Level_of_Unification_(verbatim)"><span class="tocnumber">2.1.3.1</span> <span class="toctext">Level of Unification (verbatim)</span></a></li>
<li class="toclevel-4 tocsection-8"><a href="ARMv7_Common_Memory_System_Architecture#Level_of_Coherency_(verbatim)"><span class="tocnumber">2.1.3.2</span> <span class="toctext">Level of Coherency (verbatim)</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-9"><a href="ARMv7_Common_Memory_System_Architecture#Enumerating_processor-controlled_caches"><span class="tocnumber">2.1.4</span> <span class="toctext">Enumerating processor-controlled caches</span></a></li>
<li class="toclevel-3 tocsection-10"><a href="ARMv7_Common_Memory_System_Architecture#Architected_cache_behaviour,_caveats_and_guarantees"><span class="tocnumber">2.1.5</span> <span class="toctext">Architected cache behaviour, caveats and guarantees</span></a>
<ul>
<li class="toclevel-4 tocsection-11"><a href="ARMv7_Common_Memory_System_Architecture#Properties_of_a_cache_system"><span class="tocnumber">2.1.5.1</span> <span class="toctext">Properties of a cache system</span></a></li>
<li class="toclevel-4 tocsection-12"><a href="ARMv7_Common_Memory_System_Architecture#Cache_lockdown"><span class="tocnumber">2.1.5.2</span> <span class="toctext">Cache lockdown</span></a></li>
<li class="toclevel-4 tocsection-13"><a href="ARMv7_Common_Memory_System_Architecture#General"><span class="tocnumber">2.1.5.3</span> <span class="toctext">General</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-14"><a href="ARMv7_Common_Memory_System_Architecture#Cache_state_on_#RESET"><span class="tocnumber">2.1.6</span> <span class="toctext">Cache state on #RESET</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-15"><a href="ARMv7_Common_Memory_System_Architecture#Branch_predictors"><span class="tocnumber">2.2</span> <span class="toctext">Branch predictors</span></a>
<ul>
<li class="toclevel-3 tocsection-16"><a href="ARMv7_Common_Memory_System_Architecture#The_IPB"><span class="tocnumber">2.2.1</span> <span class="toctext">The IPB</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-17"><a href="ARMv7_Common_Memory_System_Architecture#Translation_Regimes"><span class="tocnumber">3</span> <span class="toctext">Translation Regimes</span></a></li>
</ul>
</div>

<h1><span class="mw-headline" id="Introduction">Introduction</span></h1>
<p>This article seeks to provide a concise summary of the ARM <b>version 7</b> Common Memory System Architecture, which is a very convoluted name for the ARM Caching and Branch Prediction architecture. ARM has 3 main "Memory Systems Architectures" which form the components of its memory access scheme:
</p>
<ul><li>CMSA: Common Memory System Architecture: Caches and Branch Prediction. CMSA is common to all profiles, with adjustments as needed for the particular implementation and intended use of the processor.</li>
<li>VMSA: Virtual Memory System Architecture: TLBs and Virtual Memory as a memory protection and isolation, and linearization scheme. VMSA is generally implemented by ARM profile-A processor implementations.</li>
<li>PMSA: Protected Memory System Architecture: a simplified memory protection scheme, also known in general CPU design parlance as an MPU (Memory Protection Unit), often held in contrast to an MMU (Memory Management Unit). An MPU is generally preferred to the memory and speed overheads of an MMU, in very resource-constrained, or performance critical microcontrollers. PMSA is generally implemented by ARM profile-R processor implementations.</li></ul>
<p>Any particular ARM implementation may have one or more of these "Memory Systems" (CMSA, VMSA and PMSA).
</p><p>This article is not current with the ARM <b>version 8</b> CMSA.
</p><p><b>Strong warning</b>: The ARM reference manuals are subject to change at the whims and discretion of ARM, and this article does not claim to be a current description of the behaviour of architected ARM features, on any given date. This is a concise summary of critical points for quick recollection, for a person who has <b>already</b> read the manuals. Do not use this as a primary learning source.
</p>
<h1><span class="mw-headline" id="Components_of_the_CMSA">Components of the CMSA</span></h1>
<h2><span class="mw-headline" id="Caches">Caches</span></h2>
<h3><span class="mw-headline" id="Cache_policies">Cache policies</span></h3>
<p>ARMv7 CMSA compliant processors have buffering and caching policies which, when combined in a non-LPAE-mode processor, give the following cache policies:
</p>
<ul><li>Non-cacheable</li>
<li>Write-through cacheable</li>
<li>Write-back Write-allocate cacheable (aka, read-around or read-behind caching)</li>
<li>Write-back no-write-allocate cacheable (aka write-around or write-behind caching)</li></ul>
<p>An ARMv7 processor with the LPAE extensions enabled allows for more cache policies, as well as a cache-allocation hint.
</p>
<h3><span class="mw-headline" id="Cache_allocation_hints">Cache allocation hints</span></h3>
<p>ARM processors' memory attributes include an allocation hint for the processor. This enables software to cue the processor into whether or not it should allocate cache lines for accesses to that memory area. The ARM specification does not require implementations to respect these hints. The hints are:
</p>
<ul><li>Allocate</li>
<li>Do-not allocate.</li></ul>
<h3><span class="mw-headline" id="Cache_topology">Cache topology</span></h3>
<p>In ARM processors, the instruction and data/unified caches can be separately enabled and disabled. The Data/unified cache(s) are enabled as a group, and the instruction cache(s) are separately enabled as their own group. ARMv7 provides a way for software to reason about caches in a uniform manner across implementations. Prior to ARMv7, ARM only architecturally specified one level of cache and support for and management of all other levels of cache was &lt;IMPLEMENTATION DEFINED&gt;. ARMv7 introduces the concepts of <b>Level of Unification</b> and <b>Level of Coherency</b> in order for software to interact robustly with diverse caches.
</p>
<h4><span id="Level_of_Unification_.28verbatim.29"></span><span class="mw-headline" id="Level_of_Unification_(verbatim)">Level of Unification (verbatim)</span></h4>
<p>The PoU for a processor is the point by which the instruction and data caches and the translation table walks of that processor are guaranteed to see the same copy of a memory location. In many cases, the point of unification is the point in a uniprocessor memory system by which the instruction and data caches and the translation table walks have merged. The PoU for an Inner Shareable shareability domain is the point by which the instruction and data caches and the translation table walks of all the processors in that Inner Shareable shareability domain are guaranteed to see the same copy of a memory location.Defining this point permits self-modifying software to ensure future instruction fetches are associated with the modified version of the software by using the standard correctness policy of:
</p>
<ul><li>Clean data cache entry by address.</li>
<li>Invalidate instruction cache entry by address.</li></ul>
<p>The PoU also permits a uniprocessor system that does not implement the Multiprocessing Extensions to use the clean data cache entry operation to ensure that all writes to the translation tables are <b>visible to the translation table walk hardware.</b> In other words, ARM TLBs walk the page tables from the Level of Unification, so page tables need only be cleaned to the level of Unification, and not the Level of Coherency.
</p>
<h4><span id="Level_of_Coherency_.28verbatim.29"></span><span class="mw-headline" id="Level_of_Coherency_(verbatim)">Level of Coherency (verbatim)</span></h4>
<p>For a particular MVA, the PoC is the point at which all agents that can access memory are guaranteed to see the same copy of a memory location. In many cases, this is effectively the main system memory, although the architecture does not prohibit the implementation of caches beyond the PoC that have no effect on the coherence between memory system agents.
</p><p>"All agents" here refers to non-processor microcontrollers such as DMA-capable devices.
</p>
<h3><span class="mw-headline" id="Enumerating_processor-controlled_caches">Enumerating processor-controlled caches</span></h3>
<p>Notice that the title of this section heading is "Enumerating <b>processor-controlled</b> caches". This is because on any ARM platform, not all caches may be under the control of the processor. In an ARMv7 implementation where some cache is under the control of the processor however, this is how that cache is specified to be interacted with by ARM.
</p>
<h3><span id="Architected_cache_behaviour.2C_caveats_and_guarantees"></span><span class="mw-headline" id="Architected_cache_behaviour,_caveats_and_guarantees">Architected cache behaviour, caveats and guarantees</span></h3>
<h4><span class="mw-headline" id="Properties_of_a_cache_system">Properties of a cache system</span></h4>
<ul><li>Cache line size: The size of cache lines as allocated and evicted according to the cache policy. ARM allows cache-line sizes from 16Bytes to 2KiB (Section B2.2.2).</li>
<li>Cache granule: The write-back size of the processor when a write-back policy is in use. The processor may write multiple cache lines back at once, and the size of the burst-transaction that is written at once, is the cache granule.</li>
<li>Number of levels of caches: The number of cache levels which must be kept coherent in the cache system.</li>
<li>The cache allocation algorithm: what policy dictates whether or not the processor will allocate a line into the cache for an access to a particular memory location. The cache eviction algorithm is not architecturally specified.</li>
<li>Behaviour at major junctions in software execution such as exception entry.</li>
<li>The presence or absence of <b>speculative caching</b> and what its behaviour is like.</li></ul>
<h4><span class="mw-headline" id="Cache_lockdown">Cache lockdown</span></h4>
<p>Due to all the properties of caches (perhaps especially the lattermost), which factor into their behaviour, ARM cannot guarantee:
</p>
<ul><li>Whether or not a particular memory location present in the cache will remain in the cache.</li>
<li>Whether or not a particular memory location not allocated into the cache will be allocated into the cache.</li></ul>
<p>Instead, ARM provides a "<i>Locked Entry</i>" mechanism, which pins a line into the cache. The implementation details behind a particular platform's cache lockdown are &lt;IMPLEMENTATION DEFINED&gt;, and it is not mandatory, and may not be supported by an implementation. Additionally there is no architected control over the feature, but it is to be described by the implementation documentation.
</p>
<ul><li>A memory location cannot be relied upon to remain in the cache unless locked into the cache.</li>
<li>If an unlocked entry remains in the cache for some duration, it cannot be relied on to remain incoherent with memory; it will be written back eventually, and software should not rely on it remaining dirty (why would anyone do this?).</li>
<li>If an entry is locked, it can be relied on to remain in the cache; but it cannot be relied on to remain incoherent with memory, and again, software should not rely on it remaining dirty (again, why?).</li></ul>
<p><i>In ARMv6 the Cache Type Register held information about the Cache lockdown mechanism; in ARMv7 this is no longer the case.</i>
</p>
<h4><span class="mw-headline" id="General">General</span></h4>
<ul><li>Even if a memory location is accessible in the current translation scheme (the manual said scheme here, but probably meant "regime") and is accessible in the current privilege level, and is also marked cacheable for the current translation regime, there is "no mechanism that can guarantee" that the memory location <b>cannot</b> be allocated into an enabled cache at any point. This basically means that there is no architected secondary means of preventing a memory location from being cached if it is marked cachable (this should be obvious).</li>
<li>If the cache is disabled, it is guaranteed that no new memory location will be allocated into the cache. Stale cache entries may still cause cache hits when the cache is disabled.</li>
<li>If the cache is enabled, it is guaranteed that no memory location that does not have the Cacheable attribute set, will be allocated into the cache. If a memory location was already in the cache before being marked uncachable, there is no guarantee that it will be evicted.</li>
<li>If the cache is enabled, it is guaranteed that no memory location that is not accessible to software at the current <b>translation regime</b> and <b>privilege level (or higher)</b> will be allocated into the cache. Again, stale entries already in the cache may cause cache hits.</li>
<li>For data accesses, if a memory location is marked as <i>Normal Shareable</i>, it is guaranteed to be coherent with all masters in that shareability domain.</li>
<li>The eviction (author's interpretation of "eviction" here is a clean operation, not an invalidate) of a cache line from cache to memory cannot overwrite a memory location written by another observer in the cache system unless the two observers are in the same shareability domain.</li>
<li>Verbatim: "The allocation of a memory location into a cache cannot cause the most recent value of that memory location to become invisible to an observer, if it had previously been visible to that observer". This appears to be stating that cache coherency is a given.</li></ul>
<p>Additionally, along the same vein as the fact that stale entries in the cache might generate cache hits even with if caches are disabled, the following two caveats are given:
</p>
<ul><li>If a location is marked not-Cacheable, but exists in the cache, there is no guarantee of whether the memory access will be returned from the caches or from memory.</li>
<li>If a location is in the cache and is marked cacheable, but the cache is disabled.</li></ul>
<h3><span id="Cache_state_on_.23RESET"></span><span class="mw-headline" id="Cache_state_on_#RESET">Cache state on #RESET</span></h3>
<p>On #RESET, all caches are disabled and before the Cache system is responsive to the ARMv7 architected cache controls, there may be an &lt;IMPLEMENTATION SPECIFIC&gt; procedure initialization routine that software may need to execute. Furthermore:
</p>
<ul><li>It is &lt;IMPLEMENTATION DEFINED&gt; whether or not an access can cause a cache hit when caches are disabled. If cache hits to stale/garbage cache lines are possible while caches are disabled, the implementation must clearly document the correct way to initialize the platform caches.</li>
<li>ARM <i>recommends</i> that invalidation routines conform to the ARM architected form.</li></ul>
<p>If software enables the caches using the ARM architected mechanism before executing the &lt;IMPLEMENTATION SPECIFIC&gt; platform cache initialization routine, the behaviour of the caches is &lt;UNPREDICTABLE&gt;.
</p><p><i>Before ARMv7, caches were specified to be invalidated by the assertion of #RESET</i>.
</p>
<h2><span class="mw-headline" id="Branch_predictors">Branch predictors</span></h2>
<p>The ARM architecturally visible Branch Prediction architecture consists of the Branch Target Buffer (BTB), the Pipeline, and the Instruction Prefetch Buffer (IPB). The following sections explain why software may need to care about these components. ARM allows the branch predictor to be visible to software and it is not architecturally hidden. Thus software must under certain circumstances perform maintenance operations to ensure desired behaviour.
</p><p>A branch-predictor invalidate operation has no <i>functional</i> effect on software execution. The Invalidate BTB by MVA operation must use the address of the branch-target.
</p><p>If branch prediction is architecturally visible, an Instruction-cache Invalidate-ALL operation also invalidates all branch predictors.
</p><p>In general, ff for a given translation regime, VMID and ASID (each where appropriate), the instructions at a virtual address change, then invalidation is necessary to ensure that the change is visible to subsequent execution. The following events may require a BTB invalidate:
</p>
<ul><li>Enabling or disabling the MMU (VMSA).</li>
<li>Writing new mappings to the translation tables (changing page table entries).</li>
<li>Changes to <tt>TTBR0</tt> ,<tt>TTBR1</tt> and <tt>TTBCR</tt>, except if accompanied by a change of VMID or ContextID.</li>
<li>Changes to <tt>VTTBR</tt> or <tt>VTTCR</tt>, unless accompanied by a change of VMID.</li></ul>
<p>Failure to perform appropriate BTB maintenance operations may result in &lt;UNPREDICTABLE&gt; behaviour as old stale branches may be executed.
</p><p>Software does not need to invalidate the BTB in the following cases however:
</p>
<ul><li>When changing the page table entry attributes for a page with instructions, but the change does not cause the virtual address to point to new instructions; i.e, only the permissions are changed, <b>for the current translation regime, VMID and ASID</b>.</li>
<li>After changing the ContextID, ASID or FCSE ProcessID.</li>
<li>After executing an operation that is stated to also invalidate the BTB.</li></ul>
<p><i>However, on ARMv6, software must invalidate the BTB after changing the ContextID or FCSE ProcessID</i>.
</p>
<h3><span class="mw-headline" id="The_IPB">The IPB</span></h3>
<h1><span class="mw-headline" id="Translation_Regimes">Translation Regimes</span></h1>
<p>In ARM lingo, the current translation regime of the processor refers to whether or not the processor is doing single-stage or 2-stage MMU translation. In other words, it refers to whether or not the processor is using two-dimensional address space lookup from Guest virtual addresses to Host physical addresses. In x86 parlance this is called "Extended Page Tables".
</p><p>2-level translation schemes are used by Hypervisors to support multiple Guest Operating Systems.
</p>
<!-- 
NewPP limit report
Cached time: 20250211135647
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.010 seconds
Real time usage: 0.010 seconds
Preprocessor visited node count: 50/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4017-0!canonical and timestamp 20250211135647 and revision id 27995.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=ARMv7_Common_Memory_System_Architecture&amp;oldid=27995">https://wiki.osdev.org/index.php?title=ARMv7_Common_Memory_System_Architecture&amp;oldid=27995</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="./Category:ARM" title="Category:ARM">ARM</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=ARMv7+Common+Memory+System+Architecture" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="ARMv7_Common_Memory_System_Architecture#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="ARMv7_Common_Memory_System_Architecture" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:ARMv7_Common_Memory_System_Architecture&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="ARMv7_Common_Memory_System_Architecture"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ARMv7_Common_Memory_System_Architecture&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ARMv7_Common_Memory_System_Architecture&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/ARMv7_Common_Memory_System_Architecture" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/ARMv7_Common_Memory_System_Architecture" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ARMv7_Common_Memory_System_Architecture&amp;oldid=27995" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ARMv7_Common_Memory_System_Architecture&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 9 July 2023, at 17:39.</li>
	<li id="footer-info-0">This page has been accessed 4,672 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=ARMv7_Common_Memory_System_Architecture&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.010","walltime":"0.010","ppvisitednodes":{"value":50,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":0,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250211135647","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":110});});</script>
</body>
</html>