<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>CPU Bugs - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"3f7d2ff2bd61ed18c20296bf","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"CPU_Bugs","wgTitle":"CPU Bugs","wgCurRevisionId":27521,"wgRevisionId":27521,"wgArticleId":1452,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","X86 CPU"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"CPU_Bugs","wgRelevantArticleId":1452,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":
false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-CPU_Bugs rootpage-CPU_Bugs skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">CPU Bugs</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="CPU_Bugs#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="CPU_Bugs#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>Computers are made by humans, and thus inherently prone to errors. This page describes known bugs for various models and brands.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="CPU_Bugs#Affecting_almost_all_modern_architectures"><span class="tocnumber">1</span> <span class="toctext">Affecting almost all modern architectures</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="CPU_Bugs#Spectre"><span class="tocnumber">1.1</span> <span class="toctext">Spectre</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-3"><a href="CPU_Bugs#x86_misfeatures"><span class="tocnumber">2</span> <span class="toctext">x86 misfeatures</span></a>
<ul>
<li class="toclevel-2 tocsection-4"><a href="CPU_Bugs#ESP_is_not_cleared"><span class="tocnumber">2.1</span> <span class="toctext">ESP is not cleared</span></a>
<ul>
<li class="toclevel-3 tocsection-5"><a href="CPU_Bugs#Mitigations"><span class="tocnumber">2.1.1</span> <span class="toctext">Mitigations</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-6"><a href="CPU_Bugs#NULL_selector_load_may_not_clear_MSR_GS_BASE"><span class="tocnumber">2.2</span> <span class="toctext">NULL selector load may not clear MSR_GS_BASE</span></a>
<ul>
<li class="toclevel-3 tocsection-7"><a href="CPU_Bugs#Mitigations_2"><span class="tocnumber">2.2.1</span> <span class="toctext">Mitigations</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-8"><a href="CPU_Bugs#FXSAVE/FNSAVE"><span class="tocnumber">2.3</span> <span class="toctext">FXSAVE/FNSAVE</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="CPU_Bugs#SYSRET"><span class="tocnumber">2.4</span> <span class="toctext">SYSRET</span></a>
<ul>
<li class="toclevel-3 tocsection-10"><a href="CPU_Bugs#Mitigations_3"><span class="tocnumber">2.4.1</span> <span class="toctext">Mitigations</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-11"><a href="CPU_Bugs#SS_selector"><span class="tocnumber">2.5</span> <span class="toctext">SS selector</span></a>
<ul>
<li class="toclevel-3 tocsection-12"><a href="CPU_Bugs#Mitigation"><span class="tocnumber">2.5.1</span> <span class="toctext">Mitigation</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-13"><a href="CPU_Bugs#PUSH_selector"><span class="tocnumber">2.6</span> <span class="toctext">PUSH selector</span></a>
<ul>
<li class="toclevel-3 tocsection-14"><a href="CPU_Bugs#Mitigation_2"><span class="tocnumber">2.6.1</span> <span class="toctext">Mitigation</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-15"><a href="CPU_Bugs#Nesting_of_NMI_interrupt"><span class="tocnumber">2.7</span> <span class="toctext">Nesting of NMI interrupt</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-16"><a href="CPU_Bugs#Intel"><span class="tocnumber">3</span> <span class="toctext">Intel</span></a>
<ul>
<li class="toclevel-2 tocsection-17"><a href="CPU_Bugs#Transactional_Synchronization_eXtensions_(TSX)_Bug"><span class="tocnumber">3.1</span> <span class="toctext">Transactional Synchronization eXtensions (TSX) Bug</span></a></li>
<li class="toclevel-2 tocsection-18"><a href="CPU_Bugs#Extended_Page_Table_(EPT)_Bug"><span class="tocnumber">3.2</span> <span class="toctext">Extended Page Table (EPT) Bug</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="CPU_Bugs#F00F_Bug"><span class="tocnumber">3.3</span> <span class="toctext">F00F Bug</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="CPU_Bugs#FDIV_bug"><span class="tocnumber">3.4</span> <span class="toctext">FDIV bug</span></a></li>
<li class="toclevel-2 tocsection-21"><a href="CPU_Bugs#Buggy_HLT"><span class="tocnumber">3.5</span> <span class="toctext">Buggy HLT</span></a></li>
<li class="toclevel-2 tocsection-22"><a href="CPU_Bugs#Core-microarchitecture_Bugs"><span class="tocnumber">3.6</span> <span class="toctext">Core-microarchitecture Bugs</span></a></li>
<li class="toclevel-2 tocsection-23"><a href="CPU_Bugs#&#39;Meltdown&#39;_Page_Table_Bug"><span class="tocnumber">3.7</span> <span class="toctext">'Meltdown' Page Table Bug</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-24"><a href="CPU_Bugs#AMD"><span class="tocnumber">4</span> <span class="toctext">AMD</span></a>
<ul>
<li class="toclevel-2 tocsection-25"><a href="CPU_Bugs#DragonFly_BSD_Heavy_Load_Crash"><span class="tocnumber">4.1</span> <span class="toctext">DragonFly BSD Heavy Load Crash</span></a></li>
<li class="toclevel-2 tocsection-26"><a href="CPU_Bugs#Ryzen_Bug"><span class="tocnumber">4.2</span> <span class="toctext">Ryzen Bug</span></a></li>
<li class="toclevel-2 tocsection-27"><a href="CPU_Bugs#CPUID_Bugs"><span class="tocnumber">4.3</span> <span class="toctext">CPUID Bugs</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-28"><a href="CPU_Bugs#Cyrix"><span class="tocnumber">5</span> <span class="toctext">Cyrix</span></a>
<ul>
<li class="toclevel-2 tocsection-29"><a href="CPU_Bugs#Coma_Bug"><span class="tocnumber">5.1</span> <span class="toctext">Coma Bug</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Affecting_almost_all_modern_architectures">Affecting almost all modern architectures</span></h2>
<h3><span class="mw-headline" id="Spectre">Spectre</span></h3>
<p>Spectre is an exploit that affects most modern CPUs made after 1995 that implement out-of-order execution (x86, x86_64, ARM, AMD, and potentially more) and allows the reading of physical memory by userland code. There is no sensible software fix for this issue. For more details, see (<a rel="nofollow" class="external free" href="https://spectreattack.com/spectre.pdf">https://spectreattack.com/spectre.pdf</a> this paper).
</p>
<h2><span class="mw-headline" id="x86_misfeatures">x86 misfeatures</span></h2>
<h3><span class="mw-headline" id="ESP_is_not_cleared">ESP is not cleared</span></h3>
<p>The x86 IRET will not clear upper bits of the stack register (32:16) when returning to 16-bit mode. As the result, the kernel high 16bit of ESP may be leaked to the userspace. Same is true for 64-bit kernel to 16-bit userspace transition.
</p>
<h4><span class="mw-headline" id="Mitigations">Mitigations</span></h4>
<p>One mitigation would be to simply not allow 16-bit code in user mode. Linux, however, does the following to work around the issue: In 32-bit mode, it reserves a segment for fixing up the stack pointer. If it detects a return to userspace with a 16-bit stack, it sets the base address of that segment such that the leaked bits can be set in ESP without moving the actual stack pointer, and then loads that segment as stack segment. Therefore the leaked bits will equal the original bits, so no harm is done.
</p><p>In 64-bit mode, this is not possible for lack of segmentation support. So instead Linux adopts another method, and will always leak bits chosen randomly at boot. During boot, Linux allocates 48 bytes for each CPU to serve as ESPFIX stack (actually, as long as there is space on the same page left, all CPUs will use the same page, just different offsets on it). These 48 bytes are mapped into kernel space, such that the leaked bits of ESP are entirely random. If a return to a 16-bit stack is detected, the return frame is copied into the ESPFIX stack, before switching the stack over to that address and performing the return. Since that may fail, the ESPFIX stack is mapped read-only (for the copy, a writable mapping of the same page is used). So if the IRET succeeds, nothing is ever written to the ESPFIX stack and everything works out. If something goes wrong, however, since the CPU is already running in Ring 0, it would not switch stacks back. It would try to write an interrupt frame onto the stack, but since the stack is read-only, that will fail. Therefore, a double-fault is caused, and the double-fault handler (running with an IST stack) changes the information such that it looks like a general protection fault occurred on the IRET instruction. And then the GPF handler just does its normal thing.
</p><p>This way, the leaked bits will not equal the bits userspace had at the start of the interrupt, but they will be random for each boot. Since the ESPFIX stack is so small, a large number of CPUs will have the same leaked ESP bits, so no important data is leaked.
</p>
<h3><span class="mw-headline" id="NULL_selector_load_may_not_clear_MSR_GS_BASE">NULL selector load may not clear MSR_GS_BASE</span></h3>
<p>Intel CPUs do not specify what happens with MSR_GS_BASE if NULL selector is loaded. The Intel CPUs seem to load it with zero, AMD CPUs preserve the previous values (now documented in the AMD64 Architecture Programmer's Manual Volume 2: System Programming). This detail needs to be taken into account for the context switches, if kernel tries to optimize the slow MSR operations.
</p>
<h4><span class="mw-headline" id="Mitigations_2">Mitigations</span></h4>
<p>Don't load a NULL selector into GS thinking it changes the GS.base register. Always use the MSR operations, unless running on a CPU with the WRFSGSBASE feature, in which case, the GS.base address can be set with the WRGSBASE instruction.
</p>
<h3><span id="FXSAVE.2FFNSAVE"></span><span class="mw-headline" id="FXSAVE/FNSAVE">FXSAVE/FNSAVE</span></h3>
<p>The Intel and AMD differ in what context is saved/restored. AMD CPUs do not save/restore certain parts (FIP/FOP) only when exception is pending (see CVE-2006-1056)
</p>
<h3><span class="mw-headline" id="SYSRET">SYSRET</span></h3>
<p>The Intel CPUs do not handle properly the non-canonical return address.  If a non-canonical address is present in RCX when executing SYSRET, a General Protection Fault will be taken in CPL0 with CPL3 registers. (see CVE-2006-0744)
</p>
<h4><span class="mw-headline" id="Mitigations_3">Mitigations</span></h4>
<p>The only possible way to execute a SYSCALL instruction such that it jumps to kernel space with a non-canonical address is to put that instruction at address 0x00007ffffffffffe. This is invalid since there is nowhere for the CPU to return to (the return address is invalid). To prevent this from occurring, it is possible to disallow the mapping of an executable page at address 0x00007ffffffff000. Alternatively, the problem can be handled directly: If the return address has any of the top 16 bits set, return to userspace with the IRET instruction instead. Alternatively, construct the necessary stack frame, and jump directly to your GPF handler.
</p>
<h3><span class="mw-headline" id="SS_selector">SS selector</span></h3>
<p>On AMD CPU, SS selector may become unusable when in-kernel interrupt arrives (sets SS to NULL) and thread is switched and returned to userspace via SYSRET. The numerical SS value is correct however the descriptor cache is wrong. This affects only the 32-bit compatibility mode usage of SS.
</p>
<h4><span class="mw-headline" id="Mitigation">Mitigation</span></h4>
<p>Don't switch threads after an in-kernel interrupt (that is: Only switch threads from the outermost stack layer, when returning to userspace or handling a system call). Alternatively, if you did switch threads after an in-kernel interrupt, always return via IRET. You need to jump to the slower IRET return path after a system call in some cases anyway, so you may as well make this one of the cases.
</p>
<h3><span class="mw-headline" id="PUSH_selector">PUSH selector</span></h3>
<p>On Intel CPUs, when running in 32-bit protected mode, the push will only modify the low 16bit of stack and write there the selector. The high 16 bits remains unmodified. AMD CPUs do not do this. It may have some security impact, that some of stack is not initialized.
</p><p>Note: This applies to every time a selector is pushed to the stack. So both a PUSH instruction and an implicit push following an interrupt of some sort are affected.
</p>
<h4><span class="mw-headline" id="Mitigation_2">Mitigation</span></h4>
<p>When reading a selector value off the stack, always mask out the bits you are interested in. Very often, the important information is just the RPL of the selector (which already contains the information, whether the selector is kernel or user space), or the TI bit. The actual table index is rarely needed. Doing this also hardens all parts of the kernel that read selectors against modifications of the GDT later on.
</p>
<h3><span class="mw-headline" id="Nesting_of_NMI_interrupt">Nesting of NMI interrupt</span></h3>
<p>If CPU is executing the NMI interrupt handler, CPU guarantees to keep NMI masked until the IRET is executed. However if for some reason NMI triggers some other exception, which executes IRET then the NMI may trigger again, possibly overwriting
its own stack as on AMD64 it runs with IST stack (fun starts if SMI is triggering IRET for some reason).
</p>
<h2><span class="mw-headline" id="Intel">Intel</span></h2>
<h3><span id="Transactional_Synchronization_eXtensions_.28TSX.29_Bug"></span><span class="mw-headline" id="Transactional_Synchronization_eXtensions_(TSX)_Bug">Transactional Synchronization eXtensions (TSX) Bug</span></h3>
<p>In August 2014, Intel announced that a bug exists in the TSX implementation on Haswell, Haswell-E, Haswell-EP and early Broadwell CPUs, which resulted in disabling the TSX feature on affected CPUs via a microcode update. The bug was fixed in F-0 steppings of the vPro-enabled Core M-5Y70 Broadwell CPU in November 2014.
</p>
<h3><span id="Extended_Page_Table_.28EPT.29_Bug"></span><span class="mw-headline" id="Extended_Page_Table_(EPT)_Bug">Extended Page Table (EPT) Bug</span></h3>
<p>A MOV to CR3 when EPT is enabled may lead to an unexpected page fault or an incorrect page translation.
</p><p>Affected processors:
</p>
<ul><li>Intel Xeon E5-#### v2, where #### is a 4-digit number, optionally followed by a letter.</li>
<li>Intel Xeon E7-#### v2, where #### is a 4-digit number.</li>
<li>Intel Xeon E3-12## v2, where ## is a 2-digit number, optionally followed by a letter.</li></ul>
<h3><span class="mw-headline" id="F00F_Bug">F00F Bug</span></h3>
<p>Affects: Intel i586 series (Pentium 1, Pentium MMX, Pentium Overdrive, Pentium MMX Overdrive)
</p><p>This bug is caused by executing LOCK CMPXCHG8B eax (F0 0F C7 C8) By containing two opcode errors, an unallowed lock and a non-memory target, together with trying to cache the results, it confuses the cpu to enter a deadlock state, locking up the entire computer involved.
</p><p>To fix this bug, the <a href="IDT" class="mw-redirect" title="IDT">IDT</a> entry containing the invalid opcode should be marked as uncacheable or writethrough to eliminate one necessary factor, or by marking the same page as not-writable which further confuses the processor, this time into the pagefault handler instead of into a deadlock. If paging is to be left disabled, the only workaround is to disable the cpu's caches, which is far from efficient. Further discussion of various solutions is presented <a rel="nofollow" class="external text" href="http://web.archive.org/web/20070927195343/http://www.x86.org/errata/dec97/f00fbug.htm">here</a>.
</p><p>We can check, if the processor is Pentium through the <a href="CPUID" title="CPUID">CPUID</a> instruction. Calling it with EAX=1 will return the CPU signature in EAX. We can extract the Family Number from the CPU signature and compare it with 5, because the Pentium belongs to Family 5.
</p>
<h3><span class="mw-headline" id="FDIV_bug">FDIV bug</span></h3>
<p>The Pentium FDIV bug is a bug in the Intel P5 Pentium floating point unit (FPU). Because of the bug, the processor can return incorrect decimal results, an issue troublesome for the precise calculations needed in fields like math and science. Discovered by Professor Thomas R. Nicely at Lynchburg College, Intel attributed the error to missing entries in the lookup table used by the floating-point division circuitry.
</p><p>This problem occurs only on some models of the original Pentium processor. Any Pentium family processor with a clock speed of at least 120 MHz is new enough not to have this bug.
</p>
<h3><span class="mw-headline" id="Buggy_HLT">Buggy HLT</span></h3>
<p>Some of the first 100 MHz Intel DX chips had a buggy HLT state, prompting the developers of Linux to implement a "no-hlt" option for use when running on those chips, but this was fixed in later chips.
</p>
<h3><span class="mw-headline" id="Core-microarchitecture_Bugs">Core-microarchitecture Bugs</span></h3>
<p><a rel="nofollow" class="external text" href="http://web.archive.org/web/20190804131349if_/https://www.geek.com/images/geeknews/2006Jan/core_duo_errata__2006_01_21__full.gif">See a list of known bugs as of 2006</a>
</p>
<h3><span id=".27Meltdown.27_Page_Table_Bug"></span><span class="mw-headline" id="'Meltdown'_Page_Table_Bug">'Meltdown' Page Table Bug</span></h3>
<p>Modern (1995 and upwards) Intel x86 chips contain a bug in the out-of-order execution hardware that allows unprivileged userland software to gain access to kernel memory when the kernel is mapped into the userland address space. To avoid vulnerability, it is recommended that the kernel and userland page tables remain separate (i.e: PTI, Page Table Isolation). For more details, visit <a rel="nofollow" class="external text" href="https://spectreattack.com/">this page</a>.
</p>
<h2><span class="mw-headline" id="AMD">AMD</span></h2>
<h3><span class="mw-headline" id="DragonFly_BSD_Heavy_Load_Crash">DragonFly BSD Heavy Load Crash</span></h3>
<p>AMD has confirmed that some of its processors contain a bug that could cause program errors under certain specific conditions. The bug was initially discovered by Matt Dillon, a DragonFly BSD developer.
</p><p>Consecutive back-to-back pops and (near) return instructions can create a condition where the processor incorrectly updates the stack pointer. The specific manifestations in DragonFly were random segmentation faults under heavy load.
</p><p>A program exception has been identified in previous generations of the AMD Opteron processor that occurs in certain environments that leverage a very specific GCC compiler build. A workaround has been identified for the small segment of customers this could potentially impact. Also, this marginal erratum impacts the previous four generations of AMD Opteron processors which include the AMD Opteron 2300, 8300 ("Barcelona" and "Shanghai",) 2400, 8400 ("Istanbul",) and 4100, 6100 ("Lisbon" and "Magny-Cours") series processors.
</p>
<h3><span class="mw-headline" id="Ryzen_Bug">Ryzen Bug</span></h3>
<p>AMD has confirmed that some of its processors contain a bug that could cause program errors under certain specific conditions when executing code near the canonical address boundary. Insert a guard page (unmapped 4K page, or larger page) before canonical address boundary.
</p>
<h3><span class="mw-headline" id="CPUID_Bugs">CPUID Bugs</span></h3>
<p>For older K5 CPUs, the feature flags returned by "CPUID 0x00000001" in EDX are dodgy - bit 9 is used to indicate support for PGE (and not used to indicate support for the local APIC). 
</p>
<h2><span class="mw-headline" id="Cyrix">Cyrix</span></h2>
<h3><span class="mw-headline" id="Coma_Bug">Coma Bug</span></h3>
<p>Affects: Cyrix 6x86 series
</p><p>This bug is caused when several implicitly locked instructions are pipelined into an infinite loop. In effect when an instruction completes, the following locked instruction is executed directly afterward, maintaining bus lock and inhibiting interrupts. In an infinite loop, this will lock all interrupts on the processor, rendering it useless.
</p><p>To fix this bug, one must write to the cyrix registers and set the NO-LOCK bit in CCR1, which disables all but the most essential bus locks. The downside of this is that read-modify-write atomicity is no longer guaranteed on multiprocessor systems. Source code that should prevent this condition: (untested)
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">MOV</span><span class="w"> </span><span class="no">AL</span><span class="p">,</span><span class="w"> </span><span class="mi">0xC1</span><span class="w">   </span><span class="c1">; 0xC1 refers to CCR1</span>
<span class="nf">OUT</span><span class="w"> </span><span class="mi">0x22</span><span class="p">,</span><span class="w"> </span><span class="no">AL</span><span class="w">   </span><span class="c1">; Select Register</span>
<span class="nf">IN</span><span class="w"> </span><span class="mi">0x23</span><span class="p">,</span><span class="w"> </span><span class="no">AL</span><span class="w">    </span><span class="c1">; Load Contents</span>
<span class="nf">OR</span><span class="w"> </span><span class="no">AL</span><span class="p">,</span><span class="w"> </span><span class="mi">0x10</span><span class="w">    </span><span class="c1">; Set No-Lock bit</span>
<span class="nf">MOV</span><span class="w"> </span><span class="no">AH</span><span class="p">,</span><span class="w"> </span><span class="no">AL</span><span class="w">     </span><span class="c1">;</span>
<span class="nf">MOV</span><span class="w"> </span><span class="no">AL</span><span class="p">,</span><span class="w"> </span><span class="mi">0xC1</span><span class="w">   </span><span class="c1">; 0xC1 refers to CCR1</span>
<span class="nf">OUT</span><span class="w"> </span><span class="mi">0x22</span><span class="p">,</span><span class="w"> </span><span class="no">AL</span><span class="w">   </span><span class="c1">; Select register</span>
<span class="nf">MOV</span><span class="w"> </span><span class="no">AL</span><span class="p">,</span><span class="w"> </span><span class="no">AH</span><span class="w">     </span><span class="c1">; Load new contents</span>
<span class="nf">OUT</span><span class="w"> </span><span class="mi">0x23</span><span class="p">,</span><span class="w"> </span><span class="no">AL</span><span class="w">   </span><span class="c1">; Write new CCR1 with No-Lock set</span>
</pre></div>
<!-- 
NewPP limit report
Cached time: 20250212010558
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.020 seconds
Real time usage: 0.154 seconds
Preprocessor visited node count: 92/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 2148/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1452-0!canonical and timestamp 20250212010558 and revision id 27521.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=CPU_Bugs&amp;oldid=27521">https://wiki.osdev.org/index.php?title=CPU_Bugs&amp;oldid=27521</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:X86_CPU" title="Category:X86 CPU">X86 CPU</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=CPU+Bugs" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="CPU_Bugs#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="CPU_Bugs" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:CPU_Bugs&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="CPU_Bugs"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=CPU_Bugs&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=CPU_Bugs&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/CPU_Bugs" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/CPU_Bugs" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=CPU_Bugs&amp;oldid=27521" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=CPU_Bugs&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 13 December 2022, at 23:13.</li>
	<li id="footer-info-0">This page has been accessed 8,983 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=CPU_Bugs&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.020","walltime":"0.154","ppvisitednodes":{"value":92,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":2148,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250212010558","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":257});});</script>
</body>
</html>