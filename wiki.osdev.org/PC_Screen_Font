<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>PC Screen Font - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"168c11a74cb015a93502d69e","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"PC_Screen_Font","wgTitle":"PC Screen Font","wgCurRevisionId":29382,"wgRevisionId":29382,"wgArticleId":3999,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Articles Written in First Person","Graphical UI","Fonts"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"PC_Screen_Font","wgRelevantArticleId":3999,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],
"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-PC_Screen_Font rootpage-PC_Screen_Font skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">PC Screen Font</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="PC_Screen_Font#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="PC_Screen_Font#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p>This page or section refers to its readers or editors using <i>I</i>, <i>my</i>, <i>we</i> or <i>us</i>. It should be <a rel="nofollow" class="external text" href="https://wiki.osdev.org/index.php?title=PC_Screen_Font&amp;action=edit">edited</a> to be in an encyclopedic tone.
</p>
</td></tr></tbody></table>
</center>
<p>On every Linux distribution, you can find a lot of console fonts with the extension .psf or .psfu. You can find where they are located by entering "whereis consolefonts" into the Terminal. This article describes how to display those on graphical screen, which has the advantage that
you don't have to mess with your fonts, you can directly use the ones shipped with your Linux distribution. The other advantage is that
PSF fonts can store the whole UNICODE character set, although consolefonts have maximum 512 glyphs usually.
</p><p>There are two versions of PSF, PSF 1 and PSF 2. Each of these versions can be detected using their magic number.
This page assumes a PSF 2 font is being used.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="PC_Screen_Font#Structure_of_file"><span class="tocnumber">1</span> <span class="toctext">Structure of file</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="PC_Screen_Font#File_Header"><span class="tocnumber">1.1</span> <span class="toctext">File Header</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="PC_Screen_Font#Glyphs"><span class="tocnumber">1.2</span> <span class="toctext">Glyphs</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="PC_Screen_Font#Unicode_Table"><span class="tocnumber">1.3</span> <span class="toctext">Unicode Table</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="PC_Screen_Font#Dealing_with_PSF"><span class="tocnumber">2</span> <span class="toctext">Dealing with PSF</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="PC_Screen_Font#Loading_the_font"><span class="tocnumber">3</span> <span class="toctext">Loading the font</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="PC_Screen_Font#Displaying_a_character"><span class="tocnumber">4</span> <span class="toctext">Displaying a character</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="PC_Screen_Font#See_Also"><span class="tocnumber">5</span> <span class="toctext">See Also</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="PC_Screen_Font#External_Links"><span class="tocnumber">6</span> <span class="toctext">External Links</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Structure_of_file">Structure of file</span></h2>
<p>The PSF file itself consist of a header, bitmaps for the glyphs and optionally a unicode character translation table.
</p>
<h3><span class="mw-headline" id="File_Header">File Header</span></h3>
<p>It's a fixed chunk at the beginning of the file. You will need to be able to detect the version before you begin parsing.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define PSF1_FONT_MAGIC 0x0436</span>

<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">magic</span><span class="p">;</span><span class="w"> </span><span class="c1">// Magic bytes for identification.</span>
<span class="w">    </span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">fontMode</span><span class="p">;</span><span class="w"> </span><span class="c1">// PSF font mode.</span>
<span class="w">    </span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">characterSize</span><span class="p">;</span><span class="w"> </span><span class="c1">// PSF character size.</span>
<span class="p">}</span><span class="w"> </span><span class="n">PSF1_Header</span><span class="p">;</span><span class="w"></span>


<span class="cp">#define PSF_FONT_MAGIC 0x864ab572</span>

<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">magic</span><span class="p">;</span><span class="w">         </span><span class="cm">/* magic bytes to identify PSF */</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">version</span><span class="p">;</span><span class="w">       </span><span class="cm">/* zero */</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">headersize</span><span class="p">;</span><span class="w">    </span><span class="cm">/* offset of bitmaps in file, 32 */</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">flags</span><span class="p">;</span><span class="w">         </span><span class="cm">/* 0 if there&#39;s no unicode table */</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">numglyph</span><span class="p">;</span><span class="w">      </span><span class="cm">/* number of glyphs */</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">bytesperglyph</span><span class="p">;</span><span class="w"> </span><span class="cm">/* size of each glyph */</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">height</span><span class="p">;</span><span class="w">        </span><span class="cm">/* height in pixels */</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">width</span><span class="p">;</span><span class="w">         </span><span class="cm">/* width in pixels */</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">PSF_font</span><span class="p">;</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="Glyphs">Glyphs</span></h3>
<p>Each glyph is a bitmap, encoded the same way as <a href="VGA_Fonts" title="VGA Fonts">VGA Fonts</a>. For a 8x16 font, each glyph is 16 bytes long, and every byte encodes exactly one row of the glyph.
</p>
<pre>00000000b  byte  0
00000000b  byte  1
00000000b  byte  2
00010000b  byte  3
00111000b  byte  4
01101100b  byte  5
11000110b  byte  6
11000110b  byte  7
11111110b  byte  8
11000110b  byte  9
11000110b  byte 10
11000110b  byte 11
11000110b  byte 12
00000000b  byte 13
00000000b  byte 14
00000000b  byte 15
</pre>
<h3><span class="mw-headline" id="Unicode_Table">Unicode Table</span></h3>
<p>If the flags in the PSF header is 1, it indicates that the font has a unicode table for glyph mapping. Without such a table, unicode characters and glyphs are mapped identically, so first glyph is for unicode character 0, second glyph for unicode character 1 and so forth.
</p><p>The table is as follows: each glyph has a variable length record. Those are very similar to lines in a text file, only here lines are ended in 0xFF character not '\n' (0x0A). The nth line describes the nth glyph's mappings. Every line contains at least one, but possibly more UTF-8 character sequences.
</p>
<h2><span class="mw-headline" id="Dealing_with_PSF">Dealing with PSF</span></h2>
<p>Although there are lot of PSF editors out there, most of them are broken or hard to use. So it is recommended to use two neat perl scripts instead: <a rel="nofollow" class="external text" href="https://github.com/talamus/solarize-12x29-psf/">readpsf, writepsf</a>. They can convert PSF into easily editable ascii text file or a bitmap image that can be opened with Gimp or Photoshop and vice versa.
</p>
<h2><span class="mw-headline" id="Loading_the_font">Loading the font</span></h2>
<p>As described in <a href="VGA_Fonts" title="VGA Fonts">VGA Fonts</a>, you have several options. For simplicity, we'll embed it. Here's how to convert PSF into an <a href="ELF" title="ELF">ELF</a> so that you can link with your kernel:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>objcopy -O elf64-x86-64 -B i386 -I binary font.psf font.o
readelf -s font.o

Symbol table <span class="s1">&#39;.symtab&#39;</span> contains <span class="m">5</span> entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     <span class="m">0</span>: <span class="m">0000000000000000</span>     <span class="m">0</span> NOTYPE  LOCAL  DEFAULT  UND 
     <span class="m">1</span>: <span class="m">0000000000000000</span>     <span class="m">0</span> SECTION LOCAL  DEFAULT    <span class="m">1</span> 
     <span class="m">2</span>: <span class="m">0000000000000000</span>     <span class="m">0</span> NOTYPE  GLOBAL DEFAULT    <span class="m">1</span> _binary_font_psf_start
     <span class="m">3</span>: <span class="m">0000000000008020</span>     <span class="m">0</span> NOTYPE  GLOBAL DEFAULT    <span class="m">1</span> _binary_font_psf_end
     <span class="m">4</span>: <span class="m">0000000000008020</span>     <span class="m">0</span> NOTYPE  GLOBAL DEFAULT  ABS _binary_font_psf_size
</pre></div>
<p>As you can see the resulting object exports three symbols that can be referenced as any other variables.
</p><p>Before we can use our font, first we have to decode the unicode table. That's a bit tricky to do, and you'll have to have calloc(), but the good news is it's optional. You can skip this if you're happy with the first glyph is for character 0, second glyph is for character 1, etc. scheme.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cm">/* import our font that&#39;s in the object file we&#39;ve created above */</span><span class="w"></span>
<span class="k">extern</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">_binary_font_psf_start</span><span class="p">;</span><span class="w"></span>
<span class="k">extern</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">_binary_font_psf_end</span><span class="p">;</span><span class="w"></span>

<span class="kt">uint16_t</span><span class="w"> </span><span class="o">*</span><span class="n">unicode</span><span class="p">;</span><span class="w"></span>

<span class="kt">void</span><span class="w"> </span><span class="nf">psf_init</span><span class="p">()</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">glyph</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* cast the address to PSF header struct */</span><span class="w"></span>
<span class="w">    </span><span class="n">PSF_font</span><span class="w"> </span><span class="o">*</span><span class="n">font</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">PSF_font</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_binary_font_psf_start</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* is there a unicode table? */</span><span class="w"></span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">font</span><span class="o">-&gt;</span><span class="n">flags</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">unicode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">NULL</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w"> </span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="cm">/* get the offset of the table */</span><span class="w"></span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="p">)(</span><span class="w"></span>
<span class="w">    </span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_binary_font_psf_start</span><span class="w"> </span><span class="o">+</span><span class="w"></span>
<span class="w">      </span><span class="n">font</span><span class="o">-&gt;</span><span class="n">headersize</span><span class="w"> </span><span class="o">+</span><span class="w"></span>
<span class="w">      </span><span class="n">font</span><span class="o">-&gt;</span><span class="n">numglyph</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">font</span><span class="o">-&gt;</span><span class="n">bytesperglyph</span><span class="w"></span>
<span class="w">    </span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* allocate memory for translation table */</span><span class="w"></span>
<span class="w">    </span><span class="n">unicode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">calloc</span><span class="p">(</span><span class="n">USHRT_MAX</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="k">while</span><span class="p">(</span><span class="n">s</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_binary_font_psf_end</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">uc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint16_t</span><span class="p">)((</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="w"></span>
<span class="w">        </span><span class="k">if</span><span class="p">(</span><span class="n">uc</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mh">0xFF</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">            </span><span class="n">glyph</span><span class="o">++</span><span class="p">;</span><span class="w"></span>
<span class="w">            </span><span class="n">s</span><span class="o">++</span><span class="p">;</span><span class="w"></span>
<span class="w">            </span><span class="k">continue</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="p">(</span><span class="n">uc</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">128</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">            </span><span class="cm">/* UTF-8 to unicode */</span><span class="w"></span>
<span class="w">            </span><span class="k">if</span><span class="p">((</span><span class="n">uc</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">32</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">                </span><span class="n">uc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">((</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x1F</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">6</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x3F</span><span class="p">);</span><span class="w"></span>
<span class="w">                </span><span class="n">s</span><span class="o">++</span><span class="p">;</span><span class="w"></span>
<span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"></span>
<span class="w">            </span><span class="k">if</span><span class="p">((</span><span class="n">uc</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">16</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">                </span><span class="n">uc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">((((</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xF</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">6</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x3F</span><span class="p">))</span><span class="o">&lt;&lt;</span><span class="mi">6</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x3F</span><span class="p">);</span><span class="w"></span>
<span class="w">                </span><span class="n">s</span><span class="o">+=</span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"></span>
<span class="w">            </span><span class="k">if</span><span class="p">((</span><span class="n">uc</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">                </span><span class="n">uc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">((((((</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x7</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">6</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x3F</span><span class="p">))</span><span class="o">&lt;&lt;</span><span class="mi">6</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x3F</span><span class="p">))</span><span class="o">&lt;&lt;</span><span class="mi">6</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x3F</span><span class="p">);</span><span class="w"></span>
<span class="w">                </span><span class="n">s</span><span class="o">+=</span><span class="mi">3</span><span class="p">;</span><span class="w"></span>
<span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"></span>
<span class="w">                </span><span class="n">uc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="p">}</span><span class="w"></span>
<span class="w">        </span><span class="cm">/* save translation */</span><span class="w"></span>
<span class="w">        </span><span class="n">unicode</span><span class="p">[</span><span class="n">uc</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">glyph</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="n">s</span><span class="o">++</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="Displaying_a_character">Displaying a character</span></h2>
<p>I'll assume that you've set up linear frame buffer properly and you can plot a pixel from your kernel. This example uses 32 bit RGBA format, but can be adapted to other formats easily.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cm">/* the linear framebuffer */</span><span class="w"></span>
<span class="k">extern</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">fb</span><span class="p">;</span><span class="w"></span>
<span class="cm">/* number of bytes in each line, it&#39;s possible it&#39;s not screen width * bytesperpixel! */</span><span class="w"></span>
<span class="k">extern</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">scanline</span><span class="p">;</span><span class="w"></span>
<span class="cm">/* import our font that&#39;s in the object file we&#39;ve created above */</span><span class="w"></span>
<span class="k">extern</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">_binary_font_start</span><span class="p">[];</span><span class="w"></span>

<span class="cp">#define PIXEL uint32_t   </span><span class="cm">/* pixel pointer */</span><span class="cp"></span>
<span class="w"> </span>
<span class="kt">void</span><span class="w"> </span><span class="nf">putchar</span><span class="p">(</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* note that this is int, not char as it&#39;s a unicode character */</span><span class="w"></span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">c</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* cursor position on screen, in characters not in pixels */</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">cx</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">cy</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* foreground and background colors, say 0xFFFFFF and 0x000000 */</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">fg</span><span class="p">,</span><span class="w"> </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">bg</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* cast the address to PSF header struct */</span><span class="w"></span>
<span class="w">    </span><span class="n">PSF_font</span><span class="w"> </span><span class="o">*</span><span class="n">font</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">PSF_font</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_binary_font_psf_start</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* we need to know how many bytes encode one row */</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">bytesperline</span><span class="o">=</span><span class="p">(</span><span class="n">font</span><span class="o">-&gt;</span><span class="n">width</span><span class="o">+</span><span class="mi">7</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* unicode translation */</span><span class="w"></span>
<span class="w">    </span><span class="k">if</span><span class="p">(</span><span class="n">unicode</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="nb">NULL</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">c</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unicode</span><span class="p">[</span><span class="n">c</span><span class="p">];</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* get the glyph for the character. If there&#39;s no</span>
<span class="cm">       glyph for a given character, we&#39;ll display the first glyph. */</span><span class="w"></span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">glyph</span><span class="w"> </span><span class="o">=</span><span class="w"></span>
<span class="w">     </span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_binary_font_psf_start</span><span class="w"> </span><span class="o">+</span><span class="w"></span>
<span class="w">     </span><span class="n">font</span><span class="o">-&gt;</span><span class="n">headersize</span><span class="w"> </span><span class="o">+</span><span class="w"></span>
<span class="w">     </span><span class="p">(</span><span class="n">c</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">c</span><span class="o">&lt;</span><span class="n">font</span><span class="o">-&gt;</span><span class="n">numglyph</span><span class="o">?</span><span class="n">c</span><span class="o">:</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="n">font</span><span class="o">-&gt;</span><span class="n">bytesperglyph</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* calculate the upper left corner on screen where we want to display.</span>
<span class="cm">       we only do this once, and adjust the offset later. This is faster. */</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">offs</span><span class="w"> </span><span class="o">=</span><span class="w"></span>
<span class="w">        </span><span class="p">(</span><span class="n">cy</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">font</span><span class="o">-&gt;</span><span class="n">height</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">scanline</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"></span>
<span class="w">        </span><span class="p">(</span><span class="n">cx</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">font</span><span class="o">-&gt;</span><span class="n">width</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">sizeof</span><span class="p">(</span><span class="n">PIXEL</span><span class="p">));</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* finally display pixels according to the bitmap */</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">line</span><span class="p">,</span><span class="n">mask</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">y</span><span class="o">&lt;</span><span class="n">font</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">;</span><span class="n">y</span><span class="o">++</span><span class="p">){</span><span class="w"></span>
<span class="w">        </span><span class="cm">/* save the starting position of the line */</span><span class="w"></span>
<span class="w">        </span><span class="n">line</span><span class="o">=</span><span class="n">offs</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="n">mask</span><span class="o">=</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">font</span><span class="o">-&gt;</span><span class="n">width</span><span class="mi">-1</span><span class="p">);</span><span class="w"></span>
<span class="w">        </span><span class="cm">/* display a row */</span><span class="w"></span>
<span class="w">        </span><span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">x</span><span class="o">&lt;</span><span class="n">font</span><span class="o">-&gt;</span><span class="n">width</span><span class="p">;</span><span class="n">x</span><span class="o">++</span><span class="p">){</span><span class="w"></span>
<span class="w">            </span><span class="o">*</span><span class="p">((</span><span class="n">PIXEL</span><span class="o">*</span><span class="p">)(</span><span class="n">fb</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">line</span><span class="p">))</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">glyph</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">mask</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">fg</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="n">bg</span><span class="p">;</span><span class="w"></span>
<span class="w">            </span><span class="cm">/* adjust to the next pixel */</span><span class="w"></span>
<span class="w">            </span><span class="n">mask</span><span class="w"> </span><span class="o">&gt;&gt;=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="w">            </span><span class="n">line</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="k">sizeof</span><span class="p">(</span><span class="n">PIXEL</span><span class="p">);</span><span class="w"></span>
<span class="w">        </span><span class="p">}</span><span class="w"></span>
<span class="w">        </span><span class="cm">/* adjust to the next line */</span><span class="w"></span>
<span class="w">        </span><span class="n">glyph</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">bytesperline</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="n">offs</span><span class="w">  </span><span class="o">+=</span><span class="w"> </span><span class="n">scanline</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>With this you can display strings on a linear frame buffer just like Linux does on it's ttys. Please note that this code is not optimal, it's for demonstration purposes, but it's a good start.
</p><p>Calculating the offs with width + 1 is necessary to keep one pixel distance between glyphs on screen. Without some fonts became unreadable. This is also what the original VGA hardware did, it used 8x16 fonts, but actually displayed them as 9x16. Casting glyph before anding with the mask is necessary to support font widths up to 32 pixels.
</p><p>Using 8 pixel width would require an unsigned char, but 9 pixels an unsigned short. This way you can have single code even though you don't know the required size at compilation time (as it depends on the font loaded).
</p><p>You might be tempted to replace PIXEL and line with an array, but that won't work on all hardware, as scanline is given in bytes, and nobody actually said that it must be a multiple of PIXEL (very unlikely, but possible).
</p>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<ul><li><a href="VGA_Fonts" title="VGA Fonts">VGA Fonts</a></li>
<li><a href="Scalable_Screen_Font" title="Scalable Screen Font">Scalable Screen Font</a> - comes with a small, free ANSI C rendering library</li>
<li><a href="Loading_Icons" title="Loading Icons">Loading Icons</a></li></ul>
<h2><span class="mw-headline" id="External_Links">External Links</span></h2>
<ul><li><a rel="nofollow" class="external free" href="http://www.win.tue.nl/~aeb/linux/kbd/font-formats-1.html">http://www.win.tue.nl/~aeb/linux/kbd/font-formats-1.html</a> PC Screen Font format description</li>
<li><a rel="nofollow" class="external free" href="https://en.wikipedia.org/wiki/PC_Screen_Font">https://en.wikipedia.org/wiki/PC_Screen_Font</a> Wikipedia on PC Screen Font</li>
<li><a rel="nofollow" class="external free" href="https://github.com/talamus/solarize-12x29-psf/blob/master/readpsf">https://github.com/talamus/solarize-12x29-psf/blob/master/readpsf</a> Perl script to convert PSF into txt or bmp.</li>
<li><a rel="nofollow" class="external free" href="https://github.com/talamus/solarize-12x29-psf/blob/master/writepsf">https://github.com/talamus/solarize-12x29-psf/blob/master/writepsf</a> Perl script to convert txt or bmp into PSF.</li></ul>
<!-- 
NewPP limit report
Cached time: 20250211123635
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.045 seconds
Real time usage: 0.573 seconds
Preprocessor visited node count: 68/1000000
Post‐expand include size: 842/2097152 bytes
Template argument size: 211/2097152 bytes
Highest expansion depth: 6/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 29887/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    1.427      1 -total
100.00%    1.427      1 Template:FirstPerson
 38.05%    0.543      1 Template:NoteBox
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3999-0!canonical and timestamp 20250211123634 and revision id 29382.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=PC_Screen_Font&amp;oldid=29382">https://wiki.osdev.org/index.php?title=PC_Screen_Font&amp;oldid=29382</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Articles_Written_in_First_Person" title="Category:Articles Written in First Person">Articles Written in First Person</a></li><li><a href="./Category:Graphical_UI" title="Category:Graphical UI">Graphical UI</a></li><li><a href="./Category:Fonts" title="Category:Fonts">Fonts</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=PC+Screen+Font" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="PC_Screen_Font#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="PC_Screen_Font" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:PC_Screen_Font&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="PC_Screen_Font"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=PC_Screen_Font&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=PC_Screen_Font&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/PC_Screen_Font" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/PC_Screen_Font" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=PC_Screen_Font&amp;oldid=29382" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=PC_Screen_Font&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 8 February 2025, at 12:07.</li>
	<li id="footer-info-0">This page has been accessed 8,022 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=PC_Screen_Font&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.045","walltime":"0.573","ppvisitednodes":{"value":68,"limit":1000000},"postexpandincludesize":{"value":842,"limit":2097152},"templateargumentsize":{"value":211,"limit":2097152},"expansiondepth":{"value":6,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":29887,"limit":5000000},"timingprofile":["100.00%    1.427      1 -total","100.00%    1.427      1 Template:FirstPerson"," 38.05%    0.543      1 Template:NoteBox"]},"cachereport":{"timestamp":"20250211123635","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":682});});</script>
</body>
</html>