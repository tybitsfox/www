<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Bare Bones with NASM - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"b934ed8793051aed24401c23","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Bare_Bones_with_NASM","wgTitle":"Bare Bones with NASM","wgCurRevisionId":27949,"wgRevisionId":27949,"wgArticleId":3361,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Tutorials","Bare bones tutorials","Assembly"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Bare_Bones_with_NASM","wgRelevantArticleId":3361,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[]
,"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Bare_Bones_with_NASM rootpage-Bare_Bones_with_NASM skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Bare Bones with NASM</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Bare_Bones_with_NASM#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Bare_Bones_with_NASM#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>This article is an extension to the <a href="Bare_Bones" title="Bare Bones">Bare Bones</a> article and describes how to use <a href="NASM" title="NASM">NASM</a> in a Hello World kernel. Mentally add the following changes to the base article.
</p>
<h2><span class="mw-headline" id="Booting_the_Operating_System">Booting the Operating System</span></h2>
<h3><span id="Bootstrap_Assembly_.28NASM.29"></span><span class="mw-headline" id="Bootstrap_Assembly_(NASM)">Bootstrap Assembly (NASM)</span></h3>
<p>We will now create a file called boot.asm and discuss its contents. In this example, we are using the <a href="NASM" title="NASM">Netwide Assembler</a> which is not part of your previously built cross-compiler toolchain and you will have to install it separately.
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">; Declare constants for the multiboot header.</span>
<span class="nf">MBALIGN</span><span class="w">  </span><span class="no">equ</span><span class="w">  </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">0</span><span class="w">            </span><span class="c1">; align loaded modules on page boundaries</span>
<span class="nf">MEMINFO</span><span class="w">  </span><span class="no">equ</span><span class="w">  </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">1</span><span class="w">            </span><span class="c1">; provide memory map</span>
<span class="nf">MBFLAGS</span><span class="w">  </span><span class="no">equ</span><span class="w">  </span><span class="no">MBALIGN</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="no">MEMINFO</span><span class="w"> </span><span class="c1">; this is the Multiboot &#39;flag&#39; field</span>
<span class="nf">MAGIC</span><span class="w">    </span><span class="no">equ</span><span class="w">  </span><span class="mi">0x1BADB002</span><span class="w">        </span><span class="c1">; &#39;magic number&#39; lets bootloader find the header</span>
<span class="nf">CHECKSUM</span><span class="w"> </span><span class="no">equ</span><span class="w"> </span><span class="p">-(</span><span class="no">MAGIC</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="no">MBFLAGS</span><span class="p">)</span><span class="w">   </span><span class="c1">; checksum of above, to prove we are multiboot</span>

<span class="c1">; Declare a multiboot header that marks the program as a kernel. These are magic</span>
<span class="c1">; values that are documented in the multiboot standard. The bootloader will</span>
<span class="c1">; search for this signature in the first 8 KiB of the kernel file, aligned at a</span>
<span class="c1">; 32-bit boundary. The signature is in its own section so the header can be</span>
<span class="c1">; forced to be within the first 8 KiB of the kernel file.</span>
<span class="nf">section</span><span class="w"> </span><span class="no">.multiboot</span><span class="w"></span>
<span class="nf">align</span><span class="w"> </span><span class="mi">4</span><span class="w"></span>
<span class="w">	</span><span class="nf">dd</span><span class="w"> </span><span class="no">MAGIC</span><span class="w"></span>
<span class="w">	</span><span class="nf">dd</span><span class="w"> </span><span class="no">MBFLAGS</span><span class="w"></span>
<span class="w">	</span><span class="nf">dd</span><span class="w"> </span><span class="no">CHECKSUM</span><span class="w"></span>

<span class="c1">; The multiboot standard does not define the value of the stack pointer register</span>
<span class="c1">; (esp) and it is up to the kernel to provide a stack. This allocates room for a</span>
<span class="c1">; small stack by creating a symbol at the bottom of it, then allocating 16384</span>
<span class="c1">; bytes for it, and finally creating a symbol at the top. The stack grows</span>
<span class="c1">; downwards on x86. The stack is in its own section so it can be marked nobits,</span>
<span class="c1">; which means the kernel file is smaller because it does not contain an</span>
<span class="c1">; uninitialized stack. The stack on x86 must be 16-byte aligned according to the</span>
<span class="c1">; System V ABI standard and de-facto extensions. The compiler will assume the</span>
<span class="c1">; stack is properly aligned and failure to align the stack will result in</span>
<span class="c1">; undefined behavior.</span>
<span class="nf">section</span><span class="w"> </span><span class="no">.bss</span><span class="w"></span>
<span class="nf">align</span><span class="w"> </span><span class="mi">16</span><span class="w"></span>
<span class="nl">stack_bottom:</span><span class="w"></span>
<span class="nf">resb</span><span class="w"> </span><span class="mi">16384</span><span class="w"> </span><span class="c1">; 16 KiB</span>
<span class="nl">stack_top:</span><span class="w"></span>

<span class="c1">; The linker script specifies _start as the entry point to the kernel and the</span>
<span class="c1">; bootloader will jump to this position once the kernel has been loaded. It</span>
<span class="c1">; doesn&#39;t make sense to return from this function as the bootloader is gone.</span>
<span class="c1">; Declare _start as a function symbol with the given symbol size.</span>
<span class="nf">section</span><span class="w"> </span><span class="no">.text</span><span class="w"></span>
<span class="nf">global</span><span class="w"> </span><span class="no">_start</span><span class="p">:</span><span class="no">function</span><span class="w"> </span><span class="p">(</span><span class="no">_start.end</span><span class="w"> </span><span class="p">-</span><span class="w"> </span><span class="no">_start</span><span class="p">)</span><span class="w"></span>
<span class="nl">_start:</span><span class="w"></span>
<span class="w">	</span><span class="c1">; The bootloader has loaded us into 32-bit protected mode on a x86</span>
<span class="w">	</span><span class="c1">; machine. Interrupts are disabled. Paging is disabled. The processor</span>
<span class="w">	</span><span class="c1">; state is as defined in the multiboot standard. The kernel has full</span>
<span class="w">	</span><span class="c1">; control of the CPU. The kernel can only make use of hardware features</span>
<span class="w">	</span><span class="c1">; and any code it provides as part of itself. There&#39;s no printf</span>
<span class="w">	</span><span class="c1">; function, unless the kernel provides its own &lt;stdio.h&gt; header and a</span>
<span class="w">	</span><span class="c1">; printf implementation. There are no security restrictions, no</span>
<span class="w">	</span><span class="c1">; safeguards, no debugging mechanisms, only what the kernel provides</span>
<span class="w">	</span><span class="c1">; itself. It has absolute and complete power over the</span>
<span class="w">	</span><span class="c1">; machine.</span>

<span class="w">	</span><span class="c1">; To set up a stack, we set the esp register to point to the top of our</span>
<span class="w">	</span><span class="c1">; stack (as it grows downwards on x86 systems). This is necessarily done</span>
<span class="w">	</span><span class="c1">; in assembly as languages such as C cannot function without a stack.</span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">esp</span><span class="p">,</span><span class="w"> </span><span class="no">stack_top</span><span class="w"></span>

<span class="w">	</span><span class="c1">; This is a good place to initialize crucial processor state before the</span>
<span class="w">	</span><span class="c1">; high-level kernel is entered. It&#39;s best to minimize the early</span>
<span class="w">	</span><span class="c1">; environment where crucial features are offline. Note that the</span>
<span class="w">	</span><span class="c1">; processor is not fully initialized yet: Features such as floating</span>
<span class="w">	</span><span class="c1">; point instructions and instruction set extensions are not initialized</span>
<span class="w">	</span><span class="c1">; yet. The GDT should be loaded here. Paging should be enabled here.</span>
<span class="w">	</span><span class="c1">; C++ features such as global constructors and exceptions will require</span>
<span class="w">	</span><span class="c1">; runtime support to work as well.</span>

<span class="w">	</span><span class="c1">; Enter the high-level kernel. The ABI requires the stack is 16-byte</span>
<span class="w">	</span><span class="c1">; aligned at the time of the call instruction (which afterwards pushes</span>
<span class="w">	</span><span class="c1">; the return pointer of size 4 bytes). The stack was originally 16-byte</span>
<span class="w">	</span><span class="c1">; aligned above and we&#39;ve since pushed a multiple of 16 bytes to the</span>
<span class="w">	</span><span class="c1">; stack since (pushed 0 bytes so far) and the alignment is thus</span>
<span class="w">	</span><span class="c1">; preserved and the call is well defined.</span>
<span class="w">        </span><span class="c1">; note, that if you are building on Windows, C functions may have &quot;_&quot; prefix in assembly: _kernel_main</span>
<span class="w">	</span><span class="nf">extern</span><span class="w"> </span><span class="no">kernel_main</span><span class="w"></span>
<span class="w">	</span><span class="nf">call</span><span class="w"> </span><span class="no">kernel_main</span><span class="w"></span>

<span class="w">	</span><span class="c1">; If the system has nothing more to do, put the computer into an</span>
<span class="w">	</span><span class="c1">; infinite loop. To do that:</span>
<span class="w">	</span><span class="c1">; 1) Disable interrupts with cli (clear interrupt enable in eflags).</span>
<span class="w">	</span><span class="c1">;    They are already disabled by the bootloader, so this is not needed.</span>
<span class="w">	</span><span class="c1">;    Mind that you might later enable interrupts and return from</span>
<span class="w">	</span><span class="c1">;    kernel_main (which is sort of nonsensical to do).</span>
<span class="w">	</span><span class="c1">; 2) Wait for the next interrupt to arrive with hlt (halt instruction).</span>
<span class="w">	</span><span class="c1">;    Since they are disabled, this will lock up the computer.</span>
<span class="w">	</span><span class="c1">; 3) Jump to the hlt instruction if it ever wakes up due to a</span>
<span class="w">	</span><span class="c1">;    non-maskable interrupt occurring or due to system management mode.</span>
<span class="w">	</span><span class="nf">cli</span><span class="w"></span>
<span class="nl">.hang:</span><span class="w">	</span><span class="nf">hlt</span><span class="w"></span>
<span class="w">	</span><span class="nf">jmp</span><span class="w"> </span><span class="no">.hang</span><span class="w"></span>
<span class="nl">.end:</span><span class="w"></span>
</pre></div>
<p>You can then assemble boot.asm using:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>nasm -felf32 boot.asm -o boot.o
</pre></div>
<h2><span class="mw-headline" id="Kernel">Kernel</span></h2>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">BITS</span><span class="w"> </span><span class="mi">32</span><span class="w"></span>

<span class="nf">VGA_WIDTH</span><span class="w"> </span><span class="no">equ</span><span class="w"> </span><span class="mi">80</span><span class="w"></span>
<span class="nf">VGA_HEIGHT</span><span class="w"> </span><span class="no">equ</span><span class="w"> </span><span class="mi">25</span><span class="w"></span>

<span class="nf">VGA_COLOR_BLACK</span><span class="w"> </span><span class="no">equ</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="nf">VGA_COLOR_BLUE</span><span class="w"> </span><span class="no">equ</span><span class="w"> </span><span class="mi">1</span><span class="w"></span>
<span class="nf">VGA_COLOR_GREEN</span><span class="w"> </span><span class="no">equ</span><span class="w"> </span><span class="mi">2</span><span class="w"></span>
<span class="nf">VGA_COLOR_CYAN</span><span class="w"> </span><span class="no">equ</span><span class="w"> </span><span class="mi">3</span><span class="w"></span>
<span class="nf">VGA_COLOR_RED</span><span class="w"> </span><span class="no">equ</span><span class="w"> </span><span class="mi">4</span><span class="w"></span>
<span class="nf">VGA_COLOR_MAGENTA</span><span class="w"> </span><span class="no">equ</span><span class="w"> </span><span class="mi">5</span><span class="w"></span>
<span class="nf">VGA_COLOR_BROWN</span><span class="w"> </span><span class="no">equ</span><span class="w"> </span><span class="mi">6</span><span class="w"></span>
<span class="nf">VGA_COLOR_LIGHT_GREY</span><span class="w"> </span><span class="no">equ</span><span class="w"> </span><span class="mi">7</span><span class="w"></span>
<span class="nf">VGA_COLOR_DARK_GREY</span><span class="w"> </span><span class="no">equ</span><span class="w"> </span><span class="mi">8</span><span class="w"></span>
<span class="nf">VGA_COLOR_LIGHT_BLUE</span><span class="w"> </span><span class="no">equ</span><span class="w"> </span><span class="mi">9</span><span class="w"></span>
<span class="nf">VGA_COLOR_LIGHT_GREEN</span><span class="w"> </span><span class="no">equ</span><span class="w"> </span><span class="mi">10</span><span class="w"></span>
<span class="nf">VGA_COLOR_LIGHT_CYAN</span><span class="w"> </span><span class="no">equ</span><span class="w"> </span><span class="mi">11</span><span class="w"></span>
<span class="nf">VGA_COLOR_LIGHT_RED</span><span class="w"> </span><span class="no">equ</span><span class="w"> </span><span class="mi">12</span><span class="w"></span>
<span class="nf">VGA_COLOR_LIGHT_MAGENTA</span><span class="w"> </span><span class="no">equ</span><span class="w"> </span><span class="mi">13</span><span class="w"></span>
<span class="nf">VGA_COLOR_LIGHT_BROWN</span><span class="w"> </span><span class="no">equ</span><span class="w"> </span><span class="mi">14</span><span class="w"></span>
<span class="nf">VGA_COLOR_WHITE</span><span class="w"> </span><span class="no">equ</span><span class="w"> </span><span class="mi">15</span><span class="w"></span>

<span class="nf">global</span><span class="w"> </span><span class="no">kernel_main</span><span class="w"></span>
<span class="nl">kernel_main:</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">dh</span><span class="p">,</span><span class="w"> </span><span class="no">VGA_COLOR_LIGHT_GREY</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">dl</span><span class="p">,</span><span class="w"> </span><span class="no">VGA_COLOR_BLACK</span><span class="w"></span>
<span class="w">    </span><span class="nf">call</span><span class="w"> </span><span class="no">terminal_set_color</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">esi</span><span class="p">,</span><span class="w"> </span><span class="no">hello_string</span><span class="w"></span>
<span class="w">    </span><span class="nf">call</span><span class="w"> </span><span class="no">terminal_write_string</span><span class="w"></span>
<span class="w">    </span><span class="nf">jmp</span><span class="w"> </span><span class="no">$</span><span class="w"></span>
<span class="w">    </span>

<span class="c1">; IN = dl: y, dh: x</span>
<span class="c1">; OUT = dx: Index with offset 0xB8000 at VGA buffer</span>
<span class="c1">; Other registers preserved</span>
<span class="nl">terminal_getidx:</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">ax</span><span class="c1">; preserve registers</span>

<span class="w">    </span><span class="nf">shl</span><span class="w"> </span><span class="no">dh</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="c1">; multiply by two because every entry is a word that takes up 2 bytes</span>

<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="no">VGA_WIDTH</span><span class="w"></span>
<span class="w">    </span><span class="nf">mul</span><span class="w"> </span><span class="no">dl</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">dl</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>

<span class="w">    </span><span class="nf">shl</span><span class="w"> </span><span class="no">dl</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="c1">; same</span>
<span class="w">    </span><span class="nf">add</span><span class="w"> </span><span class="no">dl</span><span class="p">,</span><span class="w"> </span><span class="no">dh</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">dh</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>

<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">    </span><span class="nf">ret</span><span class="w"></span>

<span class="c1">; IN = dl: bg color, dh: fg color</span>
<span class="c1">; OUT = none</span>
<span class="nl">terminal_set_color:</span><span class="w"></span>
<span class="w">    </span><span class="nf">shl</span><span class="w"> </span><span class="no">dl</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="w"></span>

<span class="w">    </span><span class="nf">or</span><span class="w"> </span><span class="no">dl</span><span class="p">,</span><span class="w"> </span><span class="no">dh</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="p">[</span><span class="no">terminal_color</span><span class="p">],</span><span class="w"> </span><span class="no">dl</span><span class="w"></span>


<span class="w">    </span><span class="nf">ret</span><span class="w"></span>

<span class="c1">; IN = dl: y, dh: x, al: ASCII char</span>
<span class="c1">; OUT = none</span>
<span class="nl">terminal_putentryat:</span><span class="w"></span>
<span class="w">    </span><span class="nf">pusha</span><span class="w"></span>
<span class="w">    </span><span class="nf">call</span><span class="w"> </span><span class="no">terminal_getidx</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">ebx</span><span class="p">,</span><span class="w"> </span><span class="no">edx</span><span class="w"></span>

<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">dl</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">terminal_color</span><span class="p">]</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="mi">0xB8000</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="no">ebx</span><span class="p">],</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="mi">0xB8001</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="no">ebx</span><span class="p">],</span><span class="w"> </span><span class="no">dl</span><span class="w"></span>


<span class="w">    </span><span class="nf">popa</span><span class="w"></span>
<span class="w">    </span><span class="nf">ret</span><span class="w"></span>

<span class="c1">; IN = al: ASCII char</span>
<span class="nl">terminal_putchar:</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">dx</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">terminal_cursor_pos</span><span class="p">]</span><span class="w"> </span><span class="c1">; This loads terminal_column at DH, and terminal_row at DL</span>

<span class="w">    </span><span class="nf">call</span><span class="w"> </span><span class="no">terminal_putentryat</span><span class="w"></span>
<span class="w">    </span>
<span class="w">    </span><span class="nf">inc</span><span class="w"> </span><span class="no">dh</span><span class="w"></span>
<span class="w">    </span><span class="nf">cmp</span><span class="w"> </span><span class="no">dh</span><span class="p">,</span><span class="w"> </span><span class="no">VGA_WIDTH</span><span class="w"></span>
<span class="w">    </span><span class="nf">jne</span><span class="w"> </span><span class="no">.cursor_moved</span><span class="w"></span>

<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">dh</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="w">    </span><span class="nf">inc</span><span class="w"> </span><span class="no">dl</span><span class="w"></span>

<span class="w">    </span><span class="nf">cmp</span><span class="w"> </span><span class="no">dl</span><span class="p">,</span><span class="w"> </span><span class="no">VGA_HEIGHT</span><span class="w"></span>
<span class="w">    </span><span class="nf">jne</span><span class="w"> </span><span class="no">.cursor_moved</span><span class="w"></span>

<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">dl</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>


<span class="nl">.cursor_moved:</span><span class="w"></span>
<span class="w">    </span><span class="c1">; Store new cursor position </span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="p">[</span><span class="no">terminal_cursor_pos</span><span class="p">],</span><span class="w"> </span><span class="no">dx</span><span class="w"></span>

<span class="w">    </span><span class="nf">ret</span><span class="w"></span>

<span class="c1">; IN = cx: length of string, ESI: string location</span>
<span class="c1">; OUT = none</span>
<span class="nl">terminal_write:</span><span class="w"></span>
<span class="w">    </span><span class="nf">pusha</span><span class="w"></span>
<span class="nl">.loopy:</span><span class="w"></span>

<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">esi</span><span class="p">]</span><span class="w"></span>
<span class="w">    </span><span class="nf">call</span><span class="w"> </span><span class="no">terminal_putchar</span><span class="w"></span>

<span class="w">    </span><span class="nf">dec</span><span class="w"> </span><span class="no">cx</span><span class="w"></span>
<span class="w">    </span><span class="nf">cmp</span><span class="w"> </span><span class="no">cx</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="w">    </span><span class="nf">je</span><span class="w"> </span><span class="no">.done</span><span class="w"></span>

<span class="w">    </span><span class="nf">inc</span><span class="w"> </span><span class="no">esi</span><span class="w"></span>
<span class="w">    </span><span class="nf">jmp</span><span class="w"> </span><span class="no">.loopy</span><span class="w"></span>


<span class="nl">.done:</span><span class="w"></span>
<span class="w">    </span><span class="nf">popa</span><span class="w"></span>
<span class="w">    </span><span class="nf">ret</span><span class="w"></span>

<span class="c1">; IN = ESI: zero delimited string location</span>
<span class="c1">; OUT = ECX: length of string</span>
<span class="nl">terminal_strlen:</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">eax</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">esi</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">ecx</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="nl">.loopy:</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">esi</span><span class="p">]</span><span class="w"></span>
<span class="w">    </span><span class="nf">cmp</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="w">    </span><span class="nf">je</span><span class="w"> </span><span class="no">.done</span><span class="w"></span>

<span class="w">    </span><span class="nf">inc</span><span class="w"> </span><span class="no">esi</span><span class="w"></span>
<span class="w">    </span><span class="nf">inc</span><span class="w"> </span><span class="no">ecx</span><span class="w"></span>

<span class="w">    </span><span class="nf">jmp</span><span class="w"> </span><span class="no">.loopy</span><span class="w"></span>


<span class="nl">.done:</span><span class="w"></span>
<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">esi</span><span class="w"></span>
<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">eax</span><span class="w"></span>
<span class="w">    </span><span class="nf">ret</span><span class="w"></span>

<span class="c1">; IN = ESI: string location</span>
<span class="c1">; OUT = none</span>
<span class="nl">terminal_write_string:</span><span class="w"></span>
<span class="w">    </span><span class="nf">pusha</span><span class="w"></span>
<span class="w">    </span><span class="nf">call</span><span class="w"> </span><span class="no">terminal_strlen</span><span class="w"></span>
<span class="w">    </span><span class="nf">call</span><span class="w"> </span><span class="no">terminal_write</span><span class="w"></span>
<span class="w">    </span><span class="nf">popa</span><span class="w"></span>
<span class="w">    </span><span class="nf">ret</span><span class="w"></span>

<span class="c1">; Exercises:</span>
<span class="c1">; - Newline support</span>
<span class="c1">; - Terminal scrolling when screen is full</span>
<span class="c1">; Note: </span>
<span class="c1">; - The string is looped through twice on printing. </span>

<span class="nf">hello_string</span><span class="w"> </span><span class="no">db</span><span class="w"> </span><span class="err">&quot;</span><span class="no">Hello</span><span class="p">,</span><span class="w"> </span><span class="no">kernel</span><span class="w"> </span><span class="no">World</span><span class="p">!</span><span class="err">&quot;</span><span class="p">,</span><span class="w"> </span><span class="mi">0xA</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="c1">; 0xA = line feed</span>


<span class="nf">terminal_color</span><span class="w"> </span><span class="no">db</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>

<span class="nl">terminal_cursor_pos:</span><span class="w"></span>
<span class="nf">terminal_column</span><span class="w"> </span><span class="no">db</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="nf">terminal_row</span><span class="w"> </span><span class="no">db</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
</pre></div>
<p>Similar as before, to assemble it:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>nasm -felf32 kernel.asm -o kernel.o
</pre></div>
<!-- 
NewPP limit report
Cached time: 20250211124356
Cache expiry: 86400
Reduced expiry: false
Complications: []
CPU time usage: 0.035 seconds
Real time usage: 0.567 seconds
Preprocessor visited node count: 28/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 28308/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3361-0!canonical and timestamp 20250211124355 and revision id 27949.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Bare_Bones_with_NASM&amp;oldid=27949">https://wiki.osdev.org/index.php?title=Bare_Bones_with_NASM&amp;oldid=27949</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Tutorials" title="Category:Tutorials">Tutorials</a></li><li><a href="./Category:Bare_bones_tutorials" title="Category:Bare bones tutorials">Bare bones tutorials</a></li><li><a href="./Category:Assembly" title="Category:Assembly">Assembly</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Bare+Bones+with+NASM" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Bare_Bones_with_NASM#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Bare_Bones_with_NASM" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:Bare_Bones_with_NASM&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Bare_Bones_with_NASM"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Bare_Bones_with_NASM&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Bare_Bones_with_NASM&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Bare_Bones_with_NASM" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Bare_Bones_with_NASM" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Bare_Bones_with_NASM&amp;oldid=27949" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Bare_Bones_with_NASM&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 9 July 2023, at 16:02.</li>
	<li id="footer-info-0">This page has been accessed 5,734 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Bare_Bones_with_NASM&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.035","walltime":"0.567","ppvisitednodes":{"value":28,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":28308,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250211124356","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":660});});</script>
</body>
</html>