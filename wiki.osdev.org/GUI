<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>GUI - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"7d34bf965cbbf2ada1950c4c","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"GUI","wgTitle":"GUI","wgCurRevisionId":26818,"wgRevisionId":26818,"wgArticleId":2346,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Video","Graphical UI"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"GUI","wgRelevantArticleId":2346,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,
"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-GUI rootpage-GUI skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">GUI</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="GUI#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="GUI#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>A <b>Graphical User Interface</b> or <b>GUI</b> uses graphics in combination with text to display output. GUIs usually require a mouse to be able to take input and to be used to their fullest extent.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="GUI#Requirements"><span class="tocnumber">1</span> <span class="toctext">Requirements</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="GUI#Techniques"><span class="tocnumber">2</span> <span class="toctext">Techniques</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="GUI#TODO"><span class="tocnumber">2.1</span> <span class="toctext">TODO</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="GUI#The_new_Alternative:_UEFI"><span class="tocnumber">3</span> <span class="toctext">The new Alternative: UEFI</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="GUI#See_Also"><span class="tocnumber">4</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="GUI#Articles"><span class="tocnumber">4.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="GUI#Threads"><span class="tocnumber">4.2</span> <span class="toctext">Threads</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="GUI#External_links"><span class="tocnumber">4.3</span> <span class="toctext">External links</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Requirements">Requirements</span></h2>
<p>Coding a GUI takes lots of time, knowledge, and patience. The OS has to have a graphics driver and a mouse driver at the very least, so it can check for mouse clicks on areas like buttons on the screen.
You need to know how to get into a graphics mode and plot pixels, lines, and shapes on the screen for starters. You also need to know about the signals that <a href="Mouse_Input" title="Mouse Input">PS/2 mice</a> send when they are moved and buttons are pressed and held down, and how to implement a driver for handling all that stuff.
</p>
<h2><span class="mw-headline" id="Techniques">Techniques</span></h2>
<p>There are many ways to write a GUI, the following technique is a simple, quick and dirty way to create a generic GUI for your OS.  The tutorial assumes the kernel is running in protected mode and the video resolution has been set using VBE in a linear frame buffer and multi-tasking is already enabled in your kernel.  The kernel should probe the BIOS for the VBE Mode Info Block (see <a href="Getting_VBE_Mode_Info" class="mw-redirect" title="Getting VBE Mode Info">Getting VBE Mode Info</a>), which returns information about the established video resolution mode.
</p><p>The Screen module creates a Back Buffer for off screen writing and exposes methods used by other modules to write to the buffer.  
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">InitScreen</span><span class="p">();</span><span class="w"></span>
<span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">PutPixel</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">X</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">Y</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">RGB</span><span class="p">);</span><span class="w"></span>
<span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">PutRect</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">X</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">Y</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">Width</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">Height</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">RGB</span><span class="p">);</span><span class="w"></span>
<span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">PutLine</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">X1</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">Y1</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">X2</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">Y2</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">RGB</span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>Somewhere in real mode, the VESA BIOS Extentions were called to set the resolution (int 0x10 function 0x4f02) and the mode information was retrieved from VBE (int 0x10 function 0x4f01).  The mode info is stored in a VbeModeInfo struct as outlined in the VBE documentation and <a href="Getting_VBE_Mode_Info" class="mw-redirect" title="Getting VBE Mode Info"> here</a>.  This tutorial assumes a flat/linear frame buffer is selected (bit 14 of BX register is set when calling function 0x4f01).  This will map the video memory to the processors addess space making it accessible by the kernel (if the segment desciptors are setup right) This way no video page swapping is needed, just one giant memcpy.
</p><p>During initialization, a Back Buffer is allocated large enough to hold all the pixels and a thread is kicked off to refresh the screen.  The refresh proc just copies the data from the back buffer to the video memory in a continuous loop:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">InitScreen</span><span class="p">(){</span><span class="w"></span>
<span class="w">     </span><span class="n">ScreenBufferSize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">VbeModeInfoBlock</span><span class="p">.</span><span class="n">XResolution</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">VbeModeInfoBlock</span><span class="p">.</span><span class="n">YResolution</span><span class="w"> </span>
<span class="w">                                                     </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">VbeModeInfoBlock</span><span class="p">.</span><span class="n">BitsPerPixel</span><span class="o">/</span><span class="mi">8</span><span class="p">);</span><span class="w"></span>
<span class="w">     </span><span class="n">ScreenBackBuffer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">alloc</span><span class="p">(</span><span class="n">ScreenBufferSize</span><span class="p">);</span><span class="w"></span>
<span class="w">     </span><span class="n">CreateThread</span><span class="p">(</span><span class="n">ScreenRefreshProc</span><span class="p">,</span><span class="w"> </span><span class="nb">NULL</span><span class="p">);</span><span class="w"></span>
<span class="w"> </span><span class="p">}</span><span class="w"></span>

<span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">ScreenRefreshProc</span><span class="p">(){</span><span class="w"></span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(;;){</span><span class="w"></span>
<span class="w">        </span><span class="n">PaintDesktop</span><span class="p">();</span><span class="w"> </span><span class="c1">//paints the desktop and all windows</span>
<span class="w">        </span><span class="n">PaintCursor</span><span class="p">();</span><span class="w"> </span><span class="c1">//finally paints the cursor so it&#39;s on top</span>
<span class="w"> </span><span class="cp">#if WAIT_FOR_VERTICAL_RETRACE</span>
<span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">((</span><span class="n">inportb</span><span class="p">(</span><span class="mh">0x3DA</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x08</span><span class="p">));</span><span class="w"></span>
<span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">inportb</span><span class="p">(</span><span class="mh">0x3DA</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x08</span><span class="p">));</span><span class="w"></span>
<span class="w"> </span><span class="cp">#endif</span>
<span class="w">        </span><span class="n">memcpy</span><span class="p">(</span><span class="n">VbeModeInfoBlock</span><span class="p">.</span><span class="n">VideoBaseAddr</span><span class="p">,</span><span class="w"> </span><span class="n">ScreenZBuffer</span><span class="p">,</span><span class="w"> </span><span class="n">ScreenBufferSize</span><span class="p">);</span><span class="w"></span>
<span class="w">  </span><span class="p">}</span><span class="w"></span>
<span class="w"> </span><span class="p">}</span><span class="w"></span>
</pre></div>
<p>Writing to RAM is generally faster than writing to video memory and many areas of the back buffer will be repeatidly over written during a single screen refresh operation, making a back buffer neccessary.
</p><p>Now a function to plot pixels to the back buffer.  This will be used by other methods instead of writing directly to video memory:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">PutPixel</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">color</span><span class="p">){</span><span class="w"></span>
<span class="w">    </span><span class="c1">//do not write memory outside the screen buffer, check parameters against the VBE mode info</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="o">&lt;</span><span class="mi">0</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">x</span><span class="o">&gt;</span><span class="n">VbeModeInfoBlock</span><span class="p">.</span><span class="n">XResolution</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">y</span><span class="o">&lt;</span><span class="mi">0</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">y</span><span class="o">&gt;</span><span class="n">VbeModeInfoBlock</span><span class="p">.</span><span class="n">YResolution</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="p">(</span><span class="n">VbeModeInfoBlock</span><span class="p">.</span><span class="n">BitsPerPixel</span><span class="o">&gt;&gt;</span><span class="mi">3</span><span class="p">));</span><span class="w"></span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">y</span><span class="o">*</span><span class="n">VbeModeInfoBlock</span><span class="p">.</span><span class="n">BytesPerScanLine</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="k">register</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">cTemp</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">cTemp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">g_ScreenBuffer</span><span class="p">[</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">];</span><span class="w"></span>
<span class="w">    </span><span class="n">cTemp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xff</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">cTemp</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">color</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xff</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">cTemp</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">color</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xff</span><span class="p">;</span><span class="w"></span>
<span class="w"> </span><span class="p">}</span><span class="w"></span>
</pre></div>
<p>PutLine() and PutRect() a should check the boundaries of the X and Y parameters to ensure no pixels are plotted outside the allocated memory area of the back buffer.  This prevents memory corruption and the pixels wont be visible on the display anyway.  I'll leave the PutRect and PutLine implementation up to you or may come back and fill it in later.
</p><p>In the RefreshScreenProc() method you'll notice the PaintDesktop() call.  This GUI method works by painting every object from the bottom up.  First the desktop background is painted then each window is painted on top of it (or one another depending on the z-order of the windows and their positions):
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">PaintDesktop</span><span class="p">(){</span><span class="w"></span>
<span class="w">    </span><span class="c1">//fill the background of the desktop</span>
<span class="w">    </span><span class="n">PutRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">Screen</span><span class="p">.</span><span class="n">Width</span><span class="p">,</span><span class="w"> </span><span class="n">Screen</span><span class="p">.</span><span class="n">Height</span><span class="p">,</span><span class="w"> </span><span class="mh">0xc0c0c0c0</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="c1">//now tell every child window to paint itself:</span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="w"> </span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">ChildWindows</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="w"> </span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w"></span>
<span class="w">        </span><span class="n">ChildWindows</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Paint</span><span class="p">();</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="w"> </span><span class="p">}</span><span class="w"></span>
</pre></div>
<p>Each child window has it's own Paint() method as well and subsequently calls each of it's child window's Paint() method:
</p>
<div class="mw-highlight mw-highlight-lang-cpp mw-content-ltr" dir="ltr"><pre><span></span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">Window::Paint</span><span class="p">(){</span><span class="w"></span>
<span class="w">     </span><span class="c1">//paint a navy blue window</span>
<span class="w">     </span><span class="n">PutRect</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">Left</span><span class="p">,</span><span class="w"> </span><span class="k">this</span><span class="o">-&gt;</span><span class="n">Top</span><span class="p">,</span><span class="w"> </span><span class="k">this</span><span class="o">-&gt;</span><span class="n">Width</span><span class="p">,</span><span class="w"> </span><span class="k">this</span><span class="o">-&gt;</span><span class="n">Height</span><span class="p">,</span><span class="w"> </span><span class="n">rgbNavy</span><span class="p">);</span><span class="w"></span>
<span class="w">     </span><span class="c1">//put a small red square in the top right hand corner of the window</span>
<span class="w">     </span><span class="n">PutRect</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">Left</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="k">this</span><span class="o">-&gt;</span><span class="n">Width</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="k">this</span><span class="o">-&gt;</span><span class="n">Top</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="n">rgbRed</span><span class="p">);</span><span class="w"></span>
<span class="w">     </span><span class="c1">//put the title bar text at the top of the window</span>
<span class="w">     </span><span class="n">Put8x8String</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">Left</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="k">this</span><span class="o">-&gt;</span><span class="n">Top</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="k">this</span><span class="o">-&gt;</span><span class="n">Title</span><span class="p">,</span><span class="w"> </span><span class="n">rgbBlack</span><span class="p">);</span><span class="w"></span>
<span class="w">     </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="w"> </span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">ChildWindows</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="w"> </span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="w"></span>
<span class="w">        </span><span class="n">ChildWindows</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Paint</span><span class="p">();</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="w"> </span><span class="p">}</span><span class="w"></span>
</pre></div>
<p>After the Paint() method of all the windows have been called, the RefreshScreenProc calls PaintCursor():
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">PaintCursor</span><span class="p">(){</span><span class="w"></span>
<span class="w">    </span><span class="c1">//just make a white box at the cursor position:</span>
<span class="w">    </span><span class="n">PutRect</span><span class="p">(</span><span class="n">Mouse</span><span class="p">.</span><span class="n">X</span><span class="p">,</span><span class="w"> </span><span class="n">Mouse</span><span class="p">.</span><span class="n">Y</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="n">rgbWhite</span><span class="p">);</span><span class="w"></span>
<span class="w"> </span><span class="p">}</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="TODO">TODO</span></h3>
<p>Theres a lot that can be done to improve the quality and performance.  Using this bottom up approach means that each area of the screen could potentially be overwritten several times if multiple windows are stacked on top of one another.  There is a lot of overhead re-rendering the same windows for every refresh itteration.  While this technique has a low memory requirement, performance can be greatly improved by pre-rendering windows in a seperate buffer and copying the contents to the screen buffer.  Each Window would have it's own screen buffer where rendering is performed only when neccessary (creation, resize, etc).  A similar technique is used <a rel="nofollow" class="external text" href="http://www.osdever.net/tutorials/view/gui-development">here</a>.  In <a rel="nofollow" class="external text" href="http://www.osdever.net/tutorials/view/gui-development">this</a>example each window has it's own canvas and the contents are copied to the screen buffer during refresh operations and rendering is performed only once.  The downside to this technique is the additional memory requirements.
</p><p>Some suggestions and things to watch out for: 
</p>
<ul><li>All drawing should be performed on the back buffer. Drawing to the video memory will get overwritten by the ScreenRefreshProc.</li>
<li>You will need some way to keep track of child windows and to setup their z-order (display order), so top level windows get drawn last, bottom level windows get drawn first.</li>
<li>Make more calls in the window's Draw() method to make better looking windows. Add a border and some 3D effects.</li>
<li>Pixel plotting differs depending on resolution and color depth. You'll want fast pixel plotting methods for each resolution and color depth.</li>
<li>See <a href="Drawing_In_Protected_Mode" class="mw-redirect" title="Drawing In Protected Mode">Drawing In Protected Mode</a> for writing strings using fixed width fonts.</li>
<li>See <a href="Simple_Scalable_Fonts" title="Simple Scalable Fonts">Simple Scalable Fonts</a> for a simple scalable font technique.</li>
<li>See <a href="Loading_Icons" title="Loading Icons">Loading Icons</a> on how to handle image files to display icons.</li>
<li>Use Bresenham's line drawing algorithms for best performance and visual appeal.</li>
<li>PutRect and PutLine should have their own pixel plotting (calling PutPixel on a large rect will slow rendering WAY down).</li>
<li>There are several ways to handle mouse and keyboard input. None are terribly difficult. Perhaps the easiest is for each Window to capture each mouse and keyboard event and determine whether or not to process them. Another way is for the mouse and keyboard modules to determine which windows to send messages or events to. These generally are implementation specific requirements.</li>
<li>Use an optimized version of memcpy. Otherwise, on emulators like Bochs, screen updates will be painfully slow. (See: <a href="http://forum.osdev.org/viewtopic.php?t=18119" class="extiw" title="topic:18119">Optimized memory functions</a>)</li></ul>
<h2><span class="mw-headline" id="The_new_Alternative:_UEFI">The new Alternative: UEFI</span></h2>
<p>Instead of using VBE or real mode BIOS calls, you can use the (U)EFI methods like <a href="GOP" title="GOP">GOP</a>, provided that you make your OS run on (U)EFI and not on old clunky BIOS.
</p>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<h3><span class="mw-headline" id="Articles">Articles</span></h3>
<ul><li><a href="Text_UI" title="Text UI">Text UI</a></li>
<li><a href="Getting_VBE_Mode_Info" class="mw-redirect" title="Getting VBE Mode Info">Getting VBE Mode Info</a></li>
<li><a href="Drawing_In_Protected_Mode" class="mw-redirect" title="Drawing In Protected Mode">Drawing In Protected Mode</a></li></ul>
<h3><span class="mw-headline" id="Threads">Threads</span></h3>
<ul><li><a href="http://forum.osdev.org/viewtopic.php?t=27684" class="extiw" title="topic:27684">Alpha Blending</a></li></ul>
<h3><span class="mw-headline" id="External_links">External links</span></h3>
<ul><li><a rel="nofollow" class="external text" href="http://www.osdever.net/tutorials/view/gui-development">GUI Development</a></li>
<li><a rel="nofollow" class="external text" href="https://jmarlin.github.io/wsbe/">Windowing Systems by Example</a></li></ul>
<!-- 
NewPP limit report
Cached time: 20250211133723
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.048 seconds
Real time usage: 0.824 seconds
Preprocessor visited node count: 69/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 17688/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:2346-0!canonical and timestamp 20250211133722 and revision id 26818.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=GUI&amp;oldid=26818">https://wiki.osdev.org/index.php?title=GUI&amp;oldid=26818</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Video" title="Category:Video">Video</a></li><li><a href="./Category:Graphical_UI" title="Category:Graphical UI">Graphical UI</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=GUI" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="GUI#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="GUI" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:GUI&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="GUI"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=GUI&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=GUI&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/GUI" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/GUI" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=GUI&amp;oldid=26818" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=GUI&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-lang" class="vector-menu mw-portlet mw-portlet-lang vector-menu-portal portal" aria-labelledby="p-lang-label" role="navigation"  >
	<h3
		id="p-lang-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">In other languages</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li class="interlanguage-link interwiki-de mw-list-item"><a href="http://www.lowlevel.eu/wiki/Graphical_User_Interface" title="Graphical User Interface – Deutsch" lang="de" hreflang="de" class="interlanguage-link-target"><span>Deutsch</span></a></li></ul>
		
	</div>
</nav>

</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 30 December 2021, at 10:55.</li>
	<li id="footer-info-0">This page has been accessed 8,410 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=GUI&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.048","walltime":"0.824","ppvisitednodes":{"value":69,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":17688,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250211133723","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":918});});</script>
</body>
</html>