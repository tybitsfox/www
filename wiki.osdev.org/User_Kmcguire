<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>User:Kmcguire - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"bdc32f71a53512ebb9f20b96","wgCSPNonce":false,"wgCanonicalNamespace":"User","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":2,"wgPageName":"User:Kmcguire","wgTitle":"Kmcguire","wgCurRevisionId":15602,"wgRevisionId":15602,"wgArticleId":2075,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"User:Kmcguire","wgRelevantArticleId":2075,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRelevantUserName":"Kmcguire",
"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-2 ns-subject page-User_Kmcguire rootpage-User_Kmcguire skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-namespace">User</span><span class="mw-page-title-separator">:</span><span class="mw-page-title-main">Kmcguire</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="./User:Kmcguire#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="./User:Kmcguire#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="./User:Kmcguire#User_Pages"><span class="tocnumber">1</span> <span class="toctext">User Pages</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="./User:Kmcguire#Reading_CLR_PE32_File"><span class="tocnumber">1.1</span> <span class="toctext">Reading CLR PE32 File</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-3"><a href="./User:Kmcguire#Useful_Defines,_External_API,_References"><span class="tocnumber">2</span> <span class="toctext">Useful Defines, External API, References</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="./User:Kmcguire#Portable_Executable_32_File_Header_And_NT_Header_Structure"><span class="tocnumber">3</span> <span class="toctext">Portable Executable 32 File Header And NT Header Structure</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="./User:Kmcguire#Common_Language_Runtime_Header"><span class="tocnumber">4</span> <span class="toctext">Common Language Runtime Header</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="./User:Kmcguire#CLR_Meta-Data_Container_Structures"><span class="tocnumber">5</span> <span class="toctext">CLR Meta-Data Container Structures</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="./User:Kmcguire#Accessing_CLR_Header_Through_PE32_Headers"><span class="tocnumber">6</span> <span class="toctext">Accessing CLR Header Through PE32 Headers</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="./User:Kmcguire#Read_CLR_Meta-Data_Streams_Into_Memory"><span class="tocnumber">7</span> <span class="toctext">Read CLR Meta-Data Streams Into Memory</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="./User:Kmcguire#Meta-Data_#~_Stream_Table_Field_Descriptions"><span class="tocnumber">8</span> <span class="toctext">Meta-Data #~ Stream Table Field Descriptions</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="./User:Kmcguire#Reading_Meta-Data_#~_Stream_Tables"><span class="tocnumber">9</span> <span class="toctext">Reading Meta-Data #~ Stream Tables</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="./User:Kmcguire#Meta-Data_Method_Definition_Table_Field_Indexes"><span class="tocnumber">10</span> <span class="toctext">Meta-Data Method Definition Table Field Indexes</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="./User:Kmcguire#Displaying_The_Method_Definition_Table"><span class="tocnumber">11</span> <span class="toctext">Displaying The Method Definition Table</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="./User:Kmcguire#Display_Name_And_Signature_For_Each_Method_Defintion"><span class="tocnumber">12</span> <span class="toctext">Display Name And Signature For Each Method Defintion</span></a></li>
<li class="toclevel-1 tocsection-14"><a href="./User:Kmcguire#Display_Type_Names_And_Namespaces_With_Fields"><span class="tocnumber">13</span> <span class="toctext">Display Type Names And Namespaces With Fields</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="User_Pages">User Pages</span></h2>
<p><a rel="nofollow" class="external text" href="https://wiki.osdev.org/index.php?title=Special%3APrefixIndex&amp;prefix=kmcguire&amp;namespace=2">User Pages</a>
</p>
<h3><span class="mw-headline" id="Reading_CLR_PE32_File">Reading CLR PE32 File</span></h3>
<h2><span id="Useful_Defines.2C_External_API.2C_References"></span><span class="mw-headline" id="Useful_Defines,_External_API,_References">Useful Defines, External API, References</span></h2>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define UINT8_AT(x) (*((uint8_t*)(x)))</span>
<span class="cp">#define UINT16_AT(x) (*((uint16_t*)(x)))</span>
<span class="cp">#define UINT32_AT(x) (*((uint32_t*)(x)))</span>
</pre></div>
<p>Also the memcpy, memset, malloc, strcmp, and free from the C standard library are used. I also use printf but
only for diagnostic purposes. 
</p><p>Also, the page here has been very useful: <a rel="nofollow" class="external free" href="http://ntcore.com/files/dotnetformat.htm">http://ntcore.com/files/dotnetformat.htm</a>.
</p>
<h2><span class="mw-headline" id="Portable_Executable_32_File_Header_And_NT_Header_Structure">Portable Executable 32 File Header And NT Header Structure</span></h2>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">signature</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">cputype</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">objcnt</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">tdstamp</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">reserved1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">reserved2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">nthdrsize</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">flags</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">reserved3</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">lmajor</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">lminor</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">reserved4</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">reserved5</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">reserved6</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">entrypointrva</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">reserved7</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">reserved8</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">imagebase</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">objectalign</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">filealign</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">osmajor</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">osminor</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">usermajor</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">userminor</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">subsysmajor</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">subsysminor</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">reserved9</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">imagesize</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">hdrsize</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">filechecksum</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">subsystem</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">dllflags</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">stackreservesize</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">stackcommitsize</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">heapreservesize</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">heapcommitsize</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">reserved10</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">_rvasizes</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">rva</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">size</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"> </span><span class="n">tables</span><span class="p">[];</span><span class="w"></span>
<span class="w">	</span>
<span class="p">}</span><span class="w"> </span><span class="n">win32_pe32_fhdr</span><span class="p">;</span><span class="w"></span>

<span class="cp">#define WIN32_PE32_TABLE_EXPORT		0x00</span>
<span class="cp">#define WIN32_PE32_TABLE_IMPORT		0x01</span>
<span class="cp">#define WIN32_PE32_TABLE_RESOURCE	0x02</span>
<span class="cp">#define WIN32_PE32_TABLE_EXCEPTION	0x03</span>
<span class="cp">#define WIN32_PE32_TABLE_SECURITY	0x04</span>
<span class="cp">#define WIN32_PE32_TABLE_FIXUP		0x05</span>
<span class="cp">#define WIN32_PE32_TABLE_DEBUG		0x06</span>
<span class="cp">#define WIN32_PE32_TABLE_IMAGEDESC	0x07</span>
<span class="cp">#define WIN32_PE32_TABLE_MACHSPEC	0x08</span>
<span class="cp">#define WIN32_PE32_TABLE_THREADLOC	0x09</span>
<span class="cp">#define WIN32_PE32_TABLE_UNKNOWN1	0x0A</span>
<span class="cp">#define WIN32_PE32_TABLE_UNKNOWN2	0x0B</span>
<span class="cp">#define WIN32_PE32_TABLE_IMPORTADDR	0x0C</span>
<span class="cp">#define WIN32_PE32_TABLE_UNKNOWN3	0x0D</span>
<span class="cp">#define WIN32_PE32_TABLE_CLRRTHDR	0x0E</span>
</pre></div>
<h2><span class="mw-headline" id="Common_Language_Runtime_Header">Common Language Runtime Header</span></h2>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">rva</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">size</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">win32_clr20_datadir</span><span class="p">;</span><span class="w"></span>

<span class="cm">/* http://ntcore.com/files/dotnetformat.htm */</span><span class="w"></span>
<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">			</span><span class="n">cb</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">			</span><span class="n">rtmajor</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">			</span><span class="n">rtminor</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">win32_clr20_datadir</span><span class="w">		</span><span class="n">meta</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">			</span><span class="n">flags</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">			</span><span class="n">entrypointrva</span><span class="p">;</span><span class="w">	</span><span class="cm">/* entry point rva */</span><span class="w"></span>
<span class="w">	</span><span class="n">win32_clr20_datadir</span><span class="w">		</span><span class="n">resources</span><span class="p">;</span><span class="w">	</span><span class="cm">/* resources */</span><span class="w"></span>
<span class="w">	</span><span class="n">win32_clr20_datadir</span><span class="w">		</span><span class="n">strongnamsig</span><span class="p">;</span><span class="w">	</span><span class="cm">/* strong name signature */</span><span class="w"></span>
<span class="w">	</span><span class="n">win32_clr20_datadir</span><span class="w">		</span><span class="n">codemantab</span><span class="p">;</span><span class="w">	</span><span class="cm">/* code manager table */</span><span class="w"></span>
<span class="w">	</span><span class="n">win32_clr20_datadir</span><span class="w">		</span><span class="n">vtabfixups</span><span class="p">;</span><span class="w">	</span><span class="cm">/* vtable fixups */</span><span class="w"></span>
<span class="w">	</span><span class="n">win32_clr20_datadir</span><span class="w">		</span><span class="n">exaddrtabjumps</span><span class="p">;</span><span class="w">	</span><span class="cm">/* export address table jumps */</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">win32_clr20_hdr</span><span class="p">;</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="CLR_Meta-Data_Container_Structures">CLR Meta-Data Container Structures</span></h2>
<p>These are custom structures that I made to hold the data as I read and process it. They
are not defined inside the PE32 file nor by the standard. These structures are just a
natural and hopefully simple way to hold and access the data.
</p><p>The #~ stream (win_clr20_meta_stream) is converted into an array of tables (win_clr20_meta_table). I
am not sure why I prefixed them with "win_" I would remove it if I did it over, but for now I will
just leave it there.
</p><p>The win_clr20_module is the main structure which also holds the win_clr20_meta structure. In most
of my functions I like to hold on to either the meta or module structure since I can access
anything I need.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="cm">/*</span>
<span class="cm">	The meta-data contains streams. There are:</span>
<span class="cm">	#~</span>
<span class="cm">	#GUID</span>
<span class="cm">	#US</span>
<span class="cm">	#Strings</span>
<span class="cm">	</span>
<span class="cm">	Each of these is stored in this structure.</span>
<span class="cm">*/</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">					</span><span class="o">*</span><span class="n">name</span><span class="p">;</span><span class="w">		</span><span class="cm">/* ASCII name */</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">					</span><span class="o">*</span><span class="n">data</span><span class="p">;</span><span class="w">		</span><span class="cm">/* if non-zero is buffer */</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">				</span><span class="n">size</span><span class="p">;</span><span class="w">		</span><span class="cm">/* size in bytes */</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">win_clr20_meta_stream</span><span class="p">;</span><span class="w"></span>

<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="cm">/*</span>
<span class="cm">	This structure holds the table once it has been</span>
<span class="cm">	read from the meta-data #~ stream. It holds the</span>
<span class="cm">	rows in a fixed static grid. You can get the size</span>
<span class="cm">	of each row (which is constant), and the size of</span>
<span class="cm">	each field in the row. However, there is no naming</span>
<span class="cm">	per field.</span>
<span class="cm">*/</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">				</span><span class="n">rowcnt</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">					</span><span class="n">rsize</span><span class="p">;</span><span class="w">		</span><span class="cm">/* row size in bytes */</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">					</span><span class="o">*</span><span class="n">fsize</span><span class="p">;</span><span class="w">		</span><span class="cm">/* size of each field from left to right in bytes */</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">					</span><span class="o">*</span><span class="n">rows</span><span class="p">;</span><span class="w">		</span><span class="cm">/* array of pointers to row data for each row */</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">win_clr20_meta_table</span><span class="p">;</span><span class="w"></span>

<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="cm">/*</span>
<span class="cm">	This is the main structure for the meta-data. It</span>
<span class="cm">	should allow access to other information from this</span>
<span class="cm">	structure.</span>
<span class="cm">*/</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">				</span><span class="n">strmcnt</span><span class="p">;</span><span class="w">			</span><span class="cm">/* the number of array items below */</span><span class="w"></span>
<span class="w">	</span><span class="n">win_clr20_meta_stream</span><span class="w">	</span><span class="o">*</span><span class="n">strms</span><span class="p">;</span><span class="w">				</span><span class="cm">/* an array just like they are read in */</span><span class="w"></span>
<span class="w">	</span><span class="n">win_clr20_meta_stream</span><span class="w">	</span><span class="n">strmbyid</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span><span class="w">		</span><span class="cm">/* copy of strms, but indexed by WIN_CLR20_META_ */</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">					</span><span class="n">heapoffsetsizes</span><span class="p">;</span><span class="w">	</span><span class="cm">/* heap offset sizes */</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">				</span><span class="n">valid</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="w">			</span><span class="cm">/* qword(64bit) tells which tables are present */</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">				</span><span class="n">sorted</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="w">			</span><span class="cm">/* qword(64bit) tells which tables are sorted */</span><span class="w"></span>

<span class="w">	</span><span class="n">win_clr20_meta_table</span><span class="w">	</span><span class="n">tables</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span><span class="w">			</span><span class="cm">/* all the known tables that are supported */</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">win_clr20_meta</span><span class="p">;</span><span class="w"></span>

<span class="cm">/*</span>
<span class="cm">	A quick bit guide to find the right one.</span>
<span class="cm">*/</span><span class="w"></span>
<span class="cp">#define CLR20_META_HEAPOFFSETSIZES_STRING		0x01</span>
<span class="cp">#define CLR20_META_HEAPOFFSETSIZES_GUID			0x02</span>
<span class="cp">#define CLR20_META_HEAPOFFSETSIZES_BLOB			0x03</span>

<span class="cm">/* </span>
<span class="cm">	The identifier for each stream. This is</span>
<span class="cm">	specific to win_clr20_meta. These values</span>
<span class="cm">	are internal to this code.</span>
<span class="cm">*/</span><span class="w"></span>
<span class="cp">#define WIN_CLR20_META_TABLES	0x00</span>
<span class="cp">#define WIN_CLR20_META_USTRINGS	0x01</span>
<span class="cp">#define WIN_CLR20_META_STRINGS	0x02</span>
<span class="cp">#define WIN_CLR20_META_BLOB		0x03</span>
<span class="cp">#define WIN_CLR20_META_GUID		0x04</span>

<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">uintptr_t</span><span class="w">				</span><span class="n">rva</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uintptr_t</span><span class="w">				</span><span class="n">size</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">					</span><span class="o">*</span><span class="n">data</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">win_clr20_chunk</span><span class="p">;</span><span class="w"></span>

<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="cm">/*</span>
<span class="cm">	A container for the meta-data and</span>
<span class="cm">	for any other structures.</span>
<span class="cm">	</span>
<span class="cm">	Also included are the object sections</span>
<span class="cm">	like .text, .reloc, ect. These are kept</span>
<span class="cm">	because the meta data will reference</span>
<span class="cm">	into this sections. So we need to keep</span>
<span class="cm">	them close, but they are not actual </span>
<span class="cm">	meta data so they are outside of the</span>
<span class="cm">	meta structure.</span>
<span class="cm">*/</span><span class="w"></span>
<span class="w">	</span><span class="n">win_clr20_meta</span><span class="w">			</span><span class="n">meta</span><span class="p">;</span><span class="w"></span>

<span class="w">	</span><span class="kt">uint32_t</span><span class="w">				</span><span class="n">chunkcnt</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">win_clr20_chunk</span><span class="w">			</span><span class="o">*</span><span class="n">chunks</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">win_clr20_module</span><span class="p">;</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="Accessing_CLR_Header_Through_PE32_Headers">Accessing CLR Header Through PE32 Headers</span></h2>
<p>Here, I access the CLR header by walking the PE32 file and optional DLL headers. I also have to peek
into the data dictionaries. The file sections (.text, ...) are copied into what I named chunks which
are saved and act just like sections just using a different name. The CLR meta-data will point into
these chunks at a later time.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">int</span><span class="w"> </span><span class="nf">cilvm_pe32_buffer</span><span class="p">(</span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="n">buffer</span><span class="p">,</span><span class="w"> </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">len</span><span class="p">,</span><span class="w"> </span><span class="n">win_clr20_module</span><span class="w"> </span><span class="o">*</span><span class="n">clrmodule</span><span class="p">)</span><span class="w"></span>
<span class="cm">/*</span>
<span class="cm">	Will read a CLR module in the PE32 format into a memory structure.</span>
<span class="cm">*/</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">win32_pe32_fhdr</span><span class="w">		</span><span class="o">*</span><span class="n">fhdr</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">win32_pe32_ohdr</span><span class="w">		</span><span class="o">*</span><span class="n">ohdr</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">			</span><span class="n">pe_off</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">			</span><span class="n">opt_off</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">			</span><span class="n">opt_magic</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">win_clr20_hdr</span><span class="w">		</span><span class="o">*</span><span class="n">clr_hdr</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">			</span><span class="n">clr_rva</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">			</span><span class="n">clr_size</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">			</span><span class="n">clr_off</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">			</span><span class="n">meta_off</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">			</span><span class="n">meta_rva</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">			</span><span class="n">meta_size</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> 			</span><span class="n">x</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">			</span><span class="n">y</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">				</span><span class="o">*</span><span class="n">tb</span><span class="p">;</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* get pe32 header offset */</span><span class="w"></span>
<span class="w">	</span><span class="n">pe_off</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">((</span><span class="kt">uint32_t</span><span class="o">*</span><span class="p">)(</span><span class="n">buffer</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mh">0x3c</span><span class="p">))[</span><span class="mi">0</span><span class="p">];</span><span class="w"></span>
<span class="w">	</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;peoff:%x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">pe_off</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="k">if</span><span class="p">(</span><span class="n">memcmp</span><span class="p">(</span><span class="n">buffer</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">pe_off</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;PE</span><span class="se">\0\0</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Yes, this is a PE header.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="n">fhdr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">win32_pe32_fhdr</span><span class="o">*</span><span class="p">)(</span><span class="n">buffer</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">pe_off</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;imagebase: %x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">fhdr</span><span class="o">-&gt;</span><span class="n">imagebase</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* get clr runtime header */</span><span class="w"></span>
<span class="w">	</span><span class="n">clr_rva</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fhdr</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">WIN32_PE32_TABLE_CLRRTHDR</span><span class="p">].</span><span class="n">rva</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">clr_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fhdr</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">WIN32_PE32_TABLE_CLRRTHDR</span><span class="p">].</span><span class="n">size</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;CLRRTHDR_RVA:%x</span><span class="se">\n</span><span class="s">CLRRTHDR_SIZE:%x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">clr_rva</span><span class="p">,</span><span class="w"> </span><span class="n">clr_size</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* </span>
<span class="cm">		The array of objects follow the headers. But, my header does</span>
<span class="cm">		not include the size for the data dictionary array. So to</span>
<span class="cm">		include that we get the number of entries in the data dictionary</span>
<span class="cm">		and multiple this by eight since each one is eight bytes in PE32.</span>
<span class="cm">	*/</span><span class="w"></span>
<span class="w">	</span><span class="n">ohdr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">win32_pe32_ohdr</span><span class="o">*</span><span class="p">)(</span><span class="n">buffer</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">pe_off</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="k">sizeof</span><span class="p">(</span><span class="n">win32_pe32_fhdr</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">fhdr</span><span class="o">-&gt;</span><span class="n">_rvasizes</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">8</span><span class="p">));</span><span class="w"></span>

<span class="w">	</span><span class="cm">/*</span>
<span class="cm">		I also copy each section into a chunk. I used a different name incase</span>
<span class="cm">		we start reading from stuff other than PE32 files and the word chunk</span>
<span class="cm">		seemed cool to use.</span>
<span class="cm">	*/</span><span class="w"></span>
<span class="w">	</span><span class="n">clrmodule</span><span class="o">-&gt;</span><span class="n">chunkcnt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fhdr</span><span class="o">-&gt;</span><span class="n">objcnt</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">clrmodule</span><span class="o">-&gt;</span><span class="n">chunks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">win_clr20_chunk</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">win_clr20_chunk</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">fhdr</span><span class="o">-&gt;</span><span class="n">objcnt</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">fhdr</span><span class="o">-&gt;</span><span class="n">objcnt</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">x</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">clrmodule</span><span class="o">-&gt;</span><span class="n">chunks</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">rva</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ohdr</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">rva</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="n">clrmodule</span><span class="o">-&gt;</span><span class="n">chunks</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ohdr</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">psize</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="n">clrmodule</span><span class="o">-&gt;</span><span class="n">chunks</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint8_t</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">ohdr</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">psize</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">memcpy</span><span class="p">(</span><span class="n">clrmodule</span><span class="o">-&gt;</span><span class="n">chunks</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">data</span><span class="p">,</span><span class="w"> </span><span class="n">buffer</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">ohdr</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">poff</span><span class="p">,</span><span class="w"> </span><span class="n">ohdr</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">psize</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>

<span class="w">	</span><span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">fhdr</span><span class="o">-&gt;</span><span class="n">objcnt</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">x</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;object rva %x %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">ohdr</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">rva</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">ohdr</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">name</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="w"></span>
<span class="w">		</span><span class="k">if</span><span class="p">(</span><span class="n">clr_rva</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">ohdr</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">rva</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="cm">/* calculating relative to file offset not memory */</span><span class="w"></span>
<span class="w">			</span><span class="n">clr_off</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ohdr</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">poff</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">clr_rva</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">ohdr</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">rva</span><span class="p">);</span><span class="w"></span>
<span class="w">			</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;found object for CLRRTHDR, with rva %x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">ohdr</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">rva</span><span class="p">);</span><span class="w"></span>
<span class="w">			</span><span class="k">break</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="n">clr_hdr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">win_clr20_hdr</span><span class="o">*</span><span class="p">)(</span><span class="n">buffer</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">clr_off</span><span class="p">);</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* try to read in the meta data */</span><span class="w"></span>
<span class="w">	</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;clr-metatable:%x [size:%x]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">clr_hdr</span><span class="o">-&gt;</span><span class="n">meta</span><span class="p">.</span><span class="n">rva</span><span class="p">,</span><span class="w"> </span><span class="n">clr_hdr</span><span class="o">-&gt;</span><span class="n">meta</span><span class="p">.</span><span class="n">size</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">meta_rva</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">clr_hdr</span><span class="o">-&gt;</span><span class="n">meta</span><span class="p">.</span><span class="n">rva</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">meta_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">clr_hdr</span><span class="o">-&gt;</span><span class="n">meta</span><span class="p">.</span><span class="n">size</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* find the object that the metadata is in and point header there */</span><span class="w"></span>
<span class="w">	</span><span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">fhdr</span><span class="o">-&gt;</span><span class="n">objcnt</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">x</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;object rva %x %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">ohdr</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">rva</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">ohdr</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">name</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="w"></span>
<span class="w">		</span><span class="k">if</span><span class="p">(</span><span class="n">meta_rva</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">ohdr</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">rva</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="cm">/* calculating relative to file offset not memory */</span><span class="w"></span>
<span class="w">			</span><span class="n">meta_off</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ohdr</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">poff</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">meta_rva</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">ohdr</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">rva</span><span class="p">);</span><span class="w"></span>
<span class="w">			</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;found object for CLR-METADATA, with rva %x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">ohdr</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">rva</span><span class="p">);</span><span class="w"></span>
<span class="w">			</span><span class="k">break</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* call routine to read meta-data header */</span><span class="w"></span>
<span class="w">	</span><span class="n">cilvm_clr_meta_read</span><span class="p">(</span><span class="n">buffer</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">meta_off</span><span class="p">,</span><span class="w"> </span><span class="n">meta_size</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">clrmodule</span><span class="o">-&gt;</span><span class="n">meta</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* after reading in the meta-data we need to process it into a structure */</span><span class="w"></span>
<span class="w">	</span><span class="n">cilvm_clr_meta_tread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">clrmodule</span><span class="o">-&gt;</span><span class="n">meta</span><span class="p">);</span><span class="w"></span>

<span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>The cilvm_clr_meta_read and cilvm_clr_meta_tread are not yet shown, but there each perform a small
part in the eventual construction of a high level structure where the common intermediate language
instructions can be accessed and processing performed.
</p>
<h2><span class="mw-headline" id="Read_CLR_Meta-Data_Streams_Into_Memory">Read CLR Meta-Data Streams Into Memory</span></h2>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">int</span><span class="w"> </span><span class="nf">cilvm_clr_meta_read</span><span class="p">(</span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="n">buffer</span><span class="p">,</span><span class="w"> </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">len</span><span class="p">,</span><span class="w"> </span><span class="n">win_clr20_meta</span><span class="w"> </span><span class="o">*</span><span class="n">meta</span><span class="p">)</span><span class="w"></span>
<span class="cm">/*</span>
<span class="cm">	This will read the meta-data streams.</span>
<span class="cm">*/</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">ver_major</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">ver_minor</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">ver_strlen</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">strmcnt</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">x</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">y</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">strm_off</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">strm_size</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">		</span><span class="o">*</span><span class="n">_buffer</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="n">_buffer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">buffer</span><span class="p">;</span><span class="w"></span>

<span class="w">	</span><span class="k">if</span><span class="p">(</span><span class="n">UINT32_AT</span><span class="p">(</span><span class="n">buffer</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mh">0x424A5342</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;invalid clr metadata signature</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="n">ver_major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">UINT16_AT</span><span class="p">(</span><span class="n">buffer</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">ver_minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">UINT16_AT</span><span class="p">(</span><span class="n">buffer</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">2</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;meta data ver:%x.%x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">ver_major</span><span class="p">,</span><span class="w"> </span><span class="n">ver_minor</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="n">ASSERT</span><span class="p">((</span><span class="n">ver_major</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="p">(</span><span class="n">ver_minor</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="p">));</span><span class="w"></span>
<span class="w">		</span>
<span class="w">	</span><span class="cm">/* jump over signature, version, and reserved */</span><span class="w"></span>
<span class="w">	</span><span class="n">buffer</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* display and jump over version string */</span><span class="w"></span>
<span class="w">	</span><span class="n">ver_strlen</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">UINT32_AT</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">ASSERT</span><span class="p">((</span><span class="n">ver_strlen</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x3</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mh">0x0</span><span class="p">);</span><span class="w">			</span><span class="cm">/* has to be multiple of 4 */</span><span class="w"></span>
<span class="w">	</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;ver_strlen:%u</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">ver_strlen</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;ver:%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">buffer</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">4</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">buffer</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">ver_strlen</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span>
<span class="w">	</span><span class="cm">/* jump over flags; 16 bit field; supposed to always be zero;</span>
<span class="cm">	   but apparently it is not always zero oddly enough..</span>
<span class="cm">	ASSERT(UINT16_AT(buffer)&#160;!= 0x0); */</span><span class="w"></span>
<span class="w">	</span><span class="n">buffer</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="n">strmcnt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">UINT16_AT</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">buffer</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;MetaDataStreamCount:%u</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">strmcnt</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* read each metadata stream header */</span><span class="w"></span>
<span class="w">	</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strmcnt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strmcnt</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strms</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">win_clr20_meta_stream</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">win_clr20_meta_stream</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">strmcnt</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">strmcnt</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">x</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="cm">/* read offset and size then copy into newly allocated buffer */</span><span class="w"></span>
<span class="w">		</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;off:%x,size:%x,name:%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">UINT32_AT</span><span class="p">(</span><span class="n">buffer</span><span class="p">),</span><span class="w"> </span><span class="n">UINT32_AT</span><span class="p">(</span><span class="n">buffer</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">4</span><span class="p">),</span><span class="w"> </span><span class="n">buffer</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">8</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strms</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint8_t</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">UINT32_AT</span><span class="p">(</span><span class="n">buffer</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">4</span><span class="p">));</span><span class="w"></span>
<span class="w">		</span><span class="n">memcpy</span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strms</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">data</span><span class="p">,</span><span class="w"> </span><span class="n">_buffer</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">UINT32_AT</span><span class="p">(</span><span class="n">buffer</span><span class="p">),</span><span class="w"> </span><span class="n">UINT32_AT</span><span class="p">(</span><span class="n">buffer</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">4</span><span class="p">));</span><span class="w"></span>
<span class="w">		</span><span class="n">buffer</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="cm">/* read stream name (stop at zero byte) */</span><span class="w"></span>
<span class="w">		</span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="k">while</span><span class="p">(</span><span class="n">buffer</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mh">0x00</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="o">++</span><span class="n">y</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">		</span><span class="o">++</span><span class="n">y</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">((</span><span class="n">y</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">3</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="p">(</span><span class="o">~</span><span class="mi">3</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="n">y</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strms</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint8_t</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">memcpy</span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strms</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">buffer</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="cm">/* advance to next offset and size pair */</span><span class="w"></span>
<span class="w">		</span><span class="n">buffer</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">y</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* give each stream a home at a consistent index */</span><span class="w"></span>
<span class="w">	</span><span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strmcnt</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">x</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="k">if</span><span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strms</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;#~&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strmbyid</span><span class="p">[</span><span class="n">WIN_CLR20_META_TABLES</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strms</span><span class="p">[</span><span class="n">x</span><span class="p">];</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">		</span><span class="k">if</span><span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strms</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;#US&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strmbyid</span><span class="p">[</span><span class="n">WIN_CLR20_META_USTRINGS</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strms</span><span class="p">[</span><span class="n">x</span><span class="p">];</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">		</span><span class="k">if</span><span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strms</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;#Strings&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strmbyid</span><span class="p">[</span><span class="n">WIN_CLR20_META_STRINGS</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strms</span><span class="p">[</span><span class="n">x</span><span class="p">];</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">		</span><span class="k">if</span><span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strms</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;#Blob&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strmbyid</span><span class="p">[</span><span class="n">WIN_CLR20_META_BLOB</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strms</span><span class="p">[</span><span class="n">x</span><span class="p">];</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">		</span><span class="k">if</span><span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strms</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;#GUID&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strmbyid</span><span class="p">[</span><span class="n">WIN_CLR20_META_GUID</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strms</span><span class="p">[</span><span class="n">x</span><span class="p">];</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h2><span id="Meta-Data_.23.7E_Stream_Table_Field_Descriptions"></span><span class="mw-headline" id="Meta-Data_#~_Stream_Table_Field_Descriptions">Meta-Data #~ Stream Table Field Descriptions</span></h2>
<p>This allows us to write a function to interpret the table data that follows the
header in the #~ meta-data stream. The indexes can vary in size by what tables
they reference so we have to create a letter for each specific index which refers
to specific tables so that during run-time we can calculate the index size needed.
</p><p>In my opinion this was done to conserve space, but I am not sure.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cm">/*</span>
<span class="cm">	The best way I could think of was to create a large table</span>
<span class="cm">	that has 64 entries. Since at most with 2.0 there can be</span>
<span class="cm">	a maximum of 64 tables. At this time not all of these are</span>
<span class="cm">	used. So I only populate the indexes that are for a specific</span>
<span class="cm">	table.</span>
<span class="cm">	</span>
<span class="cm">	What I do is describe the fields in a row for each table. Since</span>
<span class="cm">	each table has different fields per row each entry is different.</span>
<span class="cm">	Also, most of the fields are index types. And since the index</span>
<span class="cm">	size can change to, apparently conserve space, I use these identifiers</span>
<span class="cm">	so that when I actually go to use them I calculate their size before</span>
<span class="cm">	hand. The &#39;1&#39;, &#39;2&#39;, and &#39;4&#39; are always this size.</span>

<span class="cm">	1 - 8 bit field</span>
<span class="cm">	2 - 16 bit field</span>
<span class="cm">	4 - 32 bit field</span>
<span class="cm">	S - index to String table</span>
<span class="cm">	G - index to GUID table</span>
<span class="cm">	R - resolution scope index (Module, ModuleRef, AssemblyRef, TypeRef)</span>
<span class="cm">	T - TypeDefOrRef index (TypeRef, TypeDef, TypeSpec)</span>
<span class="cm">	F - Field table index</span>
<span class="cm">	M - MethodDef table index</span>
<span class="cm">	B - Blob table index</span>
<span class="cm">	P - Param table index</span>
<span class="cm">	D - TypeDef table index (different from T)</span>
<span class="cm">	E - MemberRefParent index (TypeRef, ModuleRef, MethodDef, TypeSpec, TypeDef)</span>
<span class="cm">	H - HasConstant index (Param, Field, Property)</span>
<span class="cm">	C - HasCustomAttribute index (**AnyTable** Except It&#39;s Self)</span>
<span class="cm">	I - CustomAttributeType index (MethodDef, MethodRef)</span>
<span class="cm">	O - HasFieldMarshal index (Field, Param)</span>
<span class="cm">	A - HasDesclSecurityIndex (TypeDef, MethodDef, Assembly)</span>
<span class="cm">	V - Event table index</span>
<span class="cm">	Y - Property table index</span>
<span class="cm">	S - HasSemantics index (Event, Property)</span>
<span class="cm">	U - MemberForwarded index (Field, MethodDef)</span>
<span class="cm">	B - Implementation index (File, AssemblyRef, ExportedType)</span>
<span class="cm">	X - CustomAttributeType index (MethodDef, MethodRef)</span>
<span class="cm">	W - ResolutionScope index (Module, ModuleRef, AssemblyRef, TypeRef)</span>
<span class="cm">	N - ModuleRef table index</span>
<span class="cm">	J - AssemblyRef table index</span>
<span class="cm">	K - TypeOrMethodDef index (TypeDef, MethodDef)</span>
<span class="cm">	L - GenericParam table index</span>
<span class="cm">*/</span><span class="w"></span>

<span class="cm">/*</span>
<span class="cm">	This is the table&#39;s ID.</span>
<span class="cm">*/</span><span class="w"></span>
<span class="cp">#define CLR20_META_TMODULE				0</span>
<span class="cp">#define CLR20_META_TTYPEREF				1</span>
<span class="cp">#define CLR20_META_TTYPEDEF				2</span>
<span class="cp">#define CLR20_META_TFIELD				4</span>
<span class="cp">#define CLR20_META_TMETHODDEF			6</span>
<span class="cp">#define CLR20_META_TPARAM				8</span>
<span class="cp">#define CLR20_META_TIFACEIMPL			9	</span><span class="cm">/* interface implementation table */</span><span class="cp"></span>
<span class="cp">#define CLR20_META_TMEMBERREF			10</span>
<span class="cp">#define CLR20_META_TCONSTANT			11</span>
<span class="cp">#define CLR20_META_TCUSTOMATTRI			12</span>
<span class="cp">#define CLR20_META_TFIELDMARSHAL		13</span>
<span class="cp">#define CLR20_META_TDECLSECURITY		14</span>
<span class="cp">#define CLR20_META_TCLASSLAYOUT			15</span>
<span class="cp">#define CLR20_META_TFIELDLAYOUT			16</span>
<span class="cp">#define CLR20_META_TSTANDALONGSIG		17</span>
<span class="cp">#define CLR20_META_TEVENTMAP			18</span>
<span class="cp">#define CLR20_META_TEVENT				20</span>
<span class="cp">#define CLR20_META_TPROPERTY			23</span>
<span class="cp">#define CLR20_META_TMETHODSEMAN			24</span>
<span class="cp">#define CLR20_META_TMETHODIMPL			25</span>
<span class="cp">#define CLR20_META_TMODULEREF			26</span>
<span class="cp">#define CLR20_META_TIMPLMAP				28</span>
<span class="cp">#define CLR20_META_TFIELDRVA			29</span>
<span class="cp">#define CLR20_META_TASSEMBLY			32</span>
<span class="cp">#define CLR20_META_TASSEMBLYPROC		33</span>
<span class="cp">#define CLR20_META_TASSEMBLYOS			34</span>
<span class="cp">#define CLR20_META_TASSEMBLYREF			35</span>
<span class="cp">#define CLR20_META_TASSEMBLYREFPROC		36</span>
<span class="cp">#define CLR20_META_TASSEMBLYREFOS		37</span>
<span class="cp">#define CLR20_META_TFILE				38</span>
<span class="cp">#define CLR20_META_TEXPORTEDTYPE		39</span>
<span class="cp">#define CLR20_META_TMANIFESTRES			40</span>
<span class="cp">#define CLR20_META_TNESTEDCLASS			41</span>
<span class="cp">#define CLR20_META_TGENERICPARAM		42</span>
<span class="cp">#define CLR20_META_TGENERICPARAMCONST	44	</span><span class="cm">/* generic parameter contraint */</span><span class="cp"></span>
<span class="cp">#define CLR20_META_TPROPERTYMAP			21</span>
<span class="cp">#define CLR20_META_TTYPESPEC			27</span>
<span class="cp">#define CLR20_META_TMETHODREF			63	</span><span class="cm">/* WHERE IS THIS ONE??? */</span><span class="cp"></span>

<span class="cm">/*</span>
<span class="cm">	This is the field description structure. It is created at</span>
<span class="cm">	compile time and is accessed during run-time to determine</span>
<span class="cm">	the row length so that it can be copied into a more suitable</span>
<span class="cm">	structure for dynamic access.</span>
<span class="cm">*/</span><span class="w"></span>
<span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="n">WIN_CLR20_META_TFIELDS</span><span class="p">[</span><span class="mi">64</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TMODULE</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 			</span><span class="s">&quot;2SGGG&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TTYPEREF</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 		</span><span class="s">&quot;RSS&quot;</span><span class="p">,</span><span class="w">			</span><span class="cm">/* META_TTYPEREF */</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TTYPEDEF</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 		</span><span class="s">&quot;4SSTFM&quot;</span><span class="p">,</span><span class="w">		</span><span class="cm">/* META_TTYPEDEF */</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TFIELD</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 			</span><span class="s">&quot;2SB&quot;</span><span class="p">,</span><span class="w">			</span><span class="cm">/* META_TFIELD */</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TMETHODDEF</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 		</span><span class="s">&quot;422SBP&quot;</span><span class="p">,</span><span class="w">		</span><span class="cm">/* META_TMETHODDEF */</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TPARAM</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 			</span><span class="s">&quot;22S&quot;</span><span class="p">,</span><span class="w">			</span><span class="cm">/* META_TPARAM */</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TIFACEIMPL</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 		</span><span class="s">&quot;DT&quot;</span><span class="p">,</span><span class="w">			</span><span class="cm">/* META_TIFACEIMPL */</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TMEMBERREF</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 		</span><span class="s">&quot;ESB&quot;</span><span class="p">,</span><span class="w">			</span><span class="cm">/* META_TMEMBERREF */</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TCONSTANT</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 		</span><span class="s">&quot;11HB&quot;</span><span class="p">,</span><span class="w">			</span><span class="cm">/* META_TCONSTANT */</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TCUSTOMATTRI</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 	</span><span class="s">&quot;CIB&quot;</span><span class="p">,</span><span class="w">			</span><span class="cm">/* META_TCUSTOMATTRI */</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TFIELDMARSHAL</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 	</span><span class="s">&quot;OB&quot;</span><span class="p">,</span><span class="w">			</span><span class="cm">/* META_TFIELDMARSHAL */</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TDECLSECURITY</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 	</span><span class="s">&quot;2AB&quot;</span><span class="p">,</span><span class="w">			</span><span class="cm">/* META_TDECLSECURITY */</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TCLASSLAYOUT</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 	</span><span class="s">&quot;24D&quot;</span><span class="p">,</span><span class="w"> 			</span><span class="cm">/* META_TCLASSLAYOUT */</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TFIELDLAYOUT</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 	</span><span class="s">&quot;4F&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TSTANDALONGSIG</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w">	</span><span class="s">&quot;B&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TEVENTMAP</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 		</span><span class="s">&quot;DV&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TEVENT</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 			</span><span class="s">&quot;2ST&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TPROPERTYMAP</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w">		</span><span class="s">&quot;DY&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TPROPERTY</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w">		</span><span class="s">&quot;2SB&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TMETHODSEMAN</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w">		</span><span class="s">&quot;2MS&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TMETHODIMPL</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 		</span><span class="s">&quot;DII&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TMODULEREF</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w">		</span><span class="s">&quot;S&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TTYPESPEC</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w">		</span><span class="s">&quot;B&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TIMPLMAP</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w">			</span><span class="s">&quot;2USN&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TFIELDRVA</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w">		</span><span class="s">&quot;4F&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TASSEMBLY</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 		</span><span class="s">&quot;422224BSS&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TASSEMBLYPROC</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w">	</span><span class="s">&quot;4&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TASSEMBLYOS</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 		</span><span class="s">&quot;444&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TASSEMBLYREF</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 	</span><span class="s">&quot;22224BSSB&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TASSEMBLYREFPROC</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;4J&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TASSEMBLYREFOS</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 	</span><span class="s">&quot;444J&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TFILE</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 			</span><span class="s">&quot;4SB&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TEXPORTEDTYPE</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 	</span><span class="s">&quot;44SSB&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TMANIFESTRES</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 	</span><span class="s">&quot;44SB&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TNESTEDCLASS</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> 	</span><span class="s">&quot;DD&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TGENERICPARAM</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w">	</span><span class="s">&quot;22KS&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="p">[</span><span class="n">CLR20_META_TGENERICPARAMCONST</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;LT&quot;</span><span class="w"></span>
<span class="p">};</span><span class="w"></span>
</pre></div>
<h2><span id="Reading_Meta-Data_.23.7E_Stream_Tables"></span><span class="mw-headline" id="Reading_Meta-Data_#~_Stream_Tables">Reading Meta-Data #~ Stream Tables</span></h2>
<p>A wise point to note is that although the code below can handle all the
major tables defined by the ECMA-335 standard for the CLI there do exist
other tables that can be present which may not be standard. If one of these
tables exists then the code below may fail and measures should be taken
to catch this situation. I have included a comment at the bottom of this
function which shows where this check needs to be. Since if this unknown
table happens between some known tables then there is no way that I know
of to skip it because you have to know the size of each row to know it's
total size.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">int</span><span class="w"> </span><span class="nf">cilvm_clr_meta_tread</span><span class="p">(</span><span class="n">win_clr20_meta</span><span class="w"> </span><span class="o">*</span><span class="n">meta</span><span class="p">)</span><span class="w"></span>
<span class="cm">/*	</span>
<span class="cm">	Processes the CLR meta-data by inflating the table stream </span>
<span class="cm">	into a binary structure which can be more easily accessed </span>
<span class="cm">	later.</span>
<span class="cm">	</span>
<span class="cm">	All of the meta-data is stored in a stream like format. It</span>
<span class="cm">	is difficult to randomly access the data in this format as</span>
<span class="cm">	it lacks any block like structure. This function will read</span>
<span class="cm">	the stream and create a block like structure which can be</span>
<span class="cm">	easily accessed in a random manner.	</span>
<span class="cm">*/</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">		</span><span class="n">x</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">		</span><span class="n">y</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">		</span><span class="n">z</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">		</span><span class="n">w</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">		</span><span class="n">v</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w"> 		</span><span class="o">*</span><span class="n">tbuf</span><span class="p">;</span><span class="w">			</span><span class="cm">/* table stream buffer */</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">			</span><span class="n">ver_major</span><span class="p">;</span><span class="w">		</span><span class="cm">/* major version */</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">			</span><span class="n">ver_minor</span><span class="p">;</span><span class="w">		</span><span class="cm">/* minor version */</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">			</span><span class="n">fsize</span><span class="p">[</span><span class="mi">26</span><span class="p">];</span><span class="w">		</span><span class="cm">/* field size for each type in bytes */</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="n">memset</span><span class="p">(</span><span class="n">fsize</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="k">sizeof</span><span class="p">(</span><span class="n">fsize</span><span class="p">));</span><span class="w"></span>
<span class="w">	</span><span class="n">memset</span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="k">sizeof</span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">));</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* We are going to convert the stream into a structure */</span><span class="w">	</span>
<span class="w">	</span><span class="n">tbuf</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">strmbyid</span><span class="p">[</span><span class="n">WIN_CLR20_META_TABLES</span><span class="p">].</span><span class="n">data</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* The first DWORD is supposed to be reserved and zero. */</span><span class="w"></span>
<span class="w">	</span><span class="n">ASSERT</span><span class="p">(</span><span class="n">UINT32_AT</span><span class="p">(</span><span class="n">tbuf</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">tbuf</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* The major and minor version. */</span><span class="w"></span>
<span class="w">	</span><span class="n">ver_major</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">UINT8_AT</span><span class="p">(</span><span class="n">tbuf</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">ver_minor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">UINT8_AT</span><span class="p">(</span><span class="n">tbuf</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">tbuf</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* http://ntcore.com/files/dotnetformat.htm</span>
<span class="cm">	   The heap offset sizes. This field is very important, it&#39;s a byte that </span>
<span class="cm">	   tells us the size that indexes into the &quot;#String&quot;, &quot;#GUID&quot; and &quot;#Blob&quot; </span>
<span class="cm">	   streams will have. I paste you the description and the bit mask from </span>
<span class="cm">	   the SDK </span>
<span class="cm">	   </span>
<span class="cm">		Bit mask	Description</span>
<span class="cm">		0x01		Size of “#String” stream &gt;= 2^16.</span>
<span class="cm">		0x02		Size of “#GUID” stream &gt;= 2^16</span>
<span class="cm">		0x04		Size of “#Blob” stream &gt;= 2^16.</span>
<span class="cm">		</span>
<span class="cm">		If zero index are 16 bits and if one index are 32 bits.</span>
<span class="cm">	*/</span><span class="w"></span>
<span class="w">	</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">heapoffsetsizes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">UINT8_AT</span><span class="p">(</span><span class="n">tbuf</span><span class="o">++</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* Reserved byte which should be zero.. */</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* ASSERT(UINT8_AT(tbuf) == 0); */</span><span class="w"></span>
<span class="w">	</span><span class="o">++</span><span class="n">tbuf</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/*  http://ntcore.com/files/dotnetformat.htm</span>
<span class="cm">	    It&#39;s a bitmask-qword that tells us which MetaData Tables are present in</span>
<span class="cm">	    the assembly. Of course, since this is a qword the maximum number of </span>
<span class="cm">	    tables is 64. However, most of the tables aren&#39;t defined yet. So, the</span>
<span class="cm">	    high bits of this qword are always 0.</span>
<span class="cm">	*/</span><span class="w"></span>
<span class="w">	</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">valid</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">UINT32_AT</span><span class="p">(</span><span class="n">tbuf</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">valid</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">UINT32_AT</span><span class="p">(</span><span class="n">tbuf</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">4</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">tbuf</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">8</span><span class="p">;</span><span class="w"></span>

<span class="w">	</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;TablesValid:%04x%04x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">valid</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">valid</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span><span class="w"></span>

<span class="w">	</span><span class="cm">/*  Also a bitmask-qword. It tells us which tables are sorted. */</span><span class="w"></span>
<span class="w">	</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">sorted</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">UINT32_AT</span><span class="p">(</span><span class="n">tbuf</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">sorted</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">UINT32_AT</span><span class="p">(</span><span class="n">tbuf</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">4</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">tbuf</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">8</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/*  http://ntcore.com/files/dotnetformat.htm</span>
<span class="cm">	    Following there&#39;s an array of dwords with the number of rows for each </span>
<span class="cm">	    present table. Ok this has to be explained. For every table there can</span>
<span class="cm">	    be n rows. Let&#39;s say we have three tables: A, B and C. And the Valid </span>
<span class="cm">	    mask tells us that the B table is not present, but A and C are. In </span>
<span class="cm">	    this case there will be 2 dwords (not three), one for the rows in the </span>
<span class="cm">	    A table and one for the C table. The B table rows are skipped since </span>
<span class="cm">	    there is no B table in the assembly.</span>
<span class="cm">	*/</span><span class="w"></span>
<span class="w">	</span><span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">y</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">32</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">x</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="k">if</span><span class="p">(((</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">valid</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x1</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mh">0x1</span><span class="p">)</span><span class="w"></span>
<span class="w">			</span><span class="p">{</span><span class="w"></span>
<span class="w">				</span><span class="cm">/* This table is present. */</span><span class="w"></span>
<span class="w">				</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Table[%u] Present With %u Rows</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">32</span><span class="p">),</span><span class="w"> </span><span class="n">UINT32_AT</span><span class="p">(</span><span class="n">tbuf</span><span class="p">));</span><span class="w"></span>
<span class="w">				</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">x</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">32</span><span class="p">)].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">UINT32_AT</span><span class="p">(</span><span class="n">tbuf</span><span class="p">);</span><span class="w"></span>
<span class="w">				</span><span class="n">tbuf</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span><span class="w"></span>
<span class="w">			</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="w"></span>
<span class="w">				</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">x</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">32</span><span class="p">)].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">			</span><span class="p">}</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* I need to calculate the size of any indexes that are used by</span>
<span class="cm">	   the dynamic field format table defined during compile-time.</span>
<span class="cm">	   Once the size of these indexes are defined then we can continue</span>
<span class="cm">	   by loading the actual data for the meta-data tables.</span>
<span class="cm">	*/</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;1&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;2&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;4&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* Either a 4 byte or 2 byte index needed depending on bit set. */</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;S&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">heapoffsetsizes</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">CLR20_META_HEAPOFFSETSIZES_STRING</span><span class="p">)</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;G&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">heapoffsetsizes</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">CLR20_META_HEAPOFFSETSIZES_GUID</span><span class="p">)</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;B&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">heapoffsetsizes</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">CLR20_META_HEAPOFFSETSIZES_BLOB</span><span class="p">)</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* We or the row counts and if we have left something larger than</span>
<span class="cm">	   0xffff then this means that one of the tables is needs a 32 bit</span>
<span class="cm">	   index instead of a 16 bit one.</span>
<span class="cm">	*/</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;R&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TMODULE</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				 </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TMODULEREF</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				 </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TASSEMBLYREF</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				 </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TTYPEREF</span><span class="p">].</span><span class="n">rowcnt</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;T&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TTYPEREF</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TTYPEDEF</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TTYPESPEC</span><span class="p">].</span><span class="n">rowcnt</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;F&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TFIELD</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;M&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TMETHODDEF</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;P&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TPARAM</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;D&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TTYPEDEF</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;E&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TTYPEREF</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TMODULEREF</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TMETHODDEF</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TTYPESPEC</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TTYPEDEF</span><span class="p">].</span><span class="n">rowcnt</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;H&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TPARAM</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TFIELD</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TPROPERTY</span><span class="p">].</span><span class="n">rowcnt</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* A bit of a special case here. It can reference any table but it&#39;s self. */</span><span class="w"></span>
<span class="w">	</span><span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">64</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">x</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">CLR20_META_TCUSTOMATTRI</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">rowcnt</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;C&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* Oddly, the document says there is a MethodRef table? Where? If there</span>
<span class="cm">	   does exist one then it should be considered for &#39;K&#39; here. Since at</span>
<span class="cm">	   the moment I have no idea what to do but just ignore it.</span>
<span class="cm">	*/</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;I&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TMETHODDEF</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TMETHODREF</span><span class="p">].</span><span class="n">rowcnt</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;O&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TFIELD</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TPARAM</span><span class="p">].</span><span class="n">rowcnt</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;A&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TTYPEDEF</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TMETHODDEF</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TASSEMBLY</span><span class="p">].</span><span class="n">rowcnt</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;V&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TEVENT</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;Y&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TPROPERTY</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;S&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TEVENT</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TPROPERTY</span><span class="p">].</span><span class="n">rowcnt</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;U&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TFIELD</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TMETHODDEF</span><span class="p">].</span><span class="n">rowcnt</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;B&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TFILE</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TASSEMBLYREF</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TEXPORTEDTYPE</span><span class="p">].</span><span class="n">rowcnt</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;X&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TMETHODDEF</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TMETHODREF</span><span class="p">].</span><span class="n">rowcnt</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;W&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TMODULE</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TMODULEREF</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TASSEMBLYREF</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				  </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TTYPEREF</span><span class="p">].</span><span class="n">rowcnt</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;N&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TMODULEREF</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;J&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TASSEMBLYREF</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;K&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TTYPEDEF</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">				 </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TMETHODDEF</span><span class="p">].</span><span class="n">rowcnt</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">fsize</span><span class="p">[</span><span class="sc">&#39;L&#39;</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TGENERICPARAM</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xffff</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* http://ntcore.com/files/dotnetformat.htm</span>
<span class="cm">	   As you can see, some numbers are missing, that&#39;s because some tables, </span>
<span class="cm">	   as I said before, are not defined yet. It&#39;s important you understand </span>
<span class="cm">	   how the tables are stored. A table is made of an array of rows; a row </span>
<span class="cm">	   is a structure (let&#39;s call it this way for the moment to make things </span>
<span class="cm">	   easier). After the rows of a given table end, the rows of the next </span>
<span class="cm">	   table follow. The problem with a row (remember, think of it like a </span>
<span class="cm">	   structure) is that some of its fields aren&#39;t always of the same size </span>
<span class="cm">	   and they change from assembly to assembly, so you have to calculate </span>
<span class="cm">	   them dynamically.</span>
<span class="cm">	*/</span><span class="w"></span>
<span class="w">	</span><span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">y</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">32</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">x</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="k">if</span><span class="p">(((</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">valid</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x1</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mh">0x1</span><span class="p">)</span><span class="w"></span>
<span class="w">			</span><span class="p">{</span><span class="w"></span>
<span class="w">				</span><span class="cm">/* the table identifier */</span><span class="w"></span>
<span class="w">				</span><span class="n">w</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">32</span><span class="p">);</span><span class="w"></span>
<span class="w">                                </span><span class="cm">/* </span>
<span class="cm">                                   Here is where a check needs</span>
<span class="cm">                                   to be made to ensure that</span>
<span class="cm">                                   this is not a unknown table. </span>

<span class="cm">                                   A unknown table will have no</span>
<span class="cm">                                   row field string so you might</span>
<span class="cm">                                   also get a crash here...</span>
<span class="cm">                                */</span><span class="w"></span>
<span class="w">				</span><span class="cm">/* calculate the size of each row */</span><span class="w"></span>
<span class="w">				</span><span class="k">for</span><span class="p">(</span><span class="n">z</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">WIN_CLR20_META_TFIELDS</span><span class="p">[</span><span class="n">w</span><span class="p">][</span><span class="n">z</span><span class="p">]</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">z</span><span class="p">);</span><span class="w"></span>
<span class="w">				</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">w</span><span class="p">].</span><span class="n">fsize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint8_t</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">z</span><span class="p">);</span><span class="w"></span>
<span class="w">				</span><span class="k">for</span><span class="p">(</span><span class="n">v</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">z</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">WIN_CLR20_META_TFIELDS</span><span class="p">[</span><span class="n">w</span><span class="p">][</span><span class="n">z</span><span class="p">]</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">z</span><span class="p">)</span><span class="w"></span>
<span class="w">				</span><span class="p">{</span><span class="w"></span>
<span class="w">					</span><span class="n">v</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">fsize</span><span class="p">[</span><span class="n">WIN_CLR20_META_TFIELDS</span><span class="p">[</span><span class="n">w</span><span class="p">][</span><span class="n">z</span><span class="p">]];</span><span class="w"></span>
<span class="w">					</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">w</span><span class="p">].</span><span class="n">fsize</span><span class="p">[</span><span class="n">z</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fsize</span><span class="p">[</span><span class="n">WIN_CLR20_META_TFIELDS</span><span class="p">[</span><span class="n">w</span><span class="p">][</span><span class="n">z</span><span class="p">]];</span><span class="w"></span>
<span class="w">				</span><span class="p">}</span><span class="w"></span>
<span class="w">				</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">w</span><span class="p">].</span><span class="n">fcnt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">z</span><span class="p">;</span><span class="w"></span>
<span class="w">				</span><span class="cm">/* read the number of rows specified by row size */</span><span class="w"></span>
<span class="w">				</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">w</span><span class="p">].</span><span class="n">rsize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">v</span><span class="p">;</span><span class="w"></span>
<span class="w">				</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">w</span><span class="p">].</span><span class="n">rows</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint8_t</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">w</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">v</span><span class="p">);</span><span class="w"></span>
<span class="w">				</span><span class="n">memcpy</span><span class="p">(</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">w</span><span class="p">].</span><span class="n">rows</span><span class="p">,</span><span class="w"> </span><span class="n">tbuf</span><span class="p">,</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">w</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">v</span><span class="p">);</span><span class="w"></span>
<span class="w">				</span><span class="n">tbuf</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">w</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">v</span><span class="p">;</span><span class="w"></span>
<span class="w">				</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;read %u rows of %u bytes each for a total of %u.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span>
<span class="w">						</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">w</span><span class="p">].</span><span class="n">rowcnt</span><span class="p">,</span><span class="w"> </span><span class="n">v</span><span class="p">,</span><span class="w"> </span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">w</span><span class="p">].</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">v</span><span class="p">);</span><span class="w"></span>
<span class="w">			</span><span class="p">}</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>The tables have now been read into their own structure. The data for all the rows is pointed to by meta-&gt;tables[w].rows.
</p>
<h2><span class="mw-headline" id="Meta-Data_Method_Definition_Table_Field_Indexes">Meta-Data Method Definition Table Field Indexes</span></h2>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cm">/*</span>
<span class="cm">	ECMA-335 4th Edition Section 22</span>
<span class="cm">	Table Field Indexes</span>

<span class="cm">	These are the actual index of each</span>
<span class="cm">	field in the row for each table denoted.</span>

<span class="cm">	Although, each field has a certain size</span>
<span class="cm">	and most index type fields can actually</span>
<span class="cm">	vary in size from one module to the next.</span>

<span class="cm">	This normally serves as a constant to pass</span>
<span class="cm">	to the actual helper function which can</span>
<span class="cm">	access fields in a specified table and row.</span>

<span class="cm">	So now you have a textual name to reference</span>
<span class="cm">	instead of having to remember arbitray index.</span>
<span class="cm">*/</span><span class="w"></span>
<span class="cp">#define CLR20_TASSEMBLY_HASHALGID		0</span>
<span class="cp">#define CLR20_TASSEMBLY_VERMAJOR		1</span>
<span class="cp">#define CLR20_TASSEMBLY_VERMINOR		2</span>
<span class="cp">#define CLR20_TASSEMBLY_BUILDNUM		3</span>
<span class="cp">#define CLR20_TASSEMBLY_REVISION		4</span>
<span class="cp">#define CLR20_TASSEMBLY_PUBLICKEY		5</span>
<span class="cp">#define CLR20_TASSEMBLY_NAME			6</span>
<span class="cp">#define CLR20_TASSEMBLY_CULTURE			7</span>
<span class="cp">#define CLR20_TASSEMBLYOS_OSPLATFORMID		0</span>
<span class="cp">#define CLR20_TASSEMBLYOS_OSMAJORVERSION	1</span>
<span class="cp">#define CLR20_TASSEMBLYOS_OSMINORVERSION	2</span>
<span class="cp">#define CLR20_TASSEMBLYPROC_PROCESSOR		0</span>
<span class="cp">#define CLR20_TASSEMBLYREF_VERMAJOR		0</span>
<span class="cp">#define CLR20_TASSEMBLYREF_VERMINOR		1</span>
<span class="cp">#define CLR20_TASSEMBLYREF_BUILDNUM		2</span>
<span class="cp">#define CLR20_TASSEMBLYREF_REVISION		3</span>
<span class="cp">#define CLR20_TASSEMBLYREFOS_OSPLATFORMID	0</span>
<span class="cp">#define CLR20_TASSEMBLYREFOS_OSVERMAJOR		1</span>
<span class="cp">#define CLR20_TASSEMBLYREFOS_OSVERMINOR		2</span>
<span class="cp">#define CLR20_TASSEMBLYREFOS_ASSEMBLYREF	3</span>
<span class="cp">#define CLR20_TASSEMBLYREFPROC_PROCESSOR	0</span>
<span class="cp">#define CLR20_TASSEMBLYREFPROC_ASSEMBLYREF	1</span>
<span class="cp">#define CLR20_TCLASSLAYOUT_PACKINGSIZE		0</span>
<span class="cp">#define CLR20_TCLASSLAYOUT_CLASSSIZE		1</span>
<span class="cp">#define CLR20_TCLASSLAYOUT_PARENT		2</span>
<span class="cp">#define CLR20_TCONSTANT_TYPE			0</span>
<span class="cp">#define CLR20_TCONSTANT_PARENT			1</span>
<span class="cp">#define CLR20_TCONSTANT_VALUE			2</span>
<span class="cp">#define CLR20_TCUSTOMATTRI_PARENT		0</span>
<span class="cp">#define CLR20_TCUSTOMATTRI_TYPE			1</span>
<span class="cp">#define CLR20_TCUSTOMATTRI_VALUE		2</span>
<span class="cp">#define CLR20_TDECLSECURITY_ACTION		0</span>
<span class="cp">#define CLR20_TDECLSECURITY_PARENT		1</span>
<span class="cp">#define CLR20_TDECLSECURITY_PERMISSIONSET	2</span>
<span class="cp">#define CLR20_TEVENTMAP_PARENT			0</span>
<span class="cp">#define CLR20_TEVENTMAP_EVENTLIST		1</span>
<span class="cp">#define CLR20_TEXPORTEDTYPE_FLAGS		0</span>
<span class="cp">#define CLR20_TEXPORTEDTYPE_TYPEDEFID		1</span>
<span class="cp">#define CLR20_TEXPORTEDTYPE_TYPENAME		2</span>
<span class="cp">#define CLR20_TEXPORTEDTYPE_TYPENAMESPACE	3</span>
<span class="cp">#define CLR20_TEXPORTEDTYPE_IMPLEMENTATION	4</span>
<span class="cp">#define CLR20_TFIELD_FLAGS			0</span>
<span class="cp">#define CLR20_TFIELD_NAME			1</span>
<span class="cp">#define CLR20_TFIELD_SIGNATURE			2</span>
<span class="cp">#define CLR20_TFIELDLAYOUT_OFFSET		0</span>
<span class="cp">#define CLR20_TFIELDLAYOUT_FIELD		1</span>
<span class="cp">#define CLR20_TFIELDMARSHAL_PARENT		0</span>
<span class="cp">#define CLR20_TFIELDMARSHAL_NATIVETYPE		1</span>
<span class="cp">#define CLR20_TFIELDRVA_RVA			0</span>
<span class="cp">#define CLR20_TFIELDRVA_FIELD			1</span>
<span class="cp">#define CLR20_TFILE_FLAGS			0</span>
<span class="cp">#define CLR20_TFILE_NAME			1</span>
<span class="cp">#define CLR20_TFILE_HASHVALUE			2</span>
<span class="cp">#define CLR20_TGENERICPARAM_NUMBER		0</span>
<span class="cp">#define CLR20_TGENERICPARAM_FLAGS		1</span>
<span class="cp">#define CLR20_TGENERICPARAM_OWNER		2</span>
<span class="cp">#define CLR20_TGENERICPARAM_NAME		3</span>
<span class="cp">#define CLR20_TGENERICPARAMCONST_OWNER		0</span>
<span class="cp">#define CLR20_TGENERICPARAMCONST_CONSTRAINT	1</span>
<span class="cp">#define CLR20_TIMPLMAP_MAPPINGFLAGS		0</span>
<span class="cp">#define CLR20_TIMPLMAP_MEMBERFORWARDED		1</span>
<span class="cp">#define CLR20_TIMPLMAP_IMPORTNAME		2</span>
<span class="cp">#define CLR20_TIMPLMAP_IMPORTSCOPE		3</span>
<span class="cp">#define CLR20_TIFACEIMPL_CLASS			0</span>
<span class="cp">#define CLR20_TIFACEIMPL_INTERFACE		1</span>
<span class="cp">#define CLR20_TMANIFESTRES_OFFSET		0</span>
<span class="cp">#define CLR20_TMANIFESTRES_FLAGS		1</span>
<span class="cp">#define CLR20_TMANIFESTRES_NAME			2</span>
<span class="cp">#define CLR20_TMANIFESTRES_IMPLEMENTATION	3</span>
<span class="cp">#define CLR20_TMEMBERREF_CLASS			0</span>
<span class="cp">#define CLR20_TMEMBERREF_NAME			1</span>
<span class="cp">#define CLR20_TMEMBERREF_SIGNATURE		2</span>
<span class="cp">#define CLR20_TMETHODDEF_RVA			0</span>
<span class="cp">#define CLR20_TMETHODDEF_IMPLFLAGS		1</span>
<span class="cp">#define CLR20_TMETHODDEF_FLAGS			2</span>
<span class="cp">#define CLR20_TMETHODDEF_NAME			3</span>
<span class="cp">#define CLR20_TMETHODDEF_SIGNATURE		4</span>
<span class="cp">#define CLR20_TMETHODDEF_PARAMLIST		5</span>
<span class="cp">#define CLR20_TMETHODIMPL_CLASS			0</span>
<span class="cp">#define CLR20_TMETHODIMPL_METHODBODY		1</span>
<span class="cp">#define CLR20_TMETHODIMPL_METHODDECLARATION	2</span>
<span class="cp">#define CLR20_TMETHODSEMAN_SEMANTICS		0</span>
<span class="cp">#define CLR20_TMETHODSEMAN_METHOD		1</span>
<span class="cp">#define CLR20_TMETHODSEMAN_ASSOCIATION		2</span>
<span class="cp">#define CLR20_TMETHODSPEC_METHOD		0</span>
<span class="cp">#define CLR20_TMETHODSPEC_INSTANTIATION		1</span>
<span class="cp">#define CLR20_TMODULE_GENERATION		0</span>
<span class="cp">#define CLR20_TMODULE_NAME			1</span>
<span class="cp">#define CLR20_TMODULE_MVID			2</span>
<span class="cp">#define CLR20_TMODULE_ENCID			3</span>
<span class="cp">#define CLR20_TMODULE_ENCBASEID			4</span>
<span class="cp">#define CLR20_TMODULEREF_NAME			0</span>
<span class="cp">#define CLR20_TNESTEDCLASS_NESTEDCLASS		0</span>
<span class="cp">#define CLR20_TNESTEDCLASS_ENCLOSINGCLASS	1</span>
<span class="cp">#define CLR20_TPARAM_FLAGS			0</span>
<span class="cp">#define CLR20_TPARAM_SEQUENCE			1</span>
<span class="cp">#define CLR20_TPARAM_NAME			2</span>
<span class="cp">#define CLR20_TPROPERTY_FLAGS			0</span>
<span class="cp">#define CLR20_TPROPERTY_NAME			1</span>
<span class="cp">#define CLR20_TPROPERTY_TYPE			2</span>
<span class="cp">#define CLR20_TPROPERTYMAP_PARENT		0</span>
<span class="cp">#define CLR20_TPROPERTYMAP_PROPERTYLIST		1</span>
<span class="cp">#define CLR20_TSTANDALONGSIG_SIGNATURE		0</span>
<span class="cp">#define CLR20_TTYPEDEF_FLAGS			0</span>
<span class="cp">#define CLR20_TTYPEDEF_TYPENAME			1</span>
<span class="cp">#define CLR20_TTYPEDEF_TYPENAMESPACE		2</span>
<span class="cp">#define CLR20_TTYPEDEF_EXTENDS			3</span>
<span class="cp">#define CLR20_TTYPEDEF_FIELDLIST		4</span>
<span class="cp">#define CLR20_TTYPEDEF_METHODLIST		5</span>
<span class="cp">#define CLR20_TTYPEREF_RESOLUTIONSCOPE		0</span>
<span class="cp">#define CLR20_TTYPEREF_TYPENAME			1</span>
<span class="cp">#define CLR20_TTYPEREF_TYPENAMESPACE		2</span>
<span class="cp">#define CLR20_TTYPESPEC_SIGNATURE		0</span>
</pre></div>
<h2><span class="mw-headline" id="Displaying_The_Method_Definition_Table">Displaying The Method Definition Table</span></h2>
<p>Now that you have located the PE32 headers which allowed you to find the CLR run-time header which you then used to
read the meta-data streams and finally the meta-data tables from the #~ stream you can now display the method definition
table.
</p><p>I wrote a utility function to access a row and field in each table. The function works like below:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="w">	</span><span class="n">win_clr20_meta_table</span><span class="w">	</span><span class="o">*</span><span class="n">tmp</span><span class="p">;</span><span class="w"></span>

<span class="w">	</span><span class="n">tmp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TMETHODDEF</span><span class="p">];</span><span class="w"></span>
<span class="w">	</span><span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">tmp</span><span class="o">-&gt;</span><span class="n">rowcnt</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">x</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">td</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tmp</span><span class="o">-&gt;</span><span class="n">rows</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">tmp</span><span class="o">-&gt;</span><span class="n">rsize</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">cilvm_clr_treadrowfield</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">CLR20_TMETHODDEF_RVA</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">z</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;rva:%x &quot;</span><span class="p">,</span><span class="w"> </span><span class="n">z</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">cilvm_clr_treadrowfield</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">CLR20_TMETHODDEF_IMPLFLAGS</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">z</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;implflags:%x &quot;</span><span class="p">,</span><span class="w"> </span><span class="n">z</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">cilvm_clr_treadrowfield</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">CLR20_TMETHODDEF_FLAGS</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">z</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;flags:%x &quot;</span><span class="p">,</span><span class="w"> </span><span class="n">z</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">cilvm_clr_treadrowfield</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">CLR20_TMETHODDEF_NAME</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">z</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Name:%x &quot;</span><span class="p">,</span><span class="w"> </span><span class="n">z</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">cilvm_clr_treadrowfield</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">CLR20_TMETHODDEF_SIGNATURE</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">z</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Signature:%x &quot;</span><span class="p">,</span><span class="w"> </span><span class="n">z</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">cilvm_clr_treadrowfield</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">CLR20_TMETHODDEF_PARAMLIST</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">z</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;ParamList:%x &quot;</span><span class="p">,</span><span class="w"> </span><span class="n">z</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
</pre></div>
<p>But, looks like this:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">int</span><span class="w"> </span><span class="nf">cilvm_clr_treadrowfield</span><span class="p">(</span><span class="n">win_clr20_meta_table</span><span class="w"> </span><span class="o">*</span><span class="n">table</span><span class="p">,</span><span class="w"> </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">rndx</span><span class="p">,</span><span class="w"> </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">fndx</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">ret</span><span class="p">)</span><span class="w"></span>
<span class="cm">/*</span>
<span class="cm">	This will read a field and row both specified by an index starting from zero.</span>
<span class="cm">	</span>
<span class="cm">	To check this function for success you should ensure that the return value is non-zero. This</span>
<span class="cm">	function may fail if you try to access past the last row or last field. Or, somehow pass a</span>
<span class="cm">	negative index.</span>
<span class="cm">*/</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">		</span><span class="n">x</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">		</span><span class="o">*</span><span class="n">o</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="k">if</span><span class="p">(</span><span class="n">rndx</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">table</span><span class="o">-&gt;</span><span class="n">rowcnt</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="n">o</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">table</span><span class="o">-&gt;</span><span class="n">rows</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">rsize</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">rndx</span><span class="p">);</span><span class="w"></span>

<span class="w">	</span><span class="k">if</span><span class="p">(</span><span class="n">fndx</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">table</span><span class="o">-&gt;</span><span class="n">fcnt</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">fndx</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">x</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">o</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">table</span><span class="o">-&gt;</span><span class="n">fsize</span><span class="p">[</span><span class="n">x</span><span class="p">];</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="n">memcpy</span><span class="p">(</span><span class="n">ret</span><span class="p">,</span><span class="w"> </span><span class="n">o</span><span class="p">,</span><span class="w"> </span><span class="n">table</span><span class="o">-&gt;</span><span class="n">fsize</span><span class="p">[</span><span class="n">fndx</span><span class="p">]);</span><span class="w"></span>
<span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="Display_Name_And_Signature_For_Each_Method_Defintion">Display Name And Signature For Each Method Defintion</span></h2>
<p>You can also easily display the method definition name, signature, and find the chunk (section) by getting
a pointer to where the method is located in the chunk.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="w">	</span><span class="kt">uint32_t</span><span class="w">				</span><span class="n">x</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">				</span><span class="n">y</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">				</span><span class="n">z</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">win_clr20_meta_table</span><span class="w">	</span><span class="o">*</span><span class="n">tmp</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">					</span><span class="o">*</span><span class="n">mptr</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="n">tmp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">clrmodule</span><span class="o">-&gt;</span><span class="n">meta</span><span class="p">.</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TMETHODDEF</span><span class="p">];</span><span class="w"></span>
<span class="w">	</span><span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">tmp</span><span class="o">-&gt;</span><span class="n">rowcnt</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">x</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w">	</span>
<span class="w">		</span><span class="cm">/* find the name */</span><span class="w"></span>
<span class="w">		</span><span class="n">cilvm_clr_treadrowfield</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">CLR20_TMETHODDEF_NAME</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">z</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">mptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">clrmodule</span><span class="o">-&gt;</span><span class="n">meta</span><span class="p">.</span><span class="n">strmbyid</span><span class="p">[</span><span class="n">WIN_CLR20_META_STRINGS</span><span class="p">].</span><span class="n">data</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">mptr</span><span class="p">[</span><span class="n">z</span><span class="p">]);</span><span class="w"></span>
<span class="w">		</span>
<span class="w">		</span><span class="cm">/* find the signature */</span><span class="w"></span>
<span class="w">		</span><span class="n">cilvm_clr_treadrowfield</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">CLR20_TMETHODDEF_SIGNATURE</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">z</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">mptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">clrmodule</span><span class="o">-&gt;</span><span class="n">meta</span><span class="p">.</span><span class="n">strmbyid</span><span class="p">[</span><span class="n">WIN_CLR20_META_BLOB</span><span class="p">].</span><span class="n">data</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;siglen:%x</span><span class="se">\n</span><span class="s">sig:&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">mptr</span><span class="p">[</span><span class="n">z</span><span class="p">]);</span><span class="w"> </span>
<span class="w">		</span><span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">mptr</span><span class="p">[</span><span class="n">z</span><span class="p">];</span><span class="w"> </span><span class="o">++</span><span class="n">y</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%02x-&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">mptr</span><span class="p">[</span><span class="n">z</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">y</span><span class="p">]);</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">		</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span>
<span class="w">		</span><span class="cm">/* find the chunk that holds the method */</span><span class="w"></span>
<span class="w">		</span><span class="n">cilvm_clr_treadrowfield</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">CLR20_TMETHODDEF_RVA</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">z</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="k">if</span><span class="p">(</span><span class="n">cilvm_clr_getchunkptrbyrva</span><span class="p">(</span><span class="n">clrmodule</span><span class="p">,</span><span class="w"> </span><span class="n">z</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">mptr</span><span class="p">))</span><span class="w"></span>
<span class="w">		</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;found chunk holding method specified by rva</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;failed to find chunk holding rva specified by method.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="Display_Type_Names_And_Namespaces_With_Fields">Display Type Names And Namespaces With Fields</span></h2>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">int</span><span class="w"> </span><span class="nf">test2</span><span class="p">(</span><span class="n">win_clr20_module</span><span class="w"> </span><span class="o">*</span><span class="n">clrmodule</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">win_clr20_meta_table</span><span class="w">	</span><span class="o">*</span><span class="n">mtp_typedef</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">win_clr20_meta_table</span><span class="w">	</span><span class="o">*</span><span class="n">mtp_field</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">		</span><span class="n">x</span><span class="p">;</span><span class="w">	</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">		</span><span class="n">y</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">		</span><span class="n">z</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">		</span><span class="n">w</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">		</span><span class="n">tdef_flags</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">			</span><span class="o">*</span><span class="n">tdef_typename</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">			</span><span class="o">*</span><span class="n">tdef_typenamespace</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">		</span><span class="n">tdef_fieldlist</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">		</span><span class="n">tdef_methodlist</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">			</span><span class="o">*</span><span class="n">clrm_strings</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">		</span><span class="n">tfield_flags</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">			</span><span class="o">*</span><span class="n">tfield_name</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">			</span><span class="o">*</span><span class="n">tfield_signature</span><span class="p">;</span><span class="w"></span>

<span class="w">	</span><span class="n">clrm_strings</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">clrmodule</span><span class="o">-&gt;</span><span class="n">meta</span><span class="p">.</span><span class="n">strmbyid</span><span class="p">[</span><span class="n">WIN_CLR20_META_STRINGS</span><span class="p">].</span><span class="n">data</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">mtp_typedef</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">clrmodule</span><span class="o">-&gt;</span><span class="n">meta</span><span class="p">.</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TTYPEDEF</span><span class="p">];</span><span class="w"></span>
<span class="w">	</span><span class="n">mtp_field</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">clrmodule</span><span class="o">-&gt;</span><span class="n">meta</span><span class="p">.</span><span class="n">tables</span><span class="p">[</span><span class="n">CLR20_META_TFIELD</span><span class="p">];</span><span class="w"></span>

<span class="w">	</span><span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">mtp_typedef</span><span class="o">-&gt;</span><span class="n">rowcnt</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">x</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">tdef_typename</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="n">tdef_typenamespace</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="n">tdef_fieldlist</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="n">cilvm_clr_treadrowfield</span><span class="p">(</span><span class="n">mtp_typedef</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">CLR20_TTYPEDEF_FLAGS</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">tdef_flags</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">cilvm_clr_treadrowfield</span><span class="p">(</span><span class="n">mtp_typedef</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">CLR20_TTYPEDEF_TYPENAME</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">tdef_typename</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">cilvm_clr_treadrowfield</span><span class="p">(</span><span class="n">mtp_typedef</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">CLR20_TTYPEDEF_TYPENAMESPACE</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">tdef_typenamespace</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">cilvm_clr_treadrowfield</span><span class="p">(</span><span class="n">mtp_typedef</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">CLR20_TTYPEDEF_FIELDLIST</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">tdef_fieldlist</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">cilvm_clr_treadrowfield</span><span class="p">(</span><span class="n">mtp_typedef</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">CLR20_TTYPEDEF_METHODLIST</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">tdef_methodlist</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">tdef_typename</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">clrm_strings</span><span class="p">[(</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">tdef_typename</span><span class="p">];</span><span class="w"></span>
<span class="w">		</span><span class="n">tdef_typenamespace</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">clrm_strings</span><span class="p">[(</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">tdef_typenamespace</span><span class="p">];</span><span class="w"></span>
<span class="w">		</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;.type %s.%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">tdef_typenamespace</span><span class="p">,</span><span class="w"> </span><span class="n">tdef_typename</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="cm">/* figure out where the fields stop for this one */</span><span class="w"></span>
<span class="w">		</span><span class="k">if</span><span class="p">((</span><span class="n">x</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">mtp_typedef</span><span class="o">-&gt;</span><span class="n">rowcnt</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="cm">/* </span>
<span class="cm">			   According to ECMA-335-4th-S22.37, the field list for this type</span>
<span class="cm">			   stops where the field list for the next type def starts, so</span>
<span class="cm">			   look ahead one..</span>
<span class="cm">			*/</span><span class="w"></span>
<span class="w">			</span><span class="n">z</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">			</span><span class="n">cilvm_clr_treadrowfield</span><span class="p">(</span><span class="n">mtp_typedef</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">CLR20_TTYPEDEF_FIELDLIST</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">z</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="cm">/* This is the last type definition. So read until last row. */</span><span class="w"></span>
<span class="w">			</span><span class="n">z</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mtp_field</span><span class="o">-&gt;</span><span class="n">rowcnt</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">		</span><span class="cm">/* read the fields for this type */</span><span class="w"></span>
<span class="w">		</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;tdef_fieldlist:%x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">tdef_fieldlist</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tdef_fieldlist</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="p">(</span><span class="n">z</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w"> </span><span class="o">++</span><span class="n">y</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="n">tfield_flags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">			</span><span class="n">tfield_name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">			</span><span class="n">tfield_signature</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">			</span><span class="n">cilvm_clr_treadrowfield</span><span class="p">(</span><span class="n">mtp_field</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">CLR20_TFIELD_FLAGS</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">tfield_flags</span><span class="p">);</span><span class="w"></span>
<span class="w">			</span><span class="n">cilvm_clr_treadrowfield</span><span class="p">(</span><span class="n">mtp_field</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">CLR20_TFIELD_NAME</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">tfield_name</span><span class="p">);</span><span class="w"></span>
<span class="w">			</span><span class="n">cilvm_clr_treadrowfield</span><span class="p">(</span><span class="n">mtp_field</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">CLR20_TFIELD_SIGNATURE</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">tfield_signature</span><span class="p">);</span><span class="w"></span>
<span class="w">			</span><span class="n">tfield_name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">clrm_strings</span><span class="p">[(</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">tfield_name</span><span class="p">];</span><span class="w"></span>
<span class="w">			</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;.field[%u] %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">tfield_name</span><span class="p">);</span><span class="w"></span>
<span class="w">			</span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>

<span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<!-- 
NewPP limit report
Cached time: 20250211162554
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.161 seconds
Real time usage: 1.884 seconds
Preprocessor visited node count: 104/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 187428/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:2075-0!canonical and timestamp 20250211162552 and revision id 15602.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=User:Kmcguire&amp;oldid=15602">https://wiki.osdev.org/index.php?title=User:Kmcguire&amp;oldid=15602</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=User%3AKmcguire" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="./User:Kmcguire#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-user" class="selected mw-list-item"><a href="./User:Kmcguire" title="View the user page [c]" accesskey="c"><span>User page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./User_talk:Kmcguire" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="./User:Kmcguire"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Kmcguire&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Kmcguire&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/User:Kmcguire" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/User:Kmcguire" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-contributions" class="mw-list-item"><a href="./Special:Contributions/Kmcguire" title="A list of contributions by this user"><span>User contributions</span></a></li><li id="t-log" class="mw-list-item"><a href="./Special:Log/Kmcguire"><span>Logs</span></a></li><li id="t-userrights" class="mw-list-item"><a href="./Special:UserRights/Kmcguire"><span>View user groups</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Kmcguire&amp;oldid=15602" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Kmcguire&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 21 February 2014, at 07:44.</li>
	<li id="footer-info-0">This page has been accessed 3,019 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=User:Kmcguire&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.161","walltime":"1.884","ppvisitednodes":{"value":104,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":187428,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250211162554","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":2026});});</script>
</body>
</html>