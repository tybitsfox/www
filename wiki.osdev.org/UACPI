<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>UACPI - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"7b6b2dee8d967fb64fc234ba","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"UACPI","wgTitle":"UACPI","wgCurRevisionId":29320,"wgRevisionId":29320,"wgArticleId":4861,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using duplicate arguments in template calls","Pages using deprecated source tags"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"UACPI","wgRelevantArticleId":4861,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],
"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-UACPI rootpage-UACPI skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">UACPI</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="UACPI#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="UACPI#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear: right; border:1px solid #aaaaaa; background:#eee; text-align:center; width:200px; ;"><tbody><tr><th style="background:#ffce7b; padding:0.3em; font-size:1.1em;"><a href="ACPI" title="ACPI">ACPI</a></th></tr><tr><th></th></tr><tr><td><div>
<p><a href="RSDP" title="RSDP">RSDP</a><br />
</p>
</div></td></tr><tr><th>Fixed Tables</th></tr><tr><td><div>
<p><a href="BGRT" title="BGRT">BGRT</a><br />
<a href="FADT" title="FADT">FADT</a><br />
<a href="MADT" title="MADT">MADT</a><br />
<a href="RSDT" title="RSDT">RSDT</a>/<a href="XSDT" title="XSDT">XSDT</a><br />
<a href="SRAT" title="SRAT">SRAT</a><br />
</p>
</div></td></tr><tr><th>Differentiated Tables</th></tr><tr><td><div>
<p><a href="DSDT" title="DSDT">DSDT</a><br />
<a href="SSDT" title="SSDT">SSDT</a><br />
<a href="AML" title="AML">AML</a><br />
</p>
</div></td></tr><tr><th>Tools/Libs</th></tr><tr><td><div>
<p><a href="ACPICA" title="ACPICA">ACPICA</a><br />
<a class="mw-selflink selflink">uACPI</a><br />
<a href="LAI" title="LAI">LAI</a><br />
</p>
</div></td></tr></tbody></table>
<p><a rel="nofollow" class="external text" href="https://github.com/UltraOS/uACPI"><b>uACPI</b></a> is a portable and easy-to-integrate implementation of the Advanced Configuration and Power Interface (ACPI).
</p><p>Its main focuses are full NT compatibility, safety, and minimization of stack usage by avoiding recursion entirely.
</p><p>Extra documentation can be found in the project's <a rel="nofollow" class="external text" href="https://github.com/UltraOS/uACPI">GitHub repo</a>.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="UACPI#Features"><span class="tocnumber">1</span> <span class="toctext">Features</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="UACPI#Why_use_uACPI_if_ACPICA_is_a_thing?"><span class="tocnumber">1.1</span> <span class="toctext">Why use uACPI if ACPICA is a thing?</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-3"><a href="UACPI#Integrating_into_a_kernel"><span class="tocnumber">2</span> <span class="toctext">Integrating into a kernel</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="UACPI#Initialization"><span class="tocnumber">3</span> <span class="toctext">Initialization</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="UACPI#Code_examples"><span class="tocnumber">4</span> <span class="toctext">Code examples</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="UACPI#Namespace_Enumeration_&amp;_Finding_Devices"><span class="tocnumber">4.1</span> <span class="toctext">Namespace Enumeration &amp; Finding Devices</span></a>
<ul>
<li class="toclevel-3 tocsection-7"><a href="UACPI#Let_Devices_Discover_Themselves"><span class="tocnumber">4.1.1</span> <span class="toctext">Let Devices Discover Themselves</span></a></li>
<li class="toclevel-3 tocsection-8"><a href="UACPI#Treat_ACPI_Namespace_as_a_Bus"><span class="tocnumber">4.1.2</span> <span class="toctext">Treat ACPI Namespace as a Bus</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-9"><a href="UACPI#Shutting_Down_the_System"><span class="tocnumber">4.2</span> <span class="toctext">Shutting Down the System</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="UACPI#Hooking_Up_the_Power_Button"><span class="tocnumber">4.3</span> <span class="toctext">Hooking Up the Power Button</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="UACPI#More_Examples"><span class="tocnumber">4.4</span> <span class="toctext">More Examples</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Features">Features</span></h2>
<ul><li>A complete &amp; well-tested AML interpreter</li>
<li>Operation region subsystem, support for user-defined address space handlers &amp; builtin handlers for SystemMemory/SystemIO/PCI_Config/TableData</li>
<li>User-defined device notify handlers &amp; dispatch</li>
<li>A complete resource subsystem. Every resource defined by ACPI 6.5 (last release) is supported</li>
<li>Sleep API, allowing reset, transition to any sleep state, wake vector programming API</li>
<li>An advanced event subsystem, supporting GPE/fixed events, wake, implicit notify, AML handlers</li>
<li>PCI routing table retrieval &amp; interrupt model API</li>
<li>Device search API</li></ul>
<p>uACPI has been tested and confirmed to work on many real computers, both new and old, desktops and laptops.
It has also been extensively fuzzed against both real world AML blobs &amp; its own test suite.
</p><p>The test suite runs on every commit and tests multiple types of configuration, including 64 and 32 bit builds on Windows (MSVC), Linux (GCC) and MacOS (AppleClang).
</p>
<h3><span id="Why_use_uACPI_if_ACPICA_is_a_thing.3F"></span><span class="mw-headline" id="Why_use_uACPI_if_ACPICA_is_a_thing?">Why use uACPI if ACPICA is a thing?</span></h3>
<p>This is discussed in great detail in the project's <a rel="nofollow" class="external text" href="https://github.com/UltraOS/uACPI?tab=readme-ov-file#why-would-i-use-this-over-acpica">README</a>.
</p>
<h2><span class="mw-headline" id="Integrating_into_a_kernel">Integrating into a kernel</span></h2>
<p>Refer to the project's <a rel="nofollow" class="external text" href="https://github.com/UltraOS/uACPI?tab=readme-ov-file#integrating-into-a-kernel">README</a> for detailed instructions on how to do it.
</p>
<h2><span class="mw-headline" id="Initialization">Initialization</span></h2>
<p>Below is an example of basic uACPI initialization sequence that enters ACPI mode, parses tables, brings the event system online, and finally loads &amp; initializes the namespace.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;uacpi/uacpi.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;uacpi/event.h&gt;</span><span class="cp"></span>

<span class="kt">int</span><span class="w"> </span><span class="nf">acpi_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="cm">/*</span>
<span class="cm">     * Start with this as the first step of the initialization. This loads all</span>
<span class="cm">     * tables, brings the event subsystem online, and enters ACPI mode. We pass</span>
<span class="cm">     * in 0 as the flags as we don&#39;t want to override any default behavior for now.</span>
<span class="cm">     */</span><span class="w"></span>
<span class="w">    </span><span class="n">uacpi_status</span><span class="w"> </span><span class="n">ret</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">uacpi_initialize</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">uacpi_unlikely_error</span><span class="p">(</span><span class="n">ret</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">log_error</span><span class="p">(</span><span class="s">&quot;uacpi_initialize error: %s&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">uacpi_status_to_string</span><span class="p">(</span><span class="n">ret</span><span class="p">));</span><span class="w"></span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="o">-</span><span class="n">ENODEV</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="cm">/*</span>
<span class="cm">     * Load the AML namespace. This feeds DSDT and all SSDTs to the interpreter</span>
<span class="cm">     * for execution.</span>
<span class="cm">     */</span><span class="w"></span>
<span class="w">    </span><span class="n">ret</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">uacpi_namespace_load</span><span class="p">();</span><span class="w"></span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">uacpi_unlikely_error</span><span class="p">(</span><span class="n">ret</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">log_error</span><span class="p">(</span><span class="s">&quot;uacpi_namespace_load error: %s&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">uacpi_status_to_string</span><span class="p">(</span><span class="n">ret</span><span class="p">));</span><span class="w"></span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="o">-</span><span class="n">ENODEV</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="cm">/*</span>
<span class="cm">     * Initialize the namespace. This calls all necessary _STA/_INI AML methods,</span>
<span class="cm">     * as well as _REG for registered operation region handlers.</span>
<span class="cm">     */</span><span class="w"></span>
<span class="w">    </span><span class="n">ret</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">uacpi_namespace_initialize</span><span class="p">();</span><span class="w"></span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">uacpi_unlikely_error</span><span class="p">(</span><span class="n">ret</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">log_error</span><span class="p">(</span><span class="s">&quot;uacpi_namespace_initialize error: %s&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">uacpi_status_to_string</span><span class="p">(</span><span class="n">ret</span><span class="p">));</span><span class="w"></span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="o">-</span><span class="n">ENODEV</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="cm">/*</span>
<span class="cm">     * Tell uACPI that we have marked all GPEs we wanted for wake (even though we haven&#39;t</span>
<span class="cm">     * actually marked any, as we have no power management support right now). This is</span>
<span class="cm">     * needed to let uACPI enable all unmarked GPEs that have a corresponding AML handler.</span>
<span class="cm">     * These handlers are used by the firmware to dynamically execute AML code at runtime</span>
<span class="cm">     * to e.g. react to thermal events or device hotplug.</span>
<span class="cm">     */</span><span class="w"></span>
<span class="w">    </span><span class="n">ret</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">uacpi_finalize_gpe_initialization</span><span class="p">();</span><span class="w"></span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">uacpi_unlikely_error</span><span class="p">(</span><span class="n">ret</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">log_error</span><span class="p">(</span><span class="s">&quot;uACPI GPE initialization error: %s&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">uacpi_status_to_string</span><span class="p">(</span><span class="n">ret</span><span class="p">));</span><span class="w"></span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="o">-</span><span class="n">ENODEV</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="cm">/*</span>
<span class="cm">     * That&#39;s it, uACPI is now fully initialized and working! You can proceed to</span>
<span class="cm">     * using any public API at your discretion. The next recommended step is namespace</span>
<span class="cm">     * enumeration and device discovery so you can bind drivers to ACPI objects.</span>
<span class="cm">     */</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="Code_examples">Code examples</span></h2>
<h3><span id="Namespace_Enumeration_.26_Finding_Devices"></span><span class="mw-headline" id="Namespace_Enumeration_&amp;_Finding_Devices">Namespace Enumeration &amp; Finding Devices</span></h3>
<p>There are multiple ways to implement device discovery for an ACPI namespace, below we will discuss the most common ways and their pros and cons.
</p>
<h4><span class="mw-headline" id="Let_Devices_Discover_Themselves">Let Devices Discover Themselves</span></h4>
<p>In this approach, we don't use a centralized bus system, but instead write ad-hoc find/discover() function for each supported device, then register it somewhere
so that it's called by kernel code during initialization.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">// ps2k.c</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;uacpi/utilities.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;uacpi/resources.h&gt;</span><span class="cp"></span>

<span class="cp">#define PS2K_PNP_ID &quot;PNP0303&quot;</span>

<span class="k">static</span><span class="w"> </span><span class="n">uacpi_iteration_decision</span><span class="w"> </span><span class="nf">match_ps2k</span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">user</span><span class="p">,</span><span class="w"> </span><span class="n">uacpi_namespace_node</span><span class="w"> </span><span class="o">*</span><span class="n">node</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="c1">// Found a PS2 keyboard! Do initialization below.</span>
<span class="w">    </span><span class="n">uacpi_resources</span><span class="w"> </span><span class="o">*</span><span class="n">kb_res</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="n">uacpi_status</span><span class="w"> </span><span class="n">ret</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">uacpi_get_current_resources</span><span class="p">(</span><span class="n">node</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">kb_res</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">uacpi_unlikely_error</span><span class="p">(</span><span class="n">ret</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">log_error</span><span class="p">(</span><span class="s">&quot;unable to retrieve PS2K resources: %s&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">uacpi_status_to_string</span><span class="p">(</span><span class="n">ret</span><span class="p">));</span><span class="w"></span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">UACPI_ITERATION_DECISION_NEXT_PEER</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="c1">// Parse the resources to find the IRQ and IO ports the keyboard is connected to</span>
<span class="w">    </span><span class="c1">// ...uacpi_for_each_resource()</span>

<span class="w">    </span><span class="n">ps2k_create_device</span><span class="p">(...);</span><span class="w"></span>

<span class="w">    </span><span class="n">uacpi_free_resources</span><span class="p">(</span><span class="n">kb_res</span><span class="p">);</span><span class="w"></span>

<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">UACPI_ITERATION_DECISION_CONTINUE</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kt">void</span><span class="w"> </span><span class="nf">find_ps2_keyboard</span><span class="p">()</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">uacpi_find_devices</span><span class="p">(</span><span class="n">PS2K_PNP_ID</span><span class="p">,</span><span class="w"> </span><span class="n">match_ps2k</span><span class="p">,</span><span class="w"> </span><span class="nb">NULL</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">// acpi_init.c</span>
<span class="kt">void</span><span class="w"> </span><span class="nf">find_acpi_devices</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">find_ps2_keyboard</span><span class="p">();</span><span class="w"></span>
<span class="w">    </span><span class="n">find_ps2_mouse</span><span class="p">();</span><span class="w"></span>
<span class="w">    </span><span class="n">find_i2c</span><span class="p">();</span><span class="w"></span>
<span class="w">    </span><span class="n">find_power_button</span><span class="p">();</span><span class="w"></span>
<span class="w">    </span><span class="c1">// ...and more</span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>As you can see it's a very simple approach, but it has lots of drawbacks:
</p>
<ul><li>Very slow: we have to enumerate the entire namespace every time</li>
<li>Binary bloat: more devices, more ad-hoc find methods</li>
<li>Error-prone: more code duplication, more space for errors</li></ul>
<h4><span class="mw-headline" id="Treat_ACPI_Namespace_as_a_Bus">Treat ACPI Namespace as a Bus</span></h4>
<p>In this approach, we treat the ACPI namespace as a bus in our kernel, and let devices provide a way to identify them.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">// acpi_bus.h</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;uacpi/uacpi.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;uacpi/namespace.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;uacpi/utilities.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;uacpi/resources.h&gt;</span><span class="cp"></span>

<span class="k">struct</span><span class="w"> </span><span class="nc">acpi_driver</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">device_name</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="k">const</span><span class="w"> </span><span class="o">*</span><span class="n">pnp_ids</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="n">device_probe</span><span class="p">)(</span><span class="n">uacpi_namespace_node</span><span class="w"> </span><span class="o">*</span><span class="n">node</span><span class="p">,</span><span class="w"> </span><span class="n">uacpi_namespace_node_info</span><span class="w"> </span><span class="o">*</span><span class="n">info</span><span class="p">);</span><span class="w"></span>

<span class="w">    </span><span class="k">struct</span><span class="w"> </span><span class="nc">acpi_driver</span><span class="w"> </span><span class="o">*</span><span class="n">next</span><span class="p">;</span><span class="w">    </span>
<span class="p">};</span><span class="w"></span>

<span class="kt">void</span><span class="w"> </span><span class="nf">acpi_register_driver</span><span class="p">(</span><span class="k">struct</span><span class="w"> </span><span class="nc">acpi_driver</span><span class="w"> </span><span class="o">*</span><span class="n">driver</span><span class="p">);</span><span class="w"></span>
</pre></div>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">// ps2k.c</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;acpi_bus.h&gt;</span><span class="cp"></span>

<span class="cp">#define PS2K_PNP_ID &quot;PNP0303&quot;</span>

<span class="k">static</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="k">const</span><span class="w"> </span><span class="n">ps2k_pnp_ids</span><span class="p">[]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">PS2K_PNP_ID</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="nb">NULL</span><span class="p">,</span><span class="w"></span>
<span class="p">};</span><span class="w"></span>

<span class="k">static</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">ps2k_probe</span><span class="p">(</span><span class="n">uacpi_namespace_node</span><span class="w"> </span><span class="o">*</span><span class="n">node</span><span class="p">,</span><span class="w"> </span><span class="n">uacpi_namespace_node_info</span><span class="w"> </span><span class="o">*</span><span class="n">info</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">uacpi_resources</span><span class="w"> </span><span class="o">*</span><span class="n">kb_res</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="cm">/* Parse the resources to find the IRQ and IO ports the keyboard is connected to</span>
<span class="cm">     * </span>
<span class="cm">     * Note that for a centralized system like that the resources could be passed</span>
<span class="cm">     * to the device probe callback from common enumeration code at this point as</span>
<span class="cm">     * well!</span>
<span class="cm">     */</span><span class="w"></span>
<span class="w">    </span><span class="n">uacpi_status</span><span class="w"> </span><span class="n">st</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">uacpi_get_current_resources</span><span class="p">(</span><span class="n">node</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">kb_res</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">uacpi_unlikely_error</span><span class="p">(</span><span class="n">st</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">log_error</span><span class="p">(</span><span class="s">&quot;unable to retrieve PS2K resources: %s&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">uacpi_status_to_string</span><span class="p">(</span><span class="n">st</span><span class="p">));</span><span class="w"></span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="o">-</span><span class="n">ENODEV</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="c1">// Actually instantiate the device</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">ret</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ps2k_create_device</span><span class="p">(...);</span><span class="w"></span>

<span class="w">    </span><span class="n">uacpi_free_resources</span><span class="p">(</span><span class="n">kb_res</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">ret</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="k">static</span><span class="w"> </span><span class="n">acpi_driver</span><span class="w"> </span><span class="n">ps2k_driver</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="p">.</span><span class="n">device_name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;PS2 Keyboard&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="p">.</span><span class="n">pnp_ids</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ps2k_pnp_ids</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="p">.</span><span class="n">device_probe</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ps2k_probe</span><span class="p">,</span><span class="w"></span>
<span class="p">};</span><span class="w"></span>

<span class="cm">/*</span>
<span class="cm"> * This is called either manually by the kernel, or put in the linker script</span>
<span class="cm"> * in some known section, and executed by the kernel as part of driver initcalls.</span>
<span class="cm"> * If it&#39;s a dynamically loadable module, then this is called on module load.</span>
<span class="cm"> */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">ps2k_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">acpi_register_driver</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ps2k_driver</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">// acpi_bus.c</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;acpi_bus.h&gt;</span><span class="cp"></span>

<span class="k">static</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">acpi_driver</span><span class="w"> </span><span class="o">*</span><span class="n">acpi_drivers_head</span><span class="w"></span>

<span class="kt">void</span><span class="w"> </span><span class="n">acpi_register_driver</span><span class="p">(</span><span class="k">struct</span><span class="w"> </span><span class="nc">acpi_driver</span><span class="w"> </span><span class="o">*</span><span class="n">driver</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">struct</span><span class="w"> </span><span class="nc">acpi_driver</span><span class="w"> </span><span class="o">*</span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">acpi_drivers_head</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">acpi_drivers_head</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">driver</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">driver</span><span class="o">-&gt;</span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">next</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="k">static</span><span class="w"> </span><span class="n">uacpi_iteration_decision</span><span class="w"> </span><span class="n">acpi_init_one_device</span><span class="p">(</span><span class="w"></span>
<span class="w">    </span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">ctx</span><span class="p">,</span><span class="w"> </span><span class="n">uacpi_namespace_node</span><span class="w"> </span><span class="o">*</span><span class="n">node</span><span class="p">,</span><span class="w"> </span><span class="n">uacpi_u32</span><span class="w"> </span><span class="n">node_depth</span><span class="w"></span>
<span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">uacpi_namespace_node_info</span><span class="w"> </span><span class="o">*</span><span class="n">info</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">node_depth</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="n">uacpi_status</span><span class="w"> </span><span class="n">ret</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">uacpi_get_namespace_node_info</span><span class="p">(</span><span class="n">node</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">info</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">uacpi_unlikely_error</span><span class="p">(</span><span class="n">ret</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">uacpi_namespace_node_generate_absolute_path</span><span class="p">(</span><span class="n">node</span><span class="p">);</span><span class="w"></span>
<span class="w">        </span><span class="n">log_error</span><span class="p">(</span><span class="s">&quot;unable to retrieve node %s information: %s&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">                  </span><span class="n">path</span><span class="p">,</span><span class="w"> </span><span class="n">uacpi_status_to_string</span><span class="p">(</span><span class="n">ret</span><span class="p">));</span><span class="w"></span>
<span class="w">        </span><span class="n">uacpi_free_absolute_path</span><span class="p">(</span><span class="n">path</span><span class="p">);</span><span class="w"></span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">UACPI_ITERATION_DECISION_CONTINUE</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="k">struct</span><span class="w"> </span><span class="nc">acpi_driver</span><span class="w"> </span><span class="o">*</span><span class="n">drv</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">NULL</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">info</span><span class="o">-&gt;</span><span class="n">flags</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">UACPI_NS_NODE_INFO_HAS_HID</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="c1">// Match the HID against every existing acpi_driver pnp id list</span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">drv</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="nb">NULL</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="p">(</span><span class="n">info</span><span class="o">-&gt;</span><span class="n">flags</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">UACPI_NS_NODE_INFO_HAS_CID</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="c1">// Match the CID list against every existing acpi_driver pnp id list</span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">drv</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="nb">NULL</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">         </span><span class="c1">// Probe the driver and do something with the error code if desired</span>
<span class="w">         </span><span class="n">drv</span><span class="o">-&gt;</span><span class="n">device_probe</span><span class="p">(</span><span class="n">node</span><span class="p">,</span><span class="w"> </span><span class="n">info</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="n">uacpi_free_namespace_node_info</span><span class="p">(</span><span class="n">info</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">UACPI_ITERATION_DECISION_CONTINUE</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kt">void</span><span class="w"> </span><span class="n">acpi_bus_enumerate</span><span class="p">()</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">uacpi_namespace_for_each_child</span><span class="p">(</span><span class="w"></span>
<span class="w">        </span><span class="n">uacpi_namespace_root</span><span class="p">(),</span><span class="w"> </span><span class="n">acpi_init_one_device</span><span class="p">,</span><span class="w"> </span><span class="n">UACPI_NULL</span><span class="p">,</span><span class="w"></span>
<span class="w">        </span><span class="n">UACPI_OBJECT_DEVICE_BIT</span><span class="p">,</span><span class="w"> </span><span class="n">UACPI_MAX_DEPTH_ANY</span><span class="p">,</span><span class="w"> </span><span class="n">UACPI_NULL</span><span class="w"></span>
<span class="w">    </span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>As you can see above, this approach is more scalable, faster, and involves way less code duplication.
It does require a lot mode code and design to get going initially though.
</p>
<h3><span class="mw-headline" id="Shutting_Down_the_System">Shutting Down the System</span></h3>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;uacpi/sleep.h&gt;</span><span class="cp"></span>

<span class="kt">int</span><span class="w"> </span><span class="nf">system_shutdown</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="cm">/*</span>
<span class="cm">     * Prepare the system for shutdown.</span>
<span class="cm">     * This will run the \_PTS &amp; \_SST methods, if they exist, as well as</span>
<span class="cm">     * some work to fetch the \_S5 and \_S0 values to make system wake</span>
<span class="cm">     * possible later on.</span>
<span class="cm">     */</span><span class="w"></span>
<span class="w">    </span><span class="n">uacpi_status</span><span class="w"> </span><span class="n">ret</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">uacpi_prepare_for_sleep_state</span><span class="p">(</span><span class="n">UACPI_SLEEP_STATE_S5</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">uacpi_unlikely_error</span><span class="p">(</span><span class="n">ret</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">log_error</span><span class="p">(</span><span class="s">&quot;failed to prepare for sleep: %s&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">uacpi_status_to_string</span><span class="p">(</span><span class="n">ret</span><span class="p">));</span><span class="w"></span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="o">-</span><span class="n">EIO</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="cm">/*</span>
<span class="cm">     * This is where we disable interrupts to prevent anything from</span>
<span class="cm">     * racing with our shutdown sequence below.</span>
<span class="cm">     */</span><span class="w"></span>
<span class="w">    </span><span class="n">disable_interrupts</span><span class="p">();</span><span class="w"></span>

<span class="w">    </span><span class="cm">/*</span>
<span class="cm">     * Actually do the work of entering the sleep state by writing to the hardware</span>
<span class="cm">     * registers with the values we fetched during preparation.</span>
<span class="cm">     * This will also disable runtime events and enable only those that are</span>
<span class="cm">     * needed for wake.</span>
<span class="cm">     */</span><span class="w"></span>
<span class="w">    </span><span class="n">ret</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">uacpi_enter_sleep_state</span><span class="p">(</span><span class="n">UACPI_SLEEP_STATE_S5</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">uacpi_unlikely_error</span><span class="p">(</span><span class="n">ret</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">log_error</span><span class="p">(</span><span class="s">&quot;failed to enter sleep: %s&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">uacpi_status_to_string</span><span class="p">(</span><span class="n">ret</span><span class="p">));</span><span class="w"></span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="o">-</span><span class="n">EIO</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="cm">/*</span>
<span class="cm">     * Technically unreachable code, but leave it here to prevent the compiler</span>
<span class="cm">     * from complaining.</span>
<span class="cm">     */</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="Hooking_Up_the_Power_Button">Hooking Up the Power Button</span></h3>
<p>The example below hooks up the power button press using a fixed event callback.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;uacpi/event.h&gt;</span><span class="cp"></span>

<span class="cm">/*</span>
<span class="cm"> * This handler will be called by uACPI from an interrupt context,</span>
<span class="cm"> * whenever a power button press is detected.</span>
<span class="cm"> */</span><span class="w"></span>
<span class="k">static</span><span class="w"> </span><span class="n">uacpi_interrupt_ret</span><span class="w"> </span><span class="nf">handle_power_button</span><span class="p">(</span><span class="n">uacpi_handle</span><span class="w"> </span><span class="n">ctx</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="cm">/*</span>
<span class="cm">     * Shut down right here using the helper we have defined above.</span>
<span class="cm">     *</span>
<span class="cm">     * Note that it&#39;s generally terrible practice to run any AML from</span>
<span class="cm">     * an interrupt handler, as it&#39;s allowed to allocate, map, sleep,</span>
<span class="cm">     * stall, acquire mutexes, etc. So, if possible in your kernel,</span>
<span class="cm">     * instead schedule the shutdown callback to be run in a normal</span>
<span class="cm">     * preemptible context later.</span>
<span class="cm">     */</span><span class="w"></span>
<span class="w">    </span><span class="n">system_shutdown</span><span class="p">();</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">UACPI_INTERRUPT_HANDLED</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kt">int</span><span class="w"> </span><span class="nf">power_button_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">uacpi_status</span><span class="w"> </span><span class="n">ret</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">uacpi_install_fixed_event_handler</span><span class="p">(</span><span class="w"></span>
<span class="w">        </span><span class="n">UACPI_FIXED_EVENT_POWER_BUTTON</span><span class="p">,</span><span class="w"></span>
<span class="w">	    </span><span class="n">handle_power_button</span><span class="p">,</span><span class="w"> </span><span class="n">UACPI_NULL</span><span class="w"></span>
<span class="w">    </span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">uacpi_unlikely_error</span><span class="p">(</span><span class="n">ret</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">log_error</span><span class="p">(</span><span class="s">&quot;failed to install power button event callback: %s&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">uacpi_status_to_string</span><span class="p">(</span><span class="n">ret</span><span class="p">));</span><span class="w"></span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="o">-</span><span class="n">ENODEV</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>Note that some of the more modern hardware routes the power button in a more complicated way, via an embedded controller.
</p><p>In order to hook that up you will need to:
</p>
<ul><li>Write an <a rel="nofollow" class="external text" href="https://uefi.org/specs/ACPI/6.5/12_Embedded_Controller_Interface_Specification.html">embedded controller</a> driver</li>
<li>Find the EC device in the AML namespace (PNP ID "PNP0C09" or ECDT table), attach an address space handler</li>
<li>Find a power button object in the namespace, attach a notify handler</li>
<li>Detect the general purpose event number used by the embedded controller (_GPE method), install a handler for it</li>
<li>In the event handler, execute the QR_EC command to find out the index of the query requested by the EC</li>
<li>Run the requested query by executing the corresponding "EC._QXX" control method in AML</li>
<li>If this query was for a power button press, you will receive a notifications with value 0x80 (S0 Power Button Pressed)</li></ul>
<p>Refer to <a rel="nofollow" class="external text" href="https://github.com/managarm/managarm/blob/master/kernel/thor/system/acpi/ec.cpp">managarm kernel EC driver</a> to see an example of how this may be done.
</p>
<h3><span class="mw-headline" id="More_Examples">More Examples</span></h3>
<p>You can look at the <a rel="nofollow" class="external text" href="https://github.com/managarm/managarm/tree/master/kernel/thor/system/acpi">managarm kernel source</a> to see more examples of how you might use uACPI to implement various kernel features.
</p>
<!-- 
NewPP limit report
Cached time: 20250211135217
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.070 seconds
Real time usage: 1.122 seconds
Preprocessor visited node count: 381/1000000
Post‐expand include size: 1982/2097152 bytes
Template argument size: 1433/2097152 bytes
Highest expansion depth: 8/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 39097/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    6.532      1 Template:ACPI
100.00%    6.532      1 -total
 88.01%    5.749      1 Template:SmallNavBox
 64.67%    4.224     20 Template:If
 44.08%    2.879     20 Template:Show1
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4861-0!canonical and timestamp 20250211135216 and revision id 29320.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=UACPI&amp;oldid=29320">https://wiki.osdev.org/index.php?title=UACPI&amp;oldid=29320</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_duplicate_arguments_in_template_calls&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using duplicate arguments in template calls (page does not exist)">Pages using duplicate arguments in template calls</a></li><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=UACPI" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="UACPI#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="UACPI" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:UACPI&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="UACPI"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=UACPI&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=UACPI&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/UACPI" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/UACPI" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=UACPI&amp;oldid=29320" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=UACPI&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 6 December 2024, at 11:34.</li>
	<li id="footer-info-0">This page has been accessed 9,799 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=UACPI&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.070","walltime":"1.122","ppvisitednodes":{"value":381,"limit":1000000},"postexpandincludesize":{"value":1982,"limit":2097152},"templateargumentsize":{"value":1433,"limit":2097152},"expansiondepth":{"value":8,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":39097,"limit":5000000},"timingprofile":["100.00%    6.532      1 Template:ACPI","100.00%    6.532      1 -total"," 88.01%    5.749      1 Template:SmallNavBox"," 64.67%    4.224     20 Template:If"," 44.08%    2.879     20 Template:Show1"]},"cachereport":{"timestamp":"20250211135217","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":1228});});</script>
</body>
</html>