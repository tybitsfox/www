<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>User:Greasemonkey/Intel GenX - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"8d849af80ad79dfde398808c","wgCSPNonce":false,"wgCanonicalNamespace":"User","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":2,"wgPageName":"User:Greasemonkey/Intel_GenX","wgTitle":"Greasemonkey/Intel GenX","wgCurRevisionId":18181,"wgRevisionId":18181,"wgArticleId":3799,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Stubs"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"User:Greasemonkey/Intel_GenX","wgRelevantArticleId":3799,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRelevantUserName":
"Greasemonkey","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="../favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="../opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="../api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-2 ns-subject page-User_Greasemonkey_Intel_GenX rootpage-User_Greasemonkey skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-namespace">User</span><span class="mw-page-title-separator">:</span><span class="mw-page-title-main">Greasemonkey/Intel GenX</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"><span class="subpages">&lt; <a href="https://wiki.osdev.org/User:Greasemonkey" title="User:Greasemonkey">User:Greasemonkey</a></span></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Intel_GenX#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Intel_GenX#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>The Intel GenX GPU architecture (probably) covers the Intel HD and the later Intel GMA series of GPUs, starting with the Intel 965. Later revisions tend to add and remove and readd and relocate features and instructions over time, but otherwise remain fairly similar.
</p><p>This will cover Gen4 (963, 965, G35) and later. Earlier GPUs do not have open documentation and are apparently very different.
</p><p>As there is an awful lot to document, this is probably a better place for tutorials.
</p>
<center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p><a href="../File:Stub.png" class="image" title="This article is a stub!"><img alt="This article is a stub!" src="../images/f/fe/Stub.png" decoding="async" width="50" height="50" data-file-width="50" data-file-height="50" /></a>
This page or section is a <a href="../Category:Stubs" title="Category:Stubs">stub</a>. You can help the wiki by <i>accurately</i> <a rel="nofollow" class="external text" href="https://wiki.osdev.org/index.php?title=User:Greasemonkey/Intel_GenX&amp;action=edit">contributing</a> to it.
</p>
</td>
<td>
</td></tr></tbody></table>
</center>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Intel_GenX#Systems_tested"><span class="tocnumber">1</span> <span class="toctext">Systems tested</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Intel_GenX#Finding_the_GPU"><span class="tocnumber">2</span> <span class="toctext">Finding the GPU</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Intel_GenX#Getting_a_display"><span class="tocnumber">3</span> <span class="toctext">Getting a display</span></a>
<ul>
<li class="toclevel-2 tocsection-4"><a href="Intel_GenX#Proper_mode_switch_methodology"><span class="tocnumber">3.1</span> <span class="toctext">Proper mode switch methodology</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="Intel_GenX#Simplified_version"><span class="tocnumber">3.2</span> <span class="toctext">Simplified version</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="Intel_GenX#Setting_monitor_timings"><span class="tocnumber">3.3</span> <span class="toctext">Setting monitor timings</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-7"><a href="Intel_GenX#Getting_the_ring_buffer_to_work"><span class="tocnumber">4</span> <span class="toctext">Getting the ring buffer to work</span></a>
<ul>
<li class="toclevel-2 tocsection-8"><a href="Intel_GenX#References_for_RING_BUFFER_*_registers"><span class="tocnumber">4.1</span> <span class="toctext">References for RING_BUFFER_* registers</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Intel_GenX#References_for_commands"><span class="tocnumber">4.2</span> <span class="toctext">References for commands</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="Intel_GenX#General_notes"><span class="tocnumber">4.3</span> <span class="toctext">General notes</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="Intel_GenX#Using_the_blitter"><span class="tocnumber">5</span> <span class="toctext">Using the blitter</span></a>
<ul>
<li class="toclevel-2 tocsection-12"><a href="Intel_GenX#General_notes_2"><span class="tocnumber">5.1</span> <span class="toctext">General notes</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-13"><a href="Intel_GenX#Making_the_GTT_behave"><span class="tocnumber">6</span> <span class="toctext">Making the GTT behave</span></a>
<ul>
<li class="toclevel-2 tocsection-14"><a href="Intel_GenX#References_for_GTT_page_format"><span class="tocnumber">6.1</span> <span class="toctext">References for GTT page format</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="Intel_GenX#Finding_GTTADR"><span class="tocnumber">6.2</span> <span class="toctext">Finding GTTADR</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="Intel_GenX#Allocating_space_for_the_GTT"><span class="tocnumber">6.3</span> <span class="toctext">Allocating space for the GTT</span></a>
<ul>
<li class="toclevel-3 tocsection-17"><a href="Intel_GenX#Early_Gen4"><span class="tocnumber">6.3.1</span> <span class="toctext">Early Gen4</span></a></li>
<li class="toclevel-3 tocsection-18"><a href="Intel_GenX#Gen4_&quot;Bearlake-C&quot;_(G35?)_and_onwards"><span class="tocnumber">6.3.2</span> <span class="toctext">Gen4 "Bearlake-C" (G35?) and onwards</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-19"><a href="Intel_GenX#Identity_paging"><span class="tocnumber">6.4</span> <span class="toctext">Identity paging</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="Intel_GenX#Memory-to-GPU_blit_(and_vice_versa)"><span class="tocnumber">6.5</span> <span class="toctext">Memory-to-GPU blit (and vice versa)</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-21"><a href="Intel_GenX#See_Also"><span class="tocnumber">7</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-22"><a href="Intel_GenX#Articles"><span class="tocnumber">7.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-23"><a href="Intel_GenX#External_Links"><span class="tocnumber">7.2</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Systems_tested">Systems tested</span></h2>
<ul><li>Compaq CQ60-210TU: GM45 DevCTG (GMA 4500MHD; Cantiga) with 1366x768 LVDS panel</li>
<li>HP Pavilion dv6-6c35tx: i5-2450M DevSNB (HD 3000) with 1366x768 LVDS panel</li></ul>
<p>Anything that doesn't exactly match the specs listed here may differ. Approach at your own risk.
</p>
<h2><span class="mw-headline" id="Finding_the_GPU">Finding the GPU</span></h2>
<p>Tested on:
</p>
<ul><li>GM45 1366x768 CQ60-210TU</li>
<li>HD3000 1366x768 dv6-6c35tx</li></ul>
<p>Probe the <a href="../PCI" title="PCI">PCI</a> bus. It should be located at Bus 0, Device 2, Function 0.
</p><p>GMAs tend to be advertised as at least two functions, so you may wish to check Function 1 as well. HDs tend to be advertised as just one.
</p><p>Either way, there appears to be no difference between using BAR0 of Function 0 and BAR0 of Function 1, and only Function 0 gives a window into stolen memory, so you might be able to get away with just using Function 0.
</p><p>With that said, make sure you check the IDs to ensure that they match hardware that you've actually tested. Different GPUs have different bugs and thus require different workarounds - even when they're within the same family.
</p><p>Here's the information, assuming you are accessing everything through Function 0:
</p>
<ul><li>uint64_t @ PCI 0x10: Location of MMIO registers. (XXX: for devices with a Function 1, this appears to do more than just MMIO registers - Function 1 should be able to provide a space with "just" MMIO registers.)</li>
<li>uint64_t @ PCI 0x18: Location of stolen memory.</li></ul>
<p>The 64-bit pointers have the lower 4 bits set to 0x4, so remember to mask it out before you use it, and remember to maintain that mask before writing back.
</p>
<h2><span class="mw-headline" id="Getting_a_display">Getting a display</span></h2>
<p>Tested on:
</p>
<ul><li>GM45 1366x768 CQ60-210TU</li>
<li>HD3000 1366x768 dv6-6c35tx</li></ul>
<h3><span class="mw-headline" id="Proper_mode_switch_methodology">Proper mode switch methodology</span></h3>
<p>Consult the appropriate section of your manual. It tends to be in Volume 3 at the start of one of the parts.
</p>
<ul><li>G45: Vol3, pg 28</li>
<li>SNB: Vol3.2, pg 8</li></ul>
<h3><span class="mw-headline" id="Simplified_version">Simplified version</span></h3>
<p>This assumes that the BIOS configured the LVDS panel properly and/or in a way that we can just take its values and run with them. If it does, you can avoid an awful lot of pain.
</p><p>This also assumes that your panel is less than 2048 pixels wide, but that can be fixed by adding a few "if" statements. However, the 1366x768 assumption is dropped from this version.
</p><p>There is a chance that this will work on systems that don't have an LVDS panel, but you will be limited to whatever resolution the BIOS spews out.
</p><p>If you want a non-native resolution, enable the panelfitter and adjust PIPEnSRC to suit. Note, the GMA panelfitter does love to blur everything. (HD 3000 seems fine.)
</p><p>Here's how you get from VGA text mode to native 32bpp full-res BGRX mode the easy way, and by easy we mean this is very much empirical, about as risky, and assumes the BIOS doesn't have stupid bugs in it:
</p>
<pre>	// Set VGA screen off
	outportb(0x3C4, 0x01);
	outportb(0x3C5, inportb(0x3C5)|(1&lt;&lt;5));

	// Wait at least 100us (Gen4.5 only needs 20us, but Gen6 needs 100us)
	wait_us(100);

	// Get correct VGA pipe
	// WARNING: Gen5 changes the location of this register!
	// Pre-Gen5 uses 0x71400, Gen5+ uses 0x41000.
	int real_VGACNTRL = (genx_typ &lt; 0x5000&#160;? VGACNTRL&#160;: VGACNTRL_ILK);
	genx_pipe = (genx_reg32[real_VGACNTRL]&gt;&gt;29)&amp;1;

	// Disable VGA
	genx_reg32[real_VGACNTRL] |= (1&lt;&lt;31);

	// Disable Display n
	genx_reg32[DSPnCNTR(genx_pipe)] &amp;= ~(1&lt;&lt;31);

	// Set PIPEnSRC to screen resolution
	uint32_t vis_w = (genx_reg32[HTOTAL_n(genx_pipe)] &amp; 0xFFFF)+1;
	uint32_t vis_h = (genx_reg32[VTOTAL_n(genx_pipe)] &amp; 0xFFFF)+1;
	genx_reg32[PIPEnSRC(genx_pipe)] = ((vis_w-1)&lt;&lt;16)|(vis_h-1);

	// XXX: Lacking information on DevSNB's panelfitter.
	// Seems to work fine without disabling it.
	// For Gen4.5, however, disabling it is pretty much mandatory,
	// unless you can't stand GPUs that lack antialiasing.
	if(genx_typ &gt;= 0x5000)
	{
		genx_reg32[PIPEnCONF(genx_pipe)] &amp;= ~(1&lt;&lt;31); // Disable Pipe n
		while((genx_reg32[PIPEnCONF(genx_pipe)] &amp; (1&lt;&lt;30))) {} // Wait for Pipe n to stop

		genx_reg32[PFIT_CONTROL] &amp;= ~(1&lt;&lt;31); // Disable panelfitter

		genx_reg32[PIPEnCONF(genx_pipe)] |= (1&lt;&lt;31); // Enable Pipe n
	}

	// Set up Display n and enable
	genx_reg32[DSPnLINOFF(genx_pipe)] = 0x00000000; // linear offset
	genx_reg32[DSPnSTRIDE(genx_pipe)] = 2048*4; // scanline pitch
	genx_reg32[DSPnSURF(genx_pipe)] = 0x00000000; // surface base
	genx_reg32[DSPnCNTR(genx_pipe)] = (genx_reg32[DSPnCNTR(genx_pipe)] &amp; ~(15&lt;&lt;26)) | (6&lt;&lt;26); // bit depth select, 6 = 32bpp BGRX
	genx_reg32[DSPnCNTR(genx_pipe)] = (genx_reg32[DSPnCNTR(genx_pipe)] &amp; ~(3&lt;&lt;20)) | (0&lt;&lt;20); // pixel multiply
	genx_reg32[DSPnCNTR(genx_pipe)] = (genx_reg32[DSPnCNTR(genx_pipe)] &amp; ~(1&lt;&lt;10)) | (0&lt;&lt;10); // tiling flag
	genx_reg32[DSPnCNTR(genx_pipe)] |= (1&lt;&lt;31); // enable
</pre>
<p>With the above config, your framebuffer should be located at the start of stolen memory, and be 2048 32bpp BGRX pixels wide internally.
</p>
<h3><span class="mw-headline" id="Setting_monitor_timings">Setting monitor timings</span></h3>
<p>Not tested on the dv6-6c35tx.
</p><p>If you need to set the monitor timings, this code should be useful for a start. These timings work on the CQ60-210TU's surprisingly tolerant LVDS panel:
</p>
<pre>	uint32_t vis_w = 1366;
	uint32_t vis_stretch_w = vis_w;
	uint32_t vis_sblank_w = 80;
	uint32_t vis_sync_w = 128;
	uint32_t vis_eblank_w = 200;

	uint32_t vis_h = 768;
	uint32_t vis_stretch_h = vis_h;
	uint32_t vis_sblank_h = 3;
	uint32_t vis_sync_h = 5;
	uint32_t vis_eblank_h = 22;

	uint32_t vis_blank_w = vis_sblank_w + vis_sync_w + vis_eblank_w;
	uint32_t vis_blank_h = vis_sblank_h + vis_sync_h + vis_eblank_h;
	genx_reg32[HTOTAL_n(genx_pipe)] = ((vis_w+vis_blank_w-1)&lt;&lt;16) | (vis_w-1);
	genx_reg32[HBLANK_n(genx_pipe)] = ((vis_w+vis_blank_w-1)&lt;&lt;16) | (vis_w-1);
	genx_reg32[HSYNC_n(genx_pipe)] = ((vis_w+vis_sblank_w+vis_sync_w-1)&lt;&lt;16) | (vis_w+vis_sblank_w-1);
	genx_reg32[VTOTAL_n(genx_pipe)] = ((vis_h+vis_blank_h-1)&lt;&lt;16) | (vis_h-1);
	genx_reg32[VBLANK_n(genx_pipe)] = ((vis_h+vis_blank_h-1)&lt;&lt;16) | (vis_h-1);
	genx_reg32[VSYNC_n(genx_pipe)] = ((vis_h+vis_sblank_h+vis_sync_h-1)&lt;&lt;16) | (vis_h+vis_sblank_h-1);
	genx_reg32[PIPEnSRC(genx_pipe)] = ((vis_stretch_w-1)&lt;&lt;16)|(vis_stretch_h-1);
</pre>
<h2><span class="mw-headline" id="Getting_the_ring_buffer_to_work">Getting the ring buffer to work</span></h2>
<p>Tested on:
</p>
<ul><li>GM45 1366x768 CQ60-210TU</li>
<li>HD3000 1366x768 dv6-6c35tx</li></ul>
<h3><span id="References_for_RING_BUFFER_.2A_registers"></span><span class="mw-headline" id="References_for_RING_BUFFER_*_registers">References for RING_BUFFER_* registers</span></h3>
<ul><li>G45: Vol1a, pg 238</li>
<li>HD3000: Vol1p3, pg 39</li></ul>
<h3><span class="mw-headline" id="References_for_commands">References for commands</span></h3>
<ul><li>G45: Vol1b</li>
<li>HD3000: Vol1p3-5</li></ul>
<h3><span class="mw-headline" id="General_notes">General notes</span></h3>
<p>The ring buffer is vital for being able to send commands to the GPE (Geometry Processing Engine) and whatnot. Commands are at least 1 DWord long, but the ring buffer indices are aligned to the nearest QWord.
</p><p>Note, the tail indicates the end of the buffer, and is where you write your commands to. The head indicates the start of the buffer, and is where the GPU reads from. While the head is DWord-aligned, the tail is QWord-aligned, so you may need to pad your instructions by inserting a MI_NOOP (0x00000000 will do).
</p><p>It's possible to start the ring buffer and then advance the tail when you have a new command or batch of commands.
</p><p>RING_BUFFER_START denotes the address relative to that stolen memory space.
</p><p>RING_BUFFER_HEAD and RING_BUFFER_TAIL need to be given byte offsets, so if you add, say, two DWords, you'd add 8 to RING_BUFFER_TAIL.
</p><p>Apparently you don't need a GTT to get this working.
</p><p>If you want to check to see if this is working, NOPID is a useful register. The Gen6 docs seem to be missing the location of this register, however it is in the same location as Gen4.5 (0x02094).
</p>
<h2><span class="mw-headline" id="Using_the_blitter">Using the blitter</span></h2>
<p>Tested on:
</p>
<ul><li>GM45 1366x768 CQ60-210TU</li></ul>
<p>The HD3000 was tested at some stage but the ring buffer stopped, suggesting an invalid instruction, although there may have also been a GTT issue.
</p>
<h3><span class="mw-headline" id="General_notes_2">General notes</span></h3>
<p>Firstly you'll want to know your "raster op" modes. They are conceptually the same as the Amiga's modes, although probably with different sources.
</p><p>Here's a list of useful modes:
</p>
<ul><li>0xF0: Set to pattern (useful for COLOR_BLT)</li>
<li>0xCC: Set to source image (useful for SRC_COPY_BLT)</li>
<li>0xAA: Set to destination (useful for not much)</li>
<li>0x55: Set to opposite of destination (useful for XOR effect)</li></ul>
<p>Top bit determines the result when all of {pattern, source, destination} are 1. Bottom bit determines the result when all are 0.
</p><p>The rest is All There In The Manual.
</p><p><b>WARNING:</b> When the manual says "pitch in dwords", what they <i>really</i> mean is "pitch in bytes, aligned to a dword boundary".
</p><p>There are two sets of blitter commands: The XY_ commands, and the other commands. The other commands are a bit simpler, but there are only two of them.
</p>
<ul><li>COLOR_BLT fills a rectangular area with a solid colour. Useful for clearing the screen like a boss.</li>
<li>SRC_COPY_BLT copies from one place in memory to another. If you have no GTT, this will be GPU-to-GPU only. Still faster, easier and more powerful than EGA/VGA.</li></ul>
<p>Here's an example of a 32bpp COLOR_BLT used to clear a screen with a nice purple tinge:
</p>
<pre>	// COLOR_BLT
	genx_rb_push(0
		| (0x2&lt;&lt;29) | (0x40&lt;&lt;22)
		| (0x3&lt;&lt;20) // a:rgb mask
		| 0x03
	);
	genx_rb_push(0
		| (3&lt;&lt;24) // bit depth
		| (0xF0&lt;&lt;16) // raster op
		| ((screen_pitch_pixels*4) &amp; 0xFFFF) // pitch in bytes, dword-aligned
	);
	genx_rb_push(((screen_height)&lt;&lt;16)|((screen_width)&lt;&lt;2)); // height in scanlines, width in bytes
	genx_rb_push(screen_stolen_memory_offset);
	genx_rb_push(0x00330066); // XXRRGGBB - HTML colour #330066
</pre>
<p>The XY_ commands allow you to specify ranges using X,Y coordinate pairs and apply clipping based on those pairs.
</p><p>Here's the XY_COLOR_BLT version of the above:
</p>
<pre>	// XY_COLOR_BLT
	genx_rb_push(0
		| (0x2&lt;&lt;29) | (0x50&lt;&lt;22)
		| (3&lt;&lt;20) // a:rgb mask
		| (0&lt;&lt;11) // tiling enable (tile-X only)
		| 0x04
	);
	genx_rb_push(0
		| (0&lt;&lt;30) // clipping enable
		| (3&lt;&lt;24) // bit depth
		| (0xF0&lt;&lt;16) // raster op
		| ((screen_pitch_pixels*4) &amp; 0xFFFF) // pitch in bytes, dword-aligned
	);
	genx_rb_push((0&lt;&lt;16) | (0)); // Y1:X1 top-left
	genx_rb_push(((screen_height)&lt;&lt;16)|((screen_width))); // Y2:X2 bottom-right
	genx_rb_push(screen_stolen_memory_offset);
	genx_rb_push(0x00330066); // XXRRGGBB - HTML colour #330066
</pre>
<p>Note, if you want clipping, you'll want to run an XY_SETUP_CLIP_BLT command, and then enable the "clipping enable" flag.
</p>
<h2><span class="mw-headline" id="Making_the_GTT_behave">Making the GTT behave</span></h2>
<p>Tested on:
</p>
<ul><li>GM45 1366x768 CQ60-210TU</li></ul>
<h3><span class="mw-headline" id="References_for_GTT_page_format">References for GTT page format</span></h3>
<ul><li>G45: Vol1a, pg214</li></ul>
<h3><span class="mw-headline" id="Finding_GTTADR">Finding GTTADR</span></h3>
<p><b>Gen4 only (NOT Gen4.5!)</b>: 32-bit address "GTTADR" at PCI B0:D2:F0:0x1C. <i>(TODO: confirm)</i>
</p><p><b>Gen4.5 and above</b>: 64-bit address "GTTMMADR" at PCI B0:D2:F0:0x18 , then add 2MB (0x200000). <i>(TODO: confirm the "above" bit)</i>
tends to use GTTADR from PCI, which is the 32-bit address at PCI+0x1C.
</p>
<h3><span class="mw-headline" id="Allocating_space_for_the_GTT">Allocating space for the GTT</span></h3>
<h4><span class="mw-headline" id="Early_Gen4">Early Gen4</span></h4>
<p>Allocate a block of memory in the stolen memory space. 512KB is the largest you can use for the GTT, and allows for a 512MB virtual addressing space. Ensure that the block of memory is aligned with its size.
</p><p>Once you have it in place, ensure that the graphics pipeline is flushed (if you don't know what this is, it probably already is flushed), then:
</p>
<pre>	genx_reg32[GFX_FLSH_CNTL] = 0;
	genx_reg32[PGTBL_CTL] = 1 | gtt_offset; // GTT: 512KB, enabled
	genx_reg32[PGTBL_CTL2] = 0; // disables the PPGTT
	genx_reg32[GFX_FLSH_CNTL] = 0;
</pre>
<p>We will get to modifying it pretty soon.
</p>
<ul><li>Paging type 0 is for stolen memory.</li>
<li>Paging type 3 is for main CPU memory. The GPU will snoop the cache for you.</li></ul>
<p>Note that the actual screen is rendered using physical, unmapped "stolen" memory addresses.
</p><p>Also note that direct access to the stolen memory via GMADR also uses the physical unmapped addresses.
</p>
<h4><span id="Gen4_.22Bearlake-C.22_.28G35.3F.29_and_onwards"></span><span class="mw-headline" id="Gen4_&quot;Bearlake-C&quot;_(G35?)_and_onwards">Gen4 "Bearlake-C" (G35?) and onwards</span></h4>
<p>Don't allocate it. The chip allocates it for you. Just leave the upper 31:12 in PGTBL_CTL intact when you mess with it. Once you have identity paging in place, set the lower bit.
</p><p>Of course, if you are paranoid, you can always allocate some memory anyway.
</p><p>Paging types above are as per pre-Gen6. Gen6 has different paging types, apparently.
</p>
<h3><span class="mw-headline" id="Identity_paging">Identity paging</span></h3>
<p>In this example, genx_gtt32 points to GTTADR as calculated.
</p><p>The GPU will handle all the caching issues for you if you use GTTADR. To add to this, in Gen6 this is the only way to access the GTT, so instead of learning the older method of writing via system RAM and then flushing the GPU's cache, you should just use this instead.
</p>
<pre>	for(i = 0; i &lt; 512*256; i++)
		genx_gtt32[i] = (((i)&lt;&lt;12) | (3&lt;&lt;1) | (1&lt;&lt;0));
</pre>
<h3><span id="Memory-to-GPU_blit_.28and_vice_versa.29"></span><span class="mw-headline" id="Memory-to-GPU_blit_(and_vice_versa)">Memory-to-GPU blit (and vice versa)</span></h3>
<p>This is for a 32bpp blit.
</p><p>blk_(width|height) denotes the size of the blit to perform.
(src|dest)_gtt are addresses that the GPU will feed through the Global GTT or PPGTT
(src|dest)_pitch are the image pitches in DWords.
</p><p>You must ensure that the GTT has the correct paging type for the given GPU for each page that this will need to use. For Gen4, use 0 for stolen memory, and 3 for system memory.
</p>
<pre>	// SRC_COPY_BLT
	genx_rb_push((2&lt;&lt;29) | (0x43&lt;&lt;22)
		| (3&lt;&lt;20) // a:rgb mask
		| 0x04
	);
	genx_rb_push(0
		| (0&lt;&lt;30) // reverse X direction
		| (3&lt;&lt;24) // bit depth
		| (0xCC&lt;&lt;16) // raster op
		| (dest_pitch*4) // dest pitch in bytes
	);
	genx_rb_push((blk_height&lt;&lt;16) | (blk_width*4)); // dest dims
	genx_rb_push(dest_gtt);
	genx_rb_push(0
		| (src_pitch*4) // src pitch in bytes
	);
	genx_rb_push(src_gtt); // src addr
	genx_rb_punch();
</pre>
<p>XY_SRC_COPY_BLT and whatnot should also work just fine, including with clipping and the like.
</p>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<h3><span class="mw-headline" id="Articles">Articles</span></h3>
<ul><li><a href="../Accelerated_Graphic_Cards" title="Accelerated Graphic Cards">Accelerated Graphic Cards</a></li></ul>
<h3><span class="mw-headline" id="External_Links">External Links</span></h3>
<ul><li><a rel="nofollow" class="external text" href="https://01.org/linuxgraphics/documentation/driver-documentation-prms">Official documentation from Intel</a></li>
<li><a rel="nofollow" class="external text" href="http://www.x.org/docs/intel/">Official documentation on X.org</a> - covers up to 2012, but also has Vol_1b_G45_core.pdf which is missing from the official Intel PRM list</li>
<li>Chipset datasheets:
<ul><li><a rel="nofollow" class="external text" href="http://www.intel.com/Assets/PDF/datasheet/320122.pdf">Mobile Intel 4 Series Datasheet</a> - covers the mobile version of Gen4.5.</li></ul></li>
<li><a rel="nofollow" class="external text" href="http://forums.entechtaiwan.com/index.php?topic=2578.0">1366x768 LCD timings</a> - thread with several different sets of timings</li>
<li><a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/List_of_Intel_graphics_processing_units">List of Intel graphics processing units</a> on Wikipedia - useful for finding out PCI device IDs and exactly what generation you're using.</li></ul>
<!-- 
NewPP limit report
Cached time: 20250211142240
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.020 seconds
Real time usage: 0.021 seconds
Preprocessor visited node count: 113/1000000
Post‐expand include size: 512/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 4/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 5006/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.826      1 Template:Stub
100.00%    0.826      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3799-0!canonical and timestamp 20250211142240 and revision id 18181.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=User:Greasemonkey/Intel_GenX&amp;oldid=18181">https://wiki.osdev.org/index.php?title=User:Greasemonkey/Intel_GenX&amp;oldid=18181</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="../Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="../Category:Stubs" title="Category:Stubs">Stubs</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=User%3AGreasemonkey%2FIntel+GenX" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Intel_GenX#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-user" class="selected mw-list-item"><a href="Intel_GenX" title="View the user page [c]" accesskey="c"><span>User page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User_talk:Greasemonkey/Intel_GenX&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Intel_GenX"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Greasemonkey/Intel_GenX&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Greasemonkey/Intel_GenX&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="../index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="../index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="../Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="../Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="../OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="../OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="../OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="../Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="https://wiki.osdev.org/Special:WhatLinksHere/User:Greasemonkey/Intel_GenX" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/User:Greasemonkey/Intel_GenX" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-contributions" class="mw-list-item"><a href="../Special:Contributions/Greasemonkey" title="A list of contributions by this user"><span>User contributions</span></a></li><li id="t-log" class="mw-list-item"><a href="../Special:Log/Greasemonkey"><span>Logs</span></a></li><li id="t-userrights" class="mw-list-item"><a href="../Special:UserRights/Greasemonkey"><span>View user groups</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="../Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Greasemonkey/Intel_GenX&amp;oldid=18181" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Greasemonkey/Intel_GenX&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 1 June 2015, at 06:09.</li>
	<li id="footer-info-0">This page has been accessed 1,115 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="../OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="../OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="../OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=User:Greasemonkey/Intel_GenX&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="../resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="../resources/assets/poweredby_mediawiki_132x47.png 1.5x, ../resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.020","walltime":"0.021","ppvisitednodes":{"value":113,"limit":1000000},"postexpandincludesize":{"value":512,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":4,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":5006,"limit":5000000},"timingprofile":["100.00%    0.826      1 Template:Stub","100.00%    0.826      1 -total"]},"cachereport":{"timestamp":"20250211142240","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":136});});</script>
</body>
</html>