<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>VMware tools - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"30562091b56020a20fd20f6b","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"VMware_tools","wgTitle":"VMware tools","wgCurRevisionId":28102,"wgRevisionId":28102,"wgArticleId":4329,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Emulators"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"VMware_tools","wgRelevantArticleId":4329,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":
{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-VMware_tools rootpage-VMware_tools skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">VMware tools</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="VMware_tools#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="VMware_tools#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>VMware's various virtualization products implement a backdoor which provides some useful functionality to the guest operating system, similar to the <a href="VirtualBox_Guest_Additions" title="VirtualBox Guest Additions">VirtualBox Guest Additions</a>. In addition to VMware, QEMU also implements some of the functionality of the VMware backdoor, including support for absolute mouse positioning which can be very useful if you lack a USB stack and want to be able to productively use QEMU's integrated VNC server.
</p><p>Sample code in this article is provided from ToaruOS and is based on research from the VMware SVGA developer kit and open-vm-tools.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="VMware_tools#VMware_Backdoor"><span class="tocnumber">1</span> <span class="toctext">VMware Backdoor</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="VMware_tools#Detecting_the_VMware_Backdoor"><span class="tocnumber">2</span> <span class="toctext">Detecting the VMware Backdoor</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="VMware_tools#Absolute_Mouse_Coordinates"><span class="tocnumber">3</span> <span class="toctext">Absolute Mouse Coordinates</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="VMware_tools#Message_Channels"><span class="tocnumber">4</span> <span class="toctext">Message Channels</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="VMware_tools#RPCI"><span class="tocnumber">4.1</span> <span class="toctext">RPCI</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="VMware_tools#TCLO"><span class="tocnumber">4.2</span> <span class="toctext">TCLO</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-7"><a href="VMware_tools#Automatically_Setting_the_Display_Resolution"><span class="tocnumber">5</span> <span class="toctext">Automatically Setting the Display Resolution</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="VMware_Backdoor">VMware Backdoor</span></h2>
<p>To communicate with the host, VMware uses a port-and-register based backdoor. Magic values, commands, and arguments are stored in the eax, ebx, ecx, and edx registers, a "magic" port operation is executed, and then the returned values are stored in these registers. There are three ways to access the backdoor, which uses two different magic port values. Most backdoor commands use the single port "in" version, while longer messages are read and written through the "high bandwidth" "rep out/in" version.
</p><p>First, let's define a structure to store the register values and also provide some helpful aliases through unions. I am using unnamed unions here, but you may wish to name them depending on your compiler configuration:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="k">union</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">ax</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">magic</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">};</span><span class="w"></span>
<span class="w">	</span><span class="k">union</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">bx</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="kt">size_t</span><span class="w"> </span><span class="n">size</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">};</span><span class="w"></span>
<span class="w">	</span><span class="k">union</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">cx</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">command</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">};</span><span class="w"></span>
<span class="w">	</span><span class="k">union</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">dx</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">port</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">};</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">si</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">di</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">vmware_cmd</span><span class="p">;</span><span class="w"></span>
</pre></div>
<p>The union values explain the purpose of some of the registers in the single port "in" version of the backdoor. DX will contain the port number used for the port read, EAX will store a magic value, EBX may contain a size argument, and CX will indicate the command we are requesting from the VM. You will not we also have values for SI and DI, which are used by the "high bandwidth" version of the backdoor.
</p><p>Now let's set up some functions to perform the various backdoor calls. GCC's inline assembly makes this very easy, as we can just pass the values from our struct into a short assembly call as the registers we want to set. We'll have three different methods available: one for the single-port backdoor and both an "in" and "out" method for the high bandwidth version. We'll also set the magic values and ports appropriately before calling the assembly instructions:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define VMWARE_MAGIC  0x564D5868</span>
<span class="cp">#define VMWARE_PORT   0x5658</span>
<span class="cp">#define VMWARE_PORTHB 0x5659</span>

<span class="kt">void</span><span class="w"> </span><span class="nf">vmware_send</span><span class="p">(</span><span class="n">vmware_cmd</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">cmd</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">magic</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">VMWARE_MAGIC</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">port</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">VMWARE_PORT</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="k">asm</span><span class="w"> </span><span class="k">volatile</span><span class="p">(</span><span class="s">&quot;in&#160;%%dx, %0&quot;</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="s">&quot;+a&quot;</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">ax</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;+b&quot;</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">bx</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;+c&quot;</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">cx</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;+d&quot;</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">dx</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;+S&quot;</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">si</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;+D&quot;</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">di</span><span class="p">));</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="k">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">vmware_send_hb</span><span class="p">(</span><span class="n">vmware_cmd</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">cmd</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">magic</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">VMWARE_MAGIC</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">port</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">VMWARE_PORTHB</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="k">asm</span><span class="w"> </span><span class="k">volatile</span><span class="p">(</span><span class="s">&quot;cld; rep; outsb&quot;</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="s">&quot;+a&quot;</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">ax</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;+b&quot;</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">bx</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;+c&quot;</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">cx</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;+d&quot;</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">dx</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;+S&quot;</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">si</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;+D&quot;</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">di</span><span class="p">));</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="k">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">vmware_get_hb</span><span class="p">(</span><span class="n">vmware_cmd</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">cmd</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">magic</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">VMWARE_MAGIC</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">port</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">VMWARE_PORTHB</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="k">asm</span><span class="w"> </span><span class="k">volatile</span><span class="p">(</span><span class="s">&quot;cld; rep; insb&quot;</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="s">&quot;+a&quot;</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">ax</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;+b&quot;</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">bx</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;+c&quot;</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">cx</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;+d&quot;</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">dx</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;+S&quot;</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">si</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;+D&quot;</span><span class="p">(</span><span class="n">cmd</span><span class="o">-&gt;</span><span class="n">di</span><span class="p">));</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="Detecting_the_VMware_Backdoor">Detecting the VMware Backdoor</span></h2>
<p><i>Note: Blindly reading from IO ports is probably not the best approach to detecting some special VM hardware.</i>
</p><p>In order to ensure that we are communicating with a VMware backdoor implementation, we should query it as follows:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">int</span><span class="w"> </span><span class="nf">is_vmware_backdoor</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_cmd</span><span class="w"> </span><span class="n">cmd</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">bx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">~</span><span class="n">VMWARE_MAGIC</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">command</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CMD_GETVERSION</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cmd</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">bx</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">VMWARE_MAGIC</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">cmd</span><span class="p">.</span><span class="n">ax</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mh">0xFFFFFFFF</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="cm">/* Not a backdoor! */</span><span class="w"></span>
<span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="Absolute_Mouse_Coordinates">Absolute Mouse Coordinates</span></h2>
<p>The backdoor allows us to disable the PS/2 mouse and instead receive absolute mouse coordinates. This means we don't need to "capture" the mouse pointer in the VM. As an extra bonus, QEMU implements this functionality as well.
</p><p>When the absolute mouse is enabled, the PS/2 mouse status bit indicates not that the PS/2 port should be read, but that the backdoor should be used to read mouse data instead, so you should route PS/2 mouse interrupts to your VMware backdoor handler where appropriate.
</p><p>We'll provide two functions, one to enable the absolute mouse, and one to disable it.
</p><p>Our enable function will perform 4 backdoor calls: One to enable the mouse functionality, two to request status information, and one to switch to absolute mode. Let's define some magic values for these commands:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define CMD_ABSPOINTER_DATA    39</span>
<span class="cp">#define CMD_ABSPOINTER_STATUS  40</span>
<span class="cp">#define CMD_ABSPOINTER_COMMAND 41</span>

<span class="cp">#define ABSPOINTER_ENABLE   0x45414552 </span><span class="cm">/* Q E A E */</span><span class="cp"></span>
<span class="cp">#define ABSPOINTER_RELATIVE 0xF5</span>
<span class="cp">#define ABSPOINTER_ABSOLUTE 0x53424152 </span><span class="cm">/* R A B S */</span><span class="cp"></span>
</pre></div>
<p>Now we can enable the absolute mouse like this:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">void</span><span class="w"> </span><span class="nf">mouse_absolute</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_cmd</span><span class="w"> </span><span class="n">cmd</span><span class="p">;</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* Enable */</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">bx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ABSPOINTER_ENABLE</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">command</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CMD_ABSPOINTER_COMMAND</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cmd</span><span class="p">);</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* Status */</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">bx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">command</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CMD_ABSPOINTER_STATUS</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cmd</span><span class="p">);</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* Read data (1) */</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">bx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">command</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CMD_ABSPOINTER_DATA</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cmd</span><span class="p">);</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* Enable absolute */</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">bx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ABSPOINTER_ABSOLUTE</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">command</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CMD_ABSPOINTER_COMMAND</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cmd</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>Disabling the mouse is a bit easier as it is a single backdoor command:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">void</span><span class="w"> </span><span class="nf">mouse_relative</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_cmd</span><span class="w"> </span><span class="n">cmd</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">bx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ABSPOINTER_RELATIVE</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">command</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CMD_ABSPOINTER_COMMAND</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cmd</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>With these two functions, we can toggle the absolute mouse pointer on and off, which is useful if users want to play games in our OS that require a relative mouse pointer (like Quake), so we'll want to provide a user-accessible method to toggling the pointer mode.
</p><p>Now let's handle the actual mouse events. When your PS/2 mouse driver receives a byte from the mouse when the absolute pointer is enabled, it should ignore that byte and call a function in the VMware driver to get the actual mouse data.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">void</span><span class="w"> </span><span class="nf">vmware_handle_mouse</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_cmd</span><span class="w"> </span><span class="n">cmd</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* Read the mouse status */</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">bx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">command</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CMD_ABSPOINTER_STATUS</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cmd</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* Mouse status is in EAX */</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">ax</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mh">0xFFFF0000</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="cm">/* An error has occured, let&#39;s turn the device off and back on */</span><span class="w"></span>
<span class="w">		</span><span class="n">mouse_off</span><span class="p">();</span><span class="w"></span>
<span class="w">		</span><span class="n">mouse_absolute</span><span class="p">();</span><span class="w"></span>
<span class="w">		</span><span class="k">return</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* The status command returns a size we need to read, should be at least 4. */</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">((</span><span class="n">cmd</span><span class="p">.</span><span class="n">ax</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFFFF</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">4</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* Read 4 bytes of mouse data */</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">bx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">command</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CMD_ABSPOINTER_DATA</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cmd</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* Mouse data is now stored in AX, BX, CX, and DX */</span><span class="w"></span>
<span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">flags</span><span class="w">   </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">ax</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFFFF0000</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">16</span><span class="p">;</span><span class="w"> </span><span class="cm">/* Not important */</span><span class="w"></span>
<span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">buttons</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">ax</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFFFF</span><span class="p">);</span><span class="w"> </span><span class="cm">/* 0x10 = Right, 0x20 = Left, 0x08 = Middle */</span><span class="w"></span>
<span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="w">       </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">bx</span><span class="p">);</span><span class="w"> </span><span class="cm">/* Both X and Y are scaled from 0 to 0xFFFF */</span><span class="w"></span>
<span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">y</span><span class="w">       </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">cx</span><span class="p">);</span><span class="w"> </span><span class="cm">/* You should map these somewhere to the actual resolution. */</span><span class="w"></span>
<span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">z</span><span class="w">       </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">int8_t</span><span class="p">)(</span><span class="n">cmd</span><span class="p">.</span><span class="n">dx</span><span class="p">);</span><span class="w"> </span><span class="cm">/* Z is a single signed byte indicating scroll direction. */</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* TODO: Do something useful here with these values, such as providing them to userspace! */</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="Message_Channels">Message Channels</span></h2>
<p>Advanced functionality of the backdoor employs message channels. We'll be using two different message channels: RPCI channels and TCLO channels. We'll use RPCI channels to send capability strings to VMware, and the TCLO channel to receive events.
</p><p>Message channels have five basic operations: open, close, receive, send, ack.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define MESSAGE_OPEN  0x00000000</span>
<span class="cp">#define MESSAGE_SEND  0x00010000</span>
<span class="cp">#define MESSAGE_RECV  0x00030000</span>
<span class="cp">#define MESSAGE_ACK   0x00050000 </span>
<span class="cp">#define MESSAGE_CLOSE 0x00060000</span>

<span class="cm">/* Open a message channel */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">open_msg_channel</span><span class="p">(</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">protocol</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_cmd</span><span class="w"> </span><span class="n">cmd</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">cx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CMD_MESSAGE</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">MESSAGE_OPEN</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">bx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">protocol</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cmd</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* AX indicates status; 0x10000 is success */</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">((</span><span class="n">cmd</span><span class="p">.</span><span class="n">ax</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x10000</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="cm">/* Failed */</span><span class="w"></span>
<span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="mi">-1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* Channel is returned in upper two bytes of EDX */</span><span class="w"></span>
<span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">cmd</span><span class="p">.</span><span class="n">dx</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">16</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="cm">/* Close a message channel */</span><span class="w"></span>
<span class="kt">void</span><span class="w"> </span><span class="nf">close_msg_channel</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">channel</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_cmd</span><span class="w"> </span><span class="n">cmd</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">cx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CMD_MESSAGE</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">MESSAGE_CLOSE</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">bx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">cmd</span><span class="p">.</span><span class="n">dx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">channel</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">16</span><span class="p">;</span><span class="w"> </span><span class="cm">/* channel passed in high two bytes of EDX */</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cmd</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>To send and receive messages, we first send a command containing our requested operation and its size to the normal backdoor. We then follow this up with either a read or write to the high-bandwidth backdoor. In the receive case, we also send an acknowledgement command afterwards.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cm">/* Send data to a message channel */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">send_msg</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">channel</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">msg</span><span class="p">,</span><span class="w"> </span><span class="kt">size_t</span><span class="w"> </span><span class="n">size</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* Write the send size to the regular backdoor */</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_cmd</span><span class="w"> </span><span class="n">send</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="mi">0</span><span class="p">};</span><span class="w"></span>
<span class="w">	</span><span class="n">send</span><span class="p">.</span><span class="n">cx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CMD_MESSAGE</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">MESSAGE_SEND</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">send</span><span class="p">.</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">size</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">send</span><span class="p">.</span><span class="n">dx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">channel</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">16</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">send</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="cm">/* Nothing more to do for empty messages */</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(((</span><span class="n">send</span><span class="p">.</span><span class="n">cx</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">16</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x0081</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mh">0x0081</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="cm">/* This error indicates the response is not expected</span>
<span class="cm">		   to come from the correct source (the high bandwidth</span>
<span class="cm">		   backdoor) and we should bail. */</span><span class="w"></span>
<span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="mi">-1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* Write the data to the high-bandwidth backdoor */</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_cmd</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="mi">0</span><span class="p">};</span><span class="w"></span>
<span class="w">	</span><span class="n">data</span><span class="p">.</span><span class="n">bx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x00010000</span><span class="p">;</span><span class="w"> </span><span class="cm">/* High-bandwidth commands are in EBX */</span><span class="w"></span>
<span class="w">	</span><span class="n">data</span><span class="p">.</span><span class="n">cx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">size</span><span class="p">;</span><span class="w"> </span><span class="cm">/* And ECX stores the size */</span><span class="w"></span>
<span class="w">	</span><span class="n">data</span><span class="p">.</span><span class="n">dx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">channel</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">16</span><span class="p">;</span><span class="w"> </span><span class="cm">/* Channel still in EDX though */</span><span class="w"></span>
<span class="w">	</span><span class="n">data</span><span class="p">.</span><span class="n">si</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint32_t</span><span class="p">)</span><span class="n">msg</span><span class="p">;</span><span class="w"> </span><span class="cm">/* Probably needs adjustments for 64-bit guests */</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_send_hb</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* Confirm status code */</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">bx</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x00010000</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="cm">/* Failed to send */</span><span class="w"></span>
<span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="mi">-1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="cm">/* Success */</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="cm">/* Receive data from message channel */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">recv_msg</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">channel</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="kt">size_t</span><span class="w"> </span><span class="n">bufsize</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">size</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* Request the recv data size */</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_cmd</span><span class="w"> </span><span class="n">recv</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="mi">0</span><span class="p">};</span><span class="w"></span>
<span class="w">	</span><span class="n">recv</span><span class="p">.</span><span class="n">cx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CMD_MESSAGE</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">MESSAGE_RECV</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">recv</span><span class="p">.</span><span class="n">dx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">channel</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">16</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">recv</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cmd</span><span class="p">.</span><span class="n">bx</span><span class="p">;</span><span class="w"> </span><span class="cm">/* Data size from bx */</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="cm">/* Nothing more to do for empty message */</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(((</span><span class="n">cmd</span><span class="p">.</span><span class="n">cx</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">16</span><span class="p">)</span><span class="w">  </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x0083</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mh">0x0083</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="cm">/* The VM is trying to send us data through the wrong mechanism */</span><span class="w"></span>
<span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="mi">-1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>

<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">bufsize</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="cm">/* There is insufficient space in our buffer to fit this message */</span><span class="w"></span>
<span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="mi">-1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="n">vmware_cmd</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="mi">0</span><span class="p">};</span><span class="w"></span>
<span class="w">	</span><span class="n">data</span><span class="p">.</span><span class="n">bx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x00010000</span><span class="p">;</span><span class="w"> </span><span class="cm">/* Same BX value as sending; just means &quot;high bandwidth data&quot; */</span><span class="w"></span>
<span class="w">	</span><span class="n">data</span><span class="p">.</span><span class="n">cx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">size</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">data</span><span class="p">.</span><span class="n">dx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">channel</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">16</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">data</span><span class="p">.</span><span class="n">di</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint32_t</span><span class="p">)</span><span class="n">buf</span><span class="p">;</span><span class="w"> </span><span class="cm">/* For reads, DI */</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_get_hb</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* Check status bit */</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">bx</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x00010000</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="cm">/* Failed to receive */</span><span class="w"></span>
<span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="mi">-1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="n">vmware_cmd</span><span class="w"> </span><span class="n">ack</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="mi">0</span><span class="p">};</span><span class="w"></span>
<span class="w">	</span><span class="n">ack</span><span class="p">.</span><span class="n">cx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CMD_MESSAGE</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">MESSAGE_ACK</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">ack</span><span class="p">.</span><span class="n">bx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x0001</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">ack</span><span class="p">.</span><span class="n">dx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">channel</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">16</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">vmware_send</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ack</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">size</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>With these primitives, we can implement the RPCI and TCLO channels.
</p>
<h3><span class="mw-headline" id="RPCI">RPCI</span></h3>
<p>RPCI is used to send strings containing capability information and other data to the VM. These are a simple one-shot messages.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define MSG_PROTO_RPCI 0x49435052 </span><span class="cm">/* R P C I */</span><span class="cp"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">rpci_string</span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">request</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">channel</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">open_msg_channel</span><span class="p">(</span><span class="n">MSG_PROTO_RPCI</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">channel</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">channel</span><span class="p">;</span><span class="w"> </span><span class="cm">/* Return error code */</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="kt">size_t</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strlen</span><span class="p">(</span><span class="n">request</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="cm">/* RPCI messages include nul terminator */</span><span class="w"></span>
<span class="w">	</span><span class="n">send_msg</span><span class="p">(</span><span class="n">channel</span><span class="p">,</span><span class="w"> </span><span class="n">request</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="p">);</span><span class="w"> </span><span class="cm">/* Send RPCI message */</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* The VM sends a response that should contain a success code */</span><span class="w"></span>
<span class="w">	</span><span class="kt">char</span><span class="w"> </span><span class="n">buf</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span><span class="w"> </span><span class="cm">/* Response buffer */</span><span class="w"></span>
<span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">recv_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">recv_msg</span><span class="p">(</span><span class="n">channel</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span><span class="w"></span>

<span class="w">	</span><span class="n">close_msg_channel</span><span class="p">(</span><span class="n">channel</span><span class="p">);</span><span class="w"> </span><span class="cm">/* Close the channel now that we are done with it */</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">recv_size</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">recv_size</span><span class="p">;</span><span class="w"> </span><span class="cm">/* Return error code */</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="cm">/* 0 for success */</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="TCLO">TCLO</span></h3>
<p>The TCLO channel is used to receive and acknowledge events. We'll use it later to receive display resolution information. There is only one TCLO channel available, and we'll keep it open through multiple operations.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define MSG_PROTO_TCLO 0x4f4c4354 </span><span class="cm">/* T C L O */</span><span class="cp"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">open_tclo_channel</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="k">static</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">tclo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">-1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">tclo</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">-1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="cm">/* If the TCLO channel was already open, close it so we can reopen */</span><span class="w"></span>
<span class="w">		</span><span class="n">close_msg_channel</span><span class="p">(</span><span class="n">tclo</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="n">tclo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">open_msg_channel</span><span class="p">(</span><span class="n">MSG_PROTO_TCLO</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">tclo</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>To communicate with the TCLO channel, we first send an empty message indicating we are expecting an event message:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">int</span><span class="w"> </span><span class="nf">tclo_query</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">tclo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">open_tclo_channel</span><span class="p">();</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">tclo</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">-1</span><span class="p">;</span><span class="w"> </span><span class="cm">/* Failed to open channel */</span><span class="w"></span>

<span class="w">	</span><span class="kt">char</span><span class="w"> </span><span class="n">buf</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span><span class="w"> </span><span class="cm">/* Should be big enough */</span><span class="w"></span>

<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">send_msg</span><span class="p">(</span><span class="n">tclo</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">-1</span><span class="p">;</span><span class="w"> </span><span class="cm">/* Failed to send empty message */</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">recv_msg</span><span class="p">(</span><span class="n">tclo</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="mi">256</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">-1</span><span class="p">;</span><span class="w"> </span><span class="cm">/* Receive error */</span><span class="w"></span>
<span class="w">		</span>
<span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="cm">/* Empty response means nothing available */</span><span class="w"></span>
<span class="w">			</span><span class="cm">/* This is a good time to send capability reports. */</span><span class="w"></span>
<span class="w">			</span><span class="cm">/* This is also a good time to yield! */</span><span class="w"></span>
<span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">send_msg</span><span class="p">(</span><span class="n">tclo</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">-1</span><span class="p">;</span><span class="w"> </span><span class="cm">/* Failed to send blank response */</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="cm">/* TODO: Check message types */</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>Messages received from the TCLO channel are human-readable text. We'll use prefix matching to check different commands. I'll assume you have a function called "startswith" which can be implemented with strncmp.
</p><p>Two important commands are "reset" and "ping". This is where we're going to start to see some very specific responses VMware is expecting. TCLO replies do not include nul bytes. We'll write a quick macro to send replies so we don't have to repeat ourselves:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define TCLO_REPLY(x) send_msg(tclo, x, sizeof(x))</span>
<span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">startswith</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;reset&quot;</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">TCLO_REPLY</span><span class="p">(</span><span class="s">&quot;OK ATR toolbox&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">-1</span><span class="p">;</span><span class="w"> </span><span class="cm">/* Failed to send */</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">startswith</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;ping&quot;</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">TCLO_REPLY</span><span class="p">(</span><span class="s">&quot;OK &quot;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">-1</span><span class="p">;</span><span class="w"> </span><span class="cm">/* Failed to send */</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">TCLO_REPLY</span><span class="p">(</span><span class="s">&quot;ERROR Unknown command&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">-1</span><span class="p">;</span><span class="w"> </span><span class="cm">/* Failed to send */</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="Automatically_Setting_the_Display_Resolution">Automatically Setting the Display Resolution</span></h2>
<p>There are some esoteric RPCI strings we need to send to indicate we are capable of receiving display resolution data. I have not tested whether some of these may be omitted, but the sample code from VMware sends all of them:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rpci_string</span><span class="p">(</span><span class="s">&quot;tools.capability.resolution_set 1&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rpci_string</span><span class="p">(</span><span class="s">&quot;tools.capability.resolution_server toolbox 1&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rpci_string</span><span class="p">(</span><span class="s">&quot;tools.capability.display_topology_set 1&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rpci_string</span><span class="p">(</span><span class="s">&quot;tools.capability.color_depth_set 1&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rpci_string</span><span class="p">(</span><span class="s">&quot;tools.capability.resolution_min 0 0&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rpci_string</span><span class="p">(</span><span class="s">&quot;tools.capability.unity 1&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
</pre></div>
<p>As for where to send these, the VMware sample code sends them once on startup and then again when there is nothing in the TCLO queue after receiving a "Capabilities_Register" event from TCLO. I have found only the latter is necessary for things to work.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">int</span><span class="w"> </span><span class="n">send_capabilities</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="p">...</span><span class="w"></span>
<span class="cm">/* This is a good time to send capability reports. */</span><span class="w"></span>
<span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">send_capabilities</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rpci_string</span><span class="p">(</span><span class="s">&quot;tools.capability.resolution_set 1&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rpci_string</span><span class="p">(</span><span class="s">&quot;tools.capability.resolution_server toolbox 1&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rpci_string</span><span class="p">(</span><span class="s">&quot;tools.capability.display_topology_set 1&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rpci_string</span><span class="p">(</span><span class="s">&quot;tools.capability.color_depth_set 1&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rpci_string</span><span class="p">(</span><span class="s">&quot;tools.capability.resolution_min 0 0&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">rpci_string</span><span class="p">(</span><span class="s">&quot;tools.capability.unity 1&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="n">send_capabilities</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* This is also a good time to yield! */</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="p">...</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">startswith</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Capabilities_Register&quot;</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">TCLO_REPLY</span><span class="p">(</span><span class="s">&quot;OK &quot;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">-1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">send_capabilities</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="p">...</span><span class="w"></span>
</pre></div>
<p>Once we have registered our ability to handle resolution events, we'll also see "Resolution_Set" events from the TCLO channel:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="p">...</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">startswith</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Resolution_Set&quot;</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* Split the arguments */</span><span class="w"></span>
<span class="w">	</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">x_str</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">buf</span><span class="p">[</span><span class="mi">15</span><span class="p">];</span><span class="w"> </span><span class="cm">/* one space after Resolution_Set */</span><span class="w"></span>
<span class="w">	</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">y_str</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strstr</span><span class="p">(</span><span class="n">x_str</span><span class="p">,</span><span class="w"> </span><span class="s">&quot; &quot;</span><span class="p">);</span><span class="w"> </span><span class="o">*</span><span class="n">y_str</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sc">&#39;\0&#39;</span><span class="p">;</span><span class="w"> </span><span class="n">y_str</span><span class="o">++</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">atoi</span><span class="p">(</span><span class="n">x_str</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">atoi</span><span class="p">(</span><span class="n">y_str</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="n">set_display_resolution</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">);</span><span class="w"></span>

<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">TCLO_REPLY</span><span class="p">(</span><span class="s">&quot;OK &quot;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">-1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* Now may also be a good time to yield for an extended period of time</span>
<span class="cm">	   as it&#39;s unlikely the user will be resizing the guest again for a while */</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="p">...</span><span class="w"></span>
</pre></div>
<p>And that's it - we have everything we need to set the display resolution to optimally fill the VMware window.
</p><p>Do note, however, that unlike the Bochs display device, the VMware one uses strides that may not match width*bpp, which is more apparent at arbitrary window sizes.
</p>
<!-- 
NewPP limit report
Cached time: 20250211131701
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.117 seconds
Real time usage: 2.334 seconds
Preprocessor visited node count: 99/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 74826/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4329-0!canonical and timestamp 20250211131659 and revision id 28102.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=VMware_tools&amp;oldid=28102">https://wiki.osdev.org/index.php?title=VMware_tools&amp;oldid=28102</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Emulators" title="Category:Emulators">Emulators</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=VMware+tools" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="VMware_tools#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="VMware_tools" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:VMware_tools&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="VMware_tools"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=VMware_tools&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=VMware_tools&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/VMware_tools" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/VMware_tools" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=VMware_tools&amp;oldid=28102" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=VMware_tools&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 9 July 2023, at 22:37.</li>
	<li id="footer-info-0">This page has been accessed 3,697 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=VMware_tools&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.117","walltime":"2.334","ppvisitednodes":{"value":99,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":74826,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250211131701","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":2442});});</script>
</body>
</html>