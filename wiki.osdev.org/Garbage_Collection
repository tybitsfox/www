<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Garbage collection - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"42d3d236bfc0ad1823a5fe19","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Garbage_collection","wgTitle":"Garbage collection","wgCurRevisionId":19321,"wgRevisionId":19321,"wgArticleId":1698,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Memory management"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Garbage_collection","wgRelevantArticleId":1698,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRedirectedFrom":"Garbage_Collection",
"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgInternalRedirectTargetUrl":"/Garbage_collection","wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["mediawiki.action.view.redirect","site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<link rel="canonical" href="Garbage_collection"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Garbage_collection rootpage-Garbage_collection skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Garbage collection</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"><span class="mw-redirectedfrom">(Redirected from <a href="https://wiki.osdev.org/index.php?title=Garbage_Collection&amp;redirect=no" class="mw-redirect" title="Garbage Collection">Garbage Collection</a>)</span></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Garbage_Collection#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Garbage_Collection#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p><b>Garbage Collection</b> (<b>GC</b>) is a <a href="Memory_management" title="Memory management">memory management</a> technique frequently used in high-level languages that allows the programmer not to worry about when memory areas should be returned to the system. Virtually all the <a href="https://wiki.osdev.org/index.php?title=Object-oriented_language&amp;action=edit&amp;redlink=1" class="new" title="Object-oriented language (page does not exist)">object-oriented languages</a> introduced after <a href="C++" title="C++">C++</a> provide some way of garbage collection (including Python, Java, Objective C). It can also be found in LISP or PERL, for instance.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Garbage_Collection#How_does_it_work?"><span class="tocnumber">1</span> <span class="toctext">How does it work?</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="Garbage_Collection#Reference_counting"><span class="tocnumber">1.1</span> <span class="toctext">Reference counting</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="Garbage_Collection#Mark_&amp;_Sweep"><span class="tocnumber">1.2</span> <span class="toctext">Mark &amp; Sweep</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="Garbage_Collection#Copy_collectors"><span class="tocnumber">1.3</span> <span class="toctext">Copy collectors</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="Garbage_Collection#Can_I_use_garbage_collection_in_my_OS?"><span class="tocnumber">2</span> <span class="toctext">Can I use garbage collection in my OS?</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="Garbage_Collection#References"><span class="tocnumber">3</span> <span class="toctext">References</span></a>
<ul>
<li class="toclevel-2 tocsection-7"><a href="Garbage_Collection#Forum"><span class="tocnumber">3.1</span> <span class="toctext">Forum</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="Garbage_Collection#Websites"><span class="tocnumber">3.2</span> <span class="toctext">Websites</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span id="How_does_it_work.3F"></span><span class="mw-headline" id="How_does_it_work?">How does it work?</span></h2>
<h3><span class="mw-headline" id="Reference_counting">Reference counting</span></h3>
<p>The most basic implementation of garbage collection uses <b>reference counting</b>: each object is associated with a counter that tells how many other objects refer to it. Say for instance you have a <tt>Disk</tt> object, every time your system needs another reference to that object (for instance because the <tt>DiskPartition</tt> object has a reference to the parent <tt>Disk</tt> object), the reference counter of <tt>Disk</tt> is incremented. Of course, if programmed manually, this is tedious and bugprone (although in C++ at least, the use of <a href="Smart_Pointer" title="Smart Pointer">smart pointers</a> can automate this bookkeeping). Plus GC's solely based on reference counting will be unable to free self-referencing (or circular) structures, meaning that memory leaks are possible.
</p>
<h3><span id="Mark_.26_Sweep"></span><span class="mw-headline" id="Mark_&amp;_Sweep">Mark &amp; Sweep</span></h3>
<p>A <b>mark-sweep garbage collector</b> traverses all reachable objects in the heap by following pointers beginning with the "roots", i.e. pointers stored in statically allocated or <a href="Stack" title="Stack">stack</a> allocated program variables (and possibly registers as well, depending on the GC implementation). All such reachable objects are marked. A sweep over the entire heap is then performed to restore unmarked objects to a free list, so they can be reallocated.
</p>
<dl><dd><i>Drawn from Hans Boehm's texts, see links below.</i></dd></dl>
<h3><span class="mw-headline" id="Copy_collectors">Copy collectors</span></h3>
<p>In contrast, a <b>copying collector</b> copies reachable objects to another region of memory as they are being traversed. Provided the traversal is done in breadth first order, there is a well-known and simple algorithm for performing this traversal without auxiliary storage or recursion. After such a traversal all surviving objects reside in a contiguous region of memory, and all pointers have been updated to point to the new object locations. The previously used region of memory can then be reused in its entirety. Allocation becomes trivial, since all free space is always contiguous.
</p><p>During the process, the GC builds an object graph to track the "live" objects so that it can update references to any objects that it moves. This means that with a compacting GC, there is no extra level of indirection required in order to move objects around in memory. It also means that programmers cannot rely on the values of references remaining stable during execution of their program, which is one reason why languages such as Java and C# disallow pointer arithmetic on references to garbage collected objects.
</p><p>A variant of compacting collectors is the <b>generational garbage collector</b> where the memory is partitioned among recently-created objects and longer-lived objects. If an object remains present in the "recently-created" heap for <i>N</i> sweeps of the GC, it is then moved to the "longer-lived" heap. This technique is used by some JVMs and the .NET CLR to reduce the cost of heap-sweeping as the heap grows larger. It is based on the assumption that a long-lived object is less likely to become garbage and thus that the "long-lived objects" heap could be swept with lower frequency.
</p><p>One of the major advantages of a compacting collector is that it makes allocating from the heap extremely fast and scalable to multiprocessor systems. All you have to do to allocate a new object is to increment a "top-of-heap" pointer and initialize a few fields, which can be done in constant time. A primitive <tt>malloc()</tt> would, in comparison, have to scan the free block list to find a block large enough to satisfy the request, with a worst-case complexity of <i>O</i>(<i>n</i>) (<i>n</i> being the number of free blocks), all the while holding a global heap lock &#8211; not a Good Idea<sup>tm</sup> in a multithreading system. (Modern <tt>malloc()</tt> implementations use a number of techniques to reduce the impact of this, and achieve <i>O</i>(1) behaviour for most cases.)
</p><p>On the other hand, most compacting collectors need to "stop the world" (i.e. suspend all threads) during a collection so that they can safely move objects around. This makes them very unsuitable for use in a real-time system, and that most likely includes OS kernels as well.
</p>
<h2><span id="Can_I_use_garbage_collection_in_my_OS.3F"></span><span class="mw-headline" id="Can_I_use_garbage_collection_in_my_OS?">Can I use garbage collection in my OS?</span></h2>
<p>There isn't a real agreement on that among the community. Some says you shouldn't even think about it, other says it is fully possible. If this is your very first OS and unless you start your OS with the goal of proving that a garbage collector in kernel land is possible and better than by-hand memory management, then probably you shouldn't mess with garbage collection.
</p><p>Whatever you chose to do, make sure that your garbage collector implementation is fully tested and stressed in a host environment before moving it into kernel space. And that missing a few garbage items is probably better than collecting live items :P
</p><p>The "Singularity" project (Microsoft Research, closed-source) and the <a rel="nofollow" class="external text" href="http://www.flingos.co.uk">FlingOS (educational OS, open-source)</a> both use GC everywhere including in the kernel, so it can be done. Yet it needs to be done properly and it has important implications on your kernel design:
</p>
<ul><li>Using a single garbage-collected heap for every chunk of memory (both kernel and user) is probably a Bad Thing<sup>tm</sup>. You are most likely to have collected kernel-wide heap, collected process(/thread)-pinned heap(s) and uncollected kernel heap.</li>
<li>Having the garbage-collector freeze everything to work is unacceptable at kernel level, yet not all GC's require this (concurent mark &amp; sweep being an example).</li>
<li>Garbage collection is often coupled with strong object typing and important restrictions on pointers arithmetic which might not be practical in C/C++ ... still under discussion.</li></ul>
<h2><span class="mw-headline" id="References">References</span></h2>
<h3><span class="mw-headline" id="Forum">Forum</span></h3>
<ul><li><a rel="nofollow" class="external text" href="http://www.osdev.org/phpBB2/viewtopic.php?t=11400">"Newbie Memory Management Question"</a></li>
<li><a rel="nofollow" class="external text" href="http://www.osdev.org/phpBB2/viewtopic.php?t=11332">"Digital Mars C/D compilers"</a></li></ul>
<h3><span class="mw-headline" id="Websites">Websites</span></h3>
<ul><li><a href="https://wikipedia.org/wiki/Garbage_collection_(computer_science)" class="extiw" title="wikipedia:Garbage collection (computer science)">Wikipedia on Garbage collection</a></li>
<li><a rel="nofollow" class="external free" href="http://www-128.ibm.com/developerworks/library/l-memory/">http://www-128.ibm.com/developerworks/library/l-memory/</a> - IBM article about memory management</li>
<li><a rel="nofollow" class="external free" href="ftp://ftp.research.microsoft.com/pub/tr/TR-2005-135.pdf">ftp://ftp.research.microsoft.com/pub/tr/TR-2005-135.pdf</a> - Microsoft Singularity Technical Report</li>
<li><a rel="nofollow" class="external text" href="http://msdn.microsoft.com/library/default.asp?url=/msdnmag/issues/1100/gci/toc.asp">"GC in the .NET Framework Part I"</a></li>
<li><a rel="nofollow" class="external text" href="http://msdn.microsoft.com/msdnmag/issues/1200/GCI2/default.aspx">"GC in the .NET Framework Part II"</a></li>
<li><a rel="nofollow" class="external free" href="http://www.hpl.hp.com/personal/Hans_Boehm/gc/">http://www.hpl.hp.com/personal/Hans_Boehm/gc/</a></li></ul>
<!-- 
NewPP limit report
Cached time: 20250211125448
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.010 seconds
Real time usage: 0.011 seconds
Preprocessor visited node count: 29/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1698-0!canonical and timestamp 20250211125448 and revision id 19321.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Garbage_collection&amp;oldid=19321">https://wiki.osdev.org/index.php?title=Garbage_collection&amp;oldid=19321</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="./Category:Memory_management" title="Category:Memory management">Memory management</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Garbage+collection" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Garbage_Collection#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Garbage_collection" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:Garbage_collection&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Garbage_collection"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Garbage_collection&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Garbage_collection&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Garbage_collection" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Garbage_collection" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Garbage_collection&amp;oldid=19321" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Garbage_collection&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 2 June 2016, at 20:59.</li>
	<li id="footer-info-0">This page has been accessed 2,597 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Garbage_collection&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.010","walltime":"0.011","ppvisitednodes":{"value":29,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":0,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250211125448","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":115});});</script>
</body>
</html>