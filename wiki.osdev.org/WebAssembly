<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>WebAssembly - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"0ef0634c5bc9c95bec1ed950","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"WebAssembly","wgTitle":"WebAssembly","wgCurRevisionId":28777,"wgRevisionId":28777,"wgArticleId":4419,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Instruction Set Architecture","Standards"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"WebAssembly","wgRelevantArticleId":4419,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search"
:false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-WebAssembly rootpage-WebAssembly skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">WebAssembly</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="WebAssembly#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="WebAssembly#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p><b>WebAssembly</b> is a relatively new standard to support architecture independent executables, primarily on Web pages. But it is a much more than that, and the way it has been specified makes it uniquely qualified for a language, OS and machine independent executable format.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="WebAssembly#Rationale"><span class="tocnumber">1</span> <span class="toctext">Rationale</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="WebAssembly#Comparison_to_Other_Bytecode_Formats"><span class="tocnumber">2</span> <span class="toctext">Comparison to Other Bytecode Formats</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="WebAssembly#Lua"><span class="tocnumber">2.1</span> <span class="toctext">Lua</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="WebAssembly#Python"><span class="tocnumber">2.2</span> <span class="toctext">Python</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="WebAssembly#Java"><span class="tocnumber">2.3</span> <span class="toctext">Java</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="WebAssembly#WebAssembly"><span class="tocnumber">2.4</span> <span class="toctext">WebAssembly</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-7"><a href="WebAssembly#WebAssembly_Interpreter_Parlance"><span class="tocnumber">3</span> <span class="toctext">WebAssembly Interpreter Parlance</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="WebAssembly#Linking"><span class="tocnumber">4</span> <span class="toctext">Linking</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="WebAssembly#Binary_Format"><span class="tocnumber">5</span> <span class="toctext">Binary Format</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="WebAssembly#See_Also"><span class="tocnumber">6</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-11"><a href="WebAssembly#Specifications"><span class="tocnumber">6.1</span> <span class="toctext">Specifications</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="WebAssembly#Compilers"><span class="tocnumber">6.2</span> <span class="toctext">Compilers</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="WebAssembly#Interpeters"><span class="tocnumber">6.3</span> <span class="toctext">Interpeters</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="WebAssembly#Examples"><span class="tocnumber">6.4</span> <span class="toctext">Examples</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Rationale">Rationale</span></h2>
<p>What's any Web has to do with OS kernels, you may ask. The truth is, the name WebAssembly (or <b>WASM</b> in short) is quite misleading, as it's a very well specified bytecode format with a minimal interpreting environment, which <b>does not require any Web-related technologies at all</b>.
</p><p>A kernel already should have an executable format loader and parser (like an <a href="ELF" title="ELF">ELF</a> parser), but that must use native CPU instructions. Adding a small bytecode interpreter to that would allow any hobby OS to execute machine and OS independent binaries, which is a great benefit. It's similar how different Android devices use Java for executing the proprietary APK system.
</p><p>Unlike Java and Dalvik, interpreting WebAssembly binary is much easier, has no legal concerns, and there are many already written libraries to do so in many languages (most notably <a href="C" title="C">C</a> and <a href="Rust" title="Rust">Rust</a>).
</p>
<h2><span class="mw-headline" id="Comparison_to_Other_Bytecode_Formats">Comparison to Other Bytecode Formats</span></h2>
<h3><span class="mw-headline" id="Lua">Lua</span></h3>
<p><a href="Lua" title="Lua">Lua</a> is a very popular scripting language. However it's compiler, interpreter and execution environment is mixed into a single library. That's good for integrating with user space applications, but makes it difficult to embed into kernels (which would only need the bytecode interpreter part). The bytecode format is not really standardized, although seems quite stable.
</p>
<h3><span class="mw-headline" id="Python">Python</span></h3>
<p>As strange as it seems, there's no such thing as Python bytecode standard. Therefore it is pretty impossible to embed a Python interpreter into a kernel. There are interpreter libraries which you could link in, but just as the format, they are constantly changing, updated, and limited to a specific version of Python.
</p>
<h3><span class="mw-headline" id="Java">Java</span></h3>
<p><a href="Java_For_Starters" title="Java For Starters">Java</a> Has a very well defined bytecode format, but unfortunately there's no simple bytecode interpreter library. Both the official JVM and it's OpenSource counterparts are huge bloated software, not really designed for embedding into kernels. Even if there were a simple interpreter library, Java is licensed by Oracle and use is subject to certain legal terms. To clearify, Android does not use the Java bytecode at all, it's interpreting Dalvik bytecode which is compiled from Java source.
</p>
<h3><span class="mw-headline" id="WebAssembly">WebAssembly</span></h3>
<p>Unlike the rest, WebAssembly is not tied to any programming language, instead it's an open specification made by W3C. Therefore it is possible to compile C, C++, Rust, Pascal or even Basic into WASM bytecode. Also the execution environment is separated, and very well defined, therefore there are many implementations you can choose from.
</p><p>One of the most known C/C++ compiler that produces WASM bytecode is <a rel="nofollow" class="external text" href="https://emscripten.org/">EmScripten</a>, which is built on top of the LLVM compiler architecture.
There's a <a rel="nofollow" class="external text" href="https://github.com/WebAssembly/spec/tree/master/interpreter">reference bytecode interpreter</a> provided by W3C, which is in OCAML and aimed at simplicity (and not speed).
</p><p>The <a rel="nofollow" class="external text" href="https://www.w3.org/TR/wasm-core-1/">WebAssembly documentation an specification</a> allows unlimited languages and interpreters, and there are no licensing concerns involved. You are free to use any WASM compiler for any language and implement your own interpreter in your kernel.
</p>
<h2><span class="mw-headline" id="WebAssembly_Interpreter_Parlance">WebAssembly Interpreter Parlance</span></h2>
<ul><li><b>WASM</b>: a file which contains <a rel="nofollow" class="external text" href="https://www.w3.org/TR/wasm-core-1/#binary">binary WebAssembly bytecode</a>, also the name of the reference interpreter.</li>
<li><b>WAT</b>: WebAssembly Text source format, is a <a rel="nofollow" class="external text" href="https://www.w3.org/TR/wasm-core-1/#text">plain text representation</a> of the bytecode (see <a rel="nofollow" class="external text" href="https://github.com/WebAssembly/binaryen">Binaryen</a> wasm-at tool).</li>
<li><b>WABT</b>: WebAssembly Binary Toolkit, equivalent of binutils. Includes assembler, objdump and other tools (see <a rel="nofollow" class="external text" href="https://github.com/WebAssembly/wabt">WABT</a>).</li>
<li><b>MVP</b>: Minimal Viable Product, which means the smallest WASM interpreter (nothing Web related required or included). Defined in <a rel="nofollow" class="external text" href="https://www.w3.org/TR/wasm-core/">WebAssembly Core Specification</a></li>
<li><b>WASI</b>: WebAssembly System Interface, this defines an ABI and a set of functions how the bytecode interacts with the OS and non-WASM libraries.</li>
<li><b>EmScripten</b>: a WASI module, functions like memory allocation, everything that the EmScripten compiler may generate code for. Very simply speaking it's WebAssembly's current libc.</li>
<li><b>Web API</b>: a standardized way to <a rel="nofollow" class="external text" href="https://www.w3.org/TR/wasm-web-api/">integrate WebAssembly into webpages</a>, not our concern right now. Note that Web API is <i>optional</i> for WebAssembly.</li></ul>
<h2><span class="mw-headline" id="Linking">Linking</span></h2>
<p>WebAssembly has a very clean module linking interface, the <a rel="nofollow" class="external text" href="https://github.com/WebAssembly/WASI">WASI</a>. Also defined for OS-independent, easy <a rel="nofollow" class="external text" href="https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface/">non-Web integration</a>. There're official POSIX and SDL modules (more like library wrappers) for WebAssembly, but the number of unofficial, third-party libraries are growing day by day.
</p><p>Linkage for JavaScript, C/C++, Rust, Python and many other languages are now available and well tested. For kernels, you'll be interested in the <a rel="nofollow" class="external text" href="https://github.com/WebAssembly/wasm-c-api">C</a> or Rust linkage mostly. You can find and incomplete and growing <a rel="nofollow" class="external text" href="https://github.com/appcypher/awesome-wasm-langs">list here</a>.
</p><p>Right now EmScripten module is used for an OS interface, but this is going to change pretty soon. Big effort is put into WASI to provide a fully featured libc interface for WASM bytecode using musl as reference. Once WASI specs got frozen, all you'll need to implement/include is a WASI interpreter.
</p>
<h2><span class="mw-headline" id="Binary_Format">Binary Format</span></h2>
<p>A WASM file starts with a four byte magic, "asm\001", where the last character denotes format version. As such, it's pretty easy to identify.
</p><p>After the header come several sections, one of which contains the bytecode. The binutils equivalent <a rel="nofollow" class="external text" href="https://github.com/WebAssembly/wabt">WABT</a> includes a tool called <a rel="nofollow" class="external text" href="https://webassembly.github.io/wabt/doc/wasm-objdump.1.html">wasm-objdump</a> to dump these and disassemble bytecode. The details and encodings are specified by the WebAssembly Core Specification, section <a rel="nofollow" class="external text" href="https://www.w3.org/TR/wasm-core-1/#binary">binary format</a>.
</p>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<h4><span class="mw-headline" id="Specifications">Specifications</span></h4>
<ul><li><a rel="nofollow" class="external text" href="https://www.w3.org/TR/wasm-core-1">WebAssembly Core Specification</a></li>
<li><a rel="nofollow" class="external text" href="https://github.com/WebAssembly/WASI">WASI</a>, ABI specification to run WASM outside of Web browsers</li>
<li><a rel="nofollow" class="external text" href="https://github.com/WebAssembly/WASI/blob/main/docs/WASI-overview.md">WASI overview</a></li>
<li><a rel="nofollow" class="external text" href="https://github.com/CommonWA/cwa-spec">CommonWA</a> minimal specification of the standard API for non-Web usermode environments</li>
<li><a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/WebAssembly">WebAssembly</a> on Wikipedia</li>
<li><a rel="nofollow" class="external text" href="https://developer.mozilla.org/en-US/docs/WebAssembly">WebAssembly</a> on Mozilla Development Network</li>
<li><a rel="nofollow" class="external text" href="https://www.rust-lang.org/what/wasm">Rust and WebAssembly</a></li></ul>
<h4><span class="mw-headline" id="Compilers">Compilers</span></h4>
<ul><li><a rel="nofollow" class="external text" href="https://emscripten.org/">EmScripten</a>, a reference C/C++ compiler that produces WASM bytecode</li>
<li><a rel="nofollow" class="external text" href="https://surma.dev/things/c-to-webassembly/">LLVM</a> good description on how to use LLVM's default wasm target <b>without</b> the EmScripten bloat</li>
<li><a rel="nofollow" class="external text" href="https://github.com/tweag/asterius">Asterius</a>, a <a href="Haskell" title="Haskell">Haskell</a> compiler that produces WASM bytecode</li>
<li><a rel="nofollow" class="external text" href="https://rustwasm.github.io/">wasm-pack</a> a Rust compiler that produces WASM bytecode</li>
<li><a rel="nofollow" class="external text" href="https://github.com/i-net-software/JWebAssembly">JWebAssembly</a>, a Java bytecode to WebAssembly bytecode converter</li>
<li><a rel="nofollow" class="external text" href="https://github.com/WebAssembly/binaryen">Binaryen</a>, low level tools for WebAssembly, provided by W3C</li>
<li><a rel="nofollow" class="external text" href="https://github.com/bytecodealliance/wasmtime/tree/master/cranelift">Cranelift</a>, a WASM to native code compiler in Rust</li></ul>
<h4><span class="mw-headline" id="Interpeters">Interpeters</span></h4>
<ul><li><a rel="nofollow" class="external text" href="https://github.com/WebAssembly/spec/tree/master/interpreter">Reference Interpreter</a> in <b>OCaml</b>, provided by W3C</li>
<li><a rel="nofollow" class="external text" href="https://github.com/WebAssembly/wasmint">libwasmint</a> Interpreter in <b>C++</b>, a library designed for embedding, provided by W3C</li>
<li><a rel="nofollow" class="external text" href="https://github.com/WebAssembly/wabt/tree/master/src/interp">wasm-interp</a> Interpreter in <b>C++</b>, part of WABT, more complete than libwasmint</li>
<li><a rel="nofollow" class="external text" href="https://github.com/bytecodealliance/wasmtime/">wasmtime</a> yet another wasm interpreter, this time in <b>Rust</b> with WASI support (this is the reference implementation for WASI)</li>
<li><a rel="nofollow" class="external text" href="https://github.com/kanaka/wac">wac, wax, wace</a> Interpreter in <b>C</b>, this provides MVP, WASI, EmScripten-compatibility; probably the easiest to embed in a kernel</li>
<li><a rel="nofollow" class="external text" href="https://github.com/wasm3/wasm3">wasm3</a> Interpreter in <b>C</b>, aims for high performance and WASI compatibility</li>
<li><a rel="nofollow" class="external text" href="https://github.com/paritytech/wasmi">wasmi</a>, Interpreter in <b>Rust</b></li>
<li><a rel="nofollow" class="external text" href="https://github.com/mohanson/pywasm">pywasm</a> Interpreter in <b>Python</b></li>
<li><a rel="nofollow" class="external text" href="https://github.com/perlin-network/life">life</a> Interpreter in <b>Go</b></li>
<li><a rel="nofollow" class="external text" href="https://github.com/kenny-ngo/wasmjit">wasmjit</a> a Linux kernel module in <b>C</b> to run wasm bytecode</li>
<li><a rel="nofollow" class="external text" href="https://github.com/cervus-v/cervus">cervus</a> WebAssembly subsystem for Linux in <b>C</b></li>
<li><a rel="nofollow" class="external text" href="https://github.com/pablotron/pwasm">PWASM</a> easy to integrate WASM execution library (uses DynASM JIT) written in <b>C</b></li></ul>
<h4><span class="mw-headline" id="Examples">Examples</span></h4>
<ul><li><a rel="nofollow" class="external text" href="https://github.com/kwast-os/kwast">kwast</a> a kernel written in Rust which runs wasm bytecode in userspace (under heavy development as of early 2020).</li>
<li><a rel="nofollow" class="external text" href="https://github.com/ColinEberhardt/wasm-mandelbrot">wasm-mandelbrot</a> example on how to use EmScripten, wasm-toolchain, clang + BinaryEm, etc.</li>
<li><a rel="nofollow" class="external text" href="https://github.com/mdn/webassembly-examples/">WebAssembly examples</a> by Mozilla</li>
<li><a rel="nofollow" class="external text" href="https://developer.mozilla.org/en-US/docs/WebAssembly/Rust_to_wasm">Tutorial on Rust to WASM</a> by Mozilla</li></ul>
<!-- 
NewPP limit report
Cached time: 20250211125235
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.014 seconds
Real time usage: 0.015 seconds
Preprocessor visited node count: 48/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4419-0!canonical and timestamp 20250211125235 and revision id 28777.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=WebAssembly&amp;oldid=28777">https://wiki.osdev.org/index.php?title=WebAssembly&amp;oldid=28777</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="./Category:Instruction_Set_Architecture" title="Category:Instruction Set Architecture">Instruction Set Architecture</a></li><li><a href="./Category:Standards" title="Category:Standards">Standards</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=WebAssembly" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="WebAssembly#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="WebAssembly" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:WebAssembly&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="WebAssembly"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=WebAssembly&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=WebAssembly&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/WebAssembly" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/WebAssembly" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=WebAssembly&amp;oldid=28777" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=WebAssembly&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 30 April 2024, at 10:23.</li>
	<li id="footer-info-0">This page has been accessed 3,668 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=WebAssembly&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.014","walltime":"0.015","ppvisitednodes":{"value":48,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":0,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250211125235","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":109});});</script>
</body>
</html>