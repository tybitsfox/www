<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>A20 Line - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"9b2cac3060744272cce86f46","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"A20_Line","wgTitle":"A20 Line","wgCurRevisionId":28141,"wgRevisionId":28141,"wgArticleId":1433,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","X86","Memory management"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"A20_Line","wgRelevantArticleId":1433,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRedirectedFrom":"A20Line",
"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgInternalRedirectTargetUrl":"/A20_Line","wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["mediawiki.action.view.redirect","site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<link rel="canonical" href="A20_Line"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-A20_Line rootpage-A20_Line skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">A20 Line</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"><span class="mw-redirectedfrom">(Redirected from <a href="https://wiki.osdev.org/index.php?title=A20Line&amp;redirect=no" class="mw-redirect" title="A20Line">A20Line</a>)</span></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="A20Line#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="A20Line#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>The A20 Address Line is the physical representation of the 21st bit (number 20, counting from 0) of any memory access. When the IBM-AT (Intel 286) was introduced, it was able to access up to sixteen megabytes of memory (instead of the 1 MByte of the 8086). But to remain compatible with the 8086, a quirk in the 8086 architecture (memory wraparound) had to be duplicated in the AT. To achieve this, the A20 line on the address bus was disabled by default.
</p><p>The wraparound was caused by the fact the 8086 could only access 1 megabyte of memory, but because of the segmented memory model it could effectively address up to 1 megabyte and 64 kilobytes (minus 16 bytes).  Because there are 20 address lines on the 8086 (A0 through A19), any address above the 1 megabyte mark wraps around to zero. For some reason a few short-sighted programmers decided to write programs that actually used this wraparound (rather than directly addressing the memory at its normal location at the bottom of memory).  Therefore in order to support these 8086-era programs on the new processors, this wraparound had to be emulated on the IBM AT and its compatibles; this was originally achieved by way of a latch that by default set the A20 line to zero. Later the 486 added the logic into the processor and introduced the A20M pin to control it.
</p><p>For an operating system developer (or <a href="Bootloader" title="Bootloader">Bootloader</a> developer) this means the A20 line has to be enabled so that all memory can be accessed. This started off as a simple hack but as simpler methods were added to do it, it became harder to program code that would definitely enable it and even harder to program code that would definitely disable it.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="A20Line#Keyboard_Controller"><span class="tocnumber">1</span> <span class="toctext">Keyboard Controller</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="A20Line#Testing_the_A20_line"><span class="tocnumber">2</span> <span class="toctext">Testing the A20 line</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="A20Line#Testing_The_A20_Line_From_Protected_Mode"><span class="tocnumber">2.1</span> <span class="toctext">Testing The A20 Line From Protected Mode</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="A20Line#Enabling"><span class="tocnumber">3</span> <span class="toctext">Enabling</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="A20Line#Keyboard_Controller_2"><span class="tocnumber">3.1</span> <span class="toctext">Keyboard Controller</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="A20Line#Fast_A20_Gate"><span class="tocnumber">3.2</span> <span class="toctext">Fast A20 Gate</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="A20Line#INT_15"><span class="tocnumber">3.3</span> <span class="toctext">INT 15</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="A20Line#Access_of_0xee"><span class="tocnumber">3.4</span> <span class="toctext">Access of 0xee</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="A20Line#Recommended_Method"><span class="tocnumber">3.5</span> <span class="toctext">Recommended Method</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="A20Line#Final_code_example"><span class="tocnumber">3.6</span> <span class="toctext">Final code example</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="A20Line#See_Also"><span class="tocnumber">4</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-12"><a href="A20Line#External_links"><span class="tocnumber">4.1</span> <span class="toctext">External links</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Keyboard_Controller">Keyboard Controller</span></h2>
<p>The traditional method for A20 line enabling is to directly probe the keyboard controller. The reason for this is that Intel's <a href="&quot;8042&quot;_PS/2_Controller" title="&quot;8042&quot; PS/2 Controller">8042 keyboard controller</a> had a spare pin which they decided to route the A20 line through. This seems foolish now given their unrelated nature, but at the time computers weren't quite so standardized. Keyboard controllers are usually derivatives of the <a rel="nofollow" class="external text" href="http://www.diakom.ru/el/elfirms/datashts/Smsc/42w11.pdf">8042</a> chip. By programming that chip accurately, you can either enable or disable bit #20 on the address bus.
</p><p>When your PC boots, the A20 gate is generally disabled, but some BIOSes (and emulators, like QEMU) do enable it for you, as do some high-memory managers (HIMEM.SYS) or bootloaders (<a href="GRUB" title="GRUB">GRUB</a>).
</p>
<h2><span class="mw-headline" id="Testing_the_A20_line">Testing the A20 line</span></h2>
<p>Before enabling the A20 with any of the methods described below it is better to test whether the A20 address line was already enabled by the <a href="BIOS" title="BIOS">BIOS</a>. This can be achieved by comparing, at boot time in real mode, the bootsector identifier (0xAA55) located at address 0000:7DFE with the value 1 MiB higher which is at address FFFF:7E0E. When the two values are different it means that the A20 is already enabled otherwise if the values are identical it must be ruled out that this is not by mere chance. Therefore the bootsector identifier needs to be changed, for instance by rotating it left by 8 bits, and again compared to the 16 bits word at FFFF:7E0E. When they are still the same then the A20 address line is disabled otherwise it is enabled.
</p><p>The following code performs a check (not like described above -- more directly).
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">; The following code is public domain licensed</span>

<span class="err">[</span><span class="nf">bits</span><span class="w"> </span><span class="mi">16</span><span class="p">]</span><span class="w"></span>

<span class="c1">; Function: check_a20</span>
<span class="c1">;</span>
<span class="c1">; Purpose: to check the status of the a20 line in a completely self-contained state-preserving way.</span>
<span class="c1">;          The function can be modified as necessary by removing push&#39;s at the beginning and their</span>
<span class="c1">;          respective pop&#39;s at the end if complete self-containment is not required.</span>
<span class="c1">;</span>
<span class="c1">; Returns: 0 in ax if the a20 line is disabled (memory wraps around)</span>
<span class="c1">;          1 in ax if the a20 line is enabled (memory does not wrap around)</span>

<span class="nl">check_a20:</span><span class="w"></span>
<span class="w">    </span><span class="nf">pushf</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">ds</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">es</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">di</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">si</span><span class="w"></span>

<span class="w">    </span><span class="nf">cli</span><span class="w"></span>

<span class="w">    </span><span class="nf">xor</span><span class="w"> </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"> </span><span class="c1">; ax = 0</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">es</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>

<span class="w">    </span><span class="nf">not</span><span class="w"> </span><span class="no">ax</span><span class="w"> </span><span class="c1">; ax = 0xFFFF</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">ds</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>

<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">di</span><span class="p">,</span><span class="w"> </span><span class="mi">0x0500</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">si</span><span class="p">,</span><span class="w"> </span><span class="mi">0x0510</span><span class="w"></span>

<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">es</span><span class="p">:</span><span class="no">di</span><span class="p">]</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>

<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">ds</span><span class="p">:</span><span class="no">si</span><span class="p">]</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>

<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">es</span><span class="p">:</span><span class="no">di</span><span class="p">],</span><span class="w"> </span><span class="mi">0x00</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">ds</span><span class="p">:</span><span class="no">si</span><span class="p">],</span><span class="w"> </span><span class="mi">0xFF</span><span class="w"></span>

<span class="w">    </span><span class="nf">cmp</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">es</span><span class="p">:</span><span class="no">di</span><span class="p">],</span><span class="w"> </span><span class="mi">0xFF</span><span class="w"></span>

<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">ds</span><span class="p">:</span><span class="no">si</span><span class="p">],</span><span class="w"> </span><span class="no">al</span><span class="w"></span>

<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">es</span><span class="p">:</span><span class="no">di</span><span class="p">],</span><span class="w"> </span><span class="no">al</span><span class="w"></span>

<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="w">    </span><span class="nf">je</span><span class="w"> </span><span class="no">check_a20__exit</span><span class="w"></span>

<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"></span>

<span class="nl">check_a20__exit:</span><span class="w"></span>
<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">si</span><span class="w"></span>
<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">di</span><span class="w"></span>
<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">es</span><span class="w"></span>
<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">ds</span><span class="w"></span>
<span class="w">    </span><span class="nf">popf</span><span class="w"></span>

<span class="w">    </span><span class="nf">ret</span><span class="w"></span>
</pre></div>
<p><b>Note:</b> The above code may seem confusing to you, if so, below is the simplified code.
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">;	out:</span>
<span class="c1">;		ax - state (0 - disabled, 1 - enabled)</span>
<span class="nl">get_a20_state:</span><span class="w"></span>
<span class="w">	</span><span class="nf">pushf</span><span class="w"></span>
<span class="w">	</span><span class="nf">push</span><span class="w"> </span><span class="no">si</span><span class="w"></span>
<span class="w">	</span><span class="nf">push</span><span class="w"> </span><span class="no">di</span><span class="w"></span>
<span class="w">	</span><span class="nf">push</span><span class="w"> </span><span class="no">ds</span><span class="w"></span>
<span class="w">	</span><span class="nf">push</span><span class="w"> </span><span class="no">es</span><span class="w"></span>
<span class="w">	</span><span class="nf">cli</span><span class="w"></span>

<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="mi">0x0000</span><span class="w">					</span><span class="c1">;	0x0000:0x0500(0x00000500) -&gt; ds:si</span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">ds</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">si</span><span class="p">,</span><span class="w"> </span><span class="mi">0x0500</span><span class="w"></span>

<span class="w">	</span><span class="nf">not</span><span class="w"> </span><span class="no">ax</span><span class="w">						</span><span class="c1">;	0xffff:0x0510(0x00100500) -&gt; es:di</span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">es</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">di</span><span class="p">,</span><span class="w"> </span><span class="mi">0x0510</span><span class="w"></span>

<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">ds</span><span class="p">:</span><span class="no">si</span><span class="p">]</span><span class="w">					</span><span class="c1">;	save old values</span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[.</span><span class="no">BufferBelowMB</span><span class="p">],</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">es</span><span class="p">:</span><span class="no">di</span><span class="p">]</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[.</span><span class="no">BufferOverMB</span><span class="p">],</span><span class="w"> </span><span class="no">al</span><span class="w"></span>

<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">ah</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">ds</span><span class="p">:</span><span class="no">si</span><span class="p">],</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">es</span><span class="p">:</span><span class="no">di</span><span class="p">],</span><span class="w"> </span><span class="mi">1</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">ds</span><span class="p">:</span><span class="no">si</span><span class="p">]</span><span class="w"></span>
<span class="w">	</span><span class="nf">cmp</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">es</span><span class="p">:</span><span class="no">di</span><span class="p">]</span><span class="w">					</span><span class="c1">;	check byte at address 0x0500&#160;!= byte at address 0x100500</span>
<span class="w">	</span><span class="nf">jne</span><span class="w"> </span><span class="no">.exit</span><span class="w"></span>
<span class="w">	</span><span class="nf">dec</span><span class="w"> </span><span class="no">ah</span><span class="w"></span>
<span class="nl">.exit:</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="p">[.</span><span class="no">BufferBelowMB</span><span class="p">]</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="p">[</span><span class="no">ds</span><span class="p">:</span><span class="no">si</span><span class="p">],</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="p">[.</span><span class="no">BufferOverMB</span><span class="p">]</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="p">[</span><span class="no">es</span><span class="p">:</span><span class="no">di</span><span class="p">],</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
<span class="w">	</span><span class="nf">shr</span><span class="w"> </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="w">					</span><span class="c1">;	move result from ah to al register and clear ah</span>
<span class="w">	</span><span class="nf">sti</span><span class="w"></span>
<span class="w">	</span><span class="nf">pop</span><span class="w"> </span><span class="no">es</span><span class="w"></span>
<span class="w">	</span><span class="nf">pop</span><span class="w"> </span><span class="no">ds</span><span class="w"></span>
<span class="w">	</span><span class="nf">pop</span><span class="w"> </span><span class="no">di</span><span class="w"></span>
<span class="w">	</span><span class="nf">pop</span><span class="w"> </span><span class="no">si</span><span class="w"></span>
<span class="w">	</span><span class="nf">popf</span><span class="w"></span>
<span class="w">	</span><span class="nf">ret</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="nl">.BufferBelowMB:</span><span class="w">	</span><span class="nf">db</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="w">	</span><span class="na">.BufferOverMB</span><span class="w">	</span><span class="no">db</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="Testing_The_A20_Line_From_Protected_Mode">Testing The A20 Line From Protected Mode</span></h3>
<p>When in Protected Mode it's easier to test A20 because you can access A20's set memory addresses using any odd megabyte address and compare it to it's even megabyte neighbor.
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="err">[</span><span class="nf">bits</span><span class="w"> </span><span class="mi">32</span><span class="p">]</span><span class="w"></span>

<span class="c1">; Check A20 line</span>
<span class="c1">; Returns to caller if A20 gate is cleared.</span>
<span class="c1">; Continues to A20_on if A20 line is set.</span>
<span class="c1">; Written by Elad Ashkcenazi </span>

<span class="nf">is_A20_on</span><span class="err">?</span><span class="p">:</span><span class="w">   </span>

<span class="no">pushad</span><span class="w"></span>
<span class="nf">mov</span><span class="w"> </span><span class="no">edi</span><span class="p">,</span><span class="mi">0x112345</span><span class="w">  </span><span class="c1">;odd megabyte address.</span>
<span class="nf">mov</span><span class="w"> </span><span class="no">esi</span><span class="p">,</span><span class="mi">0x012345</span><span class="w">  </span><span class="c1">;even megabyte address.</span>
<span class="nf">mov</span><span class="w"> </span><span class="p">[</span><span class="no">esi</span><span class="p">],</span><span class="no">esi</span><span class="w">     </span><span class="c1">;making sure that both addresses contain diffrent values.</span>
<span class="nf">mov</span><span class="w"> </span><span class="p">[</span><span class="no">edi</span><span class="p">],</span><span class="no">edi</span><span class="w">     </span><span class="c1">;(if A20 line is cleared the two pointers would point to the address 0x012345 that would contain 0x112345 (edi)) </span>
<span class="nf">cmpsd</span><span class="w">             </span><span class="c1">;compare addresses to see if the&#39;re equivalent.</span>
<span class="nf">popad</span><span class="w"></span>
<span class="nf">jne</span><span class="w"> </span><span class="no">A20_on</span><span class="w">        </span><span class="c1">;if not equivalent , A20 line is set.</span>
<span class="nf">ret</span><span class="w">               </span><span class="c1">;if equivalent , the A20 line is cleared.</span>

<span class="nl">A20_on:</span><span class="w"></span>
<span class="c1">; *your code from here*</span>
</pre></div>
<h2><span class="mw-headline" id="Enabling">Enabling</span></h2>
<p>There are several sources that enable A20, commonly each of the inputs are or'ed together to form the A20 enable signal. This means that using one method (if supported by the chipset) is enough to enable A20. If you want to disable A20, you might have to disable all present sources. Always make sure that the A20 has the requested state by testing the line as described above.
</p>
<h3><span class="mw-headline" id="Keyboard_Controller_2">Keyboard Controller</span></h3>
<p>For the original method to enable the A20 line, some hardware IO using the Keyboard Controller chip (8042 chip) is necessary.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">void</span><span class="w"> </span><span class="nf">init_A20</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">   </span><span class="kt">uint8_t</span><span class="w">   </span><span class="n">a</span><span class="p">;</span><span class="w"></span>

<span class="w">   </span><span class="n">disable_ints</span><span class="p">();</span><span class="w"></span>

<span class="w">   </span><span class="n">kyb_wait_until_done</span><span class="p">();</span><span class="w"></span>
<span class="w">   </span><span class="n">kyb_send_command</span><span class="p">(</span><span class="mh">0xAD</span><span class="p">);</span><span class="w">         </span><span class="c1">// disable keyboard</span>

<span class="w">   </span><span class="n">kyb_wait_until_done</span><span class="p">();</span><span class="w"></span>
<span class="w">   </span><span class="n">kyb_send_command</span><span class="p">(</span><span class="mh">0xD0</span><span class="p">);</span><span class="w">         </span><span class="c1">// Read from input</span>

<span class="w">   </span><span class="n">kyb_wait_until_done</span><span class="p">();</span><span class="w"></span>
<span class="w">   </span><span class="n">a</span><span class="o">=</span><span class="n">kyb_get_data</span><span class="p">();</span><span class="w"></span>

<span class="w">   </span><span class="n">kyb_wait_until_done</span><span class="p">();</span><span class="w"></span>
<span class="w">   </span><span class="n">kyb_send_command</span><span class="p">(</span><span class="mh">0xD1</span><span class="p">);</span><span class="w">         </span><span class="c1">// Write to output</span>

<span class="w">   </span><span class="n">kyb_wait_until_done</span><span class="p">();</span><span class="w"></span>
<span class="w">   </span><span class="n">kyb_send_data</span><span class="p">(</span><span class="n">a</span><span class="o">|</span><span class="mi">2</span><span class="p">);</span><span class="w"></span>

<span class="w">   </span><span class="n">kyb_wait_until_done</span><span class="p">();</span><span class="w"></span>
<span class="w">   </span><span class="n">kyb_send_command</span><span class="p">(</span><span class="mh">0xAE</span><span class="p">);</span><span class="w">         </span><span class="c1">// enable keyboard</span>

<span class="w">   </span><span class="n">enable_ints</span><span class="p">();</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>or in <a href="Assembly" title="Assembly">assembly</a>
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">;;</span>
<span class="c1">;; NASM 32bit assembler</span>
<span class="c1">;;</span>

<span class="err">[</span><span class="nf">bits</span><span class="w"> </span><span class="mi">32</span><span class="p">]</span><span class="w"></span>
<span class="err">[</span><span class="nf">section</span><span class="w"> </span><span class="no">.text</span><span class="p">]</span><span class="w"></span>

<span class="nl">enable_A20:</span><span class="w"></span>
<span class="w">        </span><span class="nf">cli</span><span class="w"></span>

<span class="w">        </span><span class="nf">call</span><span class="w">    </span><span class="no">a20wait</span><span class="w"></span>
<span class="w">        </span><span class="nf">mov</span><span class="w">     </span><span class="no">al</span><span class="p">,</span><span class="mi">0xAD</span><span class="w"></span>
<span class="w">        </span><span class="nf">out</span><span class="w">     </span><span class="mi">0x64</span><span class="p">,</span><span class="no">al</span><span class="w"></span>

<span class="w">        </span><span class="nf">call</span><span class="w">    </span><span class="no">a20wait</span><span class="w"></span>
<span class="w">        </span><span class="nf">mov</span><span class="w">     </span><span class="no">al</span><span class="p">,</span><span class="mi">0xD0</span><span class="w"></span>
<span class="w">        </span><span class="nf">out</span><span class="w">     </span><span class="mi">0x64</span><span class="p">,</span><span class="no">al</span><span class="w"></span>

<span class="w">        </span><span class="nf">call</span><span class="w">    </span><span class="no">a20wait2</span><span class="w"></span>
<span class="w">        </span><span class="nf">in</span><span class="w">      </span><span class="no">al</span><span class="p">,</span><span class="mi">0x60</span><span class="w"></span>
<span class="w">        </span><span class="nf">push</span><span class="w">    </span><span class="no">eax</span><span class="w"></span>

<span class="w">        </span><span class="nf">call</span><span class="w">    </span><span class="no">a20wait</span><span class="w"></span>
<span class="w">        </span><span class="nf">mov</span><span class="w">     </span><span class="no">al</span><span class="p">,</span><span class="mi">0xD1</span><span class="w"></span>
<span class="w">        </span><span class="nf">out</span><span class="w">     </span><span class="mi">0x64</span><span class="p">,</span><span class="no">al</span><span class="w"></span>

<span class="w">        </span><span class="nf">call</span><span class="w">    </span><span class="no">a20wait</span><span class="w"></span>
<span class="w">        </span><span class="nf">pop</span><span class="w">     </span><span class="no">eax</span><span class="w"></span>
<span class="w">        </span><span class="nf">or</span><span class="w">      </span><span class="no">al</span><span class="p">,</span><span class="mi">2</span><span class="w"></span>
<span class="w">        </span><span class="nf">out</span><span class="w">     </span><span class="mi">0x60</span><span class="p">,</span><span class="no">al</span><span class="w"></span>

<span class="w">        </span><span class="nf">call</span><span class="w">    </span><span class="no">a20wait</span><span class="w"></span>
<span class="w">        </span><span class="nf">mov</span><span class="w">     </span><span class="no">al</span><span class="p">,</span><span class="mi">0xAE</span><span class="w"></span>
<span class="w">        </span><span class="nf">out</span><span class="w">     </span><span class="mi">0x64</span><span class="p">,</span><span class="no">al</span><span class="w"></span>

<span class="w">        </span><span class="nf">call</span><span class="w">    </span><span class="no">a20wait</span><span class="w"></span>
<span class="w">        </span><span class="nf">sti</span><span class="w"></span>
<span class="w">        </span><span class="nf">ret</span><span class="w"></span>

<span class="nl">a20wait:</span><span class="w"></span>
<span class="w">        </span><span class="nf">in</span><span class="w">      </span><span class="no">al</span><span class="p">,</span><span class="mi">0x64</span><span class="w"></span>
<span class="w">        </span><span class="nf">test</span><span class="w">    </span><span class="no">al</span><span class="p">,</span><span class="mi">2</span><span class="w"></span>
<span class="w">        </span><span class="nf">jnz</span><span class="w">     </span><span class="no">a20wait</span><span class="w"></span>
<span class="w">        </span><span class="nf">ret</span><span class="w"></span>


<span class="nl">a20wait2:</span><span class="w"></span>
<span class="w">        </span><span class="nf">in</span><span class="w">      </span><span class="no">al</span><span class="p">,</span><span class="mi">0x64</span><span class="w"></span>
<span class="w">        </span><span class="nf">test</span><span class="w">    </span><span class="no">al</span><span class="p">,</span><span class="mi">1</span><span class="w"></span>
<span class="w">        </span><span class="nf">jz</span><span class="w">      </span><span class="no">a20wait2</span><span class="w"></span>
<span class="w">        </span><span class="nf">ret</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="Fast_A20_Gate">Fast A20 Gate</span></h3>
<p>On most newer computers starting with the IBM PS/2, the chipset has a FAST A20 option that can quickly enable the A20 line. To enable A20 this way, there is no need for delay loops or polling, just 3 simple instructions.
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">in</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">0x92</span><span class="w"></span>
<span class="nf">or</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"></span>
<span class="nf">out</span><span class="w"> </span><span class="mi">0x92</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
</pre></div>
<p>As mentioned at <a rel="nofollow" class="external text" href="http://www.win.tue.nl/~aeb/linux/kbd/A20.html">the see also site</a>, it would be best to do the write only when necessary, and to make sure bit 0 is 0, as it is used for fast reset. An example follows:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">in</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">0x92</span><span class="w"></span>
<span class="nf">test</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"></span>
<span class="nf">jnz</span><span class="w"> </span><span class="no">after</span><span class="w"></span>
<span class="nf">or</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"></span>
<span class="nf">and</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">0xFE</span><span class="w"></span>
<span class="nf">out</span><span class="w"> </span><span class="mi">0x92</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
<span class="nl">after:</span><span class="w"></span>
</pre></div>
<p>However, the Fast A20 method is not supported everywhere and there is no reliable way to tell if it will have some effect or not on a given system. Even worse, on some systems, it may actually do something else like blanking the screen, so it should be used only after the <a href="BIOS" title="BIOS">BIOS</a> has reported that FAST A20 is available. Code for systems lacking FAST A20 support is also needed, so relying only on this method is discouraged. Also, on some chipsets you might have to enable Fast A20 support in the BIOS configuration screen.
</p>
<h3><span class="mw-headline" id="INT_15">INT 15</span></h3>
<p>Another way is to use the BIOS.
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">;FASM</span>
<span class="nf">use16</span><span class="w"></span>
<span class="nf">mov</span><span class="w">     </span><span class="no">ax</span><span class="p">,</span><span class="mi">2403</span><span class="no">h</span><span class="w">                </span><span class="c1">;--- A20-Gate Support ---</span>
<span class="nf">int</span><span class="w">     </span><span class="mi">15</span><span class="no">h</span><span class="w"></span>
<span class="nf">jb</span><span class="w">      </span><span class="no">a20_ns</span><span class="w">                  </span><span class="c1">;INT 15h is not supported</span>
<span class="nf">cmp</span><span class="w">     </span><span class="no">ah</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="nf">jnz</span><span class="w">     </span><span class="no">a20_ns</span><span class="w">                  </span><span class="c1">;INT 15h is not supported</span>

<span class="nf">mov</span><span class="w">     </span><span class="no">ax</span><span class="p">,</span><span class="mi">2402</span><span class="no">h</span><span class="w">                </span><span class="c1">;--- A20-Gate Status ---</span>
<span class="nf">int</span><span class="w">     </span><span class="mi">15</span><span class="no">h</span><span class="w"></span>
<span class="nf">jb</span><span class="w">      </span><span class="no">a20_failed</span><span class="w">              </span><span class="c1">;couldn&#39;t get status</span>
<span class="nf">cmp</span><span class="w">     </span><span class="no">ah</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="nf">jnz</span><span class="w">     </span><span class="no">a20_failed</span><span class="w">              </span><span class="c1">;couldn&#39;t get status</span>

<span class="nf">cmp</span><span class="w">     </span><span class="no">al</span><span class="p">,</span><span class="mi">1</span><span class="w"></span>
<span class="nf">jz</span><span class="w">      </span><span class="no">a20_activated</span><span class="w">           </span><span class="c1">;A20 is already activated</span>

<span class="nf">mov</span><span class="w">     </span><span class="no">ax</span><span class="p">,</span><span class="mi">2401</span><span class="no">h</span><span class="w">                </span><span class="c1">;--- A20-Gate Activate ---</span>
<span class="nf">int</span><span class="w">     </span><span class="mi">15</span><span class="no">h</span><span class="w"></span>
<span class="nf">jb</span><span class="w">      </span><span class="no">a20_failed</span><span class="w">              </span><span class="c1">;couldn&#39;t activate the gate</span>
<span class="nf">cmp</span><span class="w">     </span><span class="no">ah</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="nf">jnz</span><span class="w">     </span><span class="no">a20_failed</span><span class="w">              </span><span class="c1">;couldn&#39;t activate the gate</span>

<span class="nl">a20_activated:</span><span class="w">                  </span><span class="c1">;go on</span>
</pre></div>
<p>If only one interrupt fails, you will have to use another method. (See below.)
</p>
<h3><span class="mw-headline" id="Access_of_0xee">Access of 0xee</span></h3>
<p>On some systems reading ioport 0xee enables A20, and writing it disables A20. (Or, sometimes, this action only occurs when ioport 0xee is enabled.) And similar things hold for ioport 0xef and reset (a write causes a reset).
The i386SL/i486SL documents say
</p><p>The following ports are visible only when enabled,
Any writes to these ports cause the action named.
Name of Register     Address   Default Value  Where placed    Size
FAST CPU RESET         EFh          N/A         82360SL         8
FAST A20 GATE          EEh          N/A         82360SL         8  
</p><p>Enable A20:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">in</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="mi">0xee</span><span class="w"></span>
</pre></div>
<p>Disable A20:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">out</span><span class="w"> </span><span class="mi">0xee</span><span class="p">,</span><span class="no">al</span><span class="w"></span>
</pre></div>
<p><b>NOTE</b> that it doesn't matter what AL contains when writing and AL is undefined while reading (to / from port 0xee)
</p>
<h3><span class="mw-headline" id="Recommended_Method">Recommended Method</span></h3>
<p>Because there are several different methods that may or may not be supported, and because some of them cause problems on some computers; the recommended method is to try all of them until one works in the "order of least risk". Essentially:
</p>
<ul><li>Test if A20 is already enabled - if it is you don't need to do anything at all</li>
<li>Try the BIOS function. Ignore the returned status.</li>
<li>Test if A20 is enabled (to see if the BIOS function actually worked or not)</li>
<li>Try the keyboard controller method.</li>
<li>Test if A20 is enabled in a loop with a time-out (as the keyboard controller method may work slowly)</li>
<li>Try the Fast A20 method last</li>
<li>Test if A20 is enabled in a loop with a time-out (as the fast A20 method may work slowly)</li>
<li>If none of the above worked, give up</li></ul>
<h3><span class="mw-headline" id="Final_code_example">Final code example</span></h3>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">;	out:</span>
<span class="c1">;		ax - state (0 - disabled, 1 - enabled)</span>
<span class="nl">get_a20_state:</span><span class="w"></span>
<span class="w">	</span><span class="nf">pushf</span><span class="w"></span>
<span class="w">	</span><span class="nf">push</span><span class="w"> </span><span class="no">si</span><span class="w"></span>
<span class="w">	</span><span class="nf">push</span><span class="w"> </span><span class="no">di</span><span class="w"></span>
<span class="w">	</span><span class="nf">push</span><span class="w"> </span><span class="no">ds</span><span class="w"></span>
<span class="w">	</span><span class="nf">push</span><span class="w"> </span><span class="no">es</span><span class="w"></span>
<span class="w">	</span><span class="nf">cli</span><span class="w"></span>

<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="mi">0x0000</span><span class="w">					</span><span class="c1">;	0x0000:0x0500(0x00000500) -&gt; ds:si</span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">ds</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">si</span><span class="p">,</span><span class="w"> </span><span class="mi">0x0500</span><span class="w"></span>

<span class="w">	</span><span class="nf">not</span><span class="w"> </span><span class="no">ax</span><span class="w">							</span><span class="c1">;	0xffff:0x0510(0x00100500) -&gt; es:di</span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">es</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">di</span><span class="p">,</span><span class="w"> </span><span class="mi">0x0510</span><span class="w"></span>

<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">ds</span><span class="p">:</span><span class="no">si</span><span class="p">]</span><span class="w">					</span><span class="c1">;	save old values</span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[.</span><span class="no">BufferBelowMB</span><span class="p">],</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">es</span><span class="p">:</span><span class="no">di</span><span class="p">]</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[.</span><span class="no">BufferOverMB</span><span class="p">],</span><span class="w"> </span><span class="no">al</span><span class="w"></span>

<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">ah</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w">						</span><span class="c1">;	check byte [0x00100500] == byte [0x0500]</span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">ds</span><span class="p">:</span><span class="no">si</span><span class="p">],</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">es</span><span class="p">:</span><span class="no">di</span><span class="p">],</span><span class="w"> </span><span class="mi">1</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">ds</span><span class="p">:</span><span class="no">si</span><span class="p">]</span><span class="w"></span>
<span class="w">	</span><span class="nf">cmp</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">es</span><span class="p">:</span><span class="no">di</span><span class="p">]</span><span class="w"></span>
<span class="w">	</span><span class="nf">jne</span><span class="w"> </span><span class="no">.exit</span><span class="w"></span>
<span class="w">	</span><span class="nf">dec</span><span class="w"> </span><span class="no">ah</span><span class="w"></span>
<span class="nl">.exit:</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="p">[.</span><span class="no">BufferBelowMB</span><span class="p">]</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="p">[</span><span class="no">ds</span><span class="p">:</span><span class="no">si</span><span class="p">],</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="p">[.</span><span class="no">BufferOverMB</span><span class="p">]</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="p">[</span><span class="no">es</span><span class="p">:</span><span class="no">di</span><span class="p">],</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
<span class="w">	</span><span class="nf">shr</span><span class="w"> </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="w"></span>
<span class="w">	</span><span class="nf">sti</span><span class="w"></span>
<span class="w">	</span><span class="nf">pop</span><span class="w"> </span><span class="no">es</span><span class="w"></span>
<span class="w">	</span><span class="nf">pop</span><span class="w"> </span><span class="no">ds</span><span class="w"></span>
<span class="w">	</span><span class="nf">pop</span><span class="w"> </span><span class="no">di</span><span class="w"></span>
<span class="w">	</span><span class="nf">pop</span><span class="w"> </span><span class="no">si</span><span class="w"></span>
<span class="w">	</span><span class="nf">popf</span><span class="w"></span>
<span class="w">	</span><span class="nf">ret</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="nl">.BufferBelowMB:</span><span class="w">	</span><span class="nf">db</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="w">	</span><span class="na">.BufferOverMB</span><span class="w">	</span><span class="no">db</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>

<span class="c1">;	out:</span>
<span class="c1">;		ax - a20 support bits (bit #0 - supported on keyboard controller; bit #1 - supported with bit #1 of port 0x92)</span>
<span class="c1">;		cf - set on error</span>
<span class="nl">query_a20_support:</span><span class="w"></span>
<span class="w">	</span><span class="nf">push</span><span class="w"> </span><span class="no">bx</span><span class="w"></span>
<span class="w">	</span><span class="nf">clc</span><span class="w"></span>

<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="mi">0x2403</span><span class="w"></span>
<span class="w">	</span><span class="nf">int</span><span class="w"> </span><span class="mi">0x15</span><span class="w"></span>
<span class="w">	</span><span class="nf">jc</span><span class="w"> </span><span class="no">.error</span><span class="w"></span>

<span class="w">	</span><span class="nf">test</span><span class="w"> </span><span class="no">ah</span><span class="p">,</span><span class="w"> </span><span class="no">ah</span><span class="w"></span>
<span class="w">	</span><span class="nf">jnz</span><span class="w"> </span><span class="no">.error</span><span class="w"></span>

<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="no">bx</span><span class="w"></span>
<span class="w">	</span><span class="nf">pop</span><span class="w"> </span><span class="no">bx</span><span class="w"></span>
<span class="w">	</span><span class="nf">ret</span><span class="w"></span>
<span class="nl">.error:</span><span class="w"></span>
<span class="w">	</span><span class="nf">stc</span><span class="w"></span>
<span class="w">	</span><span class="nf">pop</span><span class="w"> </span><span class="no">bx</span><span class="w"></span>
<span class="w">	</span><span class="nf">ret</span><span class="w"></span>

<span class="nl">enable_a20_keyboard_controller:</span><span class="w"></span>
<span class="w">	</span><span class="nf">cli</span><span class="w"></span>

<span class="w">	</span><span class="nf">call</span><span class="w"> </span><span class="no">.wait_io1</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">0xad</span><span class="w"></span>
<span class="w">	</span><span class="nf">out</span><span class="w"> </span><span class="mi">0x64</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="nf">call</span><span class="w"> </span><span class="no">.wait_io1</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">0xd0</span><span class="w"></span>
<span class="w">	</span><span class="nf">out</span><span class="w"> </span><span class="mi">0x64</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="nf">call</span><span class="w"> </span><span class="no">.wait_io2</span><span class="w"></span>
<span class="w">	</span><span class="nf">in</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">0x60</span><span class="w"></span>
<span class="w">	</span><span class="nf">push</span><span class="w"> </span><span class="no">eax</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="nf">call</span><span class="w"> </span><span class="no">.wait_io1</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">0xd1</span><span class="w"></span>
<span class="w">	</span><span class="nf">out</span><span class="w"> </span><span class="mi">0x64</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="nf">call</span><span class="w"> </span><span class="no">.wait_io1</span><span class="w"></span>
<span class="w">	</span><span class="nf">pop</span><span class="w"> </span><span class="no">eax</span><span class="w"></span>
<span class="w">	</span><span class="nf">or</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"></span>
<span class="w">	</span><span class="nf">out</span><span class="w"> </span><span class="mi">0x60</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="nf">call</span><span class="w"> </span><span class="no">.wait_io1</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">0xae</span><span class="w"></span>
<span class="w">	</span><span class="nf">out</span><span class="w"> </span><span class="mi">0x64</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="nf">call</span><span class="w"> </span><span class="no">.wait_io1</span><span class="w"></span>
<span class="w">	</span><span class="nf">sti</span><span class="w"></span>
<span class="w">	</span><span class="nf">ret</span><span class="w"></span>
<span class="nl">.wait_io1:</span><span class="w"></span>
<span class="w">	</span><span class="nf">in</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">0x64</span><span class="w"></span>
<span class="w">	</span><span class="nf">test</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"></span>
<span class="w">	</span><span class="nf">jnz</span><span class="w"> </span><span class="no">.wait_io1</span><span class="w"></span>
<span class="w">	</span><span class="nf">ret</span><span class="w"></span>
<span class="nl">.wait_io2:</span><span class="w"></span>
<span class="w">	</span><span class="nf">in</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">0x64</span><span class="w"></span>
<span class="w">	</span><span class="nf">test</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"></span>
<span class="w">	</span><span class="nf">jz</span><span class="w"> </span><span class="no">.wait_io2</span><span class="w"></span>
<span class="w">	</span><span class="nf">ret</span><span class="w"></span>

<span class="c1">;	out:</span>
<span class="c1">;		cf - set on error</span>
<span class="nl">enable_a20:</span><span class="w"></span>
<span class="w">	</span><span class="nf">clc</span><span class="w">									</span><span class="c1">;	clear cf</span>
<span class="w">	</span><span class="nf">pusha</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">bh</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="w">							</span><span class="c1">;	clear bh</span>

<span class="w">	</span><span class="nf">call</span><span class="w"> </span><span class="no">get_a20_state</span><span class="w"></span>
<span class="w">	</span><span class="nf">jc</span><span class="w"> </span><span class="no">.fast_gate</span><span class="w"></span>

<span class="w">	</span><span class="nf">test</span><span class="w"> </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">	</span><span class="nf">jnz</span><span class="w"> </span><span class="no">.done</span><span class="w"></span>

<span class="w">	</span><span class="nf">call</span><span class="w"> </span><span class="no">query_a20_support</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">bl</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
<span class="w">	</span><span class="nf">test</span><span class="w"> </span><span class="no">bl</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w">							</span><span class="c1">;	enable A20 using keyboard controller</span>
<span class="w">	</span><span class="nf">jnz</span><span class="w"> </span><span class="no">.keybord_controller</span><span class="w"></span>

<span class="w">	</span><span class="nf">test</span><span class="w"> </span><span class="no">bl</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w">							</span><span class="c1">;	enable A20 using fast A20 gate</span>
<span class="w">	</span><span class="nf">jnz</span><span class="w"> </span><span class="no">.fast_gate</span><span class="w"></span>
<span class="nl">.bios_int:</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="mi">0x2401</span><span class="w"></span>
<span class="w">	</span><span class="nf">int</span><span class="w"> </span><span class="mi">0x15</span><span class="w"></span>
<span class="w">	</span><span class="nf">jc</span><span class="w"> </span><span class="no">.fast_gate</span><span class="w"></span>
<span class="w">	</span><span class="nf">test</span><span class="w"> </span><span class="no">ah</span><span class="p">,</span><span class="w"> </span><span class="no">ah</span><span class="w"></span>
<span class="w">	</span><span class="nf">jnz</span><span class="w"> </span><span class="no">.failed</span><span class="w"></span>
<span class="w">	</span><span class="nf">call</span><span class="w"> </span><span class="no">get_a20_state</span><span class="w"></span>
<span class="w">	</span><span class="nf">test</span><span class="w"> </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">	</span><span class="nf">jnz</span><span class="w"> </span><span class="no">.done</span><span class="w"></span>
<span class="nl">.fast_gate:</span><span class="w"></span>
<span class="w">	</span><span class="nf">in</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">0x92</span><span class="w"></span>
<span class="w">	</span><span class="nf">test</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"></span>
<span class="w">	</span><span class="nf">jnz</span><span class="w"> </span><span class="no">.done</span><span class="w"></span>

<span class="w">	</span><span class="nf">or</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"></span>
<span class="w">	</span><span class="nf">and</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">0xfe</span><span class="w"></span>
<span class="w">	</span><span class="nf">out</span><span class="w"> </span><span class="mi">0x92</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>

<span class="w">	</span><span class="nf">call</span><span class="w"> </span><span class="no">get_a20_state</span><span class="w"></span>
<span class="w">	</span><span class="nf">test</span><span class="w"> </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">	</span><span class="nf">jnz</span><span class="w"> </span><span class="no">.done</span><span class="w"></span>

<span class="w">	</span><span class="nf">test</span><span class="w"> </span><span class="no">bh</span><span class="p">,</span><span class="w"> </span><span class="no">bh</span><span class="w">							</span><span class="c1">;	test if there was an attempt using the keyboard controller</span>
<span class="w">	</span><span class="nf">jnz</span><span class="w"> </span><span class="no">.failed</span><span class="w"></span>
<span class="nl">.keybord_controller:</span><span class="w"></span>
<span class="w">	</span><span class="nf">call</span><span class="w"> </span><span class="no">enable_a20_keyboard_controller</span><span class="w"></span>
<span class="w">	</span><span class="nf">call</span><span class="w"> </span><span class="no">get_a20_state</span><span class="w"></span>
<span class="w">	</span><span class="nf">test</span><span class="w"> </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">	</span><span class="nf">jnz</span><span class="w"> </span><span class="no">.done</span><span class="w"></span>

<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">bh</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w">							</span><span class="c1">;	flag enable attempt with keyboard controller</span>

<span class="w">	</span><span class="nf">test</span><span class="w"> </span><span class="no">bl</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"></span>
<span class="w">	</span><span class="nf">jnz</span><span class="w"> </span><span class="no">.fast_gate</span><span class="w"></span>
<span class="w">	</span><span class="nf">jmp</span><span class="w"> </span><span class="no">.failed</span><span class="w"></span>
<span class="nl">.failed:</span><span class="w"></span>
<span class="w">	</span><span class="nf">stc</span><span class="w"></span>
<span class="nl">.done:</span><span class="w"></span>
<span class="w">	</span><span class="nf">popa</span><span class="w"></span>
<span class="w">	</span><span class="nf">ret</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<h3><span class="mw-headline" id="External_links">External links</span></h3>
<ul><li><a rel="nofollow" class="external free" href="http://www.win.tue.nl/~aeb/linux/kbd/A20.html">http://www.win.tue.nl/~aeb/linux/kbd/A20.html</a></li></ul>
<!-- 
NewPP limit report
Cached time: 20250212013858
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.082 seconds
Real time usage: 1.553 seconds
Preprocessor visited node count: 97/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 53569/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1433-0!canonical and timestamp 20250212013856 and revision id 28141.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=A20_Line&amp;oldid=28141">https://wiki.osdev.org/index.php?title=A20_Line&amp;oldid=28141</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:X86" title="Category:X86">X86</a></li><li><a href="./Category:Memory_management" title="Category:Memory management">Memory management</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=A20+Line" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="A20Line#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="A20_Line" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:A20_Line" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="A20_Line"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=A20_Line&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=A20_Line&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/A20_Line" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/A20_Line" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=A20_Line&amp;oldid=28141" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=A20_Line&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-lang" class="vector-menu mw-portlet mw-portlet-lang vector-menu-portal portal" aria-labelledby="p-lang-label" role="navigation"  >
	<h3
		id="p-lang-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">In other languages</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li class="interlanguage-link interwiki-de mw-list-item"><a href="http://www.lowlevel.eu/wiki/A20-Gate" title="A20-Gate – Deutsch" lang="de" hreflang="de" class="interlanguage-link-target"><span>Deutsch</span></a></li></ul>
		
	</div>
</nav>

</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 10 July 2023, at 03:16.</li>
	<li id="footer-info-0">This page has been accessed 22,574 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=A20_Line&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.082","walltime":"1.553","ppvisitednodes":{"value":97,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":53569,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250212013858","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":1652});});</script>
</body>
</html>