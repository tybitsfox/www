<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>User:Pancakes/ARM Integrator-CP VMM2 - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"ebcf42afef7b0b5b7d6419b5","wgCSPNonce":false,"wgCanonicalNamespace":"User","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":2,"wgPageName":"User:Pancakes/ARM_Integrator-CP_VMM2","wgTitle":"Pancakes/ARM Integrator-CP VMM2","wgCurRevisionId":16276,"wgRevisionId":16276,"wgArticleId":3482,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"User:Pancakes/ARM_Integrator-CP_VMM2","wgRelevantArticleId":3482,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[
],"wgRestrictionMove":[],"wgRelevantUserName":"Pancakes","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="../favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="../opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="../api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-2 ns-subject page-User_Pancakes_ARM_Integrator-CP_VMM2 rootpage-User_Pancakes skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-namespace">User</span><span class="mw-page-title-separator">:</span><span class="mw-page-title-main">Pancakes/ARM Integrator-CP VMM2</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"><span class="subpages">&lt; <a href="https://wiki.osdev.org/User:Pancakes" title="User:Pancakes">User:Pancakes</a></span></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="ARM_Integrator-CP_VMM2#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="ARM_Integrator-CP_VMM2#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="ARM_Integrator-CP_VMM2#MM2"><span class="tocnumber">1</span> <span class="toctext">MM2</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="ARM_Integrator-CP_VMM2#Author"><span class="tocnumber">1.1</span> <span class="toctext">Author</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="ARM_Integrator-CP_VMM2#Intro"><span class="tocnumber">1.2</span> <span class="toctext">Intro</span></a>
<ul>
<li class="toclevel-3 tocsection-4"><a href="ARM_Integrator-CP_VMM2#About_Previous_Design"><span class="tocnumber">1.2.1</span> <span class="toctext">About Previous Design</span></a></li>
<li class="toclevel-3 tocsection-5"><a href="ARM_Integrator-CP_VMM2#Major_Factor"><span class="tocnumber">1.2.2</span> <span class="toctext">Major Factor</span></a></li>
<li class="toclevel-3 tocsection-6"><a href="ARM_Integrator-CP_VMM2#Source"><span class="tocnumber">1.2.3</span> <span class="toctext">Source</span></a>
<ul>
<li class="toclevel-4 tocsection-7"><a href="ARM_Integrator-CP_VMM2#Updated_Source"><span class="tocnumber">1.2.3.1</span> <span class="toctext">Updated Source</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-2 tocsection-8"><a href="ARM_Integrator-CP_VMM2#Extracting_Out_Just_The_VMM"><span class="tocnumber">1.3</span> <span class="toctext">Extracting Out Just The VMM</span></a>
<ul>
<li class="toclevel-3 tocsection-9"><a href="ARM_Integrator-CP_VMM2#New_Kernel_State_Structure"><span class="tocnumber">1.3.1</span> <span class="toctext">New Kernel State Structure</span></a></li>
<li class="toclevel-3 tocsection-10"><a href="ARM_Integrator-CP_VMM2#Overview_Of_Bootstrapping_Before_We_Enable_Paging"><span class="tocnumber">1.3.2</span> <span class="toctext">Overview Of Bootstrapping Before We Enable Paging</span></a></li>
<li class="toclevel-3 tocsection-11"><a href="ARM_Integrator-CP_VMM2#Creating_A_Thread_And_Mapping_It"><span class="tocnumber">1.3.3</span> <span class="toctext">Creating A Thread And Mapping It</span></a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="MM2">MM2</span></h2>
<p>Well, hopefully, you are coming from some of the earlier examples. But, if not here are the links.
</p>
<table class="wikitable">
<tbody><tr>
<th>Page
</th>
<th>Description
</th></tr>
<tr>
<td><a href="../ARM_Integrator-CP_IRQTimerAndPIC" title="ARM Integrator-CP IRQTimerAndPIC">IRQ, Timer, And PIC</a>
</td>
<td>This demonstration just uses the IRQ, Timer, And PIC.
</td></tr>
<tr>
<td><a href="../ARM_Integrator-CP_IRQTimerAndPICAndTaskSwitch" title="ARM Integrator-CP IRQTimerAndPICAndTaskSwitch">IRQ, Timer, PIC, And Tasks</a>
</td>
<td>This shows how to switch between tasks using the timer, and builds from the previous page.
</td></tr>
<tr>
<td><a href="ARM_Integrator-CP_IRQTimerPICTasksAndMM" title="User:Pancakes/ARM Integrator-CP IRQTimerPICTasksAndMM">IRQ, Timer, PIC, Tasks, And MM</a>
</td>
<td>This shows how to integrate virtual memory, and builds from the previous page.
</td></tr></tbody></table>
<h3><span class="mw-headline" id="Author">Author</span></h3>
<p>I <a href="https://wiki.osdev.org/User:Pancakes" title="User:Pancakes">Pancakes</a> wrote this to help jump start you into developing for the ARM using QEMU or even a real piece of hardware. I have wrote software for both emulators and real hardware, but this has only been tested on QEMU so far. Please make any needed changes if you find problems. Also let me know at <a rel="nofollow" class="external text" href="../cdn-cgi/l/email-protection#751e18161246414446351218141c195b161a18"><span class="__cf_email__" data-cfemail="8ee5e3ede9bdbabfbdcee9e3efe7e2a0ede1e3">[email&#160;protected]</span></a> if you find this useful, have comments, or suggestions.
</p>
<h3><span class="mw-headline" id="Intro">Intro</span></h3>
<p>I am going to extend the page <a href="ARM_Integrator-CP_IRQTimerPICTasksAndMM" title="User:Pancakes/ARM Integrator-CP IRQTimerPICTasksAndMM">IRQ, Timer, PIC, Tasks, And MM</a>.
On that page we build a functional virtual memory management system. It had a limitation and that was that
the kernel space was identity mapped. This can create problems especially for MMIO access since if the
kernel space is less than the address of a MMIO device then you will have to map it into every process's
virtual memory just to access it which is much more difficult than just mapping it into kernel space. It
also lets us catch kernel bugs by having gaps so stray memory accesses might throw an exception, and it
helps to prevent kernel bugs from corrupting the user space and introducing very hard to track down bugs.
</p><p><i>So this design basically gives more protection and flexibility at a cost of complexity and slightly more</i>
memory consumption.<i></i>
</p>
<h5><span class="mw-headline" id="About_Previous_Design">About Previous Design</span></h5>
<p>Lets try something a bit more robust and to eliminate the need for 2 page heaps, and
instead have a single page heap that can service both kernel and user space. The problem is this design is a little more complex
and has a lot more moving parts, but I am going to try to gently lower you down into it in hopes you come out with a better memory 
management system. And as you know the more moving parts the more that can break!
</p>
<h5><span class="mw-headline" id="Major_Factor">Major Factor</span></h5>
<p>The main problem with doing this is that once we go into paging mode we need memory to map more memory. A good example would
be imagine having your level one paging table with only one table entry, and that table having all 256 entries filled. You 
need to allocate and map at least 1k to make another table. Well, you will have no way to make that happen if your not using
1MB sections (maps 1MB with out second level table). And, the only other way would be to disable paging which could cause problems if you need to access data that is not identity mapped including your kernel's instruction stream. Also, in my code I am not going to use 1MB sections. So you would be unable to alloc and map another 4K to at least make a table with 1K.
</p><p><i>Disabling paging might not incur any performance penalty as I am not sure if it would flush the TLB, but if you need to access data that is not identity mapped then you are going to run into problems.</i>
</p><p><i>I decided not to use 1MB because it would complicate existing</i>
code further, and I wanted this to be portable to the X86 by simply changing the shift operations and flags.<i></i>
</p>
<h4><span class="mw-headline" id="Source">Source</span></h4>
<p>You will also need the source for the new VMM functions. Since the source is quite large I have uploaded it elsewhere. You can also find the complete kernel (<i>for this page</i>) here also: <a rel="nofollow" class="external text" href="http://kmcg3413.net/arm_icp_vmm2">http://kmcg3413.net/arm_icp_vmm2</a>
</p>
<h5><span class="mw-headline" id="Updated_Source">Updated Source</span></h5>
<p><i>If you inspect the above directory you will find the original functions. I have since made minor bug fixes and added more functionality. So I have left the above links for historical purposes, but the links below have the most recent source.</i>
</p><p>These functions have been fairly well tested, and should be bug free. I have have very few problems. I hope these can be used as a guide on how you might want to construct your own VM functions for manipulating VM tables. If your looking for the complete source then consider cloning the repository and pulling out what you need. The links are <a rel="nofollow" class="external text" href="http://kmcg3413.net/vmm.c">vmm.c</a> and <a rel="nofollow" class="external text" href="http://kmcg3413.net/vmm.h">vmm.h</a>.
</p>
<h3><span class="mw-headline" id="Extracting_Out_Just_The_VMM">Extracting Out Just The VMM</span></h3>
<p>If you want to use the VMM in your own project you will need <i>vmm.c</i>, <i>vmm.h</i>, <i>stdtypes.h</i>, <i>main.h</i>, <i>kheap.h</i>, and <i>kheap_bm.c</i>. You major core files are just <i>vmm.c</i> and <i>kheap_bm.c</i> which contain all the implementation code.
</p><p>The <i>stdtypes.h</i> is a small header that just defines the types. The <i>kheap.h</i> and <i>heap_bm.c</i> are also only need <i>stdtypes.h</i>. The <i>main.h</i> contains the kernel state structure, which you
could modify and also modify in the <i>vmm.c</i> to work a different way if needed.
</p>
<h4><span class="mw-headline" id="New_Kernel_State_Structure">New Kernel State Structure</span></h4>
<p>We need to add and remove a few fields from our kernel structure. One big change is the
removal of <i>husr</i>, and the changing of the <i>vmmk</i> field to <i>vmm</i>. I change it to <i>vmm</i> so any old code will break during compilation allowing you to remove it if you basing everything on
the previous page.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">_KSTATE</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* process/thread support */</span><span class="w"></span>
<span class="w">	</span><span class="n">KTHREAD</span><span class="w">			</span><span class="n">threads</span><span class="p">[</span><span class="mh">0x10</span><span class="p">];</span><span class="w"></span>
<span class="w">	</span><span class="n">uint8</span><span class="w">			</span><span class="n">threadndx</span><span class="p">;</span><span class="w">	</span>
<span class="w">	</span><span class="n">uint8</span><span class="w">			</span><span class="n">iswitch</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* physical and heap memory management */</span><span class="w"></span>
<span class="w">	</span><span class="n">KHEAPBM</span><span class="w">			</span><span class="n">hphy</span><span class="p">;</span><span class="w">			</span><span class="cm">/* kernel physical page heap */</span><span class="w"></span>
<span class="w">	</span><span class="n">KHEAPBM</span><span class="w">			</span><span class="n">hchk</span><span class="p">;</span><span class="w">			</span><span class="cm">/* data chunk heap */</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* virtual memory management */</span><span class="w"></span>
<span class="w">	</span><span class="n">KVMMTABLE</span><span class="w">		</span><span class="n">vmm</span><span class="p">;</span><span class="w">			</span><span class="cm">/* kernel virtual memory map */</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">			</span><span class="n">vmm_ucte</span><span class="p">;</span><span class="w">		</span><span class="cm">/* unused coarse table entries */</span><span class="w"></span>
<span class="w">	</span><span class="n">KSTACK</span><span class="w">			</span><span class="n">tstack</span><span class="p">;</span><span class="w">			</span><span class="cm">/* 1K table stack */</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">			</span><span class="o">*</span><span class="n">vmm_rev</span><span class="p">;</span><span class="w">		</span><span class="cm">/* reverse map */</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">KSTATE</span><span class="p">;</span><span class="w"></span>
</pre></div>
<h4><span class="mw-headline" id="Overview_Of_Bootstrapping_Before_We_Enable_Paging">Overview Of Bootstrapping Before We Enable Paging</span></h4>
<p>This should look familiar. It is basically the same process except we are using the functions
with <i>kvmm2_</i> prefix and whom work differently. The <i>kvmm2_baseinit</i> prepares a few critical
structures and can be found in <i>vmm.c</i>. You should also notice we map the kernel code, exception table, and the entire <i>hchk</i> heap. The heap initialization code is basically the same as the previous page.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="w">        </span><span class="p">......</span><span class="w"></span>

<span class="w">	</span><span class="n">arm4_xrqinstall</span><span class="p">(</span><span class="n">ARM4_XRQ_RESET</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">k_exphandler_reset_entry</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">arm4_xrqinstall</span><span class="p">(</span><span class="n">ARM4_XRQ_UNDEF</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">k_exphandler_undef_entry</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">arm4_xrqinstall</span><span class="p">(</span><span class="n">ARM4_XRQ_SWINT</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">k_exphandler_swi_entry</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">arm4_xrqinstall</span><span class="p">(</span><span class="n">ARM4_XRQ_ABRTP</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">k_exphandler_abrtp_entry</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">arm4_xrqinstall</span><span class="p">(</span><span class="n">ARM4_XRQ_ABRTD</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">k_exphandler_abrtd_entry</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">arm4_xrqinstall</span><span class="p">(</span><span class="n">ARM4_XRQ_IRQ</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">k_exphandler_irq_entry</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">arm4_xrqinstall</span><span class="p">(</span><span class="n">ARM4_XRQ_FIQ</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">k_exphandler_fiq_entry</span><span class="p">);</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* create physical page heap */</span><span class="w"></span>
<span class="w">	</span><span class="n">k_heapBMInit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">hphy</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">k_heapBMInit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">hchk</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* get a bit of memory to start with for small chunk */</span><span class="w"></span>
<span class="w">	</span><span class="n">k_heapBMAddBlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">hchk</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">7</span><span class="p">,</span><span class="w"> </span><span class="n">KRAMADDR</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(</span><span class="mi">4</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">7</span><span class="p">),</span><span class="w"> </span><span class="n">KCHKHEAPBSIZE</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* state structure */</span><span class="w"></span>
<span class="w">	</span><span class="n">k_heapBMSet</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">hchk</span><span class="p">,</span><span class="w"> </span><span class="n">KSTATEADDR</span><span class="p">,</span><span class="w"> </span><span class="k">sizeof</span><span class="p">(</span><span class="n">KSTATE</span><span class="p">),</span><span class="w"> </span><span class="mi">5</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* stacks (can free KSTACKSTART later) */</span><span class="w"></span>
<span class="w">	</span><span class="n">k_heapBMSet</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">hchk</span><span class="p">,</span><span class="w"> </span><span class="n">KSTACKSTART</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mh">0x1000</span><span class="p">,</span><span class="w"> </span><span class="mh">0x1000</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">k_heapBMSet</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">hchk</span><span class="p">,</span><span class="w"> </span><span class="n">KSTACKEXC</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mh">0x1000</span><span class="p">,</span><span class="w"> </span><span class="mh">0x1000</span><span class="p">,</span><span class="w"> </span><span class="mi">7</span><span class="p">);</span><span class="w"></span>
<span class="w">        </span><span class="cm">/* remove kernel image from hchk (if it is there) */</span><span class="w"></span>
<span class="w">	</span><span class="n">k_heapBMSet</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">hchk</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">uintptr</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_BOI</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">uintptr</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_EOI</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(</span><span class="n">uintptr</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_BOI</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* add block but place header in chunk heap to keep alignment */</span><span class="w"></span>
<span class="w">	</span><span class="n">bm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">uint8</span><span class="o">*</span><span class="p">)</span><span class="n">k_heapBMAlloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">hchk</span><span class="p">,</span><span class="w"> </span><span class="n">k_heapBMGetBMSize</span><span class="p">(</span><span class="n">KRAMSIZE</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">KRAMADDR</span><span class="p">,</span><span class="w"> </span><span class="n">KPHYPAGESIZE</span><span class="p">));</span><span class="w"></span>
<span class="w">	</span><span class="n">k_heapBMAddBlockEx</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">hphy</span><span class="p">,</span><span class="w"> </span><span class="n">KRAMADDR</span><span class="p">,</span><span class="w"> </span><span class="n">KRAMSIZE</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">KRAMADDR</span><span class="p">,</span><span class="w"> </span><span class="n">KPHYPAGESIZE</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">KHEAPBLOCKBM</span><span class="o">*</span><span class="p">)</span><span class="n">k_heapBMAlloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">hchk</span><span class="p">,</span><span class="w"> </span><span class="k">sizeof</span><span class="p">(</span><span class="n">KHEAPBLOCKBM</span><span class="p">)),</span><span class="w"> </span><span class="n">bm</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">        </span><span class="cm">/* remove kernel image from hphy (if it is there) */</span><span class="w"></span>
<span class="w">	</span><span class="n">k_heapBMSet</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">hphy</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">uintptr</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_BOI</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">uintptr</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_EOI</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(</span><span class="n">uintptr</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_BOI</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="p">);</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* vmm */</span><span class="w"></span>
<span class="w">	</span><span class="n">kvmm2_baseinit</span><span class="p">(</span><span class="n">KRAMADDR</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* map kernel image */</span><span class="w"></span>
<span class="w">	</span><span class="n">kvmm2_mapmulti</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">vmm</span><span class="p">,</span><span class="w"> </span>
<span class="w">					</span><span class="p">(</span><span class="n">uintptr</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_BOI</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">uintptr</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_BOI</span><span class="p">,</span><span class="w"></span>
<span class="w">					</span><span class="n">kvmm2_rndup</span><span class="p">((</span><span class="n">uintptr</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_EOI</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(</span><span class="n">uintptr</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_BOI</span><span class="p">),</span><span class="w"> </span>
<span class="w">					</span><span class="n">TLB_C_AP_PRIVACCESS</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">KVMM_DIRECT</span><span class="w"></span>
<span class="w">	</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* map reverse table (ALREADY MAPPED WITH HCHK BELOW) */</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* map interrupt table, and chunk heap (hchk) */</span><span class="w"></span>
<span class="w">	</span><span class="n">kvmm2_mapmulti</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">vmm</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">kvmm2_rndup</span><span class="p">(</span><span class="n">KRAMADDR</span><span class="p">),</span><span class="w"> </span><span class="n">TLB_C_AP_PRIVACCESS</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">KVMM_DIRECT</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">KVMM_SKIP</span><span class="p">);</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* map serial out register, PIC, and timer */</span><span class="w"></span>
<span class="w">	</span><span class="n">kvmm2_mapsingle</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">vmm</span><span class="p">,</span><span class="w"> </span><span class="mh">0x16000000</span><span class="p">,</span><span class="w"> </span><span class="mh">0x16000000</span><span class="p">,</span><span class="w"> </span><span class="n">TLB_C_AP_PRIVACCESS</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">KVMM_DIRECT</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">kvmm2_mapsingle</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">vmm</span><span class="p">,</span><span class="w"> </span><span class="mh">0x14000000</span><span class="p">,</span><span class="w"> </span><span class="mh">0x14000000</span><span class="p">,</span><span class="w"> </span><span class="n">TLB_C_AP_PRIVACCESS</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">KVMM_DIRECT</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">kvmm2_mapsingle</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">vmm</span><span class="p">,</span><span class="w"> </span><span class="mh">0x13000000</span><span class="p">,</span><span class="w"> </span><span class="mh">0x13000000</span><span class="p">,</span><span class="w"> </span><span class="n">TLB_C_AP_PRIVACCESS</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">KVMM_DIRECT</span><span class="p">);</span><span class="w"></span>

<span class="w">	</span><span class="n">arm4_tlbsetmode</span><span class="p">(</span><span class="n">KMEMINDEX</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* load location of TLB */</span><span class="w"></span>
<span class="w">	</span><span class="n">arm4_tlbset1</span><span class="p">((</span><span class="n">uintptr</span><span class="p">)</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">vmm</span><span class="p">.</span><span class="n">table</span><span class="p">);</span><span class="w">	</span><span class="cm">/* user space */</span><span class="w"></span>
<span class="w">	</span><span class="n">arm4_tlbset0</span><span class="p">((</span><span class="n">uintptr</span><span class="p">)</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">vmm</span><span class="p">.</span><span class="n">table</span><span class="p">);</span><span class="w">	</span><span class="cm">/* kernel space */</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* set that all domains are checked against the TLB entry access permissions */</span><span class="w"></span>
<span class="w">	</span><span class="n">arm4_tlbsetdom</span><span class="p">(</span><span class="mh">0x55555555</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* enable TLB 0x1 and disable subpages 0x800000 */</span><span class="w"></span>
<span class="w">	</span><span class="n">arm4_tlbsetctrl</span><span class="p">(</span><span class="n">arm4_tlbgetctrl</span><span class="p">()</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mh">0x1</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">23</span><span class="p">));</span><span class="w"></span>

<span class="w">        </span><span class="p">......</span><span class="w"></span>
</pre></div>
<p>At the end we enable paging, and if all is well execution should resume. That in my opinion is not a heavily complex or long section of code if you consider you now have a paged kernel. Also, you should note the usage of <i>KVMM_DIRECT</i>. This tells the implementation that paging is not yet enabled and all references can be followed directly. This happens when walking the tables to perform the various operations. Once paging has been enabled you simply omit that flag from the calls and they will perform the translation using what I call the <i>reverse lookup table</i>. 
</p><p><i>The reverse lookup table just translates physical addresses to virtual ones.</i>
</p>
<h4><span class="mw-headline" id="Creating_A_Thread_And_Mapping_It">Creating A Thread And Mapping It</span></h4>
<p>The next part is mapping an address space for a user level thread.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="w">	</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">threads</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">pc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x80000000</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">threads</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">valid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">threads</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">cpsr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x60000000</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ARM4_MODE_USER</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">threads</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">sp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x90001000</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">threads</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">r0</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0xa0000000</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="n">kvmm2_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">threads</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">vmm</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">kvmm2_mapsingle</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">threads</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">vmm</span><span class="p">,</span><span class="w"> </span><span class="mh">0xa0000000</span><span class="p">,</span><span class="w"> </span><span class="mh">0x16000000</span><span class="p">,</span><span class="w"> </span><span class="n">TLB_C_AP_FULLACCESS</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">kvmm2_allocregionat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">threads</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">vmm</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mh">0x80000000</span><span class="p">,</span><span class="w"> </span><span class="n">TLB_C_AP_FULLACCESS</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">kvmm2_allocregionat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">threads</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">vmm</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mh">0x90000000</span><span class="p">,</span><span class="w"> </span><span class="n">TLB_C_AP_FULLACCESS</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">kvmm2_getphy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">vmm</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">uintptr</span><span class="p">)</span><span class="n">ks</span><span class="o">-&gt;</span><span class="n">threads</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">vmm</span><span class="p">.</span><span class="n">table</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">page</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">arm4_tlbset1</span><span class="p">(</span><span class="n">page</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="k">asm</span><span class="p">(</span><span class="s">&quot;mcr p15, #0, r0, c8, c7, #0&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* copy some code there */</span><span class="w"></span>
<span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">1024</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="p">((</span><span class="n">uint8</span><span class="o">*</span><span class="p">)</span><span class="mh">0x80000000</span><span class="p">)[</span><span class="n">x</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">((</span><span class="n">uint8</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">thread1</span><span class="p">)[</span><span class="n">x</span><span class="p">];</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
</pre></div>
<p>I try to flush the TLBs, but QEMU seems to work fine with out it, but I left it in just in case. Since GCC by default emits position independent code (-fPIC) for ARM due to the nature of ARM instructions so therefore I am able to just plainly copy the <i>thread1</i> function. However, any references to segments other than <i>.text</i> by it may not be. But, this is just a demonstration. By using this method you could load an ELF image into the address space for example.
</p><p>Because, GRUB may not be possible to use I would like to introduce you to a method to not only attach modules to your kernel but enumerate them in the next page, <a href="../ARM_Integrator-CP_IRQTimerPICTasksMMAndMods" title="ARM Integrator-CP IRQTimerPICTasksMMAndMods">IRQ, Timer, PIC, Tasks, MM, And Modules</a>.
</p>
<!-- 
NewPP limit report
Cached time: 20250211163543
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.038 seconds
Real time usage: 0.432 seconds
Preprocessor visited node count: 50/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 26031/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3482-0!canonical and timestamp 20250211163543 and revision id 16276.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=User:Pancakes/ARM_Integrator-CP_VMM2&amp;oldid=16276">https://wiki.osdev.org/index.php?title=User:Pancakes/ARM_Integrator-CP_VMM2&amp;oldid=16276</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="../Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=User%3APancakes%2FARM+Integrator-CP+VMM2" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="ARM_Integrator-CP_VMM2#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-user" class="selected mw-list-item"><a href="ARM_Integrator-CP_VMM2" title="View the user page [c]" accesskey="c"><span>User page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User_talk:Pancakes/ARM_Integrator-CP_VMM2&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="ARM_Integrator-CP_VMM2"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Pancakes/ARM_Integrator-CP_VMM2&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Pancakes/ARM_Integrator-CP_VMM2&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="../index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="../index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="../Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="../Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="../OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="../OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="../OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="../Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="../Special:WhatLinksHere/User:Pancakes/ARM_Integrator-CP_VMM2" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/User:Pancakes/ARM_Integrator-CP_VMM2" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-contributions" class="mw-list-item"><a href="../Special:Contributions/Pancakes" title="A list of contributions by this user"><span>User contributions</span></a></li><li id="t-log" class="mw-list-item"><a href="../Special:Log/Pancakes"><span>Logs</span></a></li><li id="t-userrights" class="mw-list-item"><a href="../Special:UserRights/Pancakes"><span>View user groups</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="../Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Pancakes/ARM_Integrator-CP_VMM2&amp;oldid=16276" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Pancakes/ARM_Integrator-CP_VMM2&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 24 April 2014, at 14:16.</li>
	<li id="footer-info-0">This page has been accessed 426 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="../OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="../OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="../OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=User:Pancakes/ARM_Integrator-CP_VMM2&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="../resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="../resources/assets/poweredby_mediawiki_132x47.png 1.5x, ../resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script data-cfasync="false" src="../cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.038","walltime":"0.432","ppvisitednodes":{"value":50,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":26031,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250211163543","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":537});});</script>
</body>
</html>