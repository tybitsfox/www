<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Dynamic Linker - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"968f0d627996882d4654c62f","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Dynamic_Linker","wgTitle":"Dynamic Linker","wgCurRevisionId":28633,"wgRevisionId":28633,"wgArticleId":4000,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Linkers","Loaders"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Dynamic_Linker","wgRelevantArticleId":4000,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],
"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Dynamic_Linker rootpage-Dynamic_Linker skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Dynamic Linker</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Dynamic_Linker#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Dynamic_Linker#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>Sooner or later you'll reach the point where you want shared libraries. Here we won't discuss the difference between static and dynamic linking, you should be already familiar with that.
</p><p>This article is about <a href="ELF" title="ELF">ELF</a> on x86_64 architecture, but can be easily adopted to other systems as the concepts are similar.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Dynamic_Linker#Home_work"><span class="tocnumber">1</span> <span class="toctext">Home work</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="Dynamic_Linker#Memory_Layout"><span class="tocnumber">1.1</span> <span class="toctext">Memory Layout</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="Dynamic_Linker#Segment_Local_Calls"><span class="tocnumber">1.2</span> <span class="toctext">Segment Local Calls</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="Dynamic_Linker#Inter-segment_Calls"><span class="tocnumber">1.3</span> <span class="toctext">Inter-segment Calls</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="Dynamic_Linker#Implementing_a_dynamic_linker"><span class="tocnumber">2</span> <span class="toctext">Implementing a dynamic linker</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="Dynamic_Linker#Locating_the_GOT"><span class="tocnumber">2.1</span> <span class="toctext">Locating the GOT</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Dynamic_Linker#What&#39;s_in_the_GOT?"><span class="tocnumber">2.2</span> <span class="toctext">What's in the GOT?</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="Dynamic_Linker#Where_are_my_libraries?"><span class="tocnumber">2.3</span> <span class="toctext">Where are my libraries?</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Dynamic_Linker#Symbol_look_up"><span class="tocnumber">2.4</span> <span class="toctext">Symbol look up</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-10"><a href="Dynamic_Linker#Gimme_code!"><span class="tocnumber">3</span> <span class="toctext">Gimme code!</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="Dynamic_Linker#Summary"><span class="tocnumber">4</span> <span class="toctext">Summary</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Home_work">Home work</span></h2>
<h3><span class="mw-headline" id="Memory_Layout">Memory Layout</span></h3>
<p>I suppose you have created a new, empty address space, and you've already loaded the executable in it. I also assume that you've loaded the libc shared library after the executable's segment. And now you're stuck, because you don't know how to call printf from the executable.
</p><p>As your executable was loaded by you, you should know the virtual address of ELF magic bytes in the memory. Use that for start.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="n">Elf64_Ehdr</span><span class="w"> </span><span class="o">*</span><span class="n">ehdr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">Elf64_Ehdr</span><span class="w"> </span><span class="o">*</span><span class="p">)(</span><span class="n">ptr</span><span class="p">);</span><span class="w"></span>

<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">kmemcmp</span><span class="p">(</span><span class="n">ehdr</span><span class="o">-&gt;</span><span class="n">e_ident</span><span class="p">,</span><span class="w"> </span><span class="n">ELFMAG</span><span class="p">,</span><span class="n">SELFMAG</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"></span>
<span class="w">   </span><span class="n">ehdr</span><span class="o">-&gt;</span><span class="n">e_ident</span><span class="p">[</span><span class="n">EI_CLASS</span><span class="p">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ELFCLASS64</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"></span>
<span class="w">   </span><span class="n">ehdr</span><span class="o">-&gt;</span><span class="n">e_ident</span><span class="p">[</span><span class="n">EI_DATA</span><span class="p">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ELFDATA2LSB</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"></span>
<span class="w">   </span><span class="n">ehdr</span><span class="o">-&gt;</span><span class="n">e_type</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ET_EXEC</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">ehdr</span><span class="o">-&gt;</span><span class="n">e_shnum</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">   </span><span class="c1">// We have a valid image with sections</span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>First we check the magic bytes and the format of the ELF64. As an extra, we also check whether it's executable and has a non-empty section table (we'll going to need it).
</p><p>Now let's see what the GNU toolchain does for us to find printf.
</p>
<h3><span class="mw-headline" id="Segment_Local_Calls">Segment Local Calls</span></h3>
<p>In order to figure that out, first we should know how a segment local call works. For that we'll use a very minimal source.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">void</span><span class="w"> </span><span class="nf">localfunction</span><span class="p">()</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span><span class="kt">char</span><span class="o">**</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">localfunction</span><span class="p">();</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>That compiles to:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>$ objdump -d <span class="nb">test</span>
000000000020016f &lt;localfunction&gt;:
  20016f:	<span class="m">55</span>                   	push   %rbp
  <span class="m">200170</span>:	<span class="m">48</span> <span class="m">89</span> e5             	mov    %rsp,%rbp
  <span class="m">200173</span>:	<span class="m">90</span>                   	nop
  <span class="m">200174</span>:	5d                   	pop    %rbp
  <span class="m">200175</span>:	c3                   	retq   

<span class="m">0000000000200176</span> &lt;main&gt;:
  <span class="m">200176</span>:	<span class="m">55</span>                   	push   %rbp
  <span class="m">200177</span>:	<span class="m">48</span> <span class="m">89</span> e5             	mov    %rsp,%rbp
  20017a:	b8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>       	mov    <span class="nv">$0</span>x0,%eax
  20017f:	e8 eb ff ff ff       	callq  20016f &lt;localfunction&gt;
  <span class="m">200184</span>:	<span class="m">90</span>                   	nop
  <span class="m">200185</span>:	5d                   	pop    %rbp
  <span class="m">200186</span>:	c3                   	retq
</pre></div>
<p>That's trivial, a rip relative addressing is used at 20017f.
</p>
<h3><span class="mw-headline" id="Inter-segment_Calls">Inter-segment Calls</span></h3>
<p>Now let's modify the source a bit to use a libc call:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span><span class="kt">char</span><span class="o">**</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello World&quot;</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>Compile and see what's generated.
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>000000000020016f &lt;main&gt;:
  20016f:	<span class="m">55</span>                   	push   %rbp
  <span class="m">200170</span>:	<span class="m">48</span> <span class="m">89</span> e5             	mov    %rsp,%rbp
  <span class="m">200173</span>:	<span class="m">48</span> 8d 3d b6 <span class="m">01</span> <span class="m">00</span> <span class="m">00</span> 	lea    0x1b6<span class="o">(</span>%rip<span class="o">)</span>,%rdi        <span class="c1"># 200330 &lt;_DYNAMIC+0x110&gt;</span>
  20017a:	b8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>       	mov    <span class="nv">$0</span>x0,%eax
  20017f:	e8 8c <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>       	callq  <span class="m">200210</span> &lt;printf@plt&gt;
  <span class="m">200184</span>:	<span class="m">90</span>                   	nop
  <span class="m">200185</span>:	5d                   	pop    %rbp
  <span class="m">200186</span>:	c3                   	retq   

<span class="m">0000000000200200</span> &lt;printf@plt-0x10&gt;:
  <span class="m">200200</span>:	ff <span class="m">35</span> 4a 0e <span class="m">00</span> <span class="m">00</span>    	pushq  0xe4a<span class="o">(</span>%rip<span class="o">)</span>        <span class="c1"># 201050 &lt;_GLOBAL_OFFSET_TABLE_+0x8&gt;</span>
  <span class="m">200206</span>:	ff <span class="m">25</span> 4c 0e <span class="m">00</span> <span class="m">00</span>    	jmpq   *0xe4c<span class="o">(</span>%rip<span class="o">)</span>        <span class="c1"># 201058 &lt;_GLOBAL_OFFSET_TABLE_+0x10&gt;</span>
  20020c:	0f 1f <span class="m">40</span> <span class="m">00</span>          	nopl   0x0<span class="o">(</span>%rax<span class="o">)</span>

<span class="m">0000000000200210</span> &lt;printf@plt&gt;:
  <span class="m">200210</span>:	ff <span class="m">25</span> 4a 0e <span class="m">00</span> <span class="m">00</span>    	jmpq   *0xe4a<span class="o">(</span>%rip<span class="o">)</span>        <span class="c1"># 201060 &lt;_GLOBAL_OFFSET_TABLE_+0x18&gt;</span>
  <span class="m">200216</span>:	<span class="m">68</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>       	pushq  <span class="nv">$0</span>x0
  20021b:	e9 e0 ff ff ff       	jmpq   <span class="m">200200</span> &lt;main+0x91&gt;
</pre></div>
<p>What? Two more local functions? What happened here? The GNU toolchain has a concept for lazy run-time linking. That means the address is not resolved until it's referenced. To achieve that, it needs helper functions (generated to the .plt section in the text segment).
</p><p>When the CPU executes this code, it will first call a normal local function at 20017f. That function is one of the helpers and it's purpose is to load an address from GOT+0x18 and jump to it. By default, the value points to the next instruction, which saves 0 to stack and calls the other helper function at 200200. That one is the reference resolver, and it's job is the replace the address in GOT with a relocated address.
</p><p>Because the resolver function is not known at link time, it's address is also in GOT at 0x10. What's more it can receive one argument, stored at GOT+0x8. We can also spot that at 200206 the instruction is a jump and not a call, so resolver never returns to this helper, instead it should jump to the relocated address.
</p>
<h2><span class="mw-headline" id="Implementing_a_dynamic_linker">Implementing a dynamic linker</span></h2>
<p>All that disassembly teach us two things about the dynamic linker:
</p>
<pre>1. it has to locate and write the GOT
2. it has two parts: load time linker and a run time resolver.
</pre>
<p>The first part runs before the thread is started and saves the second part's address and argument into GOT. On the other hand, the second part runs when the thread is already running, and saves relocated addresses into GOT. As you can see, both parts require the address of GOT. To save resources, one should not locate the GOT twice: this is where the resolver's argument came in.
</p><p>To proceed we'll have to locate the GOT in memory and figure out what entries it has.
</p>
<h3><span class="mw-headline" id="Locating_the_GOT">Locating the GOT</span></h3>
<p>Time to peek on what's in the object file.
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>$ readelf -a <span class="nb">test</span>
Section Headers:
  <span class="o">[</span>Nr<span class="o">]</span> Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  <span class="o">[</span><span class="m">10</span><span class="o">]</span> <span class="s1">&#39;.got.plt&#39;</span>        PROGBITS         <span class="m">0000000000201048</span>  <span class="m">00001048</span>
       <span class="m">0000000000000020</span>  <span class="m">0000000000000008</span>  WA       <span class="m">0</span>     <span class="m">0</span>     <span class="m">8</span>

Symbol table .symtab contains <span class="m">23</span> entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
    <span class="m">15</span>: <span class="m">0000000000201048</span>     <span class="m">0</span> OBJECT  LOCAL  DEFAULT   <span class="m">10</span> _GLOBAL_OFFSET_TABLE_
</pre></div>
<p>Symbol table shows that the GOT is at 201048. We can also see the same value in the section headers at '.got.plt'. That means we don't have to resolve symbols in order to get GOT's address which simplifies the first part. We can also learn that the GOT is 32 (0x20) bytes long in our example.
</p>
<h3><span id="What.27s_in_the_GOT.3F"></span><span class="mw-headline" id="What's_in_the_GOT?">What's in the GOT?</span></h3>
<p>We already know that
</p>
<pre>1. GOT+0x0 entry is unused
2. GOT+0x8 is an argument to second part
3. GOT+0x10 is function reference to second part
</pre>
<p>But what about the rest, starting at 201060 in our example? Here we have only one reference so it's obvious, but what if we have more references? How should we know which symbol is associated to which entry?
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>$ readelf -a <span class="nb">test</span>
Section Headers:
  <span class="o">[</span>Nr<span class="o">]</span> Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  <span class="o">[</span> <span class="m">4</span><span class="o">]</span> <span class="s1">&#39;.rela.plt&#39;</span>       RELA             00000000002001e8  000001e8
       <span class="m">0000000000000018</span>  <span class="m">0000000000000018</span>  AI       <span class="m">2</span>    <span class="m">10</span>     <span class="m">8</span>

Relocation section .rela.plt at offset 0x1e8 contains <span class="m">1</span> entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
<span class="m">000000201060</span>  <span class="m">000100000007</span> R_X86_64_JUMP_SLO <span class="m">0000000000000000</span> <span class="nb">printf</span> + <span class="m">0</span>
</pre></div>
<p>How convenient that another table is also recorded in the section headers. It's called '.rela.plt' and describes exactly that. 
</p>
<h3><span id="Where_are_my_libraries.3F"></span><span class="mw-headline" id="Where_are_my_libraries?">Where are my libraries?</span></h3>
<p>So far we assumed that shared libraries are already loaded. It's the case with libc, but how do we know what other shared libraries the executable wants?
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>$ readelf -a <span class="nb">test</span>
Section Headers:
  <span class="o">[</span>Nr<span class="o">]</span> Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  <span class="o">[</span> <span class="m">6</span><span class="o">]</span> <span class="s1">&#39;.dynamic&#39;</span>        DYNAMIC          <span class="m">0000000000200220</span>  <span class="m">00000220</span>
       <span class="m">0000000000000110</span>  <span class="m">0000000000000010</span>  WA       <span class="m">3</span>     <span class="m">0</span>     <span class="m">8</span>

Dynamic section at offset 0x220 contains <span class="m">12</span> entries:
  Tag        Type                         Name/Value
 0x0000000000000001 <span class="o">(</span>NEEDED<span class="o">)</span>             Shared library: <span class="o">[</span>libc.so<span class="o">]</span>
</pre></div>
<p>Not surprising that the answer lies in the section header again. There's a table pointer called '.dynamic'. That table has several records, but what we really are interested in is the ones marked by "NEEDED".
</p>
<h3><span class="mw-headline" id="Symbol_look_up">Symbol look up</span></h3>
<p>To find out printf's address we should locate it's symbol first in the shared library.
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>$ readelf -a libc.so 
Section Headers:
  <span class="o">[</span>Nr<span class="o">]</span> Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  <span class="o">[</span> <span class="m">2</span><span class="o">]</span> <span class="s1">&#39;.dynsym&#39;</span>         DYNSYM           <span class="m">0000000100000218</span>  <span class="m">00000218</span>
       00000000000003c0  <span class="m">0000000000000018</span>   A       <span class="m">3</span>     <span class="m">1</span>     <span class="m">8</span>
  <span class="o">[</span> <span class="m">3</span><span class="o">]</span> <span class="s1">&#39;.dynstr&#39;</span>         STRTAB           00000001000005d8  000005d8
       <span class="m">0000000000000124</span>  <span class="m">0000000000000000</span>   A       <span class="m">0</span>     <span class="m">0</span>     <span class="m">1</span>

Symbol table .dynsym contains <span class="m">40</span> entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     <span class="m">8</span>: <span class="m">0000000100000175</span>    <span class="m">93</span> FUNC    GLOBAL DEFAULT    <span class="m">1</span> <span class="nb">printf</span>
</pre></div>
<p>Bingo! It is 100000175 in our example.
</p>
<h2><span id="Gimme_code.21"></span><span class="mw-headline" id="Gimme_code!">Gimme code!</span></h2>
<p>I've put all the above together in a very simple example, see <a rel="nofollow" class="external text" href="https://gitlab.com/bztsrc/osz/-/blob/master/tools/elftool.c">elftool.c</a> on gitlab.
</p><p>When I run it on the executable it gives:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>$ gcc elftool.c -o elftool
$ ./elftool -d mytestelf.o
Stringtable 000003f0 <span class="o">(</span><span class="m">118</span> bytes<span class="o">)</span>, symbols 000002b8 <span class="o">(</span><span class="m">312</span> bytes, one entry <span class="m">24</span><span class="o">)</span>

--- IMPORT ---
Dynamic 00001e20 <span class="o">(</span><span class="m">464</span> bytes, one entry <span class="m">16</span><span class="o">)</span>:
  <span class="m">0</span>. /lib/libc.so.6

GOT <span class="m">00002000</span> <span class="o">(</span><span class="m">104</span> bytes<span class="o">)</span>, Rela 000004d0 <span class="o">(</span><span class="m">240</span> bytes, one entry <span class="m">24</span><span class="o">)</span>:
  <span class="m">0</span>. <span class="m">00602018</span> +0 puts
  <span class="m">1</span>. <span class="m">00602020</span> +0 fread
  <span class="m">2</span>. <span class="m">00602028</span> +0 fclose
  <span class="m">3</span>. <span class="m">00602030</span> +0 <span class="nb">printf</span>
  <span class="m">4</span>. <span class="m">00602038</span> +0 strcmp
  <span class="m">5</span>. <span class="m">00602040</span> +0 ftell
  <span class="m">6</span>. <span class="m">00602048</span> +0 malloc
  <span class="m">7</span>. <span class="m">00602050</span> +0 fseek
  <span class="m">8</span>. <span class="m">00602058</span> +0 fopen
  <span class="m">9</span>. <span class="m">00602060</span> +0 <span class="nb">exit</span>

--- EXPORT ---
</pre></div>
<p>As you can see here we have an import section, but nothing to be exported. Now let's see a shared library!
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>$ ./elftool -d /lib/libc.so.6
Stringtable <span class="m">00011038</span> <span class="o">(</span><span class="m">23041</span> bytes<span class="o">)</span>, symbols 00003d90 <span class="o">(</span><span class="m">53928</span> bytes, one entry <span class="m">24</span><span class="o">)</span>

--- IMPORT ---
Dynamic 00197b60 <span class="o">(</span><span class="m">496</span> bytes, one entry <span class="m">16</span><span class="o">)</span>:
  <span class="m">0</span>. /lib/ld-linux-x86-64.so.2

GOT <span class="m">00198000</span> <span class="o">(</span><span class="m">88</span> bytes<span class="o">)</span>, Rela 0001f760 <span class="o">(</span><span class="m">192</span> bytes, one entry <span class="m">24</span><span class="o">)</span>:
  <span class="m">0</span>. <span class="m">00398050</span> +844d0 
  <span class="m">1</span>. <span class="m">00398048</span> +a8560 
  <span class="m">2</span>. <span class="m">00398040</span> +7ff80 
  <span class="m">3</span>. <span class="m">00398038</span> +867c0 
  <span class="m">4</span>. <span class="m">00398030</span> +823f0 
  <span class="m">5</span>. <span class="m">00398028</span> +82780 
  <span class="m">6</span>. <span class="m">00398020</span> +a8640 
  <span class="m">7</span>. <span class="m">00398018</span> +83b50 

--- EXPORT ---
  <span class="m">8</span>. 0008e850 __strspn_c1
  <span class="m">9</span>. 0006aad0 putwchar
 <span class="m">10</span>. 000f8640 __gethostname_chk
 <span class="m">11</span>. 0008e870 __strspn_c2
 <span class="m">12</span>. 0010f210 setrpcent
 <span class="m">13</span>. 0009eda0 __wcstod_l
 <span class="m">14</span>. 0008e8a0 __strspn_c3
 <span class="m">15</span>. 000e8d10 epoll_create
 <span class="m">16</span>. 000d1b50 sched_get_priority_min
 <span class="m">17</span>. 000f8660 __getdomainname_chk
 <span class="m">18</span>. 000e8f20 klogctl
 <span class="m">19</span>. 0002c380 __tolower_l
 <span class="m">20</span>. 0004f440 dprintf
 <span class="m">21</span>. 000b8e00 setuid
 <span class="m">22</span>. 000a3d20 __wcscoll_l
... lot more lines to come ...
</pre></div>
<p>This time it has hell a lot of functions to export, and also it imports the dynamic linker of Linux with addend offsets in the GOT.
</p>
<h2><span class="mw-headline" id="Summary">Summary</span></h2>
<p>To summarize a dynamic linker should be look like:
</p>
<pre>1. load-time linker
  1.1. locates GOT by '.got.plt' section, and saves that address in GOT+0x8
  1.2. stores second part's address at GOT+0x10
  1.3. reads '.dynamic' section to load shared libraries
2. run-time reference resolver
  2.1. it's called by a helper
  2.2. that helper places index-0x18 and the address of GOT as arguments on the stack
  2.3. it has to locate '.rela.plt' to get the symbol for the reference
  2.4. the symbol is looked up in the shared library's '.dynsym' section to get relocated address
  2.5. that relocated address has to be saved in the GOT (index and base on the stack)
  2.6. clean up stack, restore registers and jump to the relocated address
</pre>
<p>That's all, hope it helps somebody! Good luck with implementing your own dynamic linker!
</p>
<!-- 
NewPP limit report
Cached time: 20250211125156
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.060 seconds
Real time usage: 1.499 seconds
Preprocessor visited node count: 89/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 16405/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4000-0!canonical and timestamp 20250211125155 and revision id 28633.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Dynamic_Linker&amp;oldid=28633">https://wiki.osdev.org/index.php?title=Dynamic_Linker&amp;oldid=28633</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Linkers" title="Category:Linkers">Linkers</a></li><li><a href="./Category:Loaders" title="Category:Loaders">Loaders</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Dynamic+Linker" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Dynamic_Linker#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Dynamic_Linker" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:Dynamic_Linker&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Dynamic_Linker"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Dynamic_Linker&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Dynamic_Linker&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Dynamic_Linker" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Dynamic_Linker" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Dynamic_Linker&amp;oldid=28633" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Dynamic_Linker&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 18 February 2024, at 03:09.</li>
	<li id="footer-info-0">This page has been accessed 3,261 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Dynamic_Linker&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.060","walltime":"1.499","ppvisitednodes":{"value":89,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":16405,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250211125156","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":1594});});</script>
</body>
</html>