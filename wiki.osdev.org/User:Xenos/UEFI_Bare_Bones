<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>User:Xenos/UEFI Bare Bones - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"ece098f3b23a6c4f72a26c17","wgCSPNonce":false,"wgCanonicalNamespace":"User","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":2,"wgPageName":"User:Xenos/UEFI_Bare_Bones","wgTitle":"Xenos/UEFI Bare Bones","wgCurRevisionId":26635,"wgRevisionId":26635,"wgArticleId":4476,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Firmware","UEFI"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"User:Xenos/UEFI_Bare_Bones","wgRelevantArticleId":4476,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],
"wgRestrictionMove":[],"wgRelevantUserName":"Xenos","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="../favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="../opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="../api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-2 ns-subject page-User_Xenos_UEFI_Bare_Bones rootpage-User_Xenos skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-namespace">User</span><span class="mw-page-title-separator">:</span><span class="mw-page-title-main">Xenos/UEFI Bare Bones</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="UEFI_Bare_Bones#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="UEFI_Bare_Bones#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="UEFI_Bare_Bones#Introduction"><span class="tocnumber">1</span> <span class="toctext">Introduction</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="UEFI_Bare_Bones#Prerequisites"><span class="tocnumber">2</span> <span class="toctext">Prerequisites</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="UEFI_Bare_Bones#Bare_metal_GCC_cross_compiler"><span class="tocnumber">2.1</span> <span class="toctext">Bare metal GCC cross compiler</span></a>
<ul>
<li class="toclevel-3 tocsection-4"><a href="UEFI_Bare_Bones#Target_system_selection"><span class="tocnumber">2.1.1</span> <span class="toctext">Target system selection</span></a>
<ul>
<li class="toclevel-4 tocsection-5"><a href="UEFI_Bare_Bones#i386"><span class="tocnumber">2.1.1.1</span> <span class="toctext">i386</span></a></li>
<li class="toclevel-4 tocsection-6"><a href="UEFI_Bare_Bones#x86_64"><span class="tocnumber">2.1.1.2</span> <span class="toctext">x86_64</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-7"><a href="UEFI_Bare_Bones#Build_environment"><span class="tocnumber">2.1.2</span> <span class="toctext">Build environment</span></a></li>
<li class="toclevel-3 tocsection-8"><a href="UEFI_Bare_Bones#Building_binutils"><span class="tocnumber">2.1.3</span> <span class="toctext">Building binutils</span></a></li>
<li class="toclevel-3 tocsection-9"><a href="UEFI_Bare_Bones#Building_GCC"><span class="tocnumber">2.1.4</span> <span class="toctext">Building GCC</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-10"><a href="UEFI_Bare_Bones#MTools"><span class="tocnumber">2.2</span> <span class="toctext">MTools</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="UEFI_Bare_Bones#Source_files"><span class="tocnumber">3</span> <span class="toctext">Source files</span></a>
<ul>
<li class="toclevel-2 tocsection-12"><a href="UEFI_Bare_Bones#main.c"><span class="tocnumber">3.1</span> <span class="toctext">main.c</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="UEFI_Bare_Bones#efi.h"><span class="tocnumber">3.2</span> <span class="toctext">efi.h</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="UEFI_Bare_Bones#Linker_script"><span class="tocnumber">3.3</span> <span class="toctext">Linker script</span></a>
<ul>
<li class="toclevel-3 tocsection-15"><a href="UEFI_Bare_Bones#i386_2"><span class="tocnumber">3.3.1</span> <span class="toctext">i386</span></a></li>
<li class="toclevel-3 tocsection-16"><a href="UEFI_Bare_Bones#x86_64_2"><span class="tocnumber">3.3.2</span> <span class="toctext">x86_64</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-17"><a href="UEFI_Bare_Bones#Building"><span class="tocnumber">4</span> <span class="toctext">Building</span></a>
<ul>
<li class="toclevel-2 tocsection-18"><a href="UEFI_Bare_Bones#i386_3"><span class="tocnumber">4.1</span> <span class="toctext">i386</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="UEFI_Bare_Bones#x86_64_3"><span class="tocnumber">4.2</span> <span class="toctext">x86_64</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-20"><a href="UEFI_Bare_Bones#Creating_disk_images"><span class="tocnumber">5</span> <span class="toctext">Creating disk images</span></a></li>
<li class="toclevel-1 tocsection-21"><a href="UEFI_Bare_Bones#Running"><span class="tocnumber">6</span> <span class="toctext">Running</span></a>
<ul>
<li class="toclevel-2 tocsection-22"><a href="UEFI_Bare_Bones#QEMU_with_OVMF"><span class="tocnumber">6.1</span> <span class="toctext">QEMU with OVMF</span></a>
<ul>
<li class="toclevel-3 tocsection-23"><a href="UEFI_Bare_Bones#i386_4"><span class="tocnumber">6.1.1</span> <span class="toctext">i386</span></a></li>
<li class="toclevel-3 tocsection-24"><a href="UEFI_Bare_Bones#x86_64_4"><span class="tocnumber">6.1.2</span> <span class="toctext">x86_64</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-25"><a href="UEFI_Bare_Bones#VirtualBox"><span class="tocnumber">6.2</span> <span class="toctext">VirtualBox</span></a>
<ul>
<li class="toclevel-3 tocsection-26"><a href="UEFI_Bare_Bones#i386_5"><span class="tocnumber">6.2.1</span> <span class="toctext">i386</span></a></li>
<li class="toclevel-3 tocsection-27"><a href="UEFI_Bare_Bones#x86_64_5"><span class="tocnumber">6.2.2</span> <span class="toctext">x86_64</span></a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Introduction">Introduction</span></h2>
<p>This tutorial shows how to build a simple "Hello world" bare bones EFI application. It is largely based on the <a href="../UEFI_App_Bare_Bones" title="UEFI App Bare Bones">UEFI App Bare Bones</a> article, but instead of using (parts of) gnu-efi and a Windows targeted toolchain, it uses a bare metal targeted <a href="../GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC cross compiler</a> and no foreign sources.
</p>
<h2><span class="mw-headline" id="Prerequisites">Prerequisites</span></h2>
<h3><span class="mw-headline" id="Bare_metal_GCC_cross_compiler">Bare metal GCC cross compiler</span></h3>
<p>There are two approaches using the GNU (GCC / binutils) toolchain which are most common for building EFI applications:
</p>
<ul><li>gnu-efi uses native tools, provided that the given version of objcopy can create EFI applications.</li>
<li>Various tutorials use Windows (MinGW, MSYS) targeted toolchains.</li></ul>
<p>This tutorial uses a different approach, which is closer to other, non-UEFI bare bones tutorials on OS development, by using a bare metal ELF targeted <a href="../GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC cross compiler</a>. However, a few minor modifications are necessary in order to create EFI applications with the created toolchain.
</p>
<h4><span class="mw-headline" id="Target_system_selection">Target system selection</span></h4>
<p>Before starting, one needs to decide on a target architecture, which will determine the further compiler options. For this tutorial, a bare metal ELF targeted cross compiler will be used; however, for binutils to be able to create EFI applications in the PE format, an additional PE target is needed. Depending on the chosen target architecture, one may use one of the following:
</p>
<h5><span class="mw-headline" id="i386">i386</span></h5>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span><span class="nb">export</span> <span class="nv">TARGET</span><span class="o">=</span>i686-elf
<span class="nb">export</span> <span class="nv">TARGETS</span><span class="o">=</span><span class="nv">$TARGET</span>,i686-pe
</pre></div>
<h5><span class="mw-headline" id="x86_64">x86_64</span></h5>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span><span class="nb">export</span> <span class="nv">TARGET</span><span class="o">=</span>x86_64-elf
<span class="nb">export</span> <span class="nv">TARGETS</span><span class="o">=</span><span class="nv">$TARGET</span>,x86_64-pe
</pre></div>
<h4><span class="mw-headline" id="Build_environment">Build environment</span></h4>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span><span class="nb">export</span> <span class="nv">PREFIX</span><span class="o">=</span>/opt/cross/<span class="nv">$TARGET</span>
<span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$PREFIX</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">&quot;</span>
</pre></div>
<h4><span class="mw-headline" id="Building_binutils">Building binutils</span></h4>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>mkdir build-binutils
<span class="nb">cd</span> build-binutils
../binutils-x.y.z/configure --target<span class="o">=</span><span class="nv">$TARGET</span> --enable-targets<span class="o">=</span><span class="nv">$TARGETS</span> --prefix<span class="o">=</span><span class="s2">&quot;</span><span class="nv">$PREFIX</span><span class="s2">&quot;</span> --with-sysroot --disable-nls
make
make install
</pre></div>
<h4><span class="mw-headline" id="Building_GCC">Building GCC</span></h4>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>mkdir build-gcc
<span class="nb">cd</span> build-gcc
../gcc-x.y.z/configure --target<span class="o">=</span><span class="nv">$TARGET</span> --prefix<span class="o">=</span><span class="s2">&quot;</span><span class="nv">$PREFIX</span><span class="s2">&quot;</span> --disable-nls --enable-languages<span class="o">=</span>c,c++ --without-headers
make all-gcc
make all-target-libgcc
make install-gcc
make install-target-libgcc
</pre></div>
<h3><span class="mw-headline" id="MTools">MTools</span></h3>
<p>The disk image is created using <a href="../MTools" title="MTools">MTools</a>.
</p>
<h2><span class="mw-headline" id="Source_files">Source files</span></h2>
<h3><span class="mw-headline" id="main.c">main.c</span></h3>
<p>This tutorial creates a simple "Hello world" EFI application, which does the following:
</p>
<ol><li>Print "Hello world" to the standard EFI console.</li>
<li>Flush the input buffer, to remove any possibly pending key strokes.</li>
<li>Wait for a key to be pressed.</li>
<li>Exit and return to the environment.</li></ol>
<p>This is done in the following C code:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;efi.h&quot;</span><span class="cp"></span>

<span class="n">EFI_STATUS</span><span class="w"> </span><span class="nf">efi_main</span><span class="p">(</span><span class="n">EFI_HANDLE</span><span class="w"> </span><span class="n">ImageHandle</span><span class="p">,</span><span class="w"> </span><span class="n">EFI_SYSTEM_TABLE</span><span class="o">*</span><span class="w"> </span><span class="n">SystemTable</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">ImageHandle</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_STATUS</span><span class="w"> </span><span class="n">Status</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_INPUT_KEY</span><span class="w"> </span><span class="n">Key</span><span class="p">;</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* Print message. */</span><span class="w"></span>
<span class="w">	</span><span class="n">Status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SystemTable</span><span class="o">-&gt;</span><span class="n">ConOut</span><span class="o">-&gt;</span><span class="n">OutputString</span><span class="p">(</span><span class="n">SystemTable</span><span class="o">-&gt;</span><span class="n">ConOut</span><span class="p">,</span><span class="w"> </span><span class="sa">L</span><span class="s">&quot;Hello World</span><span class="se">\n\r</span><span class="s">&quot;</span><span class="w"> </span><span class="n">MESSAGE</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="p">(</span><span class="n">EFI_ERROR</span><span class="p">(</span><span class="n">Status</span><span class="p">))</span><span class="w"></span>
<span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">Status</span><span class="p">;</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* Empty the console input buffer to flush out any keystrokes entered before this point. */</span><span class="w"></span>
<span class="w">	</span><span class="n">Status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SystemTable</span><span class="o">-&gt;</span><span class="n">ConIn</span><span class="o">-&gt;</span><span class="n">Reset</span><span class="p">(</span><span class="n">SystemTable</span><span class="o">-&gt;</span><span class="n">ConIn</span><span class="p">,</span><span class="w"> </span><span class="nb">false</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="k">if</span><span class="p">(</span><span class="n">EFI_ERROR</span><span class="p">(</span><span class="n">Status</span><span class="p">))</span><span class="w"></span>
<span class="w">		</span><span class="k">return</span><span class="w"> </span><span class="n">Status</span><span class="p">;</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* Wait for keypress. */</span><span class="w"></span>
<span class="w">	</span><span class="k">while</span><span class="p">((</span><span class="n">Status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SystemTable</span><span class="o">-&gt;</span><span class="n">ConIn</span><span class="o">-&gt;</span><span class="n">ReadKeyStroke</span><span class="p">(</span><span class="n">SystemTable</span><span class="o">-&gt;</span><span class="n">ConIn</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">Key</span><span class="p">))</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">EFI_NOT_READY</span><span class="p">)</span><span class="w"> </span><span class="p">;</span><span class="w"></span>

<span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="n">Status</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="efi.h">efi.h</span></h3>
<p>Most EFI applications make use of a large number of data types, structs, constants, function prototypes etc. which are declared in a common header file or set of header files. For this simple bare bones application, only a subset of these is used, and so a minimal set of declarations may be used. The following file declares only those parts which are necessary for simple console output and input.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdint.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdbool.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;wchar.h&gt;</span><span class="cp"></span>

<span class="cp">#ifndef EFI_H</span>
<span class="cp">#define EFI_H</span>

<span class="k">typedef</span><span class="w"> </span><span class="kt">void</span><span class="o">*</span><span class="w"> </span><span class="n">EFI_PVOID</span><span class="p">;</span><span class="w"></span>
<span class="k">typedef</span><span class="w"> </span><span class="kt">void</span><span class="o">*</span><span class="w"> </span><span class="n">EFI_HANDLE</span><span class="p">;</span><span class="w"></span>

<span class="cp">#ifdef __i386__</span>
<span class="cp">#define MESSAGE L&quot;i386\r\n&quot;</span>
<span class="k">typedef</span><span class="w"> </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">UINTN</span><span class="p">;</span><span class="w"></span>
<span class="cp">#endif</span>
<span class="cp">#ifdef __amd64__</span>
<span class="cp">#define MESSAGE L&quot;x86_64\r\n&quot;</span>
<span class="k">typedef</span><span class="w"> </span><span class="kt">uint64_t</span><span class="w"> </span><span class="n">UINTN</span><span class="p">;</span><span class="w"></span>
<span class="cp">#endif</span>

<span class="k">typedef</span><span class="w"> </span><span class="n">UINTN</span><span class="w"> </span><span class="n">EFI_STATUS</span><span class="p">;</span><span class="w"></span>

<span class="cp">#define EFIERR(a) (a | ~(((EFI_STATUS)-1) &gt;&gt; 1))</span>
<span class="cp">#define EFI_ERROR(a) (a &amp; ~(((EFI_STATUS)-1) &gt;&gt; 1))</span>

<span class="cp">#define EFI_NOT_READY EFIERR(6)</span>

<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint64_t</span><span class="w"> </span><span class="n">Signature</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">Revision</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">HeaderSize</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">CRC32</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">Reserved</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">EFI_TABLE_HEADER</span><span class="p">;</span><span class="w"></span>

<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">MaxMode</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">Mode</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">Attribute</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">CursorColumn</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">CursorRow</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">  </span><span class="n">CursorVisible</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">SIMPLE_TEXT_OUTPUT_MODE</span><span class="p">;</span><span class="w"></span>

<span class="k">typedef</span><span class="w"> </span><span class="n">EFI_STATUS</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="n">EFI_TEXT_CLEAR_SCREEN</span><span class="p">)(</span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">This</span><span class="p">);</span><span class="w"></span>
<span class="k">typedef</span><span class="w"> </span><span class="n">EFI_STATUS</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="n">EFI_TEXT_ENABLE_CURSOR</span><span class="p">)(</span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">This</span><span class="p">,</span><span class="w"> </span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">Visible</span><span class="p">);</span><span class="w"></span>
<span class="k">typedef</span><span class="w"> </span><span class="n">EFI_STATUS</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="n">EFI_TEXT_SET_ATTRIBUTE</span><span class="p">)(</span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">This</span><span class="p">,</span><span class="w"> </span><span class="n">UINTN</span><span class="w"> </span><span class="n">Attribute</span><span class="p">);</span><span class="w"></span>
<span class="k">typedef</span><span class="w"> </span><span class="n">EFI_STATUS</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="n">EFI_TEXT_STRING</span><span class="p">)(</span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">This</span><span class="p">,</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">wchar_t</span><span class="w"> </span><span class="o">*</span><span class="n">String</span><span class="p">);</span><span class="w"></span>

<span class="k">typedef</span><span class="w"> </span><span class="n">EFI_STATUS</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="n">EFI_TEXT_QUERY_MODE</span><span class="p">)(</span><span class="w"></span>
<span class="w">	</span><span class="kt">void</span><span class="w">  </span><span class="o">*</span><span class="n">This</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="n">UINTN</span><span class="w"> </span><span class="n">ModeNumber</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="n">UINTN</span><span class="w"> </span><span class="o">*</span><span class="n">Columns</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="n">UINTN</span><span class="w"> </span><span class="o">*</span><span class="n">Rows</span><span class="p">);</span><span class="w"></span>

<span class="k">typedef</span><span class="w"> </span><span class="n">EFI_STATUS</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="n">EFI_TEXT_SET_CURSOR_POSITION</span><span class="p">)(</span><span class="w"></span>
<span class="w">	</span><span class="kt">void</span><span class="w">  </span><span class="o">*</span><span class="n">This</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="n">UINTN</span><span class="w"> </span><span class="n">Column</span><span class="p">,</span><span class="w"></span>
<span class="w">	</span><span class="n">UINTN</span><span class="w"> </span><span class="n">Row</span><span class="p">);</span><span class="w"></span>

<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_PVOID</span><span class="w">                    </span><span class="n">Reset</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_TEXT_STRING</span><span class="w">              </span><span class="n">OutputString</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_PVOID</span><span class="w">                    </span><span class="n">TestString</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_TEXT_QUERY_MODE</span><span class="w">          </span><span class="n">QueryMode</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_PVOID</span><span class="w">                    </span><span class="n">SetMode</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_TEXT_SET_ATTRIBUTE</span><span class="w">       </span><span class="n">SetAttribute</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_TEXT_CLEAR_SCREEN</span><span class="w">        </span><span class="n">ClearScreen</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_TEXT_SET_CURSOR_POSITION</span><span class="w"> </span><span class="n">SetCursorPosition</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_TEXT_ENABLE_CURSOR</span><span class="w">       </span><span class="n">EnableCursor</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">SIMPLE_TEXT_OUTPUT_MODE</span><span class="w">      </span><span class="o">*</span><span class="n">Mode</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL</span><span class="p">;</span><span class="w"></span>

<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">wchar_t</span><span class="w"> </span><span class="n">ScanCode</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">wchar_t</span><span class="w"> </span><span class="n">UnicodeChar</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">EFI_INPUT_KEY</span><span class="p">;</span><span class="w"></span>

<span class="k">typedef</span><span class="w"> </span><span class="n">EFI_STATUS</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="n">EFI_INPUT_RESET</span><span class="p">)(</span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">This</span><span class="p">,</span><span class="w"> </span><span class="kt">bool</span><span class="w"> </span><span class="n">ExtendedVerification</span><span class="p">);</span><span class="w"></span>
<span class="k">typedef</span><span class="w"> </span><span class="n">EFI_STATUS</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="n">EFI_INPUT_READ_KEY</span><span class="p">)(</span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">This</span><span class="p">,</span><span class="w"> </span><span class="n">EFI_INPUT_KEY</span><span class="w"> </span><span class="o">*</span><span class="n">Key</span><span class="p">);</span><span class="w"></span>

<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_INPUT_RESET</span><span class="w">    </span><span class="n">Reset</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_INPUT_READ_KEY</span><span class="w"> </span><span class="n">ReadKeyStroke</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_PVOID</span><span class="w">          </span><span class="n">WaitForKey</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">EFI_SIMPLE_TEXT_INPUT_PROTOCOL</span><span class="p">;</span><span class="w"></span>

<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_TABLE_HEADER</span><span class="w">                </span><span class="n">Hdr</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_PVOID</span><span class="w">                       </span><span class="n">FirmwareVendor</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">                        </span><span class="n">FirmwareRevision</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_PVOID</span><span class="w">                       </span><span class="n">ConsoleInHandle</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_SIMPLE_TEXT_INPUT_PROTOCOL</span><span class="w">  </span><span class="o">*</span><span class="n">ConIn</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_PVOID</span><span class="w">                       </span><span class="n">ConsoleOutHandle</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL</span><span class="w"> </span><span class="o">*</span><span class="n">ConOut</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_PVOID</span><span class="w">                       </span><span class="n">StandardErrorHandle</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL</span><span class="w"> </span><span class="o">*</span><span class="n">StdErr</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">void</span><span class="w">                            </span><span class="o">*</span><span class="n">RuntimeServices</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">void</span><span class="w">                            </span><span class="o">*</span><span class="n">BootServices</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">UINTN</span><span class="w">                           </span><span class="n">NumberOfTableEntries</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">void</span><span class="w">                            </span><span class="o">*</span><span class="n">ConfigurationTable</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">EFI_SYSTEM_TABLE</span><span class="p">;</span><span class="w"></span>

<span class="cp">#endif</span>
</pre></div>
<h3><span class="mw-headline" id="Linker_script">Linker script</span></h3>
<p>To link the final binary and keep the sections which are needed, a linker script is used. The following linker scripts, for different target architectures, do the following:
</p>
<ol><li>Select the output file format (ELF and its specific flavor).</li>
<li>Select the output architecture.</li>
<li>Set the entry point to the function efi_main.</li>
<li>Select the necessary sections and align them on page boundaries.</li>
<li>Create a fake relocation entry, since EFI loaders check for the presence of a relocation table.</li>
<li>Discard unnecessary sections.</li></ol>
<p>For linking, one must make sure that the correct target architecture is selected.
</p>
<h4><span class="mw-headline" id="i386_2">i386</span></h4>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="n">OUTPUT_FORMAT</span><span class="p">(</span><span class="s">&quot;elf32-i386&quot;</span><span class="p">)</span><span class="w"></span>
<span class="n">OUTPUT_ARCH</span><span class="p">(</span><span class="n">i386</span><span class="p">)</span><span class="w"></span>
<span class="n">ENTRY</span><span class="p">(</span><span class="n">efi_main</span><span class="p">)</span><span class="w"></span>
<span class="n">SECTIONS</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">4096</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">ImageBase</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.;</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">hash</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">*</span><span class="p">(.</span><span class="n">hash</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">gnu</span><span class="p">.</span><span class="n">hash</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">*</span><span class="p">(.</span><span class="n">gnu</span><span class="p">.</span><span class="n">hash</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">text</span><span class="w"> </span><span class="o">:</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">_text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.;</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">text</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">text</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">gnu</span><span class="p">.</span><span class="n">linkonce</span><span class="p">.</span><span class="n">t</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="n">_etext</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.;</span><span class="w"></span>
<span class="w">	</span><span class="n">_text_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">_text</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">rdata</span><span class="w"> </span><span class="o">:</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">_data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.;</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">got</span><span class="p">.</span><span class="n">plt</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">got</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">rodata</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">srodata</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">gnu</span><span class="p">.</span><span class="n">linkonce</span><span class="p">.</span><span class="n">r</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">data</span><span class="w"> </span><span class="o">:</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">data</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">sdata</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">gnu</span><span class="p">.</span><span class="n">linkonce</span><span class="p">.</span><span class="n">d</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">bss</span><span class="w"> </span><span class="o">:</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">sbss</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">scommon</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">dynbss</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">bss</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">gnu</span><span class="p">.</span><span class="n">linkonce</span><span class="p">.</span><span class="n">b</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(</span><span class="n">COMMON</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">dynamic</span><span class="w">  </span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">*</span><span class="p">(.</span><span class="n">dynamic</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">rel</span><span class="w"> </span><span class="o">:</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">rel</span><span class="p">.</span><span class="n">data</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">rel</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">rel</span><span class="p">.</span><span class="n">got</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">rel</span><span class="p">.</span><span class="n">stab</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="n">_edata</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.;</span><span class="w"></span>
<span class="w">	</span><span class="n">_data_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">_etext</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">reloc</span><span class="w"> </span><span class="o">:</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">LONG</span><span class="p">(</span><span class="n">_data</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">LONG</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">SHORT</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">reloc</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">dynsym</span><span class="w">   </span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">*</span><span class="p">(.</span><span class="n">dynsym</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">dynstr</span><span class="w">   </span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">*</span><span class="p">(.</span><span class="n">dynstr</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="o">/</span><span class="n">DISCARD</span><span class="o">/</span><span class="w"> </span><span class="o">:</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">rel</span><span class="p">.</span><span class="n">reloc</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">eh_frame</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">note</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">comment</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h4><span class="mw-headline" id="x86_64_2">x86_64</span></h4>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="n">OUTPUT_FORMAT</span><span class="p">(</span><span class="s">&quot;elf64-x86-64&quot;</span><span class="p">)</span><span class="w"></span>
<span class="n">OUTPUT_ARCH</span><span class="p">(</span><span class="n">i386</span><span class="o">:</span><span class="n">x86</span><span class="mi">-64</span><span class="p">)</span><span class="w"></span>
<span class="n">ENTRY</span><span class="p">(</span><span class="n">efi_main</span><span class="p">)</span><span class="w"></span>
<span class="n">SECTIONS</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">4096</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">ImageBase</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.;</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">hash</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">*</span><span class="p">(.</span><span class="n">hash</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">gnu</span><span class="p">.</span><span class="n">hash</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">*</span><span class="p">(.</span><span class="n">gnu</span><span class="p">.</span><span class="n">hash</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">text</span><span class="w"> </span><span class="o">:</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">_text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.;</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">text</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">text</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">gnu</span><span class="p">.</span><span class="n">linkonce</span><span class="p">.</span><span class="n">t</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="n">_etext</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.;</span><span class="w"></span>
<span class="w">	</span><span class="n">_text_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">_text</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">rdata</span><span class="w"> </span><span class="o">:</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">_data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.;</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">got</span><span class="p">.</span><span class="n">plt</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">got</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">rodata</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">srodata</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">gnu</span><span class="p">.</span><span class="n">linkonce</span><span class="p">.</span><span class="n">r</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">data</span><span class="w"> </span><span class="o">:</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">data</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">sdata</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">gnu</span><span class="p">.</span><span class="n">linkonce</span><span class="p">.</span><span class="n">d</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">bss</span><span class="w"> </span><span class="o">:</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">sbss</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">scommon</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">dynbss</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">bss</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">gnu</span><span class="p">.</span><span class="n">linkonce</span><span class="p">.</span><span class="n">b</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(</span><span class="n">COMMON</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">dynamic</span><span class="w">  </span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">*</span><span class="p">(.</span><span class="n">dynamic</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">rel</span><span class="w"> </span><span class="o">:</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">rel</span><span class="p">.</span><span class="n">data</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">rel</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">rel</span><span class="p">.</span><span class="n">got</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">rel</span><span class="p">.</span><span class="n">stab</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="n">_edata</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.;</span><span class="w"></span>
<span class="w">	</span><span class="n">_data_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">_etext</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">reloc</span><span class="w"> </span><span class="o">:</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">LONG</span><span class="p">(</span><span class="n">_data</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">LONG</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">SHORT</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">reloc</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">dynsym</span><span class="w">   </span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">*</span><span class="p">(.</span><span class="n">dynsym</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">dynstr</span><span class="w">   </span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">*</span><span class="p">(.</span><span class="n">dynstr</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4096</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="o">/</span><span class="n">DISCARD</span><span class="o">/</span><span class="w"> </span><span class="o">:</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">rel</span><span class="p">.</span><span class="n">reloc</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">eh_frame</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">note</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">comment</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="Building">Building</span></h2>
<p>The build process consists of three steps. First, the main input (C) file is compiled using GCC. This produces an ELF object file. Note that for compiling, a freestanding environment must be used, since there is no C library used in this tutorial. The following flags are applied:
</p>
<dl><dt>-ffreestanding</dt>
<dd>enables the freestanding environment, where no C library is used.</dd>
<dt>-fpic</dt>
<dd>produces position-independent code, which can be loaded anywhere in memory.</dd>
<dt>-fno-stack-protector</dt>
<dd>disables a <a href="../Stack_Smashing_Protector" title="Stack Smashing Protector">stack protector</a>.</dd>
<dt>-fshort-wchar</dt>
<dd>sets wide character strings to use 16 bit, since EFI uses 16 bit unicode.</dd>
<dt>-Wall -Wextra -Wpedantic</dt>
<dd>enables a number of helpful warnings.</dd>
<dt>-O3</dt>
<dd>enables optimization.</dd></dl>
<p>In the next step, the object file is linked using the appropriate linker script, which selects the emitted sections and their memory layout. This will create an ELF shared library file. The following flags are used:
</p>
<dl><dt>-nostdlib</dt>
<dd>disables standard library search paths.</dd>
<dt>-shared</dt>
<dd>creates a shared library file.</dd>
<dt>-Wl,-T,linker.lds</dt>
<dd>makes use of the supplied linker script.</dd>
<dt>-Wl,-Bsymbolic</dt>
<dd>binds references to global symbols to their definition within the shared library.</dd>
<dt>-Wl,-znocombreloc</dt>
<dd>do not combine multiple relocation sections.</dd></dl>
<p>Finally, objcopy is used to build an EFI application out of the ELF library created in the previous step. The output file name is chosen so that the file is booted automatically in the EFI boot process, and can be found in the following table, depending on the target architecture.
</p>
<table class="wikitable">

<tbody><tr>
<th>architecture
</th>
<th>boot file name
</th>
<th>PE executable machine type
</th></tr>
<tr>
<td>i386 / IA32
</td>
<td>BOOTIA32.EFI
</td>
<td>0x14c
</td></tr>
<tr>
<td>x86_64 / AMD64
</td>
<td>BOOTX64.EFI
</td>
<td>0x8664
</td></tr>
<tr>
<td>IA64 / Itanium
</td>
<td>BOOTIA64.EFI
</td>
<td>0x200
</td></tr>
<tr>
<td>ARM / AArch32
</td>
<td>BOOTARM.EFI
</td>
<td>0x1c2
</td></tr>
<tr>
<td>AArch64
</td>
<td>BOOTAA64.EFI
</td>
<td>0xaa64
</td></tr></tbody></table>
<p>In principle, it is also possible to omit the last step and to link directly to an EFI application, without using the intermediate ELF format. However, for this to work also the libgcc and object files must be present in a suitable (<a href="../COFF" title="COFF">COFF</a>) format. The GCC compiler used here produces ELF files, and so the intermediate step is used.
</p><p>Depending on the target architecture, different further adaptations may be necessary.
</p>
<h3><span class="mw-headline" id="i386_3">i386</span></h3>
<p>The following additional compiler options are used on the i686 target:
</p>
<dl><dt>-mgeneral-regs-only</dt>
<dd>uses only general purpose registers (since SSE etc. registers need operating system support).</dd></dl>
<p>The following commands are used:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>i686-elf-gcc -ffreestanding -fpic -fno-stack-protector -fshort-wchar -mgeneral-regs-only -Wall -Wextra -Wpedantic -O3 -o main.o -c main.c
i686-elf-gcc -nostdlib -shared -Wl,-T,i386.lds -Wl,-Bsymbolic -Wl,-znocombreloc -o kernel_ia32.elf main.o -lgcc
i686-elf-objcopy -I elf32-i386 -O efi-app-ia32 kernel_ia32.elf BOOTIA32.EFI
</pre></div>
<h3><span class="mw-headline" id="x86_64_3">x86_64</span></h3>
<p>The following additional compiler options are used on the x86_64 target:
</p>
<dl><dt>-mno-red-zone</dt>
<dd>disables the <a href="../Libgcc_without_red_zone" title="Libgcc without red zone">red zone</a>.</dd>
<dt>-mgeneral-regs-only</dt>
<dd>uses only general purpose registers (since SSE etc. registers need operating system support).</dd>
<dt>-mabi=ms</dt>
<dd>uses the Microsoft ABI for all function calls (which is needed for all calls to and from the EFI API).</dd></dl>
<p>The following commands are used:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>x86_64-elf-gcc -ffreestanding -fpic -fno-stack-protector -fshort-wchar -mno-red-zone -mgeneral-regs-only -mabi<span class="o">=</span>ms -Wall -Wextra -Wpedantic -O3 -o main64.o -c main.c
x86_64-elf-gcc -nostdlib -shared -Wl,-T,x86_64.lds -Wl,-Bsymbolic -Wl,-znocombreloc -o kernel_x64.elf main64.o -lgcc
x86_64-elf-objcopy -I elf64-x86-64 -O efi-app-x86_64 kernel_x64.elf BOOTX64.EFI
</pre></div>
<h2><span class="mw-headline" id="Creating_disk_images">Creating disk images</span></h2>
<p>There are different possibilities how to boot an EFI application. One possibility is to create a disk image and to copy the file into the directory /EFI/BOOT. The following commands create a floppy image, format it and copy the file(s) into the correct directory using <a href="../MTools" title="MTools">MTools</a>.
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>fat.img <span class="nv">bs</span><span class="o">=</span>1k <span class="nv">count</span><span class="o">=</span><span class="m">1440</span>
mformat -i fat.img -f <span class="m">1440</span>&#160;::
mmd -i fat.img&#160;::/EFI
mmd -i fat.img&#160;::/EFI/BOOT
mcopy -i fat.img BOOT*.EFI&#160;::/EFI/BOOT
</pre></div>
<h2><span class="mw-headline" id="Running">Running</span></h2>
<h3><span class="mw-headline" id="QEMU_with_OVMF">QEMU with OVMF</span></h3>
<p>One possibility to run EFI applications is to use <a href="../QEMU" title="QEMU">QEMU</a> with <a rel="nofollow" class="external text" href="https://github.com/tianocore/tianocore.github.io/wiki/OVMF">OVMF</a>. Compiled OVMF images can be downloaded for different target architectures, and one must make sure to choose the correct files. The following examples will directly boot the bare bones kernel, wait for a key press and drop into the BIOS.
</p>
<h4><span class="mw-headline" id="i386_4">i386</span></h4>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>qemu-system-i386 -machine q35 -m <span class="m">256</span> -smp <span class="m">2</span> -net none <span class="se">\</span>
    -global <span class="nv">driver</span><span class="o">=</span>cfi.pflash01,property<span class="o">=</span>secure,value<span class="o">=</span>on <span class="se">\</span>
    -drive <span class="k">if</span><span class="o">=</span>pflash,format<span class="o">=</span>raw,unit<span class="o">=</span><span class="m">0</span>,file<span class="o">=</span>OVMF_CODE-pure-efi.fd,readonly<span class="o">=</span>on <span class="se">\</span>
    -drive <span class="k">if</span><span class="o">=</span>pflash,format<span class="o">=</span>raw,unit<span class="o">=</span><span class="m">1</span>,file<span class="o">=</span>OVMF_VARS-pure-efi.fd <span class="se">\</span>
    -drive <span class="k">if</span><span class="o">=</span>ide,format<span class="o">=</span>raw,file<span class="o">=</span>fat.img
</pre></div>
<h4><span class="mw-headline" id="x86_64_4">x86_64</span></h4>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>qemu-system-x86_64 -machine q35 -m <span class="m">256</span> -smp <span class="m">2</span> -net none <span class="se">\</span>
    -global <span class="nv">driver</span><span class="o">=</span>cfi.pflash01,property<span class="o">=</span>secure,value<span class="o">=</span>on <span class="se">\</span>
    -drive <span class="k">if</span><span class="o">=</span>pflash,format<span class="o">=</span>raw,unit<span class="o">=</span><span class="m">0</span>,file<span class="o">=</span>OVMF_CODE-pure-efi.fd,readonly<span class="o">=</span>on <span class="se">\</span>
    -drive <span class="k">if</span><span class="o">=</span>pflash,format<span class="o">=</span>raw,unit<span class="o">=</span><span class="m">1</span>,file<span class="o">=</span>OVMF_VARS-pure-efi.fd <span class="se">\</span>
    -drive <span class="k">if</span><span class="o">=</span>ide,format<span class="o">=</span>raw,file<span class="o">=</span>fat.img
</pre></div>
<h3><span class="mw-headline" id="VirtualBox">VirtualBox</span></h3>
<p><a href="../VirtualBox" title="VirtualBox">VirtualBox</a> can boot in UEFI mode and run the "Hello world" application created in this tutorial in both 32 and 64 bit mode. A virtual machine with the appropriate settings can be created with the following commands.
</p>
<h4><span class="mw-headline" id="i386_5">i386</span></h4>
<p>Create the virtual machine:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>VBoxManage createvm --name UEFI32 --ostype <span class="s2">&quot;Other&quot;</span> --register
VBoxManage modifyvm UEFI32 --ioapic on
VBoxManage modifyvm UEFI32 --boot1 floppy
VBoxManage modifyvm UEFI32 --memory <span class="m">256</span> --vram <span class="m">16</span>
VBoxManage modifyvm UEFI32 --firmware efi32
VBoxManage storagectl UEFI32 --name <span class="s2">&quot;Floppy&quot;</span> --add floppy
VBoxManage storageattach UEFI32 --storagectl <span class="s2">&quot;Floppy&quot;</span> --port <span class="m">0</span> --device <span class="m">0</span> --type fdd --medium <span class="s2">&quot;fat.img&quot;</span>
</pre></div>
<p>Run:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>VBoxManage startvm UEFI32
</pre></div>
<h4><span class="mw-headline" id="x86_64_5">x86_64</span></h4>
<p>Create the virtual machine:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>VBoxManage createvm --name UEFI64 --ostype <span class="s2">&quot;Other_64&quot;</span> --register
VBoxManage modifyvm UEFI64 --ioapic on
VBoxManage modifyvm UEFI64 --boot1 floppy
VBoxManage modifyvm UEFI64 --memory <span class="m">256</span> --vram <span class="m">16</span>
VBoxManage modifyvm UEFI64 --firmware efi64
VBoxManage storagectl UEFI64 --name <span class="s2">&quot;Floppy&quot;</span> --add floppy
VBoxManage storageattach UEFI64 --storagectl <span class="s2">&quot;Floppy&quot;</span> --port <span class="m">0</span> --device <span class="m">0</span> --type fdd --medium <span class="s2">&quot;fat.img&quot;</span>
</pre></div>
<p>Run:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>VBoxManage startvm UEFI64
</pre></div>
<!-- 
NewPP limit report
Cached time: 20250212013742
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.115 seconds
Real time usage: 2.443 seconds
Preprocessor visited node count: 176/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 57371/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4476-0!canonical and timestamp 20250212013740 and revision id 26635.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=User:Xenos/UEFI_Bare_Bones&amp;oldid=26635">https://wiki.osdev.org/index.php?title=User:Xenos/UEFI_Bare_Bones&amp;oldid=26635</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="../Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="../Category:Firmware" title="Category:Firmware">Firmware</a></li><li><a href="../Category:UEFI" title="Category:UEFI">UEFI</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=User%3AXenos%2FUEFI+Bare+Bones" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="UEFI_Bare_Bones#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-user" class="selected mw-list-item"><a href="UEFI_Bare_Bones" title="View the user page [c]" accesskey="c"><span>User page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User_talk:Xenos/UEFI_Bare_Bones&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="UEFI_Bare_Bones"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Xenos/UEFI_Bare_Bones&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Xenos/UEFI_Bare_Bones&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="../index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="../index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="../Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="../Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="../OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="../OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="../OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="../Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="https://wiki.osdev.org/Special:WhatLinksHere/User:Xenos/UEFI_Bare_Bones" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/User:Xenos/UEFI_Bare_Bones" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-contributions" class="mw-list-item"><a href="../Special:Contributions/Xenos" title="A list of contributions by this user"><span>User contributions</span></a></li><li id="t-log" class="mw-list-item"><a href="../Special:Log/Xenos"><span>Logs</span></a></li><li id="t-userrights" class="mw-list-item"><a href="../Special:UserRights/Xenos"><span>View user groups</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="../Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Xenos/UEFI_Bare_Bones&amp;oldid=26635" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Xenos/UEFI_Bare_Bones&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 31 October 2021, at 01:52.</li>
	<li id="footer-info-0">This page has been accessed 1,411 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="../OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="../OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="../OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=User:Xenos/UEFI_Bare_Bones&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="../resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="../resources/assets/poweredby_mediawiki_132x47.png 1.5x, ../resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.115","walltime":"2.443","ppvisitednodes":{"value":176,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":57371,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250212013742","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":2559});});</script>
</body>
</html>