<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Basic Theory Of Computer Science - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"c55f4d3fce79f87746935da0","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Basic_Theory_Of_Computer_Science","wgTitle":"Basic Theory Of Computer Science","wgCurRevisionId":28637,"wgRevisionId":28637,"wgArticleId":4442,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["In Progress","Theory"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Basic_Theory_Of_Computer_Science","wgRelevantArticleId":4442,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],
"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Basic_Theory_Of_Computer_Science rootpage-Basic_Theory_Of_Computer_Science skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Basic Theory Of Computer Science</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Basic_Theory_Of_Computer_Science#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Basic_Theory_Of_Computer_Science#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p><a href="./File:Under_Construction.png" class="image" title="This page is under construction!"><img alt="This page is under construction!" src="images/1/14/Under_Construction.png" decoding="async" width="50" height="50" data-file-width="50" data-file-height="50" /></a>
This page or section is a work in progress and may thus be incomplete. Its content may be changed in the near future.
</p>
</td>
<td>
</td></tr></tbody></table>
</center>
<p>This article is intend to explain to new users, who are unfamiliar with computer theory, basic concepts of computing and computer systems organization and structure.
</p><p>The idea of the creation of this article was inspired by the general disorganization of such kind of theoretic articles and pages at OSDev.org.
And as long as theory is <b>very</b> important for beginners <i>(and as long as they generally never ever read serious <a href="Books" title="Books">books</a>)</i>, this chaotic structure of theoretic material will cause problems in comprehensive study of OS development. But this article is meant to fix the problem
</p><p>It's impossible to study all the topics of physics, circuitry and computer science in within one article. Instead, all these subjects will be briefly touched.
To do so in organized order, we must divide system into layers, each having its own rules and aims. To do so, we must <b>manage complexity of the system</b>
</p>
<h2><span class="mw-headline" id="Managing_the_complexity_of_electronic_systems">Managing the complexity of electronic systems</span></h2>
<div class="thumb tright"><div class="thumbinner" style="width:302px;"><a href="./File:Abstraction_Layers.png" class="image"><img alt="" src="images/thumb/b/b5/Abstraction_Layers.png/300px-Abstraction_Layers.png" decoding="async" width="300" height="551" class="thumbimage" srcset="images/thumb/b/b5/Abstraction_Layers.png/450px-Abstraction_Layers.png 1.5x, images/b/b5/Abstraction_Layers.png 2x" data-file-width="491" data-file-height="901" /></a>  <div class="thumbcaption"><div class="magnify"><a href="./File:Abstraction_Layers.png" class="internal" title="Enlarge"></a></div>Levels of abstraction</div></div></div>
<p>The system you are using to read this article <i>(let me guess it's a personal computer)</i> is one of most complex systems ever created by the mankind. Just imagine hundreds of billions transistors on several separate integrated circuits joint together and operating at gigahertz rates, running hundreds of millions lines of code in a blink of an eye - hundreds of thousands of computer scientists, engineers and programmers united their efforts to make this miracle come true in less than 80 years...
</p><p>However, I bet you are not experiencing any kind of trouble with using such a "miracle". The main reason of it is that, despite you don't realize it really, you are <b>managing complexity of your system</b>. It have let you to open this article in few mouse clicks without having to keep in mind details of, for example, the HTML protocol your browser used to obtain this article from the website. 
Instead, you delegate this task to your <i>web-browser</i> - this is an <b>application software</b><a href="./File:Application_Software.png" class="image"><img alt="Application Software.png" src="images/thumb/1/19/Application_Software.png/20px-Application_Software.png" decoding="async" width="20" height="14" srcset="images/thumb/1/19/Application_Software.png/30px-Application_Software.png 1.5x, images/thumb/1/19/Application_Software.png/40px-Application_Software.png 2x" data-file-width="673" data-file-height="467" /></a>, which uses abilities of <b>operating system</b><a href="./File:Operating_System.png" class="image"><img alt="Operating System.png" src="images/thumb/e/e7/Operating_System.png/20px-Operating_System.png" decoding="async" width="20" height="16" srcset="images/thumb/e/e7/Operating_System.png/30px-Operating_System.png 1.5x, images/thumb/e/e7/Operating_System.png/40px-Operating_System.png 2x" data-file-width="600" data-file-height="473" /></a> to run, which uses definitions and rules of <b>architecture</b> <a href="./File:Architecture.png" class="image"><img alt="Architecture.png" src="images/thumb/3/37/Architecture.png/20px-Architecture.png" decoding="async" width="20" height="9" srcset="images/thumb/3/37/Architecture.png/30px-Architecture.png 1.5x, images/thumb/3/37/Architecture.png/40px-Architecture.png 2x" data-file-width="712" data-file-height="333" /></a> layers, and so on
</p><p>Usually developers define 9 layers of abstraction for an average electronic computing system:
</p>
<ol><li><b>Application Software</b> <a href="./File:Application_Software.png" class="image"><img alt="Application Software.png" src="images/thumb/1/19/Application_Software.png/20px-Application_Software.png" decoding="async" width="20" height="14" srcset="images/thumb/1/19/Application_Software.png/30px-Application_Software.png 1.5x, images/thumb/1/19/Application_Software.png/40px-Application_Software.png 2x" data-file-width="673" data-file-height="467" /></a>
<dl><dd>Programs, which use operating system features to solve user problems</dd></dl></li>
<li><b>Operating System</b> <a href="./File:Operating_System.png" class="image"><img alt="Operating System.png" src="images/thumb/e/e7/Operating_System.png/20px-Operating_System.png" decoding="async" width="20" height="16" srcset="images/thumb/e/e7/Operating_System.png/30px-Operating_System.png 1.5x, images/thumb/e/e7/Operating_System.png/40px-Operating_System.png 2x" data-file-width="600" data-file-height="473" /></a>
<dl><dd>Operates computer hardware, manage system resources and provide API and drivers for application software</dd></dl></li>
<li><b>Architecture</b> <a href="./File:Architecture.png" class="image"><img alt="Architecture.png" src="images/thumb/3/37/Architecture.png/20px-Architecture.png" decoding="async" width="20" height="9" srcset="images/thumb/3/37/Architecture.png/30px-Architecture.png 1.5x, images/thumb/3/37/Architecture.png/40px-Architecture.png 2x" data-file-width="712" data-file-height="333" /></a> (also known as <a href="Instruction_Set_Architecture" title="Instruction Set Architecture">ISA</a>)
<dl><dd>Describes electronic system from programmer's perspective. Defines instruction set, visible registers. Is implemented by microarchitecture</dd></dl></li>
<li><b>Microarchitecture</b> <a href="./File:Microarchitecture.png" class="image"><img alt="Microarchitecture.png" src="images/thumb/0/06/Microarchitecture.png/20px-Microarchitecture.png" decoding="async" width="20" height="13" srcset="images/thumb/0/06/Microarchitecture.png/30px-Microarchitecture.png 1.5x, images/thumb/0/06/Microarchitecture.png/40px-Microarchitecture.png 2x" data-file-width="576" data-file-height="382" /></a>
<dl><dd>Implements an architecture using logic elements</dd></dl></li>
<li><b>Logic</b> <a href="./File:Logic.png" class="image"><img alt="Logic.png" src="images/thumb/a/a1/Logic.png/20px-Logic.png" decoding="async" width="20" height="13" srcset="images/thumb/a/a1/Logic.png/30px-Logic.png 1.5x, images/thumb/a/a1/Logic.png/40px-Logic.png 2x" data-file-width="660" data-file-height="444" /></a>
<dl><dd>Combines digital circuits to create functional blocks, such as adders, multiplexers and so on.</dd></dl></li>
<li><b>Digital Circuits</b> <a href="./File:Digital_Circuits.png" class="image"><img alt="Digital Circuits.png" src="images/thumb/0/06/Digital_Circuits.png/20px-Digital_Circuits.png" decoding="async" width="20" height="11" srcset="images/thumb/0/06/Digital_Circuits.png/30px-Digital_Circuits.png 1.5x, images/thumb/0/06/Digital_Circuits.png/40px-Digital_Circuits.png 2x" data-file-width="555" data-file-height="316" /></a>
<dl><dd>Uses analog circuits to create models of the digital circuits, which can be used in digital design</dd></dl></li>
<li><b>Analog Circuits</b> <a href="./File:Analog_Circuits.png" class="image"><img alt="Analog Circuits.png" src="images/thumb/9/9b/Analog_Circuits.png/20px-Analog_Circuits.png" decoding="async" width="20" height="16" srcset="images/thumb/9/9b/Analog_Circuits.png/30px-Analog_Circuits.png 1.5x, images/thumb/9/9b/Analog_Circuits.png/40px-Analog_Circuits.png 2x" data-file-width="555" data-file-height="453" /></a>
<dl><dd>Combines devices to create circuits with desired properties</dd></dl></li>
<li><b>Devices</b> <a href="./File:Devices.png" class="image"><img alt="Devices.png" src="images/thumb/5/5f/Devices.png/20px-Devices.png" decoding="async" width="20" height="19" srcset="images/thumb/5/5f/Devices.png/30px-Devices.png 1.5x, images/thumb/5/5f/Devices.png/40px-Devices.png 2x" data-file-width="488" data-file-height="463" /></a>
<dl><dd>Uses physical models to create devices, such as transistors and diodes, usable in circuits</dd></dl></li>
<li><b><a href="Basic_Theory_Of_Computer_Science#Physics_layer">Physics</a></b> <a href="./File:Physics.png" class="image"><img alt="Physics.png" src="images/thumb/3/37/Physics.png/20px-Physics.png" decoding="async" width="20" height="18" srcset="images/thumb/3/37/Physics.png/30px-Physics.png 1.5x, images/thumb/3/37/Physics.png/40px-Physics.png 2x" data-file-width="556" data-file-height="489" /></a>
<dl><dd>Explores the world and systematizes obtained knowledge to laws and theories which can be relatively <abbr title="Meaning that they don&#39;t have to obtain that knowledge by themselves">easily</abbr> studied by other persons</dd></dl></li></ol>
<hr />
<p>As you can see, each abstraction level use models and features of underlying level (e.g. <b>logic</b> uses <b>digital circuits</b> as much as <b>application software</b> uses <b>operating system</b> features)
Also, each level hides details of implementation from the overlying level (e.g. user do not have to bother about representing their requests in "computer" form as long as <b>application software</b> provides the human-understandable GUI)
</p><p>And it means, that each layer accomplishes two tasks:
</p>
<ul><li><b>Provides simplified interfaces for overlying layers</b>
<dl><dd>For example, there are no <i>files</i> on the hard disk of your PC - only some bytes written to it in the specified order. <i>File</i> is just an abstract model of storing files on the physical drive, implemented by a <i>filesystem</i> - one of the parts of your <b>operating system</b>. So, <i>filesystem</i> provides a very convenient <b>interface</b> for application software, by <b>implementing a simple file I/O</b></dd></dl></li>
<li><b>Hides implementation details from overlying layer and manages them</b>
<dl><dd>For example, <i>filesystem</i> also contains drivers for different types of storage devices, such as hard drives, optical drives and so on. Each one have its own interface to handle. However, you, as a user, don't want to keep these details in mind. So, <b>filesystem</b> takes care of it, <b>hiding such a details</b> from user, <b>managing</b> all that low-level things by itself</dd></dl></li></ul>
<p><i>Since this tutorial was written for OS and applications developers, detailed description of three lower levels of hierarchy will be skipped</i>
</p>
<h3><span class="mw-headline" id="Digital_Circuits">Digital Circuits</span></h3>
<div class="thumb tright"><div class="thumbinner" style="width:302px;"><a href="./File:Analog_Digital_Compare.png" class="image"><img alt="" src="images/thumb/d/da/Analog_Digital_Compare.png/300px-Analog_Digital_Compare.png" decoding="async" width="300" height="183" class="thumbimage" srcset="images/thumb/d/da/Analog_Digital_Compare.png/450px-Analog_Digital_Compare.png 1.5x, images/thumb/d/da/Analog_Digital_Compare.png/600px-Analog_Digital_Compare.png 2x" data-file-width="637" data-file-height="388" /></a>  <div class="thumbcaption"><div class="magnify"><a href="./File:Analog_Digital_Compare.png" class="internal" title="Enlarge"></a></div>Difference between analog and digital signals being interfered. While analog signal turns out to be totally messed up, digital one still remains understandable</div></div></div>
<p>As you surely know, all the modern computers are implemented using digital logic, but why?
</p><p>There are few major reasons:
</p>
<ol><li>Digital signals are more <i>stable</i> and <i>reliable</i> than analog ones, because they are less prone for distortions, noises, and interferences.</li>
<li>Digital circuits are <i>easy</i> and <i>cheap</i> to design and implement in hardware using different technologies</li>
<li>Different digital circuits can be <i>easily combined</i>, creating more complex circuits.</li></ol>
<p>These facts are the main reasons of domination of the digital logic over analog today.
</p><p>So, what helps digital logic to attain such appealing properties?
It operates only two signal states - LOW and HIGH, instead of wide spectrum of voltages as in analog circuits.
</p><p>Contrary to popular belief - these do not directly correspond to "lack of voltage" and "some voltage".
This is just not how most electronic components (e.g. transistors) function.
In reality, LOW is any "trivial" voltage, and HIGH is any "nontrivial" voltage.
</p><p>The states of LOW and HIGH may also be titled 0 and 1.
</p><p>The end goal of a digital circuit is usually to reach a digital end device, that also categorizes voltages as LOW and HIGH.
Data is usually stored in digital registers.
The data is then changed by electronic components in the circuit, and given back to the registers or the end device.
This allows for implementing various models of computation.
</p>
<h3><span class="mw-headline" id="Logic">Logic</span></h3>
<p>To properly modify digital data using a digital circuit, it is useful to have a logical framework with a finite amount of well-defined operations that combined may yield a plethora of results.
</p><p>The standard logical framework used in modern digital circuitry is <a href="https://wikipedia.org/wiki/Boolean_algebra" class="extiw" title="wikipedia:Boolean algebra">Boolean algebra</a>.
A Boolean algebra is a space with two possible values: 0 and 1.
It is equipped with a negation, addition and multiplication.
</p><p><b>Negation</b> is an operation that performed on 0 returns 1 and performed on 1 returns 0.
</p><p><b>Addition</b> is an operation defined by the following:
</p>
<ul><li>0 + 0 = 0</li>
<li>0 + 1 = 1</li>
<li>1 + 0 = 1</li>
<li>1 + 1 = 1</li></ul>
<p>Furthermore, this operation is associative.
</p><p><b>Multiplication</b> is an operation defined by the following:
</p>
<ul><li>0 * 0 = 0</li>
<li>0 * 1 = 0</li>
<li>1 * 0 = 0</li>
<li>1 * 1 = 1</li></ul>
<p>This operation is also associative.
</p><p>In computer science, negation is usually called a <b>NOT</b> gate, addition is called an <b>OR</b> gate, and multiplication is called an <b>AND</b> gate.
They can all be built from simple electronic components.
</p><p>There are more gates that can be created out of those operations. For example, a well-known gate is <b>XOR</b>, defined for any a, b in a Boolean algebra as not(a) * b + a * not(b).
From a practical perspective, XOR (or the eXclusive OR gate) is a way to perform the OR operation without triggering 1 for the 1,1 case.
</p><p>These gates, often also called logic gates, can be chained together to create more complex mechanisms.
For example, a common mechanism is called a half-adder.
It adds two bits to each other.
</p>
<ul><li>0 + 0 = 00</li>
<li>0 + 1 = 01</li>
<li>1 + 0 = 01</li>
<li>1 + 1 = 10</li></ul>
<p>It is very easy to implement. The first bit simply works like an AND gate, while the second bit works like a XOR gate.
</p>
<!-- 
NewPP limit report
Cached time: 20250211142032
Cache expiry: 86400
Reduced expiry: false
Complications: []
CPU time usage: 0.040 seconds
Real time usage: 0.041 seconds
Preprocessor visited node count: 32/1000000
Post‐expand include size: 422/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.648      1 Template:In_Progress
100.00%    0.648      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4442-0!canonical and timestamp 20250211142032 and revision id 28637.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Basic_Theory_Of_Computer_Science&amp;oldid=28637">https://wiki.osdev.org/index.php?title=Basic_Theory_Of_Computer_Science&amp;oldid=28637</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="./Category:In_Progress" title="Category:In Progress">In Progress</a></li><li><a href="./Category:Theory" title="Category:Theory">Theory</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Basic+Theory+Of+Computer+Science" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Basic_Theory_Of_Computer_Science#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Basic_Theory_Of_Computer_Science" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:Basic_Theory_Of_Computer_Science&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Basic_Theory_Of_Computer_Science"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Basic_Theory_Of_Computer_Science&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Basic_Theory_Of_Computer_Science&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="https://wiki.osdev.org/Special:WhatLinksHere/Basic_Theory_Of_Computer_Science" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Basic_Theory_Of_Computer_Science" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Basic_Theory_Of_Computer_Science&amp;oldid=28637" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Basic_Theory_Of_Computer_Science&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 21 February 2024, at 23:33.</li>
	<li id="footer-info-0">This page has been accessed 4,787 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Basic_Theory_Of_Computer_Science&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.040","walltime":"0.041","ppvisitednodes":{"value":32,"limit":1000000},"postexpandincludesize":{"value":422,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":0,"limit":5000000},"timingprofile":["100.00%    0.648      1 Template:In_Progress","100.00%    0.648      1 -total"]},"cachereport":{"timestamp":"20250211142032","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":88});});</script>
</body>
</html>