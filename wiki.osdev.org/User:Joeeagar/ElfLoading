<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>User:Joeeagar/ElfLoading - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"6a84808d9e4ca637715b62e0","wgCSPNonce":false,"wgCanonicalNamespace":"User","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":2,"wgPageName":"User:Joeeagar/ElfLoading","wgTitle":"Joeeagar/ElfLoading","wgCurRevisionId":19142,"wgRevisionId":19142,"wgArticleId":3900,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"User:Joeeagar/ElfLoading","wgRelevantArticleId":3900,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],
"wgRelevantUserName":"Joeeagar","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="../favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="../opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="../api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-2 ns-subject page-User_Joeeagar_ElfLoading rootpage-User_Joeeagar skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-namespace">User</span><span class="mw-page-title-separator">:</span><span class="mw-page-title-main">Joeeagar/ElfLoading</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"><span class="subpages">&lt; <a href="../User:Joeeagar" title="User:Joeeagar">User:Joeeagar</a></span></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="ElfLoading#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="ElfLoading#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>The Executable Link Format, or ELF, is the format used by most Unixes today.  It's a very versatile format (too much so, but more on that later).
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="ElfLoading#Basic_Information"><span class="tocnumber">1</span> <span class="toctext">Basic Information</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="ElfLoading#Types_of_ELF_Executables"><span class="tocnumber">1.1</span> <span class="toctext">Types of ELF Executables</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="ElfLoading#ELF_Binary_Interpreters"><span class="tocnumber">1.2</span> <span class="toctext">ELF Binary Interpreters</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="ElfLoading#Basic_Program_Loading"><span class="tocnumber">2</span> <span class="toctext">Basic Program Loading</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="ElfLoading#See_Also"><span class="tocnumber">3</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="ElfLoading#Articles"><span class="tocnumber">3.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="ElfLoading#External_Links"><span class="tocnumber">3.2</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Basic_Information">Basic Information</span></h2>
<h3><span class="mw-headline" id="Types_of_ELF_Executables">Types of ELF Executables</span></h3>
<p>There are many ways to link ELF executables:
</p>
<ol><li>Absolute binaries.  These are hard-linked with an absolute base address.  This is the most common way to do Unix binaries, but only works on systems that support virtual memory.</li></ol>
<ol><li>PIC, or Position Independent Code.  These binaries use relative addressing to avoid relying on a specific base memory address.  Library calls are implemented as jumps into what's called the Procedure Lookup Table, which stores the addresses of external library functions (themselves usually implemented as PIC code).</li></ol>
<ol><li>DSO, or Dynamic Shared Object. This is basically ELF's version of DLLs.  Rather than using relative addressing to jump to library calls stored in a PLT, library calls are patched on startup.  This avoids the indirect jump, but at the cost of slower (in some cases much slower) start-up time.</li></ol>
<h3><span class="mw-headline" id="ELF_Binary_Interpreters">ELF Binary Interpreters</span></h3>
<p>Like I said in the beginning, ELF is a very versatile format.  In fact it's so versatile that there are many ways to do the same thing, and informal standards as to which subset a system uses have sprung up.  Modern Unixes use something called ELF binary interpreters, typically (always?) tied to the C library.  ELF interpreters are special programs that handle dynamic linking of executables (e.g. /lib/ld.linux.so).  The (absolute) path to the interpreter is hardwired into executables at build time.
</p>
<h2><span class="mw-headline" id="Basic_Program_Loading">Basic Program Loading</span></h2>
<p>For now, let's assume our programs are statically linked and don't use an ELF interpreter.  For that we need to load the ELF header and the program headers (note that datatype sizes differ between 32- and 64-bit systems):
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">ElfHeader</span><span class="p">{</span><span class="w"></span>
<span class="w">  </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">e_ident</span><span class="p">[</span><span class="n">EI_NIDENT</span><span class="p">];</span><span class="w"> </span><span class="c1">//should start with [0x7f &#39;E&#39; &#39;L&#39; &#39;F&#39;]</span>
<span class="w">  </span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">e_type</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">e_machine</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">e_version</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">e_entry</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">e_phoff</span><span class="p">;</span><span class="w"> </span><span class="c1">//start of program headers in file</span>
<span class="w">  </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">e_shoff</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">e_flags</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">e_ehsize</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">e_phentsize</span><span class="p">;</span><span class="w"> </span><span class="c1">//size of each program header</span>
<span class="w">  </span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">e_phnum</span><span class="p">;</span><span class="w"> </span><span class="c1">//number of program headers</span>
<span class="w">  </span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">e_shentsize</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">e_shnum</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">e_shstrndx</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">ElfHeader</span><span class="p">;</span><span class="w"></span>

<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">ElfProgramHeader</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">  </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">p_type</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">p_offset</span><span class="p">;</span><span class="w"> </span><span class="c1">//offset of data in elf image</span>
<span class="w">  </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">p_vaddr</span><span class="p">;</span><span class="w"> </span><span class="c1">//virtual load address</span>
<span class="w">  </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">p_paddr</span><span class="p">;</span><span class="w"> </span><span class="c1">//physical load address, not used</span>
<span class="w">  </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">p_filesz</span><span class="p">;</span><span class="w"> </span><span class="c1">//size of data in elf image</span>
<span class="w">  </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">p_memsz</span><span class="p">;</span><span class="w"> </span><span class="c1">//size of data in memory; any excess over disk size is zero&#39;d</span>
<span class="w">  </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">p_flags</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">p_align</span><span class="p">;</span><span class="w"> </span><span class="c1">//alignment</span>
<span class="p">}</span><span class="w"> </span><span class="n">ElfProgramHeader</span><span class="p">;</span><span class="w"></span>
</pre></div>
<p><br />
First read the main header.  Check that e_ident starts with [0x7f, 'E', 'L','F'], or [0x7f, 0x45, 0x4c, 0x46].  Then read the program headers, which are stored in a flat array starting at e_phoff.  Each header has the same size, e_phentsize.  There are e_phnum headers.
</p><p>The first thing we need to do is calculate the base address.  This is rather annoying, since ELF doesn't store it directly.  Rather, the base address is the smallest virtual address stored in the p_vaddr field in each program header.  Note that supposedly (at least according the documentation I read) p_vaddr must be aligned to be a multiple of p_align before we use it, though this doesn't seem to happen in practice (at least not with binaries generated via GNU binutils).
</p><p>Here's an example of loading the main header and getting the base address (note that normally one would load the program headers into an array or linked list, which I've omitted to keep things simple):
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define MIN2(a, b) ((a) &lt; (b)&#160;? (a)&#160;: (b))</span>

<span class="kt">int</span><span class="w"> </span><span class="nf">ELF_loadBinary</span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">elfimage</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">ElfProgramHeader</span><span class="w"> </span><span class="n">header</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">ProgramHeader</span><span class="w"> </span><span class="n">ph</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">uintptr_t</span><span class="w"> </span><span class="n">base</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">UINTPTR_MAX</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="n">memcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">header</span><span class="p">,</span><span class="w"> </span><span class="n">elfimage</span><span class="p">,</span><span class="w"> </span><span class="k">sizeof</span><span class="p">(</span><span class="n">header</span><span class="p">));</span><span class="w"></span>
<span class="w">    </span>
<span class="w">    </span><span class="cm">/*remember that strcmp returns zero when two strings are equal*/</span><span class="w"></span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">header</span><span class="p">.</span><span class="n">e_ident</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;\X7fELF&quot;</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">       </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;error!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">       </span><span class="k">return</span><span class="w"> </span><span class="mi">-1</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="w">    </span>
<span class="w">    </span><span class="cm">/*note that we copy each program header into ph</span>
<span class="cm">      to avoid any alignment errors</span>
<span class="cm">    */</span><span class="w"></span>
<span class="w">    </span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">header</span><span class="p">.</span><span class="n">e_phnum</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">memcpy</span><span class="p">(</span><span class="n">elfimage</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">header</span><span class="p">.</span><span class="n">e_phoff</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">header</span><span class="p">.</span><span class="n">e_phentsize</span><span class="o">*</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">ph</span><span class="p">,</span><span class="w"> </span><span class="k">sizeof</span><span class="p">(</span><span class="n">ph</span><span class="p">));</span><span class="w"></span>
<span class="w">        </span>
<span class="w">        </span><span class="n">base</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">MIN2</span><span class="p">(</span><span class="n">base</span><span class="p">,</span><span class="w"> </span><span class="n">ph</span><span class="p">.</span><span class="n">p_vaddr</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>Now that we have the base address, we need to figure out how much memory to allocate for the program image.  To do this we find the maximum of subtracting each program header's p_vaddr from the base address, then adding e_memsz:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="w">    </span><span class="kt">uintptr_t</span><span class="w"> </span><span class="n">size</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">header</span><span class="p">.</span><span class="n">e_phnum</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="kt">uintptr_t</span><span class="w"> </span><span class="n">segment_end</span><span class="p">;</span><span class="w"></span>

<span class="w">        </span><span class="n">memcpy</span><span class="p">(</span><span class="n">elfimage</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">header</span><span class="p">.</span><span class="n">e_phoff</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">header</span><span class="p">.</span><span class="n">e_phentsize</span><span class="o">*</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">ph</span><span class="p">,</span><span class="w"> </span><span class="k">sizeof</span><span class="p">(</span><span class="n">ph</span><span class="p">));</span><span class="w"></span>
<span class="w">        </span>
<span class="w">        </span><span class="n">segment_end</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ph</span><span class="p">.</span><span class="n">p_vaddr</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">base</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">ph</span><span class="p">.</span><span class="n">p_memsz</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">MAX2</span><span class="p">(</span><span class="n">size</span><span class="p">,</span><span class="w"> </span><span class="n">segment_end</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
</pre></div>
<p>Next we allocate the program image, and then load the program segments.  There are different types of segments, so we'll need an enumeration of what those types are:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">enum</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">  </span><span class="n">PT_NULL</span><span class="p">,</span><span class="w"></span>
<span class="w">  </span><span class="n">PT_LOAD</span><span class="p">,</span><span class="w"></span>
<span class="w">  </span><span class="n">PT_DYNAMIC</span><span class="p">,</span><span class="w"></span>
<span class="w">  </span><span class="n">PT_INTERP</span><span class="p">,</span><span class="w"></span>
<span class="w">  </span><span class="n">PT_NOTE</span><span class="p">,</span><span class="w"></span>
<span class="w">  </span><span class="n">PT_SHLIB</span><span class="p">,</span><span class="w"></span>
<span class="w">  </span><span class="n">PT_PHDR</span><span class="p">,</span><span class="w"></span>
<span class="w">  </span><span class="n">PT_LOPROC</span><span class="o">=</span><span class="mh">0x70000000</span><span class="p">,</span><span class="w"> </span><span class="c1">//reserved</span>
<span class="w">  </span><span class="n">PT_HIPROC</span><span class="o">=</span><span class="mh">0x7FFFFFFF</span><span class="w">  </span><span class="c1">//reserved</span>
<span class="p">};</span><span class="w"></span>
</pre></div>
<p>If you compiled an absolute binary (e.g. you didn't pass -fPIC to the compiler),
you'll have to allocate the binary at the calculated base address.  Otherwise you can
put it whereever you want.
</p><p>After allocating the program image, we need to load the program headers.  In this simple example, our headers should have each have a type (p_type) of PT_LOAD or PT_PHDR.  For each header, calculate where it'll go inside the allocated image by either subtracting base address from p_vaddr (if using PIC code) and then adding the address of the image, or by using p_vaddr directly if you went with absolute binaries.
</p><p>Next, zero the segment data, using the value in p_memsz.  Technically you only have to zero the difference between p_memsz and p_filesz, but zeroing the whole thing is fine too.  After zeroing, copy the segment data from the file image to the allocated image.  It's located at p_offset, and has size p_filesz.
</p><p>Here's some code:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">finalimage</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">kmalloc</span><span class="p">(</span><span class="n">size</span><span class="p">);</span><span class="w"> </span><span class="c1">//for PIC</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">finalimage</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="n">base</span><span class="p">;</span><span class="w"> </span><span class="c1">//for absolute</span>

<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">&lt;</span><span class="n">header</span><span class="p">.</span><span class="n">e_phnum</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="kt">uintptr_t</span><span class="w"> </span><span class="n">addr</span><span class="p">;</span><span class="w"></span>

<span class="w">        </span><span class="n">memcpy</span><span class="p">(</span><span class="n">elfimage</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">header</span><span class="p">.</span><span class="n">e_phoff</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">header</span><span class="p">.</span><span class="n">e_phentsize</span><span class="o">*</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">ph</span><span class="p">,</span><span class="w"> </span><span class="k">sizeof</span><span class="p">(</span><span class="n">ph</span><span class="p">));</span><span class="w"></span>

<span class="w">        </span><span class="n">addr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">ph</span><span class="p">.</span><span class="n">p_vaddr</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">base</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">finalimage</span><span class="p">;</span><span class="w"></span>

<span class="w">        </span><span class="n">memset</span><span class="p">(</span><span class="n">finalimage</span><span class="o">+</span><span class="n">addr</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">ph</span><span class="p">.</span><span class="n">e_memsz</span><span class="p">);</span><span class="w"></span>
<span class="w">        </span><span class="n">memcpy</span><span class="p">(</span><span class="n">finalimage</span><span class="o">+</span><span class="n">addr</span><span class="p">,</span><span class="w"> </span><span class="n">elfimage</span><span class="o">+</span><span class="n">ph</span><span class="p">.</span><span class="n">e_offset</span><span class="p">,</span><span class="w"> </span><span class="n">elfimage</span><span class="p">.</span><span class="n">e_filesz</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
</pre></div>
<p>Now we're ready to start the binary!  All we need to do is set up a stack, and jump to the entry point (which is stored in the e_entry field in the main header).
</p><p>Well, not quite.  You might think the entry point would be the address of the main function, but this isn't the case.  It's a special function (usually called _start) that's provided by the libc.  This function needs a bunch of parameters to start the program with (e.g. the stdin/stdout/stderr file descriptors, argv, the program's environment variables, etc).  You'll need to read up how to pass this data to it, either through the stack or a special system call.  For more information, see the following links:
</p><p><a rel="nofollow" class="external autonumber" href="https://www.gnu.org/software/libc/manual/html_node/Auxiliary-Vector.html">[1]</a>
<a rel="nofollow" class="external autonumber" href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/environ.html">[2]</a>
<a rel="nofollow" class="external autonumber" href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/posix_spawn.html">[3]</a>
</p>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<h3><span class="mw-headline" id="Articles">Articles</span></h3>
<ul><li><a href="../ELF" title="ELF">ELF</a></li></ul>
<h3><span class="mw-headline" id="External_Links">External Links</span></h3>
<ul><li><a rel="nofollow" class="external text" href="http://docs.oracle.com/cd/E23824_01/html/819-0690/chapter6-46512.html#scrolltoc">Elf reference from Oracle</a></li></ul>
<!-- 
NewPP limit report
Cached time: 20250212023239
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.040 seconds
Real time usage: 0.691 seconds
Preprocessor visited node count: 47/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 18482/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3900-0!canonical and timestamp 20250212023238 and revision id 19142.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=User:Joeeagar/ElfLoading&amp;oldid=19142">https://wiki.osdev.org/index.php?title=User:Joeeagar/ElfLoading&amp;oldid=19142</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="../Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=User%3AJoeeagar%2FElfLoading" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="ElfLoading#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-user" class="selected mw-list-item"><a href="ElfLoading" title="View the user page [c]" accesskey="c"><span>User page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User_talk:Joeeagar/ElfLoading&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="ElfLoading"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Joeeagar/ElfLoading&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Joeeagar/ElfLoading&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="../index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="../index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="../Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="../Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="../OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="../OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="../OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="../Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="../Special:WhatLinksHere/User:Joeeagar/ElfLoading" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/User:Joeeagar/ElfLoading" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-contributions" class="mw-list-item"><a href="../Special:Contributions/Joeeagar" title="A list of contributions by this user"><span>User contributions</span></a></li><li id="t-log" class="mw-list-item"><a href="../Special:Log/Joeeagar"><span>Logs</span></a></li><li id="t-userrights" class="mw-list-item"><a href="../Special:UserRights/Joeeagar"><span>View user groups</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="../Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Joeeagar/ElfLoading&amp;oldid=19142" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Joeeagar/ElfLoading&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 7 May 2016, at 21:00.</li>
	<li id="footer-info-0">This page has been accessed 1,113 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="../OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="../OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="../OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=User:Joeeagar/ElfLoading&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="../resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="../resources/assets/poweredby_mediawiki_132x47.png 1.5x, ../resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.040","walltime":"0.691","ppvisitednodes":{"value":47,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":18482,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250212023239","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":804});});</script>
</body>
</html>