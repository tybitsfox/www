<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>User:Turdus/Universal Driver Block Format - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"dc7d52d404e8990694b9838b","wgCSPNonce":false,"wgCanonicalNamespace":"User","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":2,"wgPageName":"User:Turdus/Universal_Driver_Block_Format","wgTitle":"Turdus/Universal Driver Block Format","wgCurRevisionId":15546,"wgRevisionId":15546,"wgArticleId":3444,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Universal Driver Block Format","Drivers","Driver Interfaces"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"User:Turdus/Universal_Driver_Block_Format","wgRelevantArticleId":3444,
"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRelevantUserName":"Turdus","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="../favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="../opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="../api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-2 ns-subject page-User_Turdus_Universal_Driver_Block_Format rootpage-User_Turdus skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-namespace">User</span><span class="mw-page-title-separator">:</span><span class="mw-page-title-main">Turdus/Universal Driver Block Format</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Universal_Driver_Block_Format#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Universal_Driver_Block_Format#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p><br />
If it's okay, I would like to have this wiki page as the primary source for the UDRV Specification. Modify and expand only along the given lines.
Please note that currently it's nothing more than a DRAFT.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Universal_Driver_Block_Format#Disclaimer"><span class="tocnumber">1</span> <span class="toctext">Disclaimer</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Universal_Driver_Block_Format#Terms_and_phrases"><span class="tocnumber">2</span> <span class="toctext">Terms and phrases</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Universal_Driver_Block_Format#Universal_Driver_Specification_DRAFT"><span class="tocnumber">3</span> <span class="toctext">Universal Driver Specification DRAFT</span></a>
<ul>
<li class="toclevel-2 tocsection-4"><a href="Universal_Driver_Block_Format#UDRV_Block_Format"><span class="tocnumber">3.1</span> <span class="toctext">UDRV Block Format</span></a>
<ul>
<li class="toclevel-3 tocsection-5"><a href="Universal_Driver_Block_Format#Executable_driver_binary"><span class="tocnumber">3.1.1</span> <span class="toctext">Executable driver binary</span></a></li>
<li class="toclevel-3 tocsection-6"><a href="Universal_Driver_Block_Format#Detecting_UDRV"><span class="tocnumber">3.1.2</span> <span class="toctext">Detecting UDRV</span></a></li>
<li class="toclevel-3 tocsection-7"><a href="Universal_Driver_Block_Format#Header"><span class="tocnumber">3.1.3</span> <span class="toctext">Header</span></a></li>
<li class="toclevel-3 tocsection-8"><a href="Universal_Driver_Block_Format#Data_area"><span class="tocnumber">3.1.4</span> <span class="toctext">Data area</span></a>
<ul>
<li class="toclevel-4 tocsection-9"><a href="Universal_Driver_Block_Format#Default_values"><span class="tocnumber">3.1.4.1</span> <span class="toctext">Default values</span></a></li>
<li class="toclevel-4 tocsection-10"><a href="Universal_Driver_Block_Format#Meta_Info_string"><span class="tocnumber">3.1.4.2</span> <span class="toctext">Meta Info string</span></a></li>
<li class="toclevel-4 tocsection-11"><a href="Universal_Driver_Block_Format#Property_definitions"><span class="tocnumber">3.1.4.3</span> <span class="toctext">Property definitions</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-2 tocsection-12"><a href="Universal_Driver_Block_Format#UDRV_Library_Interface"><span class="tocnumber">3.2</span> <span class="toctext">UDRV Library Interface</span></a>
<ul>
<li class="toclevel-3 tocsection-13"><a href="Universal_Driver_Block_Format#Linking_the_library"><span class="tocnumber">3.2.1</span> <span class="toctext">Linking the library</span></a></li>
<li class="toclevel-3 tocsection-14"><a href="Universal_Driver_Block_Format#Instance_memory"><span class="tocnumber">3.2.2</span> <span class="toctext">Instance memory</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-15"><a href="Universal_Driver_Block_Format#UDRV_CLI_tool"><span class="tocnumber">3.3</span> <span class="toctext">UDRV CLI tool</span></a>
<ul>
<li class="toclevel-3 tocsection-16"><a href="Universal_Driver_Block_Format#Commands"><span class="tocnumber">3.3.1</span> <span class="toctext">Commands</span></a>
<ul>
<li class="toclevel-4 tocsection-17"><a href="Universal_Driver_Block_Format#Reset_device"><span class="tocnumber">3.3.1.1</span> <span class="toctext">Reset device</span></a></li>
<li class="toclevel-4 tocsection-18"><a href="Universal_Driver_Block_Format#Query_device"><span class="tocnumber">3.3.1.2</span> <span class="toctext">Query device</span></a></li>
<li class="toclevel-4 tocsection-19"><a href="Universal_Driver_Block_Format#Configure_device"><span class="tocnumber">3.3.1.3</span> <span class="toctext">Configure device</span></a></li>
<li class="toclevel-4 tocsection-20"><a href="Universal_Driver_Block_Format#Query_defaults"><span class="tocnumber">3.3.1.4</span> <span class="toctext">Query defaults</span></a></li>
<li class="toclevel-4 tocsection-21"><a href="Universal_Driver_Block_Format#Configure_defaults"><span class="tocnumber">3.3.1.5</span> <span class="toctext">Configure defaults</span></a></li>
<li class="toclevel-4 tocsection-22"><a href="Universal_Driver_Block_Format#Query_sub-devices"><span class="tocnumber">3.3.1.6</span> <span class="toctext">Query sub-devices</span></a></li>
<li class="toclevel-4 tocsection-23"><a href="Universal_Driver_Block_Format#Query_UEFI_generic_device_path"><span class="tocnumber">3.3.1.7</span> <span class="toctext">Query UEFI generic device path</span></a></li>
<li class="toclevel-4 tocsection-24"><a href="Universal_Driver_Block_Format#Update_driver"><span class="tocnumber">3.3.1.8</span> <span class="toctext">Update driver</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-25"><a href="Universal_Driver_Block_Format#Porting"><span class="tocnumber">3.3.2</span> <span class="toctext">Porting</span></a></li>
<li class="toclevel-3 tocsection-26"><a href="Universal_Driver_Block_Format#Tested_compilers"><span class="tocnumber">3.3.3</span> <span class="toctext">Tested compilers</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-27"><a href="Universal_Driver_Block_Format#List_of_UDRV_Device_Drivers"><span class="tocnumber">4</span> <span class="toctext">List of UDRV Device Drivers</span></a>
<ul>
<li class="toclevel-2 tocsection-28"><a href="Universal_Driver_Block_Format#01_Mass_storage_controller"><span class="tocnumber">4.1</span> <span class="toctext">01 Mass storage controller</span></a></li>
<li class="toclevel-2 tocsection-29"><a href="Universal_Driver_Block_Format#02_Network_controller"><span class="tocnumber">4.2</span> <span class="toctext">02 Network controller</span></a></li>
<li class="toclevel-2 tocsection-30"><a href="Universal_Driver_Block_Format#03_Display_controller"><span class="tocnumber">4.3</span> <span class="toctext">03 Display controller</span></a></li>
<li class="toclevel-2 tocsection-31"><a href="Universal_Driver_Block_Format#04_Multimedia_controller"><span class="tocnumber">4.4</span> <span class="toctext">04 Multimedia controller</span></a></li>
<li class="toclevel-2 tocsection-32"><a href="Universal_Driver_Block_Format#05_Memory_controller"><span class="tocnumber">4.5</span> <span class="toctext">05 Memory controller</span></a></li>
<li class="toclevel-2 tocsection-33"><a href="Universal_Driver_Block_Format#06_Bridge"><span class="tocnumber">4.6</span> <span class="toctext">06 Bridge</span></a></li>
<li class="toclevel-2 tocsection-34"><a href="Universal_Driver_Block_Format#07_Communication_controller"><span class="tocnumber">4.7</span> <span class="toctext">07 Communication controller</span></a></li>
<li class="toclevel-2 tocsection-35"><a href="Universal_Driver_Block_Format#08_Generic_system_peripheral"><span class="tocnumber">4.8</span> <span class="toctext">08 Generic system peripheral</span></a></li>
<li class="toclevel-2 tocsection-36"><a href="Universal_Driver_Block_Format#09_Input_device_controller"><span class="tocnumber">4.9</span> <span class="toctext">09 Input device controller</span></a></li>
<li class="toclevel-2 tocsection-37"><a href="Universal_Driver_Block_Format#0a_Docking_station"><span class="tocnumber">4.10</span> <span class="toctext">0a Docking station</span></a></li>
<li class="toclevel-2 tocsection-38"><a href="Universal_Driver_Block_Format#0b_Processor"><span class="tocnumber">4.11</span> <span class="toctext">0b Processor</span></a></li>
<li class="toclevel-2 tocsection-39"><a href="Universal_Driver_Block_Format#0c_Serial_bus_controller"><span class="tocnumber">4.12</span> <span class="toctext">0c Serial bus controller</span></a></li>
<li class="toclevel-2 tocsection-40"><a href="Universal_Driver_Block_Format#0d_Wireless_controller"><span class="tocnumber">4.13</span> <span class="toctext">0d Wireless controller</span></a></li>
<li class="toclevel-2 tocsection-41"><a href="Universal_Driver_Block_Format#0e_Intelligent_controller"><span class="tocnumber">4.14</span> <span class="toctext">0e Intelligent controller</span></a></li>
<li class="toclevel-2 tocsection-42"><a href="Universal_Driver_Block_Format#0f_Satellite_communications_controller"><span class="tocnumber">4.15</span> <span class="toctext">0f Satellite communications controller</span></a></li>
<li class="toclevel-2 tocsection-43"><a href="Universal_Driver_Block_Format#10_Encryption_controller"><span class="tocnumber">4.16</span> <span class="toctext">10 Encryption controller</span></a></li>
<li class="toclevel-2 tocsection-44"><a href="Universal_Driver_Block_Format#11_Signal_processing_controller"><span class="tocnumber">4.17</span> <span class="toctext">11 Signal processing controller</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-45"><a href="Universal_Driver_Block_Format#List_of_UDRV_Compatible_Operating_Systems"><span class="tocnumber">5</span> <span class="toctext">List of UDRV Compatible Operating Systems</span></a>
<ul>
<li class="toclevel-2 tocsection-46"><a href="Universal_Driver_Block_Format#Monolithic_kernels"><span class="tocnumber">5.1</span> <span class="toctext">Monolithic kernels</span></a></li>
<li class="toclevel-2 tocsection-47"><a href="Universal_Driver_Block_Format#Micro_kernels"><span class="tocnumber">5.2</span> <span class="toctext">Micro kernels</span></a></li>
</ul>
</li>
</ul>
</div>

<h1><span class="mw-headline" id="Disclaimer">Disclaimer</span></h1>
<p>UDRV stands for <b>U</b>niversal <b>DR</b>i<b>V</b>er, which is the name of
</p>
<ul><li>a block format,</li>
<li>a library interface</li>
<li>and a CLI tool</li></ul>
<p>as well.
</p><p>This specification aims to provide a way to share drivers among hobby kernels not source but binary level. Inspired by <a href="../UDI" class="mw-redirect" title="UDI">UDI</a>, a dead project sadly, but it's message should not be lost, hence this spec.
</p><p>UDRV takes less effort to understand and to implement than UDI. Adopting should be straightforward once you have user space libraries and hopefully will spread among hobby kernels eventually. It's needless to say what benefits that would have.
</p><p>As opposite to <a href="../UDI" class="mw-redirect" title="UDI">UDI</a>, UDRV is quite simple, yet robust and can be used with any existing executable format. To UDRV point of view, driver is a (usually small) binary blob that has to be linked with the rest of the system (or directly with the kernel if you're using <a href="../Monolithic_kernel" class="mw-redirect" title="Monolithic kernel">monolithic kernel</a> design, just like Linux kernel modules). In order to achieve linkage, UDRV specifies a data block, that has to be inlined in the binary's first 64k on a 16 aligned boundary. It's very similar to <a href="../Multiboot" title="Multiboot">Multiboot</a> block. This block describes the driver, and also holds pointers to it's functions.
</p>
<h1><span class="mw-headline" id="Terms_and_phrases">Terms and phrases</span></h1>
<ul><li>block - usually about 512 bytes, can be larger, a non-kernel-specific way to describe the driver's interface.</li>
<li>driver interface - set of pointers to well defined functions using well defined ABI</li>
<li>device instance - memory area that holds the current state of the device (implementation is kernel specific)</li>
<li>device path - an UEFI generic device path binary string (see UEFI specification 9.3.1)</li>
<li>device class - represents class, see <a rel="nofollow" class="external text" href="http://pci-ids.ucw.cz/read/PD/">PCI Device class</a>. Note that UDRV uses this to categorize drivers, it does not mean UDRV is limited to PCI drivers in any way.</li>
<li>device subclass - see PCI Device SubClass</li>
<li>device interface - see PCI Device Interface. Do not confuse with driver interface.</li>
<li>driver major version - reflects the software version, not mknod's major &amp; minor</li>
<li>driver minor version - patch level</li>
<li>offset - pointer to UDRV block's data area, relative to UDRV magic+256</li>
<li>pointer - pointer to code, relative to the beginning of the binary file</li>
<li>properties - part of device instance memory, user tunable arguments</li>
<li>newline - (NL) single ASCII character 10</li>
<li>string end - single ASCII character 0</li>
<li>CLI tool - a command to interact with UDRV compatible devices from shell</li>
<li>UDRV compatible driver - executable binary blob image with UDRV Block in it</li>
<li>UDRV compatible device - a device driver that implements UDRV Driver Interface</li>
<li>UDRV compatible OS - can dynamically link UDRV Driver Interface and has at least one UDRV CLI tool</li>
<li>UDRV compatible software - any program that can read and understand UDRV Blocks. Linkers, configuration tools</li></ul>
<h1><span class="mw-headline" id="Universal_Driver_Specification_DRAFT">Universal Driver Specification DRAFT</span></h1>
<h2><span class="mw-headline" id="UDRV_Block_Format">UDRV Block Format</span></h2>
<h3><span class="mw-headline" id="Executable_driver_binary">Executable driver binary</span></h3>
<p>There's no restriction on it's format (dll, so, kext etc. use whatever you like, see <a href="../Shared_library" title="Shared library">shared library</a>).
</p><p><i>A word on function entry points in executable</i>
Obviously a kernel that understands the format can use it natively and there's no need for any additional pointers. But for kernels that don't, or formats that do not support other than entry point (such as <a href="../A.out" title="A.out">a.out</a>), the UDRV Block can be used.
</p>
<h3><span class="mw-headline" id="Detecting_UDRV">Detecting UDRV</span></h3>
<p>An UDRV compatible driver should have an UDRV Block in it's first 65536 bytes aligned on a 16 byte boundary. UDRV compatible software (like a linker or the CLI tool, or even a GUI configuration tool if you implement it) will look for this block and use it's contents.
</p>
<h3><span class="mw-headline" id="Header">Header</span></h3>
<p>The block starts with a 256 byte long header, which is followed by initialized data, terminated by a zero.
</p><p>This block (naturally since it's in a binary executable) holds information in binary format, but some are in human readable format for comfort.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">struct</span><span class="w"> </span><span class="nc">udrv_header</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">magic</span><span class="p">;</span><span class="w">		</span><span class="c1">//characters &#39;UDRV&#39;</span>
<span class="w">	</span><span class="n">uint16</span><span class="w">	</span><span class="n">size</span><span class="p">;</span><span class="w">		</span><span class="c1">//UDRV Block size in bytes counting from magic</span>
<span class="w">	</span><span class="n">uint8</span><span class="w">	</span><span class="n">major_ver</span><span class="p">;</span><span class="w">	</span><span class="c1">//driver major version</span>
<span class="w">	</span><span class="n">uint8</span><span class="w">	</span><span class="n">minor_ver</span><span class="p">;</span><span class="w">	</span><span class="c1">//driver minor version</span>
<span class="w">	</span><span class="n">uint8</span><span class="w">	</span><span class="n">type</span><span class="p">;</span><span class="w">		</span><span class="c1">//driver type</span>
<span class="w">	</span><span class="n">uint8</span><span class="w">	</span><span class="n">flags</span><span class="p">;</span><span class="w">		</span><span class="c1">//UDRV flags for compatible software</span>
<span class="w">	</span><span class="n">uint8</span><span class="w">	</span><span class="n">device_class</span><span class="p">;</span><span class="w">	</span><span class="c1">//PCI Device Class</span>
<span class="w">	</span><span class="n">uint8</span><span class="w">	</span><span class="n">device_subclass</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint8</span><span class="w">	</span><span class="n">device_interface</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint8</span><span class="w">	</span><span class="n">chksum</span><span class="p">;</span><span class="w">		</span><span class="c1">//add bytes in block and check for zero</span>
<span class="w">	</span><span class="n">uint16</span><span class="w">	</span><span class="n">offs_name</span><span class="p">;</span><span class="w">	</span><span class="c1">//offset to an UTF-8 ASCIIZ string (used by dependency check)</span>
<span class="w">	</span><span class="n">uint16</span><span class="w">	</span><span class="n">offs_meta</span><span class="p">;</span><span class="w">	</span><span class="c1">//Meta Info string</span>
<span class="w">	</span><span class="n">uint16</span><span class="w">	</span><span class="n">offs_prop</span><span class="p">;</span><span class="w">	</span><span class="c1">//property definitions for instance memory</span>
<span class="w">	</span><span class="kt">char</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span><span class="w"> </span><span class="n">arch</span><span class="p">;</span><span class="w">		</span><span class="c1">//architecture, x86_32, x86_64, ARMv8 etc.</span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_reset</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_getcapabilty</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_cmd</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_open</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_read</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_write</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_close</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="k">union</span><span class="w"> </span><span class="p">{</span><span class="w"></span>

<span class="w">    </span><span class="c1">//character devices</span>
<span class="w">    </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_seek</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="n">chr</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="c1">//block devices</span>
<span class="w">    </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_seek</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_read</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_write</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_getblocksize</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_setblocksize</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="n">block</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="c1">//timers</span>
<span class="w">    </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_resetcounter</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_oneshot</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_periodic</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_getquantum</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_setquantum</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="n">timer</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="c1">//line buffer devices (like serial)</span>
<span class="w">    </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_seek</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_fgets</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_fputs</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_getbuffsize</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_setbuffsize</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="n">linebuff</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="c1">//devices that can hold sub-devices</span>
<span class="w">    </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_list</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_add</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_remove</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="n">bus</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="c1">//virtual file system driver hooks</span>
<span class="w">    </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_fopen</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_fread</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_fwrite</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_fclose</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_fstat</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_opendir</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_readdir</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_closedir</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_mkdir</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_rmdir</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_link</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_symlink</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_unlink</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_mount</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">uint32</span><span class="w">	</span><span class="n">func_umount</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="n">vfs</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">udrv_header_t</span><span class="p">;</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="Data_area">Data area</span></h3>
<p>It's nothing more than an initialized data area to hold stuff like name, meta info etc.
</p>
<h4><span class="mw-headline" id="Default_values">Default values</span></h4>
<p>If properties offset (offs_prop) is not zero, it selects a Property definitions string within data area. The first column defines size, sum it up to get default values size. Normally you don't need this information, since you convert offsets. By default, all values are zero, unless you define them at compile time (eg.: pskeyboard should have 1 in "irq" property).
</p><p>If properties offset is zero, then the device is not user tunable and there's no default value after the header at all (meaning other offsets can use zero as valid offset).
</p>
<h4><span class="mw-headline" id="Meta_Info_string">Meta Info string</span></h4>
<pre>#comment
author (author(s))
supports (comma ',' separated list of PCI IDs in hex)
depends (comma ',' separated list of other UDRV device drivers this driver relies on
conflicts (comma ',' separated list of other UDRV drivers that this driver cannot run with
homepage (homepage of the author)
hardware (homepage of the device's manufacturer)
license (licensing information)
download (url to the driver download directory)
device (device file path and name regexp string, not including "/dev/", like "disk[0-9](p[0-9])?","net[0-9]","uuid/[0-9a-f]{16}")

Example:
author Me&lt;<a href="../cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2746674a5e5755484d42445309534b43">[email&#160;protected]</a>&gt;
depends hpet, pci&gt;=1.2
license LGPL
device eth[0-9]
#this will look for "http://myproject.tld/public/drivers/" (category) "/" (udrvname) "-" (major ver) "." (minor ver) ".udrv"
#which can be a single binary or either cpio or tar (optionally compressed with gzip, bzip2)
#you must provide (udrvname) "-latest.udrv" symlink there. Redirects in http responses are likely too
#to handle dependencies to foreign drivers without mirroring.
download http://myproject.tld/public/drivers/
</pre>
<h4><span class="mw-headline" id="Property_definitions">Property definitions</span></h4>
<pre>Each line in property string looks like:
(number of bytes occupied) ' ' (name of the property) ' ' (type) NL
Ends in a zero byte.
Example:
1 irq int(min=1,max=16)
4 ioapic hexint(min=0xF0000000,max=0xFFF00000)
2 language optionlist('en','hu')
1 boolean optionlist('0':'false','1':'true')
</pre>
<h2><span class="mw-headline" id="UDRV_Library_Interface">UDRV Library Interface</span></h2>
<p>Drivers compiled for x86_32 use <a href="https://wiki.osdev.org/index.php?title=Stdcall&amp;action=edit&amp;redlink=1" class="new" title="Stdcall (page does not exist)">stdcall</a>, x86_64 use <a rel="nofollow" class="external text" href="http://www.x86-64.org/documentation/abi.pdf‎">fastcall</a> <a href="https://wiki.osdev.org/index.php?title=Calling_convention&amp;action=edit&amp;redlink=1" class="new" title="Calling convention (page does not exist)">calling convention</a>.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define UDRV_MAGIC &quot;UDRV&quot;</span>
<span class="k">enum</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">UDRV_TYPE_CHAR</span><span class="p">,</span><span class="w"> </span><span class="n">UDRV_TYPE_BLOCK</span><span class="p">,</span><span class="w"> </span><span class="n">UDRV_TYPE_TIMER</span><span class="p">,</span><span class="w"> </span><span class="n">UDRV_TYPE_LINEBUFF</span><span class="p">,</span><span class="w"> </span><span class="n">UDRV_TYPE_BUS</span><span class="p">,</span><span class="w"> </span><span class="n">UDRV_TYPE_VFS</span><span class="w"> </span><span class="p">};</span><span class="w"></span>
<span class="cp">#define UDRV_FLAG_64BIT 1</span>
<span class="k">enum</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">UDRV_CLASS_UNCLASSIFIED</span><span class="p">,</span><span class="w"> </span><span class="n">UDRV_CLASS_STORAGE</span><span class="p">,</span><span class="w"> </span><span class="n">UDRV_CLASS_NETWORK</span><span class="p">...</span><span class="w"> </span><span class="p">};</span><span class="w"></span>

<span class="kt">int</span><span class="w"> </span><span class="nf">reset</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="w"> </span><span class="n">instance</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="o">*</span><span class="w"> </span><span class="n">malloc</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="o">*</span><span class="w"> </span><span class="n">free</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="o">*</span><span class="w"> </span><span class="n">sendsignal</span><span class="p">);</span><span class="w"></span>
<span class="kt">char</span><span class="o">*</span><span class="w"> </span><span class="nf">getcapability</span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">instance</span><span class="p">);</span><span class="w"></span>
<span class="c1">//similar to ioctl, but suitable for kernels without vargs too</span>
<span class="kt">int</span><span class="w"> </span><span class="nf">cmd</span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">instance</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">cmd</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="o">*</span><span class="w"> </span><span class="n">arg1</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="o">*</span><span class="w"> </span><span class="n">arg2</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="o">*</span><span class="w"> </span><span class="n">arg3</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="o">*</span><span class="w"> </span><span class="n">arg4</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="o">*</span><span class="w"> </span><span class="n">arg5</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="o">*</span><span class="w"> </span><span class="n">arg6</span><span class="p">);</span><span class="w"></span>

<span class="p">...</span><span class="n">soon</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="Linking_the_library">Linking the library</span></h3>
<p>For 64 bit systems you'll have to expand pointers to 8 bytes. Once the driver loaded, your linker should adjust the pointers with the memory location it was loaded to (uint32 -&gt; void*).
</p>
<h3><span class="mw-headline" id="Instance_memory">Instance memory</span></h3>
<p>Device instance memory has a two pointer header. One for the name, one for the path. It's 8 bytes for 32 bit, 16 for 64 bit.
</p>
<pre>struct udrv_instance {
	unsigned char*	name; //UTF-8 ASCIIZ, without "/dev/", like "disk1p3"
	unsigned char*	path; //UEFI generic device path (note, 0xff terminated!)
} udrv_instance_t;
</pre>
<p>That header is followed by device properties (current configuration) and optionally local variables (current state).
On creation device properties are filled in with default values from UDRV Block.
</p><p>Not counting the header the structure of instance memory is totally up to kernel. It can be placed in kernel memory,
user memory (for microkernels, either in fs server or driver address space), even in fs inode, etc.
</p>
<h2><span class="mw-headline" id="UDRV_CLI_tool">UDRV CLI tool</span></h2>
<p>Probably most hobby OS is some kind of UN*X, it's safe to assume to have a shell. Therefore it's highly recommended to implement this command on your OS.
If you do some extreme stuff without shell, you'll need to provide a way to communicate with the UDRV compatible devices (voice command, GUI whatever).
</p>
<h3><span class="mw-headline" id="Commands">Commands</span></h3>
<pre>udrv reset device
udrv (get|set) (device|default device|driver) property [value]
  device - query/modify device instance
  driver - query/modify default values in UDRV block
  default device - get device's driver name and query/modify it's UDRV block
udrv path device          - print generic device path
udrv list device          - list sub-devices (only for bus-type devices)
udrv update driver        - not required for basic compatibility
</pre>
<h4><span class="mw-headline" id="Reset_device">Reset device</span></h4>
<pre>udrv reset /dev/serial0
</pre>
<p>Resets the device to it's initial state.
</p>
<h4><span class="mw-headline" id="Query_device">Query device</span></h4>
<pre>udrv get /dev/eth0 netmask
</pre>
<h4><span class="mw-headline" id="Configure_device">Configure device</span></h4>
<pre>udrv set /dev/eth0 ip 1.2.3.4/24
</pre>
<h4><span class="mw-headline" id="Query_defaults">Query defaults</span></h4>
<pre>udrv get default /dev/eth0 mtu
udrv get /lib/mykernel/network/ns2k.o mtu
</pre>
<h4><span class="mw-headline" id="Configure_defaults">Configure defaults</span></h4>
<pre>udrv set default /dev/eth0 mtu 1490
udrv set /lib/mykernel/network/ns2k.o mtu 1490
</pre>
<h4><span class="mw-headline" id="Query_sub-devices">Query sub-devices</span></h4>
<pre>udrv list /dev/pci
</pre>
<h4><span class="mw-headline" id="Query_UEFI_generic_device_path">Query UEFI generic device path</span></h4>
<pre>udrv path /dev/disk0
</pre>
<p>Returns UEFI generic device path (see UEFI spec 9.3.1) in human readable format. For devices that does not have one (or you are not using UEFI at all), your kernel should create one, it's quite easy to put a byte one after another.
</p>
<h4><span class="mw-headline" id="Update_driver">Update driver</span></h4>
<pre>udrv update /lib/mykernel/network/ne2k.o
</pre>
<p>Once you have networking, you can use the download url given in Meta Info string to refresh your drivers on the fly. UDRV does not have a central repository by design, the drivers expected to be distributed on hobby kernel's download sites. For list of available drivers, this page is the primary source.
</p><p>This function is not required to be fully UDRV compatible, but highly recommended (once you have networking). In lack of native networking, you can use your build system to refresh the driver binaries.
</p>
<h3><span class="mw-headline" id="Porting">Porting</span></h3>
<p>To make porting this command really easy, it's source is a single file in ANSI C. You should be able to cross-compile (or compile&#160;:-) ) it with "cc udrv.c -o udrv", where "cc" is the C compiler of your choice (GCC, TCC, LLVM whatever).
</p><p>Alternatively if you don't use C at all, you can write your own version of the command expecting the same arguments as this reference implementation.
</p><p>udrv.c:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdlib.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;udrv.h&gt;</span><span class="cp"></span>

<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">argc</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="o">**</span><span class="w"> </span><span class="n">argv</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">   </span><span class="c1">//soon</span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="Tested_compilers">Tested compilers</span></h3>
<p>List of C compilers known to compile the above code correctly:
</p>
<h1><span class="mw-headline" id="List_of_UDRV_Device_Drivers">List of UDRV Device Drivers</span></h1>
<p>List of download urls to driver binaries.
</p>
<h2><span class="mw-headline" id="01_Mass_storage_controller">01 Mass storage controller</span></h2>
<h2><span class="mw-headline" id="02_Network_controller">02 Network controller</span></h2>
<h2><span class="mw-headline" id="03_Display_controller">03 Display controller</span></h2>
<h2><span class="mw-headline" id="04_Multimedia_controller">04 Multimedia controller</span></h2>
<h2><span class="mw-headline" id="05_Memory_controller">05 Memory controller</span></h2>
<h2><span class="mw-headline" id="06_Bridge">06 Bridge</span></h2>
<h2><span class="mw-headline" id="07_Communication_controller">07 Communication controller</span></h2>
<h2><span class="mw-headline" id="08_Generic_system_peripheral">08 Generic system peripheral</span></h2>
<h2><span class="mw-headline" id="09_Input_device_controller">09 Input device controller</span></h2>
<h2><span class="mw-headline" id="0a_Docking_station">0a Docking station</span></h2>
<h2><span class="mw-headline" id="0b_Processor">0b Processor</span></h2>
<p>It's very unlikely to have such a driver, for performance reasons and hardware issues CPU resource management usually implemented natively.
</p>
<h2><span class="mw-headline" id="0c_Serial_bus_controller">0c Serial bus controller</span></h2>
<h2><span class="mw-headline" id="0d_Wireless_controller">0d Wireless controller</span></h2>
<h2><span class="mw-headline" id="0e_Intelligent_controller">0e Intelligent controller</span></h2>
<h2><span class="mw-headline" id="0f_Satellite_communications_controller">0f Satellite communications controller</span></h2>
<h2><span class="mw-headline" id="10_Encryption_controller">10 Encryption controller</span></h2>
<h2><span class="mw-headline" id="11_Signal_processing_controller">11 Signal processing controller</span></h2>
<h1><span class="mw-headline" id="List_of_UDRV_Compatible_Operating_Systems">List of UDRV Compatible Operating Systems</span></h1>
<p>List of hobby operating systems that have implemented UDRV.
</p>
<h2><span class="mw-headline" id="Monolithic_kernels">Monolithic kernels</span></h2>
<h2><span class="mw-headline" id="Micro_kernels">Micro kernels</span></h2>
<!-- 
NewPP limit report
Cached time: 20250212022314
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.046 seconds
Real time usage: 0.439 seconds
Preprocessor visited node count: 226/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 19596/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3444-0!canonical and timestamp 20250212022313 and revision id 15546.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=User:Turdus/Universal_Driver_Block_Format&amp;oldid=15546">https://wiki.osdev.org/index.php?title=User:Turdus/Universal_Driver_Block_Format&amp;oldid=15546</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="../Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="https://wiki.osdev.org/index.php?title=Category:Universal_Driver_Block_Format&amp;action=edit&amp;redlink=1" class="new" title="Category:Universal Driver Block Format (page does not exist)">Universal Driver Block Format</a></li><li><a href="../Category:Drivers" title="Category:Drivers">Drivers</a></li><li><a href="../Category:Driver_Interfaces" title="Category:Driver Interfaces">Driver Interfaces</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=User%3ATurdus%2FUniversal+Driver+Block+Format" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Universal_Driver_Block_Format#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-user" class="selected mw-list-item"><a href="Universal_Driver_Block_Format" title="View the user page [c]" accesskey="c"><span>User page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="../User_talk:Turdus/Universal_Driver_Block_Format" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Universal_Driver_Block_Format"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Turdus/Universal_Driver_Block_Format&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Turdus/Universal_Driver_Block_Format&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="../index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="../index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="../Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="../Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="../OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="../OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="../OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="../Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="../Special:WhatLinksHere/User:Turdus/Universal_Driver_Block_Format" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/User:Turdus/Universal_Driver_Block_Format" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-contributions" class="mw-list-item"><a href="../Special:Contributions/Turdus" title="A list of contributions by this user"><span>User contributions</span></a></li><li id="t-log" class="mw-list-item"><a href="../Special:Log/Turdus"><span>Logs</span></a></li><li id="t-userrights" class="mw-list-item"><a href="../Special:UserRights/Turdus"><span>View user groups</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="../Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Turdus/Universal_Driver_Block_Format&amp;oldid=15546" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Turdus/Universal_Driver_Block_Format&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 20 January 2014, at 21:25.</li>
	<li id="footer-info-0">This page has been accessed 749 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="../OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="../OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="../OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=User:Turdus/Universal_Driver_Block_Format&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="../resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="../resources/assets/poweredby_mediawiki_132x47.png 1.5x, ../resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script data-cfasync="false" src="../cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.046","walltime":"0.439","ppvisitednodes":{"value":226,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":19596,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250212022314","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":548});});</script>
</body>
</html>