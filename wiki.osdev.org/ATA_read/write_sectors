<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>ATA read/write sectors - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"488c543ce5c571071511870c","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"ATA_read/write_sectors","wgTitle":"ATA read/write sectors","wgCurRevisionId":20723,"wgRevisionId":20723,"wgArticleId":2984,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Stubs","ATA"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"ATA_read/write_sectors","wgRelevantArticleId":2984,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],
"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="../favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="../opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="../api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-ATA_read_write_sectors rootpage-ATA_read_write_sectors skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">ATA read/write sectors</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="write_sectors#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="write_sectors#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>Since interrupts (like INT 13h) can't be called easily in protected mode or long mode, direct disk access through ports might be the only solution. The below code is example of subroutines to read and write disk sectors directly from the first hard disk (80h) in long mode using CHS and LBA.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="write_sectors#ATA_read_sectors"><span class="tocnumber">1</span> <span class="toctext">ATA read sectors</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="write_sectors#Read_in_CHS_mode"><span class="tocnumber">1.1</span> <span class="toctext">Read in CHS mode</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="write_sectors#Read_in_LBA_mode"><span class="tocnumber">1.2</span> <span class="toctext">Read in LBA mode</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="write_sectors#ATA_write_sectors"><span class="tocnumber">2</span> <span class="toctext">ATA write sectors</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="write_sectors#See_also"><span class="tocnumber">3</span> <span class="toctext">See also</span></a></li>
</ul>
</div>

<h1><span class="mw-headline" id="ATA_read_sectors">ATA read sectors</span></h1>
<h2><span class="mw-headline" id="Read_in_CHS_mode">Read in CHS mode</span></h2>
<p>Accessing disk using CHS (cylinder,head,sector) indexes seem to be kinda old type but is the base for LBA access. The following NASM long-mode subroutine reads CH sectors to memory address indicated by RDI register.
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">;=============================================================================</span>
<span class="c1">; ATA read sectors (CHS mode) </span>
<span class="c1">; Max head index is 15, giving 16 possible heads</span>
<span class="c1">; Max cylinder index can be a very large number (up to 65535)</span>
<span class="c1">; Sector is usually always 1-63, sector 0 reserved, max 255 sectors/track</span>
<span class="c1">; If using 63 sectors/track, max disk size = 31.5GB</span>
<span class="c1">; If using 255 sectors/track, max disk size = 127.5GB</span>
<span class="c1">; See OSDev forum links in bottom of [http://wiki.osdev.org/ATA]</span>
<span class="c1">;</span>
<span class="c1">; @param EBX The CHS values; 2 bytes, 1 byte (BH), 1 byte (BL) accordingly</span>
<span class="c1">; @param CH The number of sectors to read</span>
<span class="c1">; @param RDI The address of buffer to put data obtained from disk               </span>
<span class="c1">;</span>
<span class="c1">; @return None</span>
<span class="c1">;=============================================================================</span>
<span class="nl">ata_chs_read:</span><span class="w">   </span><span class="nf">pushfq</span><span class="w"></span>
<span class="w">                </span><span class="nf">push</span><span class="w"> </span><span class="no">rax</span><span class="w"></span>
<span class="w">                </span><span class="nf">push</span><span class="w"> </span><span class="no">rbx</span><span class="w"></span>
<span class="w">                </span><span class="nf">push</span><span class="w"> </span><span class="no">rcx</span><span class="w"></span>
<span class="w">                </span><span class="nf">push</span><span class="w"> </span><span class="no">rdx</span><span class="w"></span>
<span class="w">                </span><span class="nf">push</span><span class="w"> </span><span class="no">rdi</span><span class="w"></span>
<span class="w">                </span>
<span class="w">                </span><span class="nf">mov</span><span class="w"> </span><span class="no">rdx</span><span class="p">,</span><span class="mi">1</span><span class="no">f6h</span><span class="w">            </span><span class="c1">;port to send drive &amp; head numbers</span>
<span class="w">                </span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="no">bh</span><span class="w">               </span><span class="c1">;head index in BH</span>
<span class="w">                </span><span class="nf">and</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="mi">00001111</span><span class="no">b</span><span class="w">        </span><span class="c1">;head is only 4 bits long</span>
<span class="w">                </span><span class="nf">or</span><span class="w">  </span><span class="no">al</span><span class="p">,</span><span class="mi">10100000</span><span class="no">b</span><span class="w">        </span><span class="c1">;default 1010b in high nibble</span>
<span class="w">                </span><span class="nf">out</span><span class="w"> </span><span class="no">dx</span><span class="p">,</span><span class="no">al</span><span class="w"></span>

<span class="w">                </span><span class="nf">mov</span><span class="w"> </span><span class="no">rdx</span><span class="p">,</span><span class="mi">1</span><span class="no">f2h</span><span class="w">            </span><span class="c1">;Sector count port</span>
<span class="w">                </span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="no">ch</span><span class="w">               </span><span class="c1">;Read CH sectors</span>
<span class="w">                </span><span class="nf">out</span><span class="w"> </span><span class="no">dx</span><span class="p">,</span><span class="no">al</span><span class="w"></span>

<span class="w">                </span><span class="nf">mov</span><span class="w"> </span><span class="no">rdx</span><span class="p">,</span><span class="mi">1</span><span class="no">f3h</span><span class="w">            </span><span class="c1">;Sector number port</span>
<span class="w">                </span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="no">bl</span><span class="w">               </span><span class="c1">;BL is sector index</span>
<span class="w">                </span><span class="nf">out</span><span class="w"> </span><span class="no">dx</span><span class="p">,</span><span class="no">al</span><span class="w"></span>

<span class="w">                </span><span class="nf">mov</span><span class="w"> </span><span class="no">rdx</span><span class="p">,</span><span class="mi">1</span><span class="no">f4h</span><span class="w">            </span><span class="c1">;Cylinder low port</span>
<span class="w">                </span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="no">ebx</span><span class="w">             </span><span class="c1">;byte 2 in ebx, just above BH</span>
<span class="w">                </span><span class="nf">mov</span><span class="w"> </span><span class="no">cl</span><span class="p">,</span><span class="mi">16</span><span class="w"></span>
<span class="w">                </span><span class="nf">shr</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="no">cl</span><span class="w">              </span><span class="c1">;shift down to AL</span>
<span class="w">                </span><span class="nf">out</span><span class="w"> </span><span class="no">dx</span><span class="p">,</span><span class="no">al</span><span class="w"></span>

<span class="w">                </span><span class="nf">mov</span><span class="w"> </span><span class="no">rdx</span><span class="p">,</span><span class="mi">1</span><span class="no">f5h</span><span class="w">            </span><span class="c1">;Cylinder high port</span>
<span class="w">                </span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="no">ebx</span><span class="w">             </span><span class="c1">;byte 3 in ebx, just above byte 2</span>
<span class="w">                </span><span class="nf">mov</span><span class="w"> </span><span class="no">cl</span><span class="p">,</span><span class="mi">24</span><span class="w"></span>
<span class="w">                </span><span class="nf">shr</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="no">cl</span><span class="w">              </span><span class="c1">;shift down to AL</span>
<span class="w">                </span><span class="nf">out</span><span class="w"> </span><span class="no">dx</span><span class="p">,</span><span class="no">al</span><span class="w"></span>

<span class="w">                </span><span class="nf">mov</span><span class="w"> </span><span class="no">rdx</span><span class="p">,</span><span class="mi">1</span><span class="no">f7h</span><span class="w">            </span><span class="c1">;Command port</span>
<span class="w">                </span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="mi">20</span><span class="no">h</span><span class="w">              </span><span class="c1">;Read with retry.</span>
<span class="w">                </span><span class="nf">out</span><span class="w"> </span><span class="no">dx</span><span class="p">,</span><span class="no">al</span><span class="w"></span>
<span class="w">                </span>
<span class="nl">.still_going:</span><span class="w">   </span><span class="nf">in</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="no">dx</span><span class="w"></span>
<span class="w">                </span><span class="nf">test</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="mi">8</span><span class="w">               </span><span class="c1">;the sector buffer requires servicing.</span>
<span class="w">                </span><span class="nf">jz</span><span class="w"> </span><span class="no">.still_going</span><span class="w">         </span><span class="c1">;until the sector buffer is ready.</span>

<span class="w">                </span><span class="nf">mov</span><span class="w"> </span><span class="no">rax</span><span class="p">,</span><span class="mi">512</span><span class="err">/</span><span class="mi">2</span><span class="w">           </span><span class="c1">;to read 256 words = 1 sector</span>
<span class="w">                </span><span class="nf">xor</span><span class="w"> </span><span class="no">bx</span><span class="p">,</span><span class="no">bx</span><span class="w"></span>
<span class="w">                </span><span class="nf">mov</span><span class="w"> </span><span class="no">bl</span><span class="p">,</span><span class="no">ch</span><span class="w">               </span><span class="c1">;read CH sectors</span>
<span class="w">                </span><span class="nf">mul</span><span class="w"> </span><span class="no">bx</span><span class="w"></span>
<span class="w">                </span><span class="nf">mov</span><span class="w"> </span><span class="no">rcx</span><span class="p">,</span><span class="no">rax</span><span class="w">             </span><span class="c1">;RCX is counter for INSW</span>
<span class="w">                </span><span class="nf">mov</span><span class="w"> </span><span class="no">rdx</span><span class="p">,</span><span class="mi">1</span><span class="no">f0h</span><span class="w">            </span><span class="c1">;Data port, in and out</span>
<span class="w">                </span><span class="na">rep</span><span class="w"> </span><span class="nf">insw</span><span class="w">                </span><span class="c1">;in to [RDI]</span>

<span class="w">                </span><span class="nf">pop</span><span class="w"> </span><span class="no">rdi</span><span class="w"></span>
<span class="w">                </span><span class="nf">pop</span><span class="w"> </span><span class="no">rdx</span><span class="w"></span>
<span class="w">                </span><span class="nf">pop</span><span class="w"> </span><span class="no">rcx</span><span class="w"></span>
<span class="w">                </span><span class="nf">pop</span><span class="w"> </span><span class="no">rbx</span><span class="w"></span>
<span class="w">                </span><span class="nf">pop</span><span class="w"> </span><span class="no">rax</span><span class="w"></span>
<span class="w">                </span><span class="nf">popfq</span><span class="w"></span>
<span class="w">                </span><span class="nf">ret</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="Read_in_LBA_mode">Read in LBA mode</span></h2>
<center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p><a href="../File:Stub.png" class="image" title="This article is a stub!"><img alt="This article is a stub!" src="../images/f/fe/Stub.png" decoding="async" width="50" height="50" data-file-width="50" data-file-height="50" /></a>
This page or section is a <a href="../Category:Stubs" title="Category:Stubs">stub</a>. You can help the wiki by <i>accurately</i> <a rel="nofollow" class="external text" href="https://wiki.osdev.org/index.php?title=ATA_read/write_sectors&amp;action=edit">contributing</a> to it.
</p>
</td>
<td>
</td></tr></tbody></table>
</center>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">;=============================================================================</span>
<span class="c1">; ATA read sectors (LBA mode) </span>
<span class="c1">;</span>
<span class="c1">; @param EAX Logical Block Address of sector</span>
<span class="c1">; @param CL  Number of sectors to read</span>
<span class="c1">; @param RDI The address of buffer to put data obtained from disk</span>
<span class="c1">;</span>
<span class="c1">; @return None</span>
<span class="c1">;=============================================================================</span>
<span class="nl">ata_lba_read:</span><span class="w"></span>
<span class="w">               </span><span class="nf">pushfq</span><span class="w"></span>
<span class="w">               </span><span class="nf">and</span><span class="w"> </span><span class="no">rax</span><span class="p">,</span><span class="w"> </span><span class="mi">0x0FFFFFFF</span><span class="w"></span>
<span class="w">               </span><span class="nf">push</span><span class="w"> </span><span class="no">rax</span><span class="w"></span>
<span class="w">               </span><span class="nf">push</span><span class="w"> </span><span class="no">rbx</span><span class="w"></span>
<span class="w">               </span><span class="nf">push</span><span class="w"> </span><span class="no">rcx</span><span class="w"></span>
<span class="w">               </span><span class="nf">push</span><span class="w"> </span><span class="no">rdx</span><span class="w"></span>
<span class="w">               </span><span class="nf">push</span><span class="w"> </span><span class="no">rdi</span><span class="w"></span>

<span class="w">               </span><span class="nf">mov</span><span class="w"> </span><span class="no">rbx</span><span class="p">,</span><span class="w"> </span><span class="no">rax</span><span class="w">         </span><span class="c1">; Save LBA in RBX</span>
<span class="w">               </span>
<span class="w">               </span><span class="nf">mov</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="w"> </span><span class="mi">0x01F6</span><span class="w">      </span><span class="c1">; Port to send drive and bit 24 - 27 of LBA</span>
<span class="w">               </span><span class="nf">shr</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">24</span><span class="w">          </span><span class="c1">; Get bit 24 - 27 in al</span>
<span class="w">               </span><span class="nf">or</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">11100000</span><span class="no">b</span><span class="w">     </span><span class="c1">; Set bit 6 in al for LBA mode</span>
<span class="w">               </span><span class="nf">out</span><span class="w"> </span><span class="no">dx</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>

<span class="w">               </span><span class="nf">mov</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="w"> </span><span class="mi">0x01F2</span><span class="w">      </span><span class="c1">; Port to send number of sectors</span>
<span class="w">               </span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="no">cl</span><span class="w">           </span><span class="c1">; Get number of sectors from CL</span>
<span class="w">               </span><span class="nf">out</span><span class="w"> </span><span class="no">dx</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
<span class="w">               </span>
<span class="w">               </span><span class="nf">mov</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="w"> </span><span class="mi">0x1F3</span><span class="w">       </span><span class="c1">; Port to send bit 0 - 7 of LBA</span>
<span class="w">               </span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="no">ebx</span><span class="w">         </span><span class="c1">; Get LBA from EBX</span>
<span class="w">               </span><span class="nf">out</span><span class="w"> </span><span class="no">dx</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>

<span class="w">               </span><span class="nf">mov</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="w"> </span><span class="mi">0x1F4</span><span class="w">       </span><span class="c1">; Port to send bit 8 - 15 of LBA</span>
<span class="w">               </span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="no">ebx</span><span class="w">         </span><span class="c1">; Get LBA from EBX</span>
<span class="w">               </span><span class="nf">shr</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="w">           </span><span class="c1">; Get bit 8 - 15 in AL</span>
<span class="w">               </span><span class="nf">out</span><span class="w"> </span><span class="no">dx</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>


<span class="w">               </span><span class="nf">mov</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="w"> </span><span class="mi">0x1F5</span><span class="w">       </span><span class="c1">; Port to send bit 16 - 23 of LBA</span>
<span class="w">               </span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="no">ebx</span><span class="w">         </span><span class="c1">; Get LBA from EBX</span>
<span class="w">               </span><span class="nf">shr</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">16</span><span class="w">          </span><span class="c1">; Get bit 16 - 23 in AL</span>
<span class="w">               </span><span class="nf">out</span><span class="w"> </span><span class="no">dx</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>

<span class="w">               </span><span class="nf">mov</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="w"> </span><span class="mi">0x1F7</span><span class="w">       </span><span class="c1">; Command port</span>
<span class="w">               </span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">0x20</span><span class="w">         </span><span class="c1">; Read with retry.</span>
<span class="w">               </span><span class="nf">out</span><span class="w"> </span><span class="no">dx</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>

<span class="nl">.still_going:</span><span class="w">  </span><span class="nf">in</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="no">dx</span><span class="w"></span>
<span class="w">               </span><span class="nf">test</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="w">           </span><span class="c1">; the sector buffer requires servicing.</span>
<span class="w">               </span><span class="nf">jz</span><span class="w"> </span><span class="no">.still_going</span><span class="w">      </span><span class="c1">; until the sector buffer is ready.</span>

<span class="w">               </span><span class="nf">mov</span><span class="w"> </span><span class="no">rax</span><span class="p">,</span><span class="w"> </span><span class="mi">256</span><span class="w">         </span><span class="c1">; to read 256 words = 1 sector</span>
<span class="w">               </span><span class="nf">xor</span><span class="w"> </span><span class="no">bx</span><span class="p">,</span><span class="w"> </span><span class="no">bx</span><span class="w"></span>
<span class="w">               </span><span class="nf">mov</span><span class="w"> </span><span class="no">bl</span><span class="p">,</span><span class="w"> </span><span class="no">cl</span><span class="w">           </span><span class="c1">; read CL sectors</span>
<span class="w">               </span><span class="nf">mul</span><span class="w"> </span><span class="no">bx</span><span class="w"></span>
<span class="w">               </span><span class="nf">mov</span><span class="w"> </span><span class="no">rcx</span><span class="p">,</span><span class="w"> </span><span class="no">rax</span><span class="w">         </span><span class="c1">; RCX is counter for INSW</span>
<span class="w">               </span><span class="nf">mov</span><span class="w"> </span><span class="no">rdx</span><span class="p">,</span><span class="w"> </span><span class="mi">0x1F0</span><span class="w">       </span><span class="c1">; Data port, in and out</span>
<span class="w">               </span><span class="na">rep</span><span class="w"> </span><span class="nf">insw</span><span class="w">             </span><span class="c1">; in to [RDI]</span>

<span class="w">               </span><span class="nf">pop</span><span class="w"> </span><span class="no">rdi</span><span class="w"></span>
<span class="w">               </span><span class="nf">pop</span><span class="w"> </span><span class="no">rdx</span><span class="w"></span>
<span class="w">               </span><span class="nf">pop</span><span class="w"> </span><span class="no">rcx</span><span class="w"></span>
<span class="w">               </span><span class="nf">pop</span><span class="w"> </span><span class="no">rbx</span><span class="w"></span>
<span class="w">               </span><span class="nf">pop</span><span class="w"> </span><span class="no">rax</span><span class="w"></span>
<span class="w">               </span><span class="nf">popfq</span><span class="w"></span>
<span class="w">               </span><span class="nf">ret</span><span class="w"></span>
</pre></div>
<h1><span class="mw-headline" id="ATA_write_sectors">ATA write sectors</span></h1>
<p>A write is mostly equivalent to performing a read operation. The only changes needed are a change in command (0x30 for chs write), and the direction of the data, which is written (rep outsw from *SI) to the data port rather than read (rep insw to *DI).
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">;=============================================================================</span>
<span class="c1">; ATA write sectors (LBA mode) </span>
<span class="c1">;</span>
<span class="c1">; @param EAX Logical Block Address of sector</span>
<span class="c1">; @param CL  Number of sectors to write</span>
<span class="c1">; @param RDI The address of data to write to the disk</span>
<span class="c1">;</span>
<span class="c1">; @return None</span>
<span class="c1">;=============================================================================</span>

<span class="nl">ata_lba_write:</span><span class="w"></span>
<span class="w">    </span><span class="nf">pushfq</span><span class="w"></span>
<span class="w">    </span><span class="nf">and</span><span class="w"> </span><span class="no">rax</span><span class="p">,</span><span class="w"> </span><span class="mi">0x0FFFFFFF</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">rax</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">rbx</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">rcx</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">rdx</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">rdi</span><span class="w"></span>
<span class="w">    </span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">rbx</span><span class="p">,</span><span class="w"> </span><span class="no">rax</span><span class="w">         </span><span class="c1">; Save LBA in RBX</span>

<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="w"> </span><span class="mi">0x01F6</span><span class="w">      </span><span class="c1">; Port to send drive and bit 24 - 27 of LBA</span>
<span class="w">    </span><span class="nf">shr</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">24</span><span class="w">          </span><span class="c1">; Get bit 24 - 27 in al</span>
<span class="w">    </span><span class="nf">or</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">11100000</span><span class="no">b</span><span class="w">     </span><span class="c1">; Set bit 6 in al for LBA mode</span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="no">dx</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>

<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="w"> </span><span class="mi">0x01F2</span><span class="w">      </span><span class="c1">; Port to send number of sectors</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="no">cl</span><span class="w">           </span><span class="c1">; Get number of sectors from CL</span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="no">dx</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>

<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="w"> </span><span class="mi">0x1F3</span><span class="w">       </span><span class="c1">; Port to send bit 0 - 7 of LBA</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="no">ebx</span><span class="w">         </span><span class="c1">; Get LBA from EBX</span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="no">dx</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>

<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="w"> </span><span class="mi">0x1F4</span><span class="w">       </span><span class="c1">; Port to send bit 8 - 15 of LBA</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="no">ebx</span><span class="w">         </span><span class="c1">; Get LBA from EBX</span>
<span class="w">    </span><span class="nf">shr</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="w">           </span><span class="c1">; Get bit 8 - 15 in AL</span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="no">dx</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>


<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="w"> </span><span class="mi">0x1F5</span><span class="w">       </span><span class="c1">; Port to send bit 16 - 23 of LBA</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="no">ebx</span><span class="w">         </span><span class="c1">; Get LBA from EBX</span>
<span class="w">    </span><span class="nf">shr</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">16</span><span class="w">          </span><span class="c1">; Get bit 16 - 23 in AL</span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="no">dx</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>

<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="w"> </span><span class="mi">0x1F7</span><span class="w">       </span><span class="c1">; Command port</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">0x30</span><span class="w">         </span><span class="c1">; Write with retry.</span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="no">dx</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>

<span class="nl">.still_going:</span><span class="w">  </span><span class="nf">in</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="no">dx</span><span class="w"></span>
<span class="w">    </span><span class="nf">test</span><span class="w"> </span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="w">           </span><span class="c1">; the sector buffer requires servicing.</span>
<span class="w">    </span><span class="nf">jz</span><span class="w"> </span><span class="no">.still_going</span><span class="w">      </span><span class="c1">; until the sector buffer is ready.</span>

<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">rax</span><span class="p">,</span><span class="w"> </span><span class="mi">256</span><span class="w">         </span><span class="c1">; to read 256 words = 1 sector</span>
<span class="w">    </span><span class="nf">xor</span><span class="w"> </span><span class="no">bx</span><span class="p">,</span><span class="w"> </span><span class="no">bx</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">bl</span><span class="p">,</span><span class="w"> </span><span class="no">cl</span><span class="w">           </span><span class="c1">; write CL sectors</span>
<span class="w">    </span><span class="nf">mul</span><span class="w"> </span><span class="no">bx</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">rcx</span><span class="p">,</span><span class="w"> </span><span class="no">rax</span><span class="w">         </span><span class="c1">; RCX is counter for OUTSW</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">rdx</span><span class="p">,</span><span class="w"> </span><span class="mi">0x1F0</span><span class="w">       </span><span class="c1">; Data port, in and out</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">rsi</span><span class="p">,</span><span class="w"> </span><span class="no">rdi</span><span class="w"></span>
<span class="w">    </span><span class="na">rep</span><span class="w"> </span><span class="nf">outsw</span><span class="w">            </span><span class="c1">; out</span>

<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">rdi</span><span class="w"></span>
<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">rdx</span><span class="w"></span>
<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">rcx</span><span class="w"></span>
<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">rbx</span><span class="w"></span>
<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">rax</span><span class="w"></span>
<span class="w">    </span><span class="nf">popfq</span><span class="w"></span>
<span class="w">    </span><span class="nf">ret</span><span class="w"></span>
</pre></div>
<h1><span class="mw-headline" id="See_also">See also</span></h1>
<ul><li><a rel="nofollow" class="external text" href="http://forum.osdev.org/viewtopic.php?t=12268">Read/write disk sectors by Dex</a></li>
<li><a href="../ATA_PIO_Mode" title="ATA PIO Mode">ATA PIO mode</a></li>
<li><a href="https://wiki.osdev.org/ATA" class="mw-redirect" title="ATA">ATA</a></li></ul>
<!-- 
NewPP limit report
Cached time: 20250212012434
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.046 seconds
Real time usage: 0.450 seconds
Preprocessor visited node count: 37/1000000
Post‐expand include size: 494/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 4/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 32387/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    1.437      1 Template:Stub
100.00%    1.437      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:2984-0!canonical and timestamp 20250212012433 and revision id 20723.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=ATA_read/write_sectors&amp;oldid=20723">https://wiki.osdev.org/index.php?title=ATA_read/write_sectors&amp;oldid=20723</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="../Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="../Category:Stubs" title="Category:Stubs">Stubs</a></li><li><a href="../Category:ATA" title="Category:ATA">ATA</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=ATA+read%2Fwrite+sectors" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="write_sectors#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="write_sectors" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="../Talk:ATA_read/write_sectors" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="write_sectors"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ATA_read/write_sectors&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ATA_read/write_sectors&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="../index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="../index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="../Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="../Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="../OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="../OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="../OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="../Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="../Special:WhatLinksHere/ATA_read/write_sectors" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/ATA_read/write_sectors" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="../Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ATA_read/write_sectors&amp;oldid=20723" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ATA_read/write_sectors&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 19 April 2017, at 05:42.</li>
	<li id="footer-info-0">This page has been accessed 5,369 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="../OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="../OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="../OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=ATA_read/write_sectors&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="../resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="../resources/assets/poweredby_mediawiki_132x47.png 1.5x, ../resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.046","walltime":"0.450","ppvisitednodes":{"value":37,"limit":1000000},"postexpandincludesize":{"value":494,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":4,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":32387,"limit":5000000},"timingprofile":["100.00%    1.437      1 Template:Stub","100.00%    1.437      1 -total"]},"cachereport":{"timestamp":"20250212012434","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":549});});</script>
</body>
</html>