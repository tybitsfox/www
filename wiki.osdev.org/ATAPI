<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>ATAPI - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"a74850cab5e22581ae757f40","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"ATAPI","wgTitle":"ATAPI","wgCurRevisionId":28973,"wgRevisionId":28973,"wgArticleId":2246,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","ATA","Storage"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"ATAPI","wgRelevantArticleId":2246,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,
"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-ATAPI rootpage-ATAPI skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">ATAPI</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="ATAPI#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="ATAPI#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>ATAPI refers to devices that use the Packet Interface of the ATA6 (or higher) standard command set.
It is basically a way to issue <a href="SCSI" title="SCSI">SCSI</a> commands to a CD-ROM, CD-RW, DVD, or tape drive, attached to the ATA bus.
</p><p>ATAPI uses a very small number of ATA commands. The most important are the PACKET command (0xA0), and IDENTIFY PACKET DEVICE (0xA1).
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="ATAPI#Detecting"><span class="tocnumber">1</span> <span class="toctext">Detecting</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="ATAPI#PACKET_command_(0xA0)"><span class="tocnumber">2</span> <span class="toctext">PACKET command (0xA0)</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="ATAPI#IDENTIFY_PACKET_DEVICE_command_(0xA1)"><span class="tocnumber">3</span> <span class="toctext">IDENTIFY PACKET DEVICE command (0xA1)</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="ATAPI#Disc_Content"><span class="tocnumber">4</span> <span class="toctext">Disc Content</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="ATAPI#x86_Directions"><span class="tocnumber">5</span> <span class="toctext">x86 Directions</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="ATAPI#Complete_Command_Set"><span class="tocnumber">6</span> <span class="toctext">Complete Command Set</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="ATAPI#x86_Examples"><span class="tocnumber">7</span> <span class="toctext">x86 Examples</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="ATAPI#Detecting_a_Medium&#39;s_Capacity"><span class="tocnumber">8</span> <span class="toctext">Detecting a Medium's Capacity</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="ATAPI#Operating_Theory"><span class="tocnumber">9</span> <span class="toctext">Operating Theory</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="ATAPI#Comments"><span class="tocnumber">10</span> <span class="toctext">Comments</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="ATAPI#See_Also"><span class="tocnumber">11</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-12"><a href="ATAPI#Articles"><span class="tocnumber">11.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="ATAPI#External_Links"><span class="tocnumber">11.2</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Detecting">Detecting</span></h2>
<p><i>From a draft copy of the ATA/ATAPI spec (T13 1410D rev 3b, page 365), works on qemu</i>
</p><p>To detect if a ATA disk is a non-packet or packet device, you can use the presence of a signature stored in the "Sector Count" and "LBA Low,Mid,High" registers (registers 0x1F2-0x1F5 for ATA controllers).
</p><p>If these registers contain 0x01, 0x01, 0x00, 0x00 - The connected device is a non-packet device, and `IDENTIFY DEVICE` (0xEC) should work.
If they contain 0x01, 0x01, 0x14, 0xEB then the device is a packet device, and `IDENTIFY PACKET DEVICE` (0xA1) should be used.
</p><p>This signature is set/reset when the device is powered on, reset, or receives the `EXECUTE DEVICE DIAGNOSTIC` command (for packet devices, `IDENTIFY DEVICE` also resets the signature)
</p><p><br />
</p>
<h2><span id="PACKET_command_.280xA0.29"></span><span class="mw-headline" id="PACKET_command_(0xA0)">PACKET command (0xA0)</span></h2>
<p>Each ATAPI command packet is made of a 'command byte' (from the SCSI command set -- see below for a partial list), followed by 11 'data' bytes.
For instance, reading the table of contents is achieved by sending the following byte string to the device, as a "command".
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">atapi_readtoc</span><span class="p">[]</span><span class="o">=</span><span class="w">  </span><span class="p">{</span><span class="w"> </span><span class="mh">0x43</span><span class="w"> </span><span class="cm">/* ATAPI_READTOC */</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">12</span><span class="p">,</span><span class="w"> </span><span class="mh">0x40</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">};</span><span class="w"></span>
</pre></div>
<p>The ATA PACKET command works in three phases, in PIO mode.
</p><p>Phase 1) Set up the standard ATA IO port registers with ATAPI specific values.
Then Send the ATA PACKET command to the device exactly as you would with any other ATA command: outb (ATA Command Register, 0xA0)
</p><p>Phase 2) Prepare to do a PIO data transfer, the normal way, to the device.
When the device is ready (BSY clear, DRQ set) you send the ATAPI command string (like the one above) as a 6 word PIO transfer to the device.
</p><p>Phase 3) Wait for an IRQ. When it arrives, you must read the LBA Mid and LBA High IO port registers. They tell you the packet byte count that the ATAPI drive will send to you, or must receive from you. In a loop, you transmit that number of bytes, then wait for the next IRQ.
</p><p>In DMA mode, only the first two phases happen. The device handles the details of phase 3 itself, with the PCI drive controller.
</p><p><br />
</p>
<h2><span id="IDENTIFY_PACKET_DEVICE_command_.280xA1.29"></span><span class="mw-headline" id="IDENTIFY_PACKET_DEVICE_command_(0xA1)">IDENTIFY PACKET DEVICE command (0xA1)</span></h2>
<p>This command is a "normal" ATA PIO mode command, used during initialization. It is an exact mirror of the ATA IDENTIFY command, except that it only returns information about ATAPI devices. Use it in exactly the same way as you use IDENTIFY, for the meanings of the data returned, you can refer to page 107 of <a rel="nofollow" class="external text" href="https://node1.123dok.com/dt01pdf/123dok_us/001/139/1139315.pdf.pdf?X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=7PKKQ3DUV8RG19BL%2F20221119%2F%2Fs3%2Faws4_request&amp;X-Amz-Date=20221119T211954Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=600&amp;X-Amz-Signature=c4154afd7a42db51d05db14370b8e885c3354c14cb66986bffcfd1a9a0869ee2">this pdf</a>.
</p>
<h2><span class="mw-headline" id="Disc_Content">Disc Content</span></h2>
<p>Optical media and drives are governed by the MMC part of SCSI specs.
They are structured in sessions and tracks.
The readable entities are called Logical Track. They are contiguous 
strings of blocks. Some media types can bear several sessions with 
several tracks each, others bear only one session with one track.
</p><p>For more informations about assessing, reading and writing 
optical media, see the section about
<a href="Optical_Drive#Readable_Disc_Content" title="Optical Drive">Readable Disc Content</a>
of article <a href="Optical_Drive" title="Optical Drive">Optical Drive</a>.
</p>
<h2><span class="mw-headline" id="x86_Directions">x86 Directions</span></h2>
<p>Important note: on the Primary bus, the standard set of ATA IO ports is 0x1F0 through 0x1F7. In much or all of the ATAPI documentation, you will see this set of IO ports called the "Task File". The term seems very confusing.
</p><p>First, you need to have a buffer. If it is going to be a DMA buffer, it needs to follow the PRD rules (see the ATA/ATAPI using DMA article). If it is going to be a PIO buffer, then you need to know the size of the buffer. Call this size "maxByteCount". It must be an unsigned word, and 0 is illegal for PIO mode. A value of zero is <b>mandatory</b> for DMA mode, no matter what size the PRD buffers are.
</p><p>Assume that the command is in words Command1 through Command6. Device is the Primary slave. Select the target device by setting the master/slave bit in the Device Select Register. There are no other bits needed.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="n">outb</span><span class="w"> </span><span class="p">(</span><span class="mh">0x1F6</span><span class="p">,</span><span class="w"> </span><span class="n">slavebit</span><span class="o">&lt;&lt;</span><span class="mi">4</span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>If the command is going to use DMA, set the Features Register to 1, otherwise 0 for PIO.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="n">outb</span><span class="w"> </span><span class="p">(</span><span class="mh">0x1F1</span><span class="p">,</span><span class="w"> </span><span class="n">isDMA</span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>The Sectorcount Register and LBA Low Register are unused currently. Send maxByteCount in LBA Mid and LBA High Registers.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="n">outb</span><span class="w"> </span><span class="p">(</span><span class="mh">0x1F4</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">maxByteCount</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xff</span><span class="p">));</span><span class="w"></span>
<span class="n">outb</span><span class="w"> </span><span class="p">(</span><span class="mh">0x1F5</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">maxByteCount</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">8</span><span class="p">));</span><span class="w"></span>
</pre></div>
<p>Send the ATAPI PACKET command to the Command Register
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="n">outb</span><span class="w"> </span><span class="p">(</span><span class="mh">0x1F7</span><span class="p">,</span><span class="w"> </span><span class="mh">0xA0</span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>Wait for an IRQ, or poll for BSY to clear and DRQ to set.
</p><p>Then send the ATAPI command as 6 words, to the data port.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="n">outw</span><span class="w"> </span><span class="p">(</span><span class="mh">0x1F0</span><span class="p">,</span><span class="w"> </span><span class="n">Command1</span><span class="p">);</span><span class="w"></span>
<span class="n">outw</span><span class="w"> </span><span class="p">(</span><span class="mh">0x1F0</span><span class="p">,</span><span class="w"> </span><span class="n">Command2</span><span class="p">);</span><span class="w"></span>
<span class="n">outw</span><span class="w"> </span><span class="p">(</span><span class="mh">0x1F0</span><span class="p">,</span><span class="w"> </span><span class="n">Command3</span><span class="p">);</span><span class="w"></span>
<span class="n">outw</span><span class="w"> </span><span class="p">(</span><span class="mh">0x1F0</span><span class="p">,</span><span class="w"> </span><span class="n">Command4</span><span class="p">);</span><span class="w"></span>
<span class="n">outw</span><span class="w"> </span><span class="p">(</span><span class="mh">0x1F0</span><span class="p">,</span><span class="w"> </span><span class="n">Command5</span><span class="p">);</span><span class="w"></span>
<span class="n">outw</span><span class="w"> </span><span class="p">(</span><span class="mh">0x1F0</span><span class="p">,</span><span class="w"> </span><span class="n">Command6</span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>Then wait for another IRQ. You cannot poll.
</p><p><br />
If this was a DMA command (isDMA == 1), then you are done. When the IRQ arrives, the transfer is complete.
</p><p>If it was a PIO command, when the IRQ arrives, read the LBA Mid and LBA High Registers. This is vital. You told the drive the <i>maximum</i> amount of data to transfer at one time. Now the drive has to tell you the <b>actual</b> transfer size.
</p><p>Once you have the transfer size (bytecount = LBA High &lt;&lt; 8 | LBA Mid), do the PIO transfer.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="n">wordcount</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bytecount</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="w"></span>
</pre></div>
<p>loop on inw(0x1F0) or outw(0x1f0) wordcount times.
</p><p>If the transfer is complete, BSY and DRQ will clear. Otherwise, wait for the next IRQ, and read or write the same number of words again.
</p><p>Notes: there is a possible future change planned to increase the length of ATAPI command strings to 8 words. Check the two bottom bits of ATAPI Identify word 0 to verify 6 or 8 word command size.
</p><p>Once again, if you use polling to check BSY, DRQ, and ERR after sending the PACKET command, then you should probably ignore the ERR bit for the first four loops. (ATAPI calls this the "CHECK" bit, instead of ERR, but it means the same thing.)
</p>
<h2><span class="mw-headline" id="Complete_Command_Set">Complete Command Set</span></h2>
<table border="1">

<tbody><tr>
<th>SCSI Command Name
</th>
<th>Command Byte (OpCode)
</th></tr>
<tr>
<td>TEST UNIT READY
</td>
<td>0x00
</td></tr>
<tr>
<td>REQUEST SENSE
</td>
<td>0x03
</td></tr>
<tr>
<td>FORMAT UNIT
</td>
<td>0x04
</td></tr>
<tr>
<td>INQUIRY
</td>
<td>0x12
</td></tr>
<tr>
<td>START STOP UNIT (Eject device)
</td>
<td>0x1B
</td></tr>
<tr>
<td>PREVENT ALLOW MEDIUM REMOVAL
</td>
<td>0x1E
</td></tr>
<tr>
<td>READ FORMAT CAPACITIES
</td>
<td>0x23
</td></tr>
<tr>
<td>READ CAPACITY
</td>
<td>0x25
</td></tr>
<tr>
<td>READ (10)
</td>
<td>0x28
</td></tr>
<tr>
<td>WRITE (10)
</td>
<td>0x2A
</td></tr>
<tr>
<td>SEEK (10)
</td>
<td>0x2B
</td></tr>
<tr>
<td>WRITE AND VERIFY (10)
</td>
<td>0x2E
</td></tr>
<tr>
<td>VERIFY (10)
</td>
<td>0x2F
</td></tr>
<tr>
<td>SYNCHRONIZE CACHE
</td>
<td>0x35
</td></tr>
<tr>
<td>WRITE BUFFER
</td>
<td>0x3B
</td></tr>
<tr>
<td>READ BUFFER
</td>
<td>0x3C
</td></tr>
<tr>
<td>READ TOC/PMA/ATIP
</td>
<td>0x43
</td></tr>
<tr>
<td>GET CONFIGURATION
</td>
<td>0x46
</td></tr>
<tr>
<td>GET EVENT STATUS NOTIFICATION
</td>
<td>0x4A
</td></tr>
<tr>
<td>READ DISC INFORMATION
</td>
<td>0x51
</td></tr>
<tr>
<td>READ TRACK INFORMATION
</td>
<td>0x52
</td></tr>
<tr>
<td>RESERVE TRACK
</td>
<td>0x53
</td></tr>
<tr>
<td>SEND OPC INFORMATION
</td>
<td>0x54
</td></tr>
<tr>
<td>MODE SELECT (10)
</td>
<td>0x55
</td></tr>
<tr>
<td>REPAIR TRACK
</td>
<td>0x58
</td></tr>
<tr>
<td>MODE SENSE (10)
</td>
<td>0x5A
</td></tr>
<tr>
<td>CLOSE TRACK SESSION
</td>
<td>0x5B
</td></tr>
<tr>
<td>READ BUFFER CAPACITY
</td>
<td>0x5C
</td></tr>
<tr>
<td>SEND CUE SHEET
</td>
<td>0x5D
</td></tr>
<tr>
<td>REPORT LUNS
</td>
<td>0xA0
</td></tr>
<tr>
<td>BLANK
</td>
<td>0xA1
</td></tr>
<tr>
<td>SECURITY PROTOCOL IN
</td>
<td>0xA2
</td></tr>
<tr>
<td>SEND KEY
</td>
<td>0xA3
</td></tr>
<tr>
<td>REPORT KEY
</td>
<td>0xA4
</td></tr>
<tr>
<td>LOAD/UNLOAD MEDIUM
</td>
<td>0xA6
</td></tr>
<tr>
<td>SET READ AHEAD
</td>
<td>0xA7
</td></tr>
<tr>
<td>READ (12)
</td>
<td>0xA8
</td></tr>
<tr>
<td>WRITE (12)
</td>
<td>0xAA
</td></tr>
<tr>
<td>READ MEDIA SERIAL NUMBER / SERVICE ACTION IN (12)
</td>
<td>0xAB / 0x01
</td></tr>
<tr>
<td>GET PERFORMANCE
</td>
<td>0xAC
</td></tr>
<tr>
<td>READ DISC STRUCTURE
</td>
<td>0xAD
</td></tr>
<tr>
<td>SECURITY PROTOCOL OUT
</td>
<td>0xB5
</td></tr>
<tr>
<td>SET STREAMING
</td>
<td>0xB6
</td></tr>
<tr>
<td>READ CD MSF
</td>
<td>0xB9
</td></tr>
<tr>
<td>SET CD SPEED
</td>
<td>0xBB
</td></tr>
<tr>
<td>MECHANISM STATUS
</td>
<td>0xBD
</td></tr>
<tr>
<td>READ CD
</td>
<td>0xBE
</td></tr>
<tr>
<td>SEND DISC STRUCTURE
</td>
<td>0xBF
</td></tr></tbody></table>
<h2><span class="mw-headline" id="x86_Examples">x86 Examples</span></h2>
<p>Here is an example adapted from a working driver implementation.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">// Handy register number defines</span>
<span class="cp">#define DATA 0</span>
<span class="cp">#define ERROR_R 1</span>
<span class="cp">#define SECTOR_COUNT 2</span>
<span class="cp">#define LBA_LOW 3</span>
<span class="cp">#define LBA_MID 4</span>
<span class="cp">#define LBA_HIGH 5</span>
<span class="cp">#define DRIVE_SELECT 6</span>
<span class="cp">#define COMMAND_REGISTER 7</span>

<span class="c1">// Control register defines</span>
<span class="cp">#define CONTROL 0x206</span>

<span class="cp">#define ALTERNATE_STATUS 0</span>

<span class="k">static</span><span class="w"> </span><span class="kr">__inline</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">insw</span><span class="p">(</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">__port</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">__buf</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">__n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">__asm__</span><span class="w"> </span><span class="n">__volatile__</span><span class="p">(</span><span class="s">&quot;cld; rep; insw&quot;</span><span class="w"></span>
<span class="w">			</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;+D&quot;</span><span class="p">(</span><span class="n">__buf</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;+c&quot;</span><span class="p">(</span><span class="n">__n</span><span class="p">)</span><span class="w"></span>
<span class="w">			</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;d&quot;</span><span class="p">(</span><span class="n">__port</span><span class="p">));</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="k">static</span><span class="w"> </span><span class="n">__inline__</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="n">outsw</span><span class="p">(</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">__port</span><span class="p">,</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">__buf</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">__n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">__asm__</span><span class="w"> </span><span class="n">__volatile__</span><span class="p">(</span><span class="s">&quot;cld; rep; outsw&quot;</span><span class="w"></span>
<span class="w">			</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;+S&quot;</span><span class="p">(</span><span class="n">__buf</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;+c&quot;</span><span class="p">(</span><span class="n">__n</span><span class="p">)</span><span class="w"></span>
<span class="w">			</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;d&quot;</span><span class="p">(</span><span class="n">__port</span><span class="p">));</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="c1">// This code is to wait 400 ns</span>
<span class="k">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="n">ata_io_wait</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">inb</span><span class="p">(</span><span class="n">p</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">CONTROL</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">ALTERNATE_STATUS</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">inb</span><span class="p">(</span><span class="n">p</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">CONTROL</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">ALTERNATE_STATUS</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">inb</span><span class="p">(</span><span class="n">p</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">CONTROL</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">ALTERNATE_STATUS</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">inb</span><span class="p">(</span><span class="n">p</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">CONTROL</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">ALTERNATE_STATUS</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="c1">// Reads sectors starting from lba to buffer</span>
<span class="kt">int</span><span class="w"> </span><span class="n">read_cdrom</span><span class="p">(</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">port</span><span class="p">,</span><span class="w"> </span><span class="kt">bool</span><span class="w"> </span><span class="n">slave</span><span class="p">,</span><span class="w"> </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">lba</span><span class="p">,</span><span class="w"> </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">sectors</span><span class="p">,</span><span class="w"> </span><span class="kt">uint16_t</span><span class="w"> </span><span class="o">*</span><span class="n">buffer</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="c1">// The command</span>
<span class="w">	</span><span class="k">volatile</span><span class="w"> </span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">read_cmd</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="mh">0xA8</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"></span>
<span class="w">	                                 </span><span class="p">(</span><span class="n">lba</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mh">0x18</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFF</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">lba</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mh">0x10</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFF</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">lba</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mh">0x08</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFF</span><span class="p">,</span><span class="w"></span>
<span class="w">	                                 </span><span class="p">(</span><span class="n">lba</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mh">0x00</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFF</span><span class="p">,</span><span class="w"></span>
<span class="w">	                                 </span><span class="p">(</span><span class="n">sectors</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mh">0x18</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFF</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">sectors</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mh">0x10</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFF</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">sectors</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mh">0x08</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFF</span><span class="p">,</span><span class="w"></span>
<span class="w">	                                 </span><span class="p">(</span><span class="n">sectors</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mh">0x00</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFF</span><span class="p">,</span><span class="w"></span>
<span class="w">	                                 </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">};</span><span class="w"></span>

<span class="w">	</span><span class="n">outb</span><span class="p">(</span><span class="n">port</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">DRIVE_SELECT</span><span class="p">,</span><span class="w"> </span><span class="mh">0xA0</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="p">(</span><span class="n">slave</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">4</span><span class="p">));</span><span class="w"> </span><span class="c1">// Drive select</span>
<span class="w">	</span><span class="n">ata_io_wait</span><span class="p">(</span><span class="n">port</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">outb</span><span class="p">(</span><span class="n">port</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">ERROR_R</span><span class="p">,</span><span class="w"> </span><span class="mh">0x00</span><span class="p">);</span><span class="w"> </span>
<span class="w">	</span><span class="n">outb</span><span class="p">(</span><span class="n">port</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">LBA_MID</span><span class="p">,</span><span class="w"> </span><span class="mi">2048</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFF</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">outb</span><span class="p">(</span><span class="n">port</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">LBA_HIGH</span><span class="p">,</span><span class="w"> </span><span class="mi">2048</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">8</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">outb</span><span class="p">(</span><span class="n">port</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">COMMAND_REGISTER</span><span class="p">,</span><span class="w"> </span><span class="mh">0xA0</span><span class="p">);</span><span class="w"> </span><span class="c1">// Packet command</span>
<span class="w">	</span><span class="n">ata_io_wait</span><span class="p">(</span><span class="n">port</span><span class="p">);</span><span class="w"> </span><span class="c1">// I think we might need this delay, not sure, so keep this</span>
<span class="w"> </span>
<span class="w">        </span><span class="c1">// Wait for status</span>
<span class="w">	</span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">inb</span><span class="p">(</span><span class="n">port</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">COMMAND_REGISTER</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">((</span><span class="n">status</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x01</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"></span>
<span class="w">			</span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">status</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x80</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="p">(</span><span class="n">status</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x08</span><span class="p">))</span><span class="w"></span>
<span class="w">			</span><span class="k">break</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="n">ata_io_wait</span><span class="p">(</span><span class="n">port</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>

<span class="w">        </span><span class="c1">// Send command</span>
<span class="w">	</span><span class="n">outsw</span><span class="p">(</span><span class="n">port</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">DATA</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="kt">uint16_t</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="n">read_cmd</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="p">);</span><span class="w"></span>

<span class="w">        </span><span class="c1">// Read words</span>
<span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">sectors</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">                </span><span class="c1">// Wait until ready</span>
<span class="w">		</span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">inb</span><span class="p">(</span><span class="n">port</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">COMMAND_REGISTER</span><span class="p">);</span><span class="w"></span>
<span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">status</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x01</span><span class="p">)</span><span class="w"></span>
<span class="w">				</span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="w">			</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">status</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x80</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="p">(</span><span class="n">status</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x08</span><span class="p">))</span><span class="w"></span>
<span class="w">				</span><span class="k">break</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>

<span class="w">		</span><span class="kt">int</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">inb</span><span class="p">(</span><span class="n">port</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">LBA_HIGH</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">8</span><span class="w"></span>
<span class="w">		           </span><span class="o">|</span><span class="w"> </span><span class="n">inb</span><span class="p">(</span><span class="n">port</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">LBA_MID</span><span class="p">);</span><span class="w"> </span><span class="c1">// Get the size of transfer</span>

<span class="w">		</span><span class="n">insw</span><span class="p">(</span><span class="n">port</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">DATA</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="kt">uint16_t</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="p">((</span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="n">buffer</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mh">0x800</span><span class="p">),</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">2</span><span class="p">);</span><span class="w"> </span><span class="c1">// Read it</span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>

<span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h2><span id="Detecting_a_Medium.27s_Capacity"></span><span class="mw-headline" id="Detecting_a_Medium's_Capacity">Detecting a Medium's Capacity</span></h2>
<p>A medium is any media inserted in the ATAPI Drive, like a CD or a DVD. By using the 'SCSI Read Capacity' command, you can read the last LBA of the medium, then you calculate the medium's capacity using this relationship:
</p><p>Capacity = (Last LBA + 1) * Block Size;
</p><p>Last LBA and Block Size are returned after processing the command. Almost all CDs and DVDs use blocks with size of 2KB each.
</p><p>Processing this command goes in the following algorithm:
</p>
<ul><li>Selecting the Drive [Master/Slave].</li>
<li>Waiting 400ns for select to complete.</li>
<li>Setting FEATURES Register to 0 [PIO Mode].</li>
<li>Setting LBA1 and LBA2 Registers to 0x0008 [Number of Bytes will be returned].</li>
<li>Sending Packet Command, then Polling.</li>
<li>Sending the ATAPI Packet, then polling.  ATAPI packet must be 6 words long (12 bytes).</li>
<li>If there isn't an error, reading 4 Words [8 bytes] from the DATA Register.</li></ul>
<p>The ATAPI packet should be in this formulation:
</p><p><br />
</p>
<table border="1">

<tbody><tr>
<th>bit→<br />↓byte
</th>
<th width="50">7
</th>
<th width="50">6
</th>
<th width="50">5
</th>
<th width="50">4
</th>
<th width="50">3
</th>
<th width="50">2
</th>
<th width="50">1
</th>
<th width="50">0
</th></tr>
<tr>
<th>0
</th>
<td colspan="8" align="center">Operation code = 25h
</td></tr>
<tr>
<th>1
</th>
<td colspan="3" align="center"><b>LUN</b>
</td>
<td colspan="4" align="center">Reserved
</td>
<td align="center"><b>RelAdr</b>
</td></tr>
<tr>
<th>2
</th>
<td rowspan="4" colspan="8" align="center"><b>LBA</b> (MSB) <br /><br /><br /><br /> <b>LBA</b> (LSB)
</td></tr>
<tr>
<th>3
</th></tr>
<tr>
<th>4
</th></tr>
<tr>
<th>5
</th></tr>
<tr>
<th>6
</th>
<td colspan="8" align="center">Reserved
</td></tr>
<tr>
<th>7
</th>
<td colspan="8" align="center">Reserved
</td></tr>
<tr>
<th>8
</th>
<td colspan="7" align="center">Reserved
</td>
<td align="center"><b>PMI</b>
</td></tr>
<tr>
<th>9
</th>
<td colspan="8" align="center">Control
</td></tr>
<tr>
<th>10
</th>
<td colspan="8" align="center">Reserved*
</td></tr>
<tr>
<th>11
</th>
<td colspan="8" align="center">Reserved*
</td></tr></tbody></table>
<p>Note: The last two reserved fields are ATAPI specific.  They are not part of the SCSI command packet version.
</p><p>The special control fields in the CDB have the following meaning:
</p>
<ul><li><b>RelAdr</b> - indicates that the logical block address (LBA) value is relative (only used with <a href="https://wiki.osdev.org/index.php?title=SCSI_Linked_Commands&amp;action=edit&amp;redlink=1" class="new" title="SCSI Linked Commands (page does not exist)">linked commands</a>).</li>
<li><b>PMI</b> - partial medium indicator:
<ul><li>0 - return value for the last LBA</li>
<li>1 - return value for the last LBA after which a substantial delay in data transfer will be encountered (e.g., the current track or cylinder)</li></ul></li></ul>
<p>The target will return capacity data structured as follows:
</p>
<table border="1">

<tbody><tr>
<th>bit→<br />↓byte
</th>
<th width="50">7
</th>
<th width="50">6
</th>
<th width="50">5
</th>
<th width="50">4
</th>
<th width="50">3
</th>
<th width="50">2
</th>
<th width="50">1
</th>
<th width="50">0
</th></tr>
<tr>
<th>0–3
</th>
<td colspan="8" align="center">Returned LBA
</td></tr>
<tr>
<th>4–7
</th>
<td colspan="8" align="center">Block length in bytes
</td></tr></tbody></table>
<p>If there is an error after polling, there may be no medium inserted, so this command may be also used to detect whether there is a medium or not, and if there is a medium, its capacity is read.
</p>
<h2><span class="mw-headline" id="Operating_Theory">Operating Theory</span></h2>
<p>Quoting <a rel="nofollow" class="external text" href="http://suif.stanford.edu/~csapuntz/ide.html">The Guide to ATA/ATAPI documentation (stanford.edu)</a>
</p>
<blockquote>
<p><i>Hosts control ATAPI devices using SCSI command packets. The SCSI command packets are transported over the ATA interface, instead of the parallel SCSI bus. This cool hack is described in ATA/ATAPI-6.</i>
The set of SCSI command packets applicable to all SCSI devices is described in the <a rel="nofollow" class="external text" href="ftp://ftp.t10.org/t10/drafts/spc/spc-r11a.pdf">SCSI-3 Primary Commands PDF</a>. Again, ATAPI devices don't implement all of these, so it's best to consult the associated ATAPI spec for a device.
CD-ROM command packets were originally described in <a rel="nofollow" class="external text" href="http://suif.stanford.edu/~csapuntz/specs/INF-8020.PDF">INF-8020 PDF</a>. This document contains many inaccuracies in its description of the ATA bus interface, so please double check any statements against ATA/ATAPI-6. (Unfortunately, some of those inaccuracies were implemented!)<i></i>
</p>
</blockquote>
<h2><span class="mw-headline" id="Comments">Comments</span></h2>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<h3><span class="mw-headline" id="Articles">Articles</span></h3>
<ul><li><a href="ATA/ATAPI_Power_Management" title="ATA/ATAPI Power Management">ATA/ATAPI Power Management</a></li>
<li><a href="ATA/ATAPI_using_DMA" title="ATA/ATAPI using DMA">ATA/ATAPI using DMA</a></li>
<li><a href="Optical_Drive" title="Optical Drive">Optical Drive</a></li></ul>
<h3><span class="mw-headline" id="External_Links">External Links</span></h3>
<ul><li><a rel="nofollow" class="external free" href="http://www.t10.org/">http://www.t10.org/</a> -- T10, the group that creates the SCSI (and therefore ATAPI) command set.</li>
<li><a rel="nofollow" class="external free" href="http://www.t10.org/ftp/x3t9.2/document.87/87-106r0.txt">http://www.t10.org/ftp/x3t9.2/document.87/87-106r0.txt</a> -- Direct link to 1987 documentation of SCSI commands related to CD-ROMS. Old but useful.</li>
<li><a rel="nofollow" class="external free" href="http://www.ata-atapi.com">http://www.ata-atapi.com</a> -- Public Domain C driver sourcecode, including SATA, Busmatering DMA, ATAPI -- not perfect, but good.</li>
<li><a rel="nofollow" class="external text" href="https://web.archive.org/web/20130731111228/https://suif.stanford.edu/~csapuntz/ide.html">The Guide to ATA/ATAPI documentation</a></li>
<li><a rel="nofollow" class="external text" href="https://web.archive.org/web/20090203133714/http://suif.stanford.edu/~csapuntz/blackmagic.html">Old document about ATA/ATAPI errata</a></li>
<li><a rel="nofollow" class="external text" href="http://www.t13.org/Documents/UploadedDocuments/project/d0948r4c-ATA-2.pdf">ATA-2 draft</a> ATA-1 was HDD-only, ATA-2 enables CD-ROM support via ATAPI spec</li>
<li><a rel="nofollow" class="external text" href="https://archive.org/details/RedBookAudioRecordingCompactDiscDigitalAudioSystemIEC60908SecondEdition199902ISBN2831846382">ISO 60908:1999 CD-DA</a> aka Red Book</li>
<li><a rel="nofollow" class="external text" href="https://www.ecma-international.org/publications/files/ECMA-ST/Ecma-130.pdf">ECMA-130 CD-ROM</a> aka Yellow Book or ISO/IEC 10149:1995</li>
<li><a rel="nofollow" class="external text" href="https://web.archive.org/web/20041013175705/http://suif.stanford.edu/~csapuntz/specs/INF-8020.PDF">Draft of the original ATAPI CD-ROM spec (PDF)</a> Has partial list of CD-ROM ATAPI commands. <b>MANY</b> errors. If something in this document looks wrong to you, it <b>IS</b> wrong. It is still very informative.</li>
<li><a rel="nofollow" class="external free" href="http://www.osta.org/specs/pdf/udf201.pdf">http://www.osta.org/specs/pdf/udf201.pdf</a> -- UDF filesystem format PDF</li>
<li><a rel="nofollow" class="external free" href="http://www.osdever.net/downloads/docs/iso9660.zip">http://www.osdever.net/downloads/docs/iso9660.zip</a> -- ISO 9660 filesystem format</li>
<li><a rel="nofollow" class="external free" href="http://bmrc.berkeley.edu/people/chaffee/jolspec.html">http://bmrc.berkeley.edu/people/chaffee/jolspec.html</a> -- Joliet filesystem specification</li>
<li><a rel="nofollow" class="external free" href="http://www.osdever.net/downloads/docs/susp112.zip">http://www.osdever.net/downloads/docs/susp112.zip</a> -- Rock Ridge Filesystem Sharing Protocol (POSIX)</li>
<li><a rel="nofollow" class="external free" href="http://www.osdever.net/downloads/docs/rrip112.zip">http://www.osdever.net/downloads/docs/rrip112.zip</a> -- Rock Ridge Interchange specification (POSIX)</li>
<li><a rel="nofollow" class="external free" href="https://ata.wiki.kernel.org/index.php/Developer_Resources">https://ata.wiki.kernel.org/index.php/Developer_Resources</a> -- Overview of ATA, SATA, ATAPI and related specifications</li></ul>
<!-- 
NewPP limit report
Cached time: 20250211122517
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.063 seconds
Real time usage: 1.103 seconds
Preprocessor visited node count: 90/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 25919/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:2246-0!canonical and timestamp 20250211122516 and revision id 28973.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=ATAPI&amp;oldid=28973">https://wiki.osdev.org/index.php?title=ATAPI&amp;oldid=28973</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:ATA" title="Category:ATA">ATA</a></li><li><a href="./Category:Storage" title="Category:Storage">Storage</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=ATAPI" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="ATAPI#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="ATAPI" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:ATAPI" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="ATAPI"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ATAPI&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ATAPI&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/ATAPI" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/ATAPI" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ATAPI&amp;oldid=28973" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ATAPI&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 6 June 2024, at 17:21.</li>
	<li id="footer-info-0">This page has been accessed 8,714 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=ATAPI&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.063","walltime":"1.103","ppvisitednodes":{"value":90,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":25919,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250211122517","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":1200});});</script>
</body>
</html>