<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Bochs VBE Extensions - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"876a0f18862c59c22ddbb088","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Bochs_VBE_Extensions","wgTitle":"Bochs VBE Extensions","wgCurRevisionId":20136,"wgRevisionId":20136,"wgArticleId":2231,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Video","VGA"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Bochs_VBE_Extensions","wgRelevantArticleId":2231,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],
"wgRedirectedFrom":"Bochs_VBE_extensions","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgInternalRedirectTargetUrl":"/Bochs_VBE_Extensions","wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["mediawiki.action.view.redirect","site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook",
"ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<link rel="canonical" href="Bochs_VBE_Extensions"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Bochs_VBE_Extensions rootpage-Bochs_VBE_Extensions skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Bochs VBE Extensions</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"><span class="mw-redirectedfrom">(Redirected from <a href="https://wiki.osdev.org/index.php?title=Bochs_VBE_extensions&amp;redirect=no" class="mw-redirect" title="Bochs VBE extensions">Bochs VBE extensions</a>)</span></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Bochs_VBE_extensions#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Bochs_VBE_extensions#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>The <a href="Bochs" title="Bochs">Bochs</a> VGA BIOS supports, to an extent, the <a href="VBE" class="mw-redirect" title="VBE">VBE</a> specification. Since Bochs only emulates a VGA card down to the hardware level (and a Cirrus graphics card if you enable it, but that is not tied in with the Bochs VBE extensions), it emulates very simple graphics hardware that the VBE BIOS can drive. The advantage of this is that if you are running your OS in Bochs (or QEMU, which uses the Bochs VGA BIOS, or even VirtualBox), you can use this emulated hardware to directly set video modes without using VBE (which would require real mode or v86).
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Bochs_VBE_extensions#Overview"><span class="tocnumber">1</span> <span class="toctext">Overview</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Bochs_VBE_extensions#BGA_versions"><span class="tocnumber">2</span> <span class="toctext">BGA versions</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Bochs_VBE_extensions#Programming_the_BGA"><span class="tocnumber">3</span> <span class="toctext">Programming the BGA</span></a>
<ul>
<li class="toclevel-2 tocsection-4"><a href="Bochs_VBE_extensions#Writing_registers"><span class="tocnumber">3.1</span> <span class="toctext">Writing registers</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="Bochs_VBE_extensions#Reading_registers"><span class="tocnumber">3.2</span> <span class="toctext">Reading registers</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="Bochs_VBE_extensions#Checking_availability"><span class="tocnumber">3.3</span> <span class="toctext">Checking availability</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Bochs_VBE_extensions#Setting_display_resolution_and_bit_depth"><span class="tocnumber">3.4</span> <span class="toctext">Setting display resolution and bit depth</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="Bochs_VBE_extensions#Memory_layout_of_video_modes"><span class="tocnumber">3.5</span> <span class="toctext">Memory layout of video modes</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Bochs_VBE_extensions#Using_banked_mode"><span class="tocnumber">3.6</span> <span class="toctext">Using banked mode</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="Bochs_VBE_extensions#Using_a_linear_frame_buffer_(LFB)"><span class="tocnumber">3.7</span> <span class="toctext">Using a linear frame buffer (LFB)</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="Bochs_VBE_extensions#Clearing_display_memory"><span class="tocnumber">3.8</span> <span class="toctext">Clearing display memory</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="Bochs_VBE_extensions#Finding_out_capabilities"><span class="tocnumber">3.9</span> <span class="toctext">Finding out capabilities</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="Bochs_VBE_extensions#8-bit_DAC"><span class="tocnumber">3.10</span> <span class="toctext">8-bit DAC</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="Bochs_VBE_extensions#Virtual_display"><span class="tocnumber">3.11</span> <span class="toctext">Virtual display</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="Bochs_VBE_extensions#Example_code"><span class="tocnumber">3.12</span> <span class="toctext">Example code</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-16"><a href="Bochs_VBE_extensions#External_Links"><span class="tocnumber">4</span> <span class="toctext">External Links</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Overview">Overview</span></h2>
<p>The Bochs emulated graphics hardware (henceforth called BGA for Bochs Graphics Adaptor) is accessed via two 16-bit IO-ports. The first one is an index port, the second one a data port (comparable to how the VGA handles its sets of registers). Via these ports it is possible to enable or disable the VBE extensions, change the screen resolution and bit depth, and manage a larger virtual screen. There are six versions of the BGA (0xB0C0 through 0xB0C5), but if you use the latest version of Bochs you only need to concern yourself with the latest one (0xB0C5). QEMU (with the -std-vga command line argument) also uses the latest version.
</p><p>The Bochs sources define in vga.h, located in the subdirectory iodev/, a number of defines that are useful for programming the BGA. The names of these defines all start with VBE_DISPI. They are used in the sections below, with their numerical value between parentheses.
</p>
<h2><span class="mw-headline" id="BGA_versions">BGA versions</span></h2>
<p>As Bochs has evolved, so has the BGA. Six versions of the BGA have existed, of which 0xB0C5 is the current version (as of 2009, Bochs version 2.4). The main features of each version:
</p>
<ul><li>0xB0C0 - setting X and Y resolution and bit depth (8 BPP only), banked mode</li>
<li>0xB0C1 - virtual width and height, X and Y offset</li>
<li>0xB0C2 - 15, 16, 24 and 32 BPP modes, support for linear frame buffer, support for retaining memory contents on mode switching</li>
<li>0xB0C3 - support for getting capabilities, support for using 8 bit DAC</li>
<li>0xB0C4 - VRAM increased to 8 MB</li>
<li>0xB0C5 - <a rel="nofollow" class="external text" href="https://marc.info/?l=bochs-cvs&amp;m=123287460501516">VRAM increased to 16 MB?</a> [TODO: verify and check for other changes]</li></ul>
<p>[TODO: if and when 4BPP modes are supported]
[TODO: if and when VGA attribute controller (AC) is supported]
</p>
<h2><span class="mw-headline" id="Programming_the_BGA">Programming the BGA</span></h2>
<h3><span class="mw-headline" id="Writing_registers">Writing registers</span></h3>
<p>To write an index/data pair to one of the BGA registers, first write its index value to the 16-bit IO-port VBE_DISPI_IOPORT_INDEX (0x01CE), followed by writing the data value to the 16-bit IO-port VBE_DISPI_IOPORT_DATA (0x01CF). The BGA supports 10 different index values (0 through 9):
</p>
<ul><li>VBE_DISPI_INDEX_ID (0)</li>
<li>VBE_DISPI_INDEX_XRES (1)</li>
<li>VBE_DISPI_INDEX_YRES (2)</li>
<li>VBE_DISPI_INDEX_BPP (3)</li>
<li>VBE_DISPI_INDEX_ENABLE (4)</li>
<li>VBE_DISPI_INDEX_BANK (5)</li>
<li>VBE_DISPI_INDEX_VIRT_WIDTH (6)</li>
<li>VBE_DISPI_INDEX_VIRT_HEIGHT (7)</li>
<li>VBE_DISPI_INDEX_X_OFFSET (8)</li>
<li>VBE_DISPI_INDEX_Y_OFFSET (9)</li></ul>
<p>In order to change the contents of registers 1-3 (VBE_DISPI_INDEX_XRES, VBE_DISPI_INDEX_YRES, VBE_DISPI_INDEX_BPP) the VBE extensions must be disabled first. To do so, write the value VBE_DISPI_DISABLED (0x00) to VBE_DISPI_INDEX_ENABLE (4). The changes are not visible until the VBE extensions are enabled again. To do so, write the value VBE_DISPI_ENABLED (0x01) to the same register (see also note below on enabling the LFB).
</p>
<h3><span class="mw-headline" id="Reading_registers">Reading registers</span></h3>
<p>To read a register, first write the index value to VBE_DISPI_IOPORT_INDEX (0x01CE), then read the 16-bit value from VBE_DISPI_IOPORT_DATA (0x01CF). The value returned depends on the specific register that is queried. [TODO: check and describe, especially _ID and _ENABLE, others seem trivial]
</p>
<h3><span class="mw-headline" id="Checking_availability">Checking availability</span></h3>
<p>To check whether the BGA is available, read the value from VBE_DISPI_INDEX_ID (0). If it equals VBE_DISPI_ID5 (0xB0C5) the latest version of the BGA is present. If it returns a value of 0xB0C0 through 0xB0C3, you have an old version of Bochs and/or the Bochs VGA BIOS.
</p><p>If for some reason you want Bochs to emulate an older version of the BGA, you can write the desired version to VBE_DISPI_INDEX_ID (0). If succesful, reading the register again will return the value just set. This is used by the Bochs VGA BIOS to ensure it is run with the right version of Bochs. If done from an application (or your OS), this will break compatibility with the Bochs VBE BIOS, which expects the latest version.
</p>
<h3><span class="mw-headline" id="Setting_display_resolution_and_bit_depth">Setting display resolution and bit depth</span></h3>
<p>Most likely, setting the display resolution and bit depth is all you need. To do so, disable the VBE extensions (see above), write the X resolution, Y resolution and BPP to their respective registers (VBE_DISPI_INDEX_XRES (1), VBE_DISPI_INDEX_YRES (2) and VBE_DISPI_INDEX_BPP (3)) and enable the VBE extensions. Since the BGA is not real hardware, X and Y resolutions can be set at will up to a maximum horizontal resolution (depending on your version of Bochs) of either 1024 or 1600 (VBE_DISPI_MAX_XRES) and a maximum vertical resolution of either 768 or 1200 (VBE_DISPI_MAX_YRES). It seems that both Bochs and QEMU can use about any resolutions with a few restrictions. In QEMU the X resolution must be divisible by 8. [TODO: Describe how Bochs handle different X resolutions. It can crash with segmentation fault on various X resolutions, so it is difficult to test]. The Y resolution can be any number from 1 to maximum in both Bochs and QEMU. The bit depth needs to be one of the following:
</p>
<ul><li>VBE_DISPI_BPP_4 (0x04)</li>
<li>VBE_DISPI_BPP_8 (0x08)</li>
<li>VBE_DISPI_BPP_15 (0x0F)</li>
<li>VBE_DISPI_BPP_16 (0x10)</li>
<li>VBE_DISPI_BPP_24 (0x18)</li>
<li>VBE_DISPI_BPP_32 (0x20)</li></ul>
<p>If you try to set an invalid resolution (greater than the maximum or an irregular X resolution) or bit depth, usually nothing happens. The current video mode is preserved. In some cases Bochs will crash with a segmentation fault if you set an invalid X resolution, so only use standard ones. [TODO: Check latest CVS version of Bochs and search their bug tracker]. You can always read the current resolution and bit depth from their respective registers. When you have set a resolution it is a good idea to read it back and check whether your new resolution is really set. You should do that before you enable the BGA to minimize the chance of your emulator crashing. [TODO: Check what happens when the first resolution you set is invalid.]
</p>
<h3><span class="mw-headline" id="Memory_layout_of_video_modes">Memory layout of video modes</span></h3>
<p>In all modes the first byte represents the top left of the screen. A formula to calculate the video memory offset from a pixel coordinate is: <tt>offset = (Y * X-resolution + X) * &lt;some-factor&gt;</tt>. The factor varies using the different bit depths. The 4 and 8 BPP modes are palette modes. Read more about programming the attribute controller and DAC palettes in <a href="./Category:VGA" title="Category:VGA">VGA documents</a>. The other modes are using the colour value directly.
</p><p>In 4 BPP you have 16 colours. The pixel colour is used an index to the attribute controller, which again points to the DAC, which in turn gives an 18 bit colour (6 bits each for red, green and blue) that is shown. The memory is layout like this: The first byte is the colour bit 0 of pixels 0-7. The second byte is the colour bit 1 of pixels 0-7, and so forth. You can access 8 pixels at a time using longwords (32 bits).
</p><p><a href="./File:Linear_video_memory_layout_4bpp.png" class="image"><img alt="Linear video memory layout 4bpp.png" src="images/8/84/Linear_video_memory_layout_4bpp.png" decoding="async" width="400" height="60" data-file-width="400" data-file-height="60" /></a>
</p><p>In 8 BPP you have 256 colours. The pixel colour is sent to the DAC, which gives an 18 bit colour that is shown. The memory layout is very simple. Each pixel is exactly one byte.
</p><p><a href="./File:Linear_video_memory_layout_8bpp.png" class="image"><img alt="Linear video memory layout 8bpp.png" src="images/2/26/Linear_video_memory_layout_8bpp.png" decoding="async" width="400" height="30" data-file-width="400" data-file-height="30" /></a>
</p><p>In 15 BPP each pixel is easiest accessed as words (16 bits). There are 5 bits each colour component and the last bit is ignored.
</p><p><a href="./File:Linear_video_memory_layout_15bpp.png" class="image"><img alt="Linear video memory layout 15bpp.png" src="images/5/52/Linear_video_memory_layout_15bpp.png" decoding="async" width="380" height="30" data-file-width="380" data-file-height="30" /></a>
</p><p>In 16 BPP each pixel is easiest accessed as words (16 bits). There are 5 bits for the red and blue components and 6 bits for green. This makes sense, because the human eye is more sensitive to green colours.
</p><p><a href="./File:Linear_video_memory_layout_16bpp.png" class="image"><img alt="Linear video memory layout 16bpp.png" src="images/e/ea/Linear_video_memory_layout_16bpp.png" decoding="async" width="380" height="30" data-file-width="380" data-file-height="30" /></a>
</p><p>In 24 BPP each pixel is 3 bytes. There is one byte for each component. The colour components is blue first, then green, then red.
</p><p><a href="./File:Linear_video_memory_layout_24bpp.png" class="image"><img alt="Linear video memory layout 24bpp.png" src="images/e/e4/Linear_video_memory_layout_24bpp.png" decoding="async" width="400" height="30" data-file-width="400" data-file-height="30" /></a>
</p><p>In 32 BPP each pixel is 4 bytes and easiest accessed as longwords (32 bits). The fourth byte is ignored. The colour components is layout like in 24 BPP. Accessing pixels as longwords the colour should be defined as 0x00RRGGBB.
</p><p><a href="./File:Linear_video_memory_layout_32bpp.png" class="image"><img alt="Linear video memory layout 32bpp.png" src="images/6/65/Linear_video_memory_layout_32bpp.png" decoding="async" width="400" height="30" data-file-width="400" data-file-height="30" /></a>
</p>
<h3><span class="mw-headline" id="Using_banked_mode">Using banked mode</span></h3>
<p>When using banked mode, the BGA uses a 64Kb bank size (VBE_DISPI_BANK_SIZE_KB) starting at address 0xA0000 (VBE_DISPI_BANK_ADDRESS). Banked mode is the default mode, so when enabling the VBE extensions without explicitly telling the BGA to use a linear frame buffer, the BGA enables banked mode. To set the bank to use, write the bank number to the bank register (VBE_DISPI_INDEX_BANK (5)). 
</p>
<h3><span id="Using_a_linear_frame_buffer_.28LFB.29"></span><span class="mw-headline" id="Using_a_linear_frame_buffer_(LFB)">Using a linear frame buffer (LFB)</span></h3>
<p>When using a linear framebuffer, the BGA exposes all of the video memory in a single linearly addressable section of memory. The address of the framebuffer is not fixed, and must be read from the first <a href="PCI" title="PCI">PCI</a> base address register (BAR 0 of device 0x1234:0x1111). To enable the linear framebuffer, use the VBE_DISPI_LFB_ENABLED flag (0x40) when enabling the BGA in conjunction with the VBE_DISPI_ENABLED flag. 
</p><p>Unlike Bochs, QEMU does not necessarily pay attention to the VBE_DISPI_LFB_ENABLED flag with respect to banked memory access, allowing both the linear framebuffer and banked memory to be used at all times. Bochs will not honour requests to change the memory bank when the linear framebuffer is enabled, and it will similarly ignore any writes made to the memory bank.
</p><p><b>Note:</b> In older versions of Bochs and QEMU, the framebuffer was fixed at 0xE0000000, and modern versions will use that address when emulating ISA-only systems. <b>It is highly inadvisable to make assumptions about the address of the linear framebuffer.</b> It should always be read from the BGA's PCI BAR0.
</p>
<h3><span class="mw-headline" id="Clearing_display_memory">Clearing display memory</span></h3>
<p>When enabling the VBE extensions, Bochs clears the video memory (i.e. sets all bytes to 0). To prevent this from happening, use the VBE_DISPI_NOCLEARMEM flag (0x80) when enabling the VBE extensions (so write a value of VBE_DISPI_ENABLED | VBE_DISPI_NOCLEARMEM (0x81) for banked mode and VBE_DISPI_ENABLED | VBE_DISPI_LFB_ENABLED | VBE_DISPI_NOCLEARMEM (0xC1) for LFB).
</p>
<h3><span class="mw-headline" id="Finding_out_capabilities">Finding out capabilities</span></h3>
<p>Based on source code examination for Bochs (iodev/vga.cc) setting VBE_DISPI_GETCAPS in VBE_DISPI_INDEX_ENABLE makes the VBE_DISPI_INDEX_ (XRES / YRES / BPP) fields return their maximum values when read instead of the current values.
</p>
<h3><span class="mw-headline" id="8-bit_DAC">8-bit DAC</span></h3>
<p>The default palette DAC is a 3x6 bit dac; it returns a value between 0 and 63 for each color. Setting the VBE_DISPI_8BIT_DAC bit in VBE_DISPI_INDEX_ENABLE changes this to a 3x8 bit dac and converts the palette to the appropriate values. Resetting the bit moves them back again.
</p>
<h3><span class="mw-headline" id="Virtual_display">Virtual display</span></h3>
<p>The Bochs adapter allows a virtual display that is larger than the physical one. The video memory is normally your screen width wide and at least as high as your vertical screen size, the height. The actual video memory is larger and the remainder is seen as a vertical extension.
</p><p>Having this as a horizontal extension can be very useful. You can use this to make horizontal and vertical scrolling effects very cheap. You can also make a virtual display, double buffering and lots of other ideas.
</p><p>The mechanism is used that the memory is a virtual display starting at location (0,0) with a size specified by the virtual width. The height is implicitly as large as it can be within the video memory. Suppose you set the virtual width to be 1024 in a 32-bpp mode (4 bytes per pixel) on a 16-meg Bochs card. That makes the vertical height 4096.
</p><p>You can then specify where the video card should start reading the memory using the X and Y offset. 
</p><p>The variables taking care of this:
</p>
<ul><li>VBE_DISPI_INDEX_VIRT_WIDTH is the virtual width.</li>
<li>VBE_DISPI_INDEX_VIRT_HEIGHT is the virtual height, currently not implemented. Reasoning is above.</li>
<li>VBE_DISPI_INDEX_X_OFFSET is the X offset for displaying.</li>
<li>VBE_DISPI_INDEX_Y_OFFSET is the Y offset for displaying.</li></ul>
<h3><span class="mw-headline" id="Example_code">Example code</span></h3>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">void</span><span class="w"> </span><span class="nf">BgaWriteRegister</span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="n">IndexValue</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="n">DataValue</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">outpw</span><span class="p">(</span><span class="n">VBE_DISPI_IOPORT_INDEX</span><span class="p">,</span><span class="w"> </span><span class="n">IndexValue</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">outpw</span><span class="p">(</span><span class="n">VBE_DISPI_IOPORT_DATA</span><span class="p">,</span><span class="w"> </span><span class="n">DataValue</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="nf">BgaReadRegister</span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="n">IndexValue</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">outpw</span><span class="p">(</span><span class="n">VBE_DISPI_IOPORT_INDEX</span><span class="p">,</span><span class="w"> </span><span class="n">IndexValue</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">inpw</span><span class="p">(</span><span class="n">VBE_DISPI_IOPORT_DATA</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kt">int</span><span class="w"> </span><span class="nf">BgaIsAvailable</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">BgaReadRegister</span><span class="p">(</span><span class="n">VBE_DISPI_INDEX_ID</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">VBE_DISPI_ID4</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kt">void</span><span class="w"> </span><span class="nf">BgaSetVideoMode</span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">Width</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">Height</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">BitDepth</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">UseLinearFrameBuffer</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">ClearVideoMemory</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">BgaWriteRegister</span><span class="p">(</span><span class="n">VBE_DISPI_INDEX_ENABLE</span><span class="p">,</span><span class="w"> </span><span class="n">VBE_DISPI_DISABLED</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">BgaWriteRegister</span><span class="p">(</span><span class="n">VBE_DISPI_INDEX_XRES</span><span class="p">,</span><span class="w"> </span><span class="n">Width</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">BgaWriteRegister</span><span class="p">(</span><span class="n">VBE_DISPI_INDEX_YRES</span><span class="p">,</span><span class="w"> </span><span class="n">Height</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">BgaWriteRegister</span><span class="p">(</span><span class="n">VBE_DISPI_INDEX_BPP</span><span class="p">,</span><span class="w"> </span><span class="n">BitDepth</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">BgaWriteRegister</span><span class="p">(</span><span class="n">VBE_DISPI_INDEX_ENABLE</span><span class="p">,</span><span class="w"> </span><span class="n">VBE_DISPI_ENABLED</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">        </span><span class="p">(</span><span class="n">UseLinearFrameBuffer</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">VBE_DISPI_LFB_ENABLED</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"></span>
<span class="w">        </span><span class="p">(</span><span class="n">ClearVideoMemory</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="n">VBE_DISPI_NOCLEARMEM</span><span class="p">));</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kt">void</span><span class="w"> </span><span class="nf">BgaSetBank</span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="n">BankNumber</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">BgaWriteRegister</span><span class="p">(</span><span class="n">VBE_DISPI_INDEX_BANK</span><span class="p">,</span><span class="w"> </span><span class="n">BankNumber</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="External_Links">External Links</span></h2>
<p><a rel="nofollow" class="external text" href="http://cvs.savannah.nongnu.org/viewvc/*checkout*/vgabios/vgabios/vbe_display_api.txt?revision=1.14">Specification</a>
</p>
<!-- 
NewPP limit report
Cached time: 20250212015937
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.041 seconds
Real time usage: 0.172 seconds
Preprocessor visited node count: 67/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 6671/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:2231-0!canonical and timestamp 20250212015937 and revision id 20136.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Bochs_VBE_Extensions&amp;oldid=20136">https://wiki.osdev.org/index.php?title=Bochs_VBE_Extensions&amp;oldid=20136</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Video" title="Category:Video">Video</a></li><li><a href="./Category:VGA" title="Category:VGA">VGA</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Bochs+VBE+Extensions" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Bochs_VBE_extensions#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Bochs_VBE_Extensions" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:Bochs_VBE_Extensions" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Bochs_VBE_Extensions"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Bochs_VBE_Extensions&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Bochs_VBE_Extensions&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Bochs_VBE_Extensions" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Bochs_VBE_Extensions" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Bochs_VBE_Extensions&amp;oldid=20136" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Bochs_VBE_Extensions&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 10 January 2017, at 05:18.</li>
	<li id="footer-info-0">This page has been accessed 15,825 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Bochs_VBE_Extensions&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.041","walltime":"0.172","ppvisitednodes":{"value":67,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":6671,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250212015937","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":106});});</script>
</body>
</html>