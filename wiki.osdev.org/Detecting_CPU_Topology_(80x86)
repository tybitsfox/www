<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Detecting CPU Topology (80x86) - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"f872afe2f2f28d15a265ff2b","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Detecting_CPU_Topology_(80x86)","wgTitle":"Detecting CPU Topology (80x86)","wgCurRevisionId":28239,"wgRevisionId":28239,"wgArticleId":2973,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","X86 CPU","Hardware Detection"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Detecting_CPU_Topology_(80x86)","wgRelevantArticleId":2973,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,
"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Detecting_CPU_Topology_80x86 rootpage-Detecting_CPU_Topology_80x86 skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Detecting CPU Topology (80x86)</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Detecting_CPU_Topology_(80x86)#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Detecting_CPU_Topology_(80x86)#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>For certain kinds of optimizations, sometimes it's useful for applications and OSs to detect CPU topology and adjust (optimize) its behaviour accordingly.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Detecting_CPU_Topology_(80x86)#Uses"><span class="tocnumber">1</span> <span class="toctext">Uses</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Detecting_CPU_Topology_(80x86)#Detecting_CPU_Topology"><span class="tocnumber">2</span> <span class="toctext">Detecting CPU Topology</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Detecting_CPU_Topology_(80x86)#General_Steps"><span class="tocnumber">3</span> <span class="toctext">General Steps</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="Detecting_CPU_Topology_(80x86)#Using_CPUID"><span class="tocnumber">4</span> <span class="toctext">Using CPUID</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="Detecting_CPU_Topology_(80x86)#CPUID_eax=0x00000001"><span class="tocnumber">4.1</span> <span class="toctext">CPUID eax=0x00000001</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="Detecting_CPU_Topology_(80x86)#INTEL:_CPUID_eax=0x0000000B"><span class="tocnumber">4.2</span> <span class="toctext">INTEL: CPUID eax=0x0000000B</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Detecting_CPU_Topology_(80x86)#INTEL:_CPUID_eax=0x00000004"><span class="tocnumber">4.3</span> <span class="toctext">INTEL: CPUID eax=0x00000004</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="Detecting_CPU_Topology_(80x86)#AMD:_CPUID_eax=0x80000008"><span class="tocnumber">4.4</span> <span class="toctext">AMD: CPUID eax=0x80000008</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Detecting_CPU_Topology_(80x86)#AMD:_CPUID_eax=0x00000001"><span class="tocnumber">4.5</span> <span class="toctext">AMD: CPUID eax=0x00000001</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="Detecting_CPU_Topology_(80x86)#Managing_CPU_Topology"><span class="tocnumber">4.6</span> <span class="toctext">Managing CPU Topology</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="Detecting_CPU_Topology_(80x86)#Cache_Topology"><span class="tocnumber">5</span> <span class="toctext">Cache Topology</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="Detecting_CPU_Topology_(80x86)#See_Also"><span class="tocnumber">6</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-13"><a href="Detecting_CPU_Topology_(80x86)#Articles"><span class="tocnumber">6.1</span> <span class="toctext">Articles</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Uses">Uses</span></h2>
<p>CPU Topology data is useful for initializing your physical memory manager, especially information about NUMA domains and the cache. This means that you may wish to build the topology tree before you have a fully functioning memory allocator. Further down the line, this information will be of importance to your <a href="Scheduler" class="mw-redirect" title="Scheduler">scheduler</a>.
</p>
<h2><span class="mw-headline" id="Detecting_CPU_Topology">Detecting CPU Topology</span></h2>
<p>For complete CPU topology, there are 4 levels to consider:
</p>
<ul><li>Which logical CPU within a core (implemented, for example, by Intel's hyperthreading)</li>
<li>Which core within a chip</li>
<li>Which chip within a NUMA domain</li>
<li>Which <a href="Multiprocessing#NUMA_.28Non-Uniform_Memory_Access.29" title="Multiprocessing">NUMA</a> domain</li></ul>
<p>For convenience, this can be expressed as a colon-separated ID. For example, "CPU 3:2:1:0" would be logical CPU #0 in core #1 of chip/package number 2, in NUMA domain #3.
</p>
<h2><span class="mw-headline" id="General_Steps">General Steps</span></h2>
<p>To begin with, the ACPI <a href="MADT" title="MADT">MADT</a> table or the MP Specification table should be used to determine the APIC IDs for all CPUs. To better organize the information, a table of structures can be created that contains the information that is different for each CPU (e.g. APIC ID, topology information, etc.). This "CPU info" structure could include a pointer to a separate "CPU description" structure that stores information that can be the same for different CPUs (e.g. vendor, family/model/stepping, brand string, feature flags, cache sizes, etc). 
</p><p>To detect NUMA domain information the ACPI <a href="SRAT" title="SRAT">SRAT</a> table (System Resource Affinity Table) has to be used. First, preset the "NUMA domain" field for each CPU to "unknown" (in case the CPU isn't mentioned in the SRAT table). Then, for each entry in the SRAT table you determine if it's a CPU or memory, and if the entry is a CPU the 'APIC ID' field is used to determine which CPU and the 'proximity domain' field to determine which NUMA domain that CPU is in; and set the NUMA domain for that CPU. Note that there are 2 different structures in the SRAT table - one for 8-bit local APIC IDs and one for 32-bit APIC IDs, and if you support x2APIC you need to use both.
</p><p>To get nice clean results in the later steps, the list of CPUs should be sorted now - in order of NUMA domain, each NUMA domain in order of APIC ID.
</p><p>For cores and logical CPUs; for each CPU, CPUID should determine:
</p>
<ul><li>Number of bits in the APIC ID that are used to identify which logical CPU</li>
<li>Number of bits in the APIC ID that are used to identify which core</li></ul>
<p>The values are used for a set of calculations:
</p>
<ul><li>logical_CPU_number_within_core = APIC_ID &amp; ( (1 &lt;&lt; logical_CPU_bits) -1)</li>
<li>core_number_within_chip = (APIC_ID &gt;&gt; logical_CPU_bits) &amp; ( (1 &lt;&lt; core_bits) -1)</li>
<li>chip_ID = APIC_ID &amp; ~( (1 &lt;&lt; (logical_CPU_bits+core_bits) ) -1)</li></ul>
<p>How to use CPUID to determine these values is described below in the "Using CPUID" section. It should be noted that you only need to obtain 2 values: "logical_CPU_bits" and "core_bits".
</p><p>The "chip ID" is a temporary value that you could discard later.
</p><p>These calculations should be done separately for each logical CPU because it's theoretically possible for different physical chips in the same computer to use APIC ID bits differently.
</p><p>Once you've done these calculations the "chip number within NUMA domain" can be determined. All CPUs that have the same "chip ID" and the same NUMA domain are on the same chip.
</p><p>For example:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="w">    </span><span class="k">for</span><span class="p">(</span><span class="n">domain</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">domain</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">highest_domain</span><span class="p">;</span><span class="w"> </span><span class="n">domain</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">chip_number</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="k">for</span><span class="p">(</span><span class="n">firstCPU</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">firstCPU</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">total_CPUs</span><span class="p">;</span><span class="w"> </span><span class="n">firstCPU</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">            </span><span class="k">if</span><span class="p">(</span><span class="w"> </span><span class="n">CPU_info_table</span><span class="p">[</span><span class="n">firstCPU</span><span class="p">].</span><span class="n">domain</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">domain</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">                </span><span class="k">if</span><span class="p">(</span><span class="w"> </span><span class="n">CPU_info_table</span><span class="p">[</span><span class="n">firstCPU</span><span class="p">].</span><span class="n">chipNumber</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">-1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">                    </span><span class="n">CPU_info_table</span><span class="p">[</span><span class="n">firstCPU</span><span class="p">].</span><span class="n">chipNumber</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">chip_number</span><span class="p">;</span><span class="w"></span>
<span class="w">                    </span><span class="n">chipID</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CPU_info_table</span><span class="p">[</span><span class="n">firstCPU</span><span class="p">].</span><span class="n">chipID</span><span class="p">;</span><span class="w"></span>
<span class="w">                    </span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">firstCPU</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">total_CPUs</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">                        </span><span class="k">if</span><span class="p">(</span><span class="w"> </span><span class="n">CPU_info_table</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">domain</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">domain</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">                            </span><span class="k">if</span><span class="p">(</span><span class="w"> </span><span class="n">CPU_info_table</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">chipID</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">chipID</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">                                </span><span class="n">CPU_info_table</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">chipNumber</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">chip_number</span><span class="p">;</span><span class="w"></span>
<span class="w">                            </span><span class="p">}</span><span class="w"></span>
<span class="w">                        </span><span class="p">}</span><span class="w"></span>
<span class="w">                    </span><span class="p">}</span><span class="w"></span>
<span class="w">                </span><span class="p">}</span><span class="w"></span>
<span class="w">                </span><span class="n">chipNumber</span><span class="o">++</span><span class="p">;</span><span class="w"></span>
<span class="w">            </span><span class="p">}</span><span class="w"></span>
<span class="w">        </span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
</pre></div>
<p>There's a bit of strangeness which should be explained here. In general, it doesn't make too much sense for the same chip to be in different NUMA domains. However, when Intel designed x2APIC they decided that Logical APIC ID (which shouldn't be confused with the "APIC ID") and the "Destination Format Register" would be hardwired; and that "Logical Destination Mode" would only support "cluster model". They decided that the highest bits of the Logical APIC ID would determine which "group of CPUs" and the lowest 4 bits of the Logical APIC ID would determine which CPU within the group. The end result is that, if a chip has more than 16 logical CPUs it will be split into different NUMA domains. For the algorithm above, this case is treated as separate chips in different NUMA domains (even though it is technically one physical chip spread across multiple NUMA domains). This is deliberate, as it avoids complications everywhere else (in the APIC/interrupt handling code, in the scheduler, etc).
</p>
<h2><span class="mw-headline" id="Using_CPUID">Using CPUID</span></h2>
<p>From the "General Steps" section above, we need to obtain 2 values: "logical_CPU_bits" and "core_bits".
</p><p>There are several different CPUID functions that are useful for detecting CPU topology. They are shown in order below.
</p>
<h3><span id="CPUID_eax.3D0x00000001"></span><span class="mw-headline" id="CPUID_eax=0x00000001">CPUID eax=0x00000001</span></h3>
<p>This is the first step. Check if the "HTT" flag is set. If the HTT flag is clear (or if the CPU doesn't support CPUID) then it's an old single-core CPU without hyper-threading. In that case "logical_CPU_bits = 0" and "core_bits = 0" and you're done.
</p><p>Otherwise (if the "HTT" flag is set), you want to get the "count" field from EBX bits 16 to 23. You (might) need it later.
</p>
<h3><span id="INTEL:_CPUID_eax.3D0x0000000B"></span><span class="mw-headline" id="INTEL:_CPUID_eax=0x0000000B">INTEL: CPUID eax=0x0000000B</span></h3>
<p>For Intel CPUs (and <u>not</u> AMD), this CPUID function tells you "Number of bits to shift right APIC ID to get next level APIC ID", and needs to be used twice. The first time (with ECX=0) it tells you how many bits of the APIC ID is used to identify the logical CPU within each core (logical_CPU_bits). The second time (with ECX=1) it tells you how many bits of the APIC ID is used to identify the core and logical CPU within the chip, and to get "core_bits" from this value you subtract "logical_CPU_bits" from it.
</p>
<h3><span id="INTEL:_CPUID_eax.3D0x00000004"></span><span class="mw-headline" id="INTEL:_CPUID_eax=0x00000004">INTEL: CPUID eax=0x00000004</span></h3>
<p>For Intel CPUs (and <u>not</u> AMD), if "CPUID eax=0x0000000B" wasn't supported then this is the next CPUID function to try. You're only interested in EAX bits 26 to 31, which tells you the number of APIC IDs reserved for this chip. The count field from earlier tells you the max number of logical CPUs in a package, whereas (EAX &gt;&gt; 26) &amp; 0x3F from this function tells you the maximum number of cores in a package, -1. Hence, to get "logical_CPU_bits" and "core_bits", write a function that counts the number of left-shifts to get 0, which is the number of bits to represent a number. core_bits is func((EAX &gt;&gt; 26) &amp; 0x3F), logical_CPU_bits is func(count - 1) - core_bits. Note that the initial ecx value does not affect EAX bits 26 to 31.
</p><p>If "CPUID eax=0x00000004" isn't supported, then it's a single-core CPU with hyper-threading. Use the "count" field you got earlier (from CPUID eax=0x00000001) rounded up to the next power of 2 to determine "logical_CPU_bits", then set "core_bits = 0".
</p>
<h3><span id="AMD:_CPUID_eax.3D0x80000008"></span><span class="mw-headline" id="AMD:_CPUID_eax=0x80000008">AMD: CPUID eax=0x80000008</span></h3>
<p>For AMD CPUs (and <u>not</u> Intel), use this function to determine "core_bits". First check ECX bits 12 to 15, if it is not zero, then it contains "core_bits". Otherwise, use ECX bits 0 to 7 to determine the number of cores, round it up to the next power of 2 and use it to determine "core_bits".
</p><p>Now that you've got "core_bits"; use the "count" field you got earlier (from CPUID eax=0x00000001) and shift it right by "core_bits" bits. Then round the result up to the next power of 2 and use it to determine "logical_CPU_bits".
</p>
<h3><span id="AMD:_CPUID_eax.3D0x00000001"></span><span class="mw-headline" id="AMD:_CPUID_eax=0x00000001">AMD: CPUID eax=0x00000001</span></h3>
<p>For AMD CPUs (and <u>not</u> Intel), if CPUID eax=0x80000008 isn't supported just assume that the "count" field you got earlier (from CPUID eax=0x00000001) is the number of cores; and round it up to the next power of 2 and use it to determine "core_bits". In this case set "logical_CPU_bits" to zero.
</p>
<h3><span class="mw-headline" id="Managing_CPU_Topology">Managing CPU Topology</span></h3>
<p>Your kernel needs to manage the processor topology in the system for things like load-balancing. You should make a topological tree which would be built by the system during setup.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="w">      </span><span class="k">typedef</span><span class="w"></span>
<span class="w">      </span><span class="k">struct</span><span class="w"> </span><span class="nc">_CPU_DOMAIN</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">          </span><span class="n">ULONG</span><span class="w"> </span><span class="n">DomainID</span><span class="p">;</span><span class="cm">/* SMT_ID, CoreID, PackageID or ClusterID*/</span><span class="w"></span>
<span class="w">          </span><span class="n">LINKED_LIST</span><span class="w"> </span><span class="n">ChildGroups</span><span class="p">;</span><span class="w"></span>
<span class="w">          </span><span class="k">struct</span><span class="w"> </span><span class="nc">_CPU_DOMAIN</span><span class="w"> </span><span class="o">*</span><span class="n">ParentDomain</span><span class="p">;</span><span class="w"></span>
<span class="w">          </span><span class="n">SPIN_LOCK</span><span class="w"> </span><span class="n">DomainLock</span><span class="p">;</span><span class="w"></span>
<span class="w">      </span><span class="p">}</span><span class="w"> </span><span class="n">CPU_DOMAIN</span><span class="p">;</span><span class="w"></span>

<span class="w">      </span><span class="n">CPU_DOMAIN</span><span class="w"> </span><span class="n">systemTopology</span><span class="p">;</span><span class="w"></span>
</pre></div>
<p>A good implementation would make each CPU parse the tree. For example, each AP would acquire the lock for the systemTopology
domain. Then, it will search for its child domain, with sequential IDs like ClusterID, PackageID, CoreID, and SMT_ID adding a
CPU_DOMAIN struct to the ChildGroups list if not present. Finally, it will add a CPU_DOMAIN with its SMT_ID with no children 
(representing the logical CPU).
</p>
<h2><span class="mw-headline" id="Cache_Topology">Cache Topology</span></h2>
<p>The complexity of your cache topology code mainly depends on how exotic the systems you wish to support are. Most multiprocessor systems have the same processor in all sockets. However, it is possible to get systems with minorly different CPUs. Further, in the future, it's conceivable that there will be systems with more than one architecture onboard (this is already true to an extent with GPUs). It is a non-trivial design consideration whether you store cache data per CPU or globally. FOr instance, if working on ARM, big.LITTLE technology means you can have two CPUs with different cache line sizes.
</p>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<p><a rel="nofollow" class="external text" href="https://www.mono-project.com/news/2016/09/12/arm64-icache/">ARM big.LITTLE and cache</a>
</p>
<h3><span class="mw-headline" id="Articles">Articles</span></h3>
<ul><li><a href="CPUID" title="CPUID">CPUID</a></li></ul>
<!-- 
NewPP limit report
Cached time: 20250212012211
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.025 seconds
Real time usage: 0.284 seconds
Preprocessor visited node count: 53/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 7334/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:2973-0!canonical and timestamp 20250212012211 and revision id 28239.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Detecting_CPU_Topology_(80x86)&amp;oldid=28239">https://wiki.osdev.org/index.php?title=Detecting_CPU_Topology_(80x86)&amp;oldid=28239</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:X86_CPU" title="Category:X86 CPU">X86 CPU</a></li><li><a href="./Category:Hardware_Detection" title="Category:Hardware Detection">Hardware Detection</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Detecting+CPU+Topology+%2880x86%29" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Detecting_CPU_Topology_(80x86)#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Detecting_CPU_Topology_(80x86)" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:Detecting_CPU_Topology_(80x86)" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Detecting_CPU_Topology_(80x86)"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Detecting_CPU_Topology_(80x86)&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Detecting_CPU_Topology_(80x86)&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Detecting_CPU_Topology_(80x86)" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Detecting_CPU_Topology_(80x86)" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Detecting_CPU_Topology_(80x86)&amp;oldid=28239" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Detecting_CPU_Topology_(80x86)&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-lang" class="vector-menu mw-portlet mw-portlet-lang vector-menu-portal portal" aria-labelledby="p-lang-label" role="navigation"  >
	<h3
		id="p-lang-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">In other languages</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li class="interlanguage-link interwiki-de mw-list-item"><a href="http://www.lowlevel.eu/wiki/CPUID" title="CPUID – Deutsch" lang="de" hreflang="de" class="interlanguage-link-target"><span>Deutsch</span></a></li></ul>
		
	</div>
</nav>

</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 10 July 2023, at 23:27.</li>
	<li id="footer-info-0">This page has been accessed 3,393 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Detecting_CPU_Topology_(80x86)&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.025","walltime":"0.284","ppvisitednodes":{"value":53,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":7334,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250212012211","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":394});});</script>
</body>
</html>