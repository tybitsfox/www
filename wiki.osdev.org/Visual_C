<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Visual Studio - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"d7fbd0b40daea6412144d660","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Visual_Studio","wgTitle":"Visual Studio","wgCurRevisionId":25386,"wgRevisionId":25386,"wgArticleId":1454,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Articles Written in First Person","IDEs","Compilers","Visual C++"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Visual_Studio","wgRelevantArticleId":1454,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[]
,"wgRestrictionMove":[],"wgRedirectedFrom":"Visual_C","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgInternalRedirectTargetUrl":"/Visual_Studio","wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["mediawiki.action.view.redirect","site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<link rel="canonical" href="Visual_Studio"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Visual_Studio rootpage-Visual_Studio skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Visual Studio</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"><span class="mw-redirectedfrom">(Redirected from <a href="https://wiki.osdev.org/index.php?title=Visual_C&amp;redirect=no" class="mw-redirect" title="Visual C">Visual C</a>)</span></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Visual_C#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Visual_C#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p>This page or section refers to its readers or editors using <i>I</i>, <i>my</i>, <i>we</i> or <i>us</i>. It should be <a rel="nofollow" class="external text" href="https://wiki.osdev.org/index.php?title=Visual_Studio&amp;action=edit">edited</a> to be in an encyclopedic tone.
</p>
</td></tr></tbody></table>
</center>
<p>Visual Studio can be used as an integrated development environment for writing assembly, C and C++ with fully featured F5 debugging. Code can be compiled and debugged using either a <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC_Cross-Compiler</a> toolchain you as you would normally use, or the Microsoft Visual C++ compiler. Due to the fact the standard Visual C++ compiler is only capable of emitting <a href="https://wiki.osdev.org/index.php?title=OMF&amp;action=edit&amp;redlink=1" class="new" title="OMF (page does not exist)">OMF</a> object files, with the linker only producing <a href="PE_Binaries" class="mw-redirect" title="PE Binaries">PE Binaries</a>, if you pursue this avenue you will have to either use a bootloader which understands these formats or convert them to, for example, <a href="ELF" title="ELF">ELF</a> or flat binary.
</p><p>Due to the fact the only known way of doing native i686-elf operating system development in Visual Studio relies on third-party non-free software, the majority of this article explores how the native capabilities of Visual Studio can be used for doing operating systems development.
</p><p>If you are interested in attempting to use the Visual C++ toolchain for operating systems development, <a rel="nofollow" class="external text" href="https://ksrenevasan.blogspot.com/2005/10/writing-multiboot-pe-kernels-using.html">Kaushik Srenevasan's blog</a> serves as a good starting point to see how you can "[Write] multiboot PE kernels using Visual C++". This is supplemented with <a rel="nofollow" class="external text" href="https://ksrenevasan.blogspot.com/2005/10/writing-multiboot-pe-kernels-using_03.html">part 2</a> which explains some of the things not covered in the first part.
</p><p>MinGW32's objcopy should do the job (parameters go something like this: -x -g -X -S -Obinary kernel.bin). But you don't have to strip any information from PE file, the other option is to set section alignment in memory to 0x200 which is generally equal to the section alignment on disk and do some math:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">es</span><span class="p">:</span><span class="mi">0x3c</span><span class="p">]</span><span class="w">          </span><span class="c1">; PE header pointer in MZ header</span>
<span class="nf">mov</span><span class="w"> </span><span class="no">ecx</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">es</span><span class="p">:</span><span class="no">eax</span><span class="err">+</span><span class="mi">0x28</span><span class="p">]</span><span class="w">      </span><span class="c1">; AddressOfEntryPoint in PE header</span>
</pre></div>
<p>where es is loaded with base address of your <a href="PE_Binaries" class="mw-redirect" title="PE Binaries">PE</a> file in memory, ecx will be loaded with the entry point relative to base address of PE file.  Of course, if this is protected mode with a flat 4GB address space, use a register instead of using ES.
</p><p><b>Note:</b>  The options and procedures described here for Visual C++ operating system development are for VS.NET 2003.  Similar procedures should work on earlier versions.  Consult the MSDN or post to the forum if you have any questions.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Visual_C#Native_i686-elf_Development"><span class="tocnumber">1</span> <span class="toctext">Native i686-elf Development</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="Visual_C#Pre-requisites"><span class="tocnumber">1.1</span> <span class="toctext">Pre-requisites</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="Visual_C#Configuration"><span class="tocnumber">1.2</span> <span class="toctext">Configuration</span></a>
<ul>
<li class="toclevel-3 tocsection-4"><a href="Visual_C#Build_Settings"><span class="tocnumber">1.2.1</span> <span class="toctext">Build Settings</span></a></li>
<li class="toclevel-3 tocsection-5"><a href="Visual_C#Debug_Settings"><span class="tocnumber">1.2.2</span> <span class="toctext">Debug Settings</span></a></li>
<li class="toclevel-3 tocsection-6"><a href="Visual_C#IntelliSense_Settings"><span class="tocnumber">1.2.3</span> <span class="toctext">IntelliSense Settings</span></a></li>
<li class="toclevel-3 tocsection-7"><a href="Visual_C#GDB_Settings"><span class="tocnumber">1.2.4</span> <span class="toctext">GDB Settings</span></a></li>
<li class="toclevel-3 tocsection-8"><a href="Visual_C#GDB_Startup_Commands"><span class="tocnumber">1.2.5</span> <span class="toctext">GDB Startup Commands</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-9"><a href="Visual_C#Important_Considerations"><span class="tocnumber">1.3</span> <span class="toctext">Important Considerations</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-10"><a href="Visual_C#Visual_C++_vs_Visual_Studio"><span class="tocnumber">2</span> <span class="toctext">Visual C++ vs Visual Studio</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="Visual_C#Creating_the_Project:"><span class="tocnumber">3</span> <span class="toctext">Creating the Project:</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="Visual_C#Custom_C++_Runtime"><span class="tocnumber">4</span> <span class="toctext">Custom C++ Runtime</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="Visual_C#Some_basic_definitions:"><span class="tocnumber">5</span> <span class="toctext">Some basic definitions:</span></a></li>
<li class="toclevel-1 tocsection-14"><a href="Visual_C#Compiler_Options"><span class="tocnumber">6</span> <span class="toctext">Compiler Options</span></a>
<ul>
<li class="toclevel-2 tocsection-15"><a href="Visual_C#General"><span class="tocnumber">6.1</span> <span class="toctext">General</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="Visual_C#C/C++_::_General"><span class="tocnumber">6.2</span> <span class="toctext">C/C++&#160;:: General</span></a></li>
<li class="toclevel-2 tocsection-17"><a href="Visual_C#C/C++_::_Optimization"><span class="tocnumber">6.3</span> <span class="toctext">C/C++&#160;:: Optimization</span></a></li>
<li class="toclevel-2 tocsection-18"><a href="Visual_C#C/C++_::_Preprocessor"><span class="tocnumber">6.4</span> <span class="toctext">C/C++&#160;:: Preprocessor</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="Visual_C#C/C++_::_Code_Generation"><span class="tocnumber">6.5</span> <span class="toctext">C/C++&#160;:: Code Generation</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="Visual_C#C/C++_(misc._options)"><span class="tocnumber">6.6</span> <span class="toctext">C/C++ (misc. options)</span></a></li>
<li class="toclevel-2 tocsection-21"><a href="Visual_C#Linker"><span class="tocnumber">6.7</span> <span class="toctext">Linker</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-22"><a href="Visual_C#Bootloader_Stuff"><span class="tocnumber">7</span> <span class="toctext">Bootloader Stuff</span></a>
<ul>
<li class="toclevel-2 tocsection-23"><a href="Visual_C#Multiboot"><span class="tocnumber">7.1</span> <span class="toctext">Multiboot</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-24"><a href="Visual_C#The_Rebase_Utility"><span class="tocnumber">8</span> <span class="toctext">The Rebase Utility</span></a></li>
<li class="toclevel-1 tocsection-25"><a href="Visual_C#Express_64_bit_compilers"><span class="tocnumber">9</span> <span class="toctext">Express 64 bit compilers</span></a>
<ul>
<li class="toclevel-2 tocsection-26"><a href="Visual_C#Quirks"><span class="tocnumber">9.1</span> <span class="toctext">Quirks</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-27"><a href="Visual_C#Intrinsics"><span class="tocnumber">10</span> <span class="toctext">Intrinsics</span></a></li>
<li class="toclevel-1 tocsection-28"><a href="Visual_C#See_Also"><span class="tocnumber">11</span> <span class="toctext">See Also</span></a></li>
<li class="toclevel-1 tocsection-29"><a href="Visual_C#Forum_Posts"><span class="tocnumber">12</span> <span class="toctext">Forum Posts</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Native_i686-elf_Development">Native i686-elf Development</span></h2>
<h4><span class="mw-headline" id="Pre-requisites">Pre-requisites</span></h4>
<p>In order to utilize Visual Studio as a development environment for native i686-elf operating system development, you must first install the following pre-requisites
</p>
<ul><li>Visual Studio 2015+</li>
<li><a rel="nofollow" class="external text" href="https://visualgdb.com/">VisualGDB</a> (see below)</li>
<li><a rel="nofollow" class="external text" href="https://www.nasm.us/pub/nasm/releasebuilds/2.11.08/win32/nasm-2.11.08-installer.exe">NASM 2.11.08</a></li>
<li>A <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler toolchain</a> that contains GDB. This process has been tested with <a rel="nofollow" class="external text" href="https://github.com/lordmilko/i686-elf-tools">i686-elf-tools</a> (GCC 7.1.0 / Binutils 2.28 / GDB 8.0)</li>
<li><a rel="nofollow" class="external text" href="https://qemu.weilnetz.de/w32/2017/qemu-w32-setup-20170113.exe">QEMU 2.8.50.0</a></li>
<li>An assembly syntax highlighter, such as <a rel="nofollow" class="external text" href="https://github.com/Trass3r/AsmHighlighter">AsmHighlighter</a> (though you might have to compile it yourself)</li></ul>
<p>It is <b>strongly recommended</b> you attempt to use the recommend versions of these items before attempting to use newer versions. In particular, issues have been observed when using NASM and QEMU versions newer than the ones listed above (see below).
</p><p>Install QEMU to <b>C:\Program Files (x86)\qemu</b>, NASM to <b>C:\Program Files (x86)\nasm</b> and extract i686-elf-tools to <b>C:\Program Files (x86)\i686-elf-tools</b> (such that the path to your GCC is <b>C:\Program Files (x86)\i686-elf-tools\bin\i686-elf-gcc.exe</b>)
</p><p>Unfortunately, in order to do operating system development in Visual Studio you will require the third-party add-in <b>VisualGDB</b>. Unlike all of the other software on this list, VisualGDB is not free. You can download a 30-day trial of VisualGDB from their website to demonstrate the principles outlined in this article and determine how you want to proceed.
</p><p>The first time you launch Visual Studio after installing VisualGDB you may be prompted to configure the <b>VISUALGDB_DIR</b> environment variable (which you should do) as well as whether you want to utilize their Clang-based IntelliSense engine (you can disable of the options on this prompt). If you are interested in purchasing VisualGDB, it appears you will need the <b>Custom</b> VisualGDB edition.
</p><p>This process has been tested with VisualGDB 5.1 in Visual Studio 2015. A sample project demonstrating a basic boot sector and kernel that you can compile, debug and step through can be found <a rel="nofollow" class="external text" href="https://github.com/lordmilko/VSKernelDev">here</a>.
</p>
<h4><span class="mw-headline" id="Configuration">Configuration</span></h4>
<p>The following outlines how you can configure building and debugging your operating system in Visual Studio from scratch. Rather than configuring these one by one, you can also transplant (and rename based on your project name) the *.vgdbsettings files from the <a rel="nofollow" class="external text" href="https://github.com/lordmilko/VSKernelDev">sample project</a> into your solution and you should be good to go.
</p>
<ul><li>In Visual Studio create a new VisualGDB solution using the <b>Custom Project Wizard</b>. If prompted to configure the custom project's settings, click <b>Finish</b> to leave these as their defaults (we will configure them one by one below)</li>
<li>Right click your project in Solution Explorer and select <b>VisualGDB Project Properties</b></li></ul>
<h5><span class="mw-headline" id="Build_Settings">Build Settings</span></h5>
<ul><li>On the <i>Build Settings</i> tab, next to <i>Build command:</i> click <b>Customize</b> and fill in the following details</li></ul>
<dl><dd><b>Command</b>: $(VISUALGDB_DIR)\make.exe</dd>
<dd><b>Arguments</b>: all</dd>
<dd><b>Working directory</b>: $(SourceDir)</dd></dl>
<ul><li>Next to <i>Clean Command:</i> click <b>Customize</b> and fill in the following details</li></ul>
<dl><dd><b>Command</b>: $(VISUALGDB_DIR)\make.exe</dd>
<dd><b>Arguments</b>: clean</dd>
<dd><b>Working directory</b>: $(SourceDir)</dd></dl>
<ul><li>In the <i>Main binary:</i> field enter the <b>$(BuildDir)\&lt;image&gt;</b> where <b>&lt;image&gt;</b> is the name of the file your <b>Makefile</b> generates that contains your entire operating system. e.g. <b>$(BuildDir)\os-image</b></li></ul>
<dl><dd>The configuration steps outlined in this tutorial assume that all of your output files will be emitted in the most "convenient" place possible (the same place as your source files, the root of your project, etc). If you are interested in having your output files be emitted to a single directory, you should investigate this after you have the basic configuration working.</dd></dl>
<ul><li>Untick the <i>Try detecting common Makefile types and updating source lists in them</i> option. To begin with we would like to control everything ourselves; you can explore re-enabling options like this once we have the basic configuration working</li></ul>
<h5><span class="mw-headline" id="Debug_Settings">Debug Settings</span></h5>
<ul><li>On the <i>Debug settings</i> tab, deselect <b>Break-in to GDB using Ctrl-Break events instead of Ctrl-C (required under Cygwin)</b></li></ul>
<ul><li>Next to <i>Use a custom GDB executable:</i> click <b>Customize</b> and fill in the following details</li></ul>
<dl><dd><b>GDB debugger executable</b>: C:\Program Files (x86)\i686-elf-tools\bin\i686-elf-gdb.exe</dd></dl>
<ul><li>Next to <i>GDB launch command:</i> click <b>Customize</b> and fill in the following details</li></ul>
<dl><dd><b>Arguments</b>: --interpreter mi --readnow</dd>
<dd><b>Working directory</b>: $(ProjectDir)</dd></dl>
<ul><li>Tick the <b>Use a gdbserver:</b> option then click <b>Customize</b> and fill in the following details</li></ul>
<dl><dd><b>Command</b>: C:\Program Files (x86)\qemu\qemu-system-i386.exe</dd>
<dd><b>Arguments</b>: -S -gdb tcp::1234,ipv4 -soundhw all -drive file=$(TargetFileName),if=floppy</dd>
<dd><b>Working directory</b>: $(ProjectDir)</dd></dl>
<ul><li>In the <i>Target selection command:</i> field enter <b>-target-select remote :1234</b></li></ul>
<ul><li>Change the <b>Debugging start mode:</b> to <b>Use "continue" command</b></li></ul>
<h5><span class="mw-headline" id="IntelliSense_Settings">IntelliSense Settings</span></h5>
<ul><li>On the <b>IntelliSense Settings</b> tab, under <i>Clang IntelliSense</i> set the <i>IntelliSense engine:</i> to <b>Use native Visual Studio IntelliSense engine</b></li></ul>
<h5><span class="mw-headline" id="GDB_Settings">GDB Settings</span></h5>
<ul><li>On the <b>GDB settings</b> tab, untick <b>Support 'step into new instance' through breakpoint in: main</b></li></ul>
<dl><dd>We don't need a breakpoint in any kind of main function, but if you want one at a later point you can re-enable this and change the function name to the real entrypoint of your kernel.</dd></dl>
<h5><span class="mw-headline" id="GDB_Startup_Commands">GDB Startup Commands</span></h5>
<ul><li>On the <b>GDB startup commands</b> tab, under <i>The following GDB commands will be run AFTER selecting a target:</i> enter the following</li></ul>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="w"> </span><span class="n">symbol</span><span class="o">-</span><span class="n">file</span><span class="w"> </span><span class="n">kernel</span><span class="p">.</span><span class="n">elf</span><span class="w"></span>
<span class="w"> </span><span class="n">add</span><span class="o">-</span><span class="n">symbol</span><span class="o">-</span><span class="n">file</span><span class="w"> </span><span class="n">boot_sect</span><span class="p">.</span><span class="n">elf</span><span class="w"> </span><span class="mh">0x7c00</span><span class="w"></span>
<span class="w"> </span><span class="n">directory</span><span class="w"> </span><span class="n">$</span><span class="p">(</span><span class="n">RemoteSourceDir</span><span class="p">)</span><span class="o">/</span><span class="n">src</span><span class="w"></span>
</pre></div>
<dl><dd>These will load the symbols for your kernel and bootsector respectively, allowing you to debug through the sourcecode in your debugger.</dd></dl>
<dl><dd>If you have all of your source under a <b>src/</b> subdirectory, it appears that NASM may cause all *.asm files but the main one to be resolved using relative, instead of absolute paths, thus resulting in GDB being unable to find them when attempting to set breakpoints. Specifying <b>directory $(RemoteSourceDir)/src</b> adds the <b>src/</b> folder as an additional search location for GDB to use when resolving breakpoint locations. If you're not using a <b>src/</b> folder, then you likely don't need this line</dd></dl>
<p>If you've successfully completed these steps you should be all ready to start developing your operating system using Visual Studio
</p>
<h4><span class="mw-headline" id="Important_Considerations">Important Considerations</span></h4>
<ul><li>When you modify an *.asm and recompile, it doesn't seem to automatically detect such files are modified; as such you may need to force rebuild instead, or investigate how to get your make system detect changes to assembly files</li>
<li>When stepping through assembly code, until you switch to 32-bit protected mode you may have issues with your source files not always lining up with where the debugger is currently at. This seems to be an unavoidable consequence of trying to debug 16-bit code; once you start debugging 32-bit assembly or C/C++ however it all seems to be fine</li>
<li>When you terminate QEMU, GDB will detect the process was terminated but won't actually end the debug session (as such you'll need to hit the Stop button yourself)</li>
<li>If you try and create a <b>Makefile</b> in Solution Explorer with no file extension Visual Studio will probably add a <b>.cpp</b> to the end of it again and move it under the <i>Source files</i> filter. You will probably want to remove the extension again and maybe move it under the project root, outside the <i>Source files</i> filter</li>
<li>Remember that in C++ projects in Visual Studio, folders in Solution Explorer simply represent "filters" rather than actual folders; as such as you start organizing your files remember to place your new files under the actual folder they belong in, along with organizing them under the correct filter</li>
<li>QEMU versions newer than the stipualted version may experience errors when the recommended version of GDB 8.0 attempts to attach to them. If you wish to use a newer QEMU version, you will need to investigate whether modifying your QEMU command line arguments or <a rel="nofollow" class="external text" href="https://github.com/lordmilko/i686-elf-tools">compiling a newer GDB version</a> resolves this issue</li>
<li>NASM versions newer than the stipulated version may not generate symbol files properly, resulting in breakpoints in <b>%include'</b>d assembly files always hitting the last line of the file. If you wish to use a newer NASM version, you will need to investigate whether modifying your NASM command line arguments or <a rel="nofollow" class="external text" href="https://github.com/lordmilko/i686-elf-tools">compiling a newer GDB version</a> resolves this issue</li></ul>
<h2><span id="Visual_C.2B.2B_vs_Visual_Studio"></span><span class="mw-headline" id="Visual_C++_vs_Visual_Studio">Visual C++ vs Visual Studio</span></h2>
<p>Visual C++ refers only to the Microsoft C++ IDE and compiler, where as Visual Studio refers to the entire Microsoft family of compilers and IDEs as a whole. In later version, such as the Visual Studio .NET series, all languages share the same IDE program, but in Visual C++ .NET, compatibility for all other languages are removed completely, except through configuring the IDE to manually use another compiler/assembler.
</p><p>While the Microsoft compilers are free, Visual Studio is not. However, a free edition of Visual Studio is available, known as <a rel="nofollow" class="external text" href="http://www.visualstudio.com/en-US/products/visual-studio-express-vs">Visual Studio 2013 Express</a> is available for download from Microsoft's website, but must be activated (freely via e-mail) to continue use after 30-days.
</p><p>The Microsoft compiler that is provided with the express edition of Visual C++ 2013 can build either native 32-bit or 64-bit PE files, or .NET assemblies.
</p><p>Of course, you could disable the compiler and add a custom build event which runs a shell script and invokes Cygwin. If you are using Visual Studio (not Express), it is possible to use the Visual Studio SDK to create a "makefile project" that allows you to use a custom build script (such as invoking the <a href="Cygwin" title="Cygwin">Cygwin</a> tool chain) to compile your code, build your image, and launch the emulator (so you can just press F5 for the whole thing to build and the emulator to start). Compiling Bochs with debugging enabled may allow you to use the Visual Studio debugger (including line by line execution) except this hasn't yet been tested.
</p>
<h2><span class="mw-headline" id="Creating_the_Project:">Creating the Project:</span></h2>
<p>For the kernel and any drivers, create a Win32 Project and select DLL, empty project.  Choose DLL if you want to have a kernel that can export functions using the standard Win32 method.  It is relatively simple to use this to export functions for use by device drivers...
</p>
<h2><span id="Custom_C.2B.2B_Runtime"></span><span class="mw-headline" id="Custom_C++_Runtime">Custom C++ Runtime</span></h2>
<p>Since you can't use standard C/C++ runtime in your kernel, you'll need to write some of it's functionality yourself. The following article will help to <a href="Visual_C++_Runtime" title="Visual C++ Runtime">write your custom Visual C++ runtime</a>
</p>
<h2><span class="mw-headline" id="Some_basic_definitions:">Some basic definitions:</span></h2>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define EXTERN		extern &quot;C&quot;</span>
<span class="cp">#define EXPORT		EXTERN __declspec(dllexport)    </span><span class="c1">// exported from DLL</span>
<span class="cp">#define IMPORT		EXTERN __declspec(dllimport)    </span><span class="c1">// imported from DLL</span>
<span class="cp">#define NAKED		__declspec(naked)		</span><span class="c1">// no prolog or epilog code added</span>
<span class="cp">#define NORETURN	__declspec(noreturn)</span>

<span class="c1">// Some examples</span>
<span class="n">EXTERN</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="n">SomeFunction</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">this</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">that</span><span class="p">);</span><span class="w"></span>
<span class="n">EXPORT</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">AnotherFunction</span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kr">__int64</span><span class="w"> </span><span class="n">bigParam</span><span class="p">);</span><span class="w"></span>

<span class="c1">// In a .cpp file</span>
<span class="n">EXPORT</span><span class="w"> </span><span class="n">NAKED</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">AnotherFunction</span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kr">__int64</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">  </span><span class="kr">__asm</span><span class="w"></span>
<span class="w">  </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">mov</span><span class="w"> </span><span class="n">eax</span><span class="p">,</span><span class="w"> </span><span class="n">dword</span><span class="w"> </span><span class="n">ptr</span><span class="w"> </span><span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="w"></span>
<span class="w">    </span><span class="n">xor</span><span class="w"> </span><span class="n">eax</span><span class="p">,</span><span class="w"> </span><span class="n">dword</span><span class="w"> </span><span class="n">ptr</span><span class="w"> </span><span class="p">[</span><span class="n">esp</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="w"></span>
<span class="w">    </span><span class="n">ret</span><span class="w"></span>
<span class="w">  </span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>I use these to create functions that end up with reasonably undecorated names like <code>_SomeFunction@8</code> instead of <code>?@SomeFunction@YAKK000I@@Z</code> (as a __cdecl normal function would be named...)  The macros also allow easy import and export from a DLL.
</p>
<h2><span class="mw-headline" id="Compiler_Options">Compiler Options</span></h2>
<p>Here is the meat of this article.  These are the compiler options (right-click project, select properties) that I use for my OS.
</p>
<h4><span class="mw-headline" id="General">General</span></h4>
<ul><li>Output Directory: .</li></ul>
<dl><dd>Add a post-build step to copy only the <i>real</i> output file to the bin directory. Otherwise VS puts .lib and some linker files there as well.</dd></dl>
<ul><li>Intermediate Directory: .</li></ul>
<h4><span id="C.2FC.2B.2B_::_General"></span><span class="mw-headline" id="C/C++_::_General">C/C++&#160;:: General</span></h4>
<ul><li>Additional Include Directories: &lt;set as needed&gt;</li>
<li>Debug Information Format: Disabled</li></ul>
<dl><dd>At the stage my OS is in, I have no use for PDB files.  I am in the process of writing a debugger, though, so in the future this could change.</dd></dl>
<ul><li>Warning Level: Level 4 (/W4)</li>
<li>Detect 64-bit Portability Issues: No</li></ul>
<dl><dd>This relies on a special __w64 token in various typedefs.  I do not know how to use this with my OS.  Just be careful:  int and long are still 32-bit if compiling for a x64 target (using VS 2005)</dd></dl>
<h4><span id="C.2FC.2B.2B_::_Optimization"></span><span class="mw-headline" id="C/C++_::_Optimization">C/C++&#160;:: Optimization</span></h4>
<ul><li>Optimization: Minimize Size (/O1)</li></ul>
<dl><dd>This is really up to you.  For me, space is more important than speed for now, but this can easily be changed.  If you are implementing source-level debugging, you might want to disable all optimizations.</dd></dl>
<ul><li>Global Optimizations: Yes (/Og)</li></ul>
<dl><dd>Again, enable only if not using a source-level debugger</dd></dl>
<ul><li>Favor Size Or Speed: Favor Small Code (/Os)</li></ul>
<dl><dd>Set as needed, only if /Og enabled</dd></dl>
<ul><li>Optimize for Processor: Pentium Pro, II, III (/G6)</li></ul>
<dl><dd>Set as needed</dd></dl>
<h4><span id="C.2FC.2B.2B_::_Preprocessor"></span><span class="mw-headline" id="C/C++_::_Preprocessor">C/C++&#160;:: Preprocessor</span></h4>
<ul><li>Ignore Standard Include Path: Yes (/X)</li></ul>
<h4><span id="C.2FC.2B.2B_::_Code_Generation"></span><span class="mw-headline" id="C/C++_::_Code_Generation">C/C++&#160;:: Code Generation</span></h4>
<ul><li>Enable String Pooling: Yes (/GF)</li></ul>
<dl><dd>Places string literals in a read-only data section.  This doesn't mean much for OS code, but enable this ONLY if you do not modify string literals in-place, as this would change it in all instances.</dd></dl>
<ul><li>Enable Minimal Rebuild: No</li></ul>
<dl><dd>This option attempts to analyse header files and only rebuilds sources if what it uses has changed. Can speed up building, but also frequently makes mistakes leading to runtime errors. Also enabling this seems to add 0xCC pad bytes to the EXE, which causes bloating.</dd></dl>
<ul><li>Enable C++ Exceptions: No</li></ul>
<dl><dd>Unless you have an exceptional (pun intended) configuration, these require runtime support and are generally not needed anyways.</dd></dl>
<ul><li>Basic Runtime Checks: Default</li></ul>
<dl><dd>Enabling any runtime checks requires special support code.</dd></dl>
<ul><li>Struct Member Alignment: 1 Byte (/Zp1)</li></ul>
<dl><dd>This is really up to you, but most structs that I have need to be aligned this way. If you choose default (8 byte), you can use #pragma pack(push, 1) and #pragma pack(pop) to adjust the packing.  Consult MSDN for more info.</dd></dl>
<ul><li>Buffer Security Check: No</li></ul>
<dl><dd>Again, this requires runtime support code</dd></dl>
<h4><span id="C.2FC.2B.2B_.28misc._options.29"></span><span class="mw-headline" id="C/C++_(misc._options)">C/C++ (misc. options)</span></h4>
<ul><li>Language</li>
<li>Force Conformance in For Loop Scope: Yes (/Zc:forScope)</li></ul>
<dl><dd>A Good Idea.  Makes the <i>i</i> in <i>for (int i = 0; ...)</i> local to the loop.</dd></dl>
<ul><li>Output Files</li>
<li>Assembler Output: Assembly, Machine Code, and Source (/FAcs)</li></ul>
<dl><dd>Outputs the assembly listing of the code to files in a given directory.  This is nice for assembly-level debugging, as it has the source code lines nearby.</dd></dl>
<ul><li>ASM List Location: &lt;directory&gt;\</li></ul>
<dl><dd>Make sure there is a terminating \, otherwise VS will try to put everything in one file.</dd></dl>
<ul><li>Advanced</li>
<li>Calling Convention: __stdcall (/Gz)</li></ul>
<dl><dd>Again, up to you, but I find the lack of name decoration handy for debugging.  Functions declared <tt>extern "C" void [[Do Something]](int p1, int p2)</tt> show up as <tt>_[[Do Something]]@8</tt> rather than <tt>?@[[Do Something]]@YAXZSASD</tt> or similar.</dd></dl>
<ul><li>Command Line</li>
<li>/Oy-</li></ul>
<dl><dd>Disables frame pointer (EBP) omission, included with optimization for size.  This is handy to get <a href="Stack#Stack_trace" title="Stack">stack backtraces</a> in case of a crash.</dd></dl>
<h4><span class="mw-headline" id="Linker">Linker</span></h4>
<ul><li>General</li>
<li>Output File: &lt;set as needed&gt;</li>
<li>Enable Incremental Linking: No (/INCREMENTAL:NO)</li></ul>
<dl><dd>Reduces the bloat of the generated EXE or DLL.  Linking seems fast enough, anyways.</dd></dl>
<ul><li>Additional Library Directories: &lt;set as needed&gt;</li>
<li>Input</li>
<li>Ignore All Default Libraries: Yes (/NODEFAULTLIB)</li></ul>
<dl><dd>Ignores the default libc.lib, libcmt.lib, etc.</dd></dl>
<ul><li>Debugging</li>
<li>Generate Debug Info: No</li></ul>
<dl><dd>Until I create a better debugger for my OS, I have no use for this.  Set as needed.</dd></dl>
<ul><li>Generate Map File: Yes (/MAP)</li></ul>
<dl><dd>Generates a map file (function name and address) and actually <i>sorts</i> by ascending address, unlike GCC.</dd></dl>
<ul><li>Map File Name: &lt;set as needed&gt;</li>
<li>Optimization</li>
<li>References: Eliminate Unreferenced Data</li>
<li>Enable COMDAT Folding: Remove Redundant COMDATs</li>
<li>Advanced</li>
<li>Entry Point: &lt;set as needed&gt;</li></ul>
<dl><dd>The linker will complain if it is not __stdcall with 12 bytes of arguments (3 32-bit params), but is only a warning.</dd></dl>
<ul><li>Fixed Base Address: Generate a relocation section</li></ul>
<dl><dd>Images will be relocated later.  See below.</dd></dl>
<ul><li>Command Line</li>
<li>/DRIVER</li>
<li>/ALIGN: 512</li></ul>
<dl><dd>Together, they set the <a href="https://wiki.osdev.org/index.php?title=Section_Alignment&amp;action=edit&amp;redlink=1" class="new" title="Section Alignment (page does not exist)">Section Alignment</a> and <a href="https://wiki.osdev.org/index.php?title=File_Alignment&amp;action=edit&amp;redlink=1" class="new" title="File Alignment (page does not exist)">File Alignment</a> to 512 bytes.  My boot loader is not sophisticated enough to handle these being different.  The downside is that restrictions (read-only, etc) on sections are meaningless, as they require page-granularity for hopefully obvious reasons.</dd></dl>
<h2><span class="mw-headline" id="Bootloader_Stuff">Bootloader Stuff</span></h2>
<p>As part of the build process, I use a tool I wrote to rebase all the PE files.  The
Microsoft rebase utility (and imagehlp api) only works on a 64K granularity, but I
want one with page granularity.
</p><p>My bootsector is aware of the FAT file system and loads the rest of the bootloader off of
the floppy disk.  This bootloader reads a configuration file, loads the kernel to 0xC0000000,
and then loads each driver on consecutive page-aligned addresses after the kernel.  It passes
an array of these addresses (and filenames) to the kernel, which can then link the images
to itself and call their entry points.
</p><p>Another option is to use a separate linker such as <a href="WLink" title="WLink">WLink</a> with a linker script such as the one found on the <a href="Watcom" title="Watcom">Watcom</a> page.
</p>
<h3><span class="mw-headline" id="Multiboot">Multiboot</span></h3>
<p>To be booted by GRUB, you can make your kernel multiboot. THis involves the embedding of a multiboot header in the first 8K of the image.
This can be done as follows:
</p>
<div class="mw-highlight mw-highlight-lang-cpp mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">//Entry point goes here</span>

<span class="c1">//The good ol&#39; multiboot header</span>
<span class="cp">#pragma pack(push,1)</span>
<span class="k">struct</span><span class="w"> </span><span class="nc">MULTIBOOT_HEADER</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">magic</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">flags</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">checksum</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">header_addr</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">load_addr</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">load_end_addr</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">bss_end_addr</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">entry_addr</span><span class="p">;</span><span class="w">   </span>
<span class="p">};</span><span class="w"></span>
<span class="cp">#pragma pack(pop)</span>

<span class="cp">#pragma code_seg(&quot;.a&quot;)</span>
<span class="kr">__declspec</span><span class="p">(</span><span class="n">align</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span><span class="w"> </span><span class="n">MULTIBOOT_HEADER</span><span class="w"> </span><span class="n">header</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="mh">0x1BADB002</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="mh">0x10003</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="o">-</span><span class="p">(</span><span class="mh">0x1BADB002</span><span class="o">+</span><span class="mh">0x10003</span><span class="p">),</span><span class="w"></span>
<span class="w">    </span><span class="p">(</span><span class="kt">uint32_t</span><span class="p">)</span><span class="o">&amp;</span><span class="n">header</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">BASE_ADDR</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">LOADBASE</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">LOAD_BASE</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="mi">0</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="mi">0</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="p">(</span><span class="kt">uint32_t</span><span class="p">)</span><span class="o">&amp;</span><span class="n">entry</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">BASE_ADDR</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">LOADBASE</span><span class="w"></span>
<span class="p">};</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="The_Rebase_Utility">The Rebase Utility</span></h2>
<p>Attached to <a href="http://forum.osdev.org/viewtopic.php?t=10632" class="extiw" title="topic:10632">this thread</a> is the source code for a page-granular rebase utility.  It changes the base address of any PE file with a relocation section to the nearest page-aligned address and then removes the relocation section.  It compiles under Visual Studio .NET 2003 with default settings successfully, but should work fine on any Microsoft compiler.
</p><p>To use it, create a text file that contains the relative paths and names of the PE files you wish to rebase, such as
</p>
<pre>system\kernel.sys
driver\fat.sys
driver\fd.sys
driver\kbdmouse.sys
driver\vga.sys
</pre>
<p>and call the utility from a batch file or the console as
</p>
<pre>mvrebase 0xC0000000 rebasefiles.txt
</pre>
<p>and, in the example given above, it will base kernel.sys at 0xC0000000 and will base subsequent files at the next page-aligned address.
</p>
<h2><span class="mw-headline" id="Express_64_bit_compilers">Express 64 bit compilers</span></h2>
<p>You can gain 64 bit compilers by installing the Windows SDK VC++ compilers (please note for VC10 SP1 you need to install the update)
</p>
<h3><span class="mw-headline" id="Quirks">Quirks</span></h3>
<p>In the 64 bit compilers you <b>cannot:</b>
</p>
<ul><li>Create naked functions</li>
<li>Do inline assembly - but it does come with <a href="MASM" title="MASM">MASM</a>, though you need to separate your C/C++ and assembly into separate source files.</li>
<li>Do non-fastcall calling</li></ul>
<p>This is why if you intend to do 64 bit development in MSVC++ you should have an external assembly layer (seperate versions for 32 bit and 64 bit), or use somewhat more limited intrinsics, and for asm if you want to avoid name decoration you need to declare them in a header file like this:
</p>
<div class="mw-highlight mw-highlight-lang-cpp mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#ifdef __cplusplus </span><span class="c1">//if this is C++</span>
<span class="k">extern</span><span class="w"> </span><span class="s">&quot;C&quot;</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">//declare as C functions</span>
<span class="cp">#endif</span>
<span class="w"> </span><span class="n">disable</span><span class="p">();</span><span class="w"> </span><span class="c1">//a useful example. disables interrupts (duh!)</span>
<span class="w"> </span><span class="c1">//your functions go here</span>
<span class="cp">#ifdef __cplusplus</span>
<span class="p">}</span><span class="w"> </span><span class="c1">//and if it was C++ we need to close the brackets</span>
<span class="cp">#endif</span>
</pre></div>
<p>And in your asm layer:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">BITS</span><span class="w"> </span><span class="mi">32</span><span class="w"> </span><span class="c1">;32 bit version</span>
<span class="err">@</span><span class="nl">disable@0:</span><span class="w"></span>
<span class="nf">cli</span><span class="w"></span>
<span class="nf">ret</span><span class="w"> </span>
<span class="c1">;fastcall name decoration (@0 to be replaced by size of args (bytes)</span>
<span class="c1">;Number of bytes is always prefixed by @</span>
<span class="nf">BITS</span><span class="w"> </span><span class="mi">64</span><span class="w"> </span><span class="c1">;64 bit version</span>
<span class="nl">disable:</span><span class="w"></span>
<span class="nf">cli</span><span class="w"></span>
<span class="nf">ret</span><span class="w">  </span><span class="c1">;No decoration at all</span>
</pre></div>
<h2><span class="mw-headline" id="Intrinsics">Intrinsics</span></h2>
<p>For intrinsics, #include &lt;intrin.h&gt;. This IS suitable for a kernel, but don't ignore standard headers. An example follows:
</p>
<div class="mw-highlight mw-highlight-lang-cpp mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">//main body of intrinsics</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;intrin.h&gt;</span><span class="cp"></span>
<span class="c1">//I/O operations</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;conio.h&gt;</span><span class="cp"></span>

<span class="kt">void</span><span class="w"> </span><span class="nf">someFunc</span><span class="p">()</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">__enable</span><span class="p">();</span><span class="w">  </span><span class="c1">//STI</span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">__inbyte</span><span class="p">(</span><span class="mh">0x60</span><span class="p">);</span><span class="w"> </span><span class="c1">//IN</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="n">w</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">__inpw</span><span class="p">(</span><span class="mh">0x1F0</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">d</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">__inp</span><span class="p">(</span><span class="mh">0xCFC</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">__disable</span><span class="p">();</span><span class="w">  </span><span class="c1">//CLI</span>
<span class="w">    </span><span class="n">__halt</span><span class="p">();</span><span class="w">     </span><span class="c1">//HLT</span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>From more intrinsics, see <a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-us/library/26td21ds.aspx">Compiler Intrinsics</a>
Note that the very helpful __setReg, which is reference in some areas of MSDN, is no longer available.
</p>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<ul><li><a href="C++" title="C++">C++</a></li></ul>
<h2><span class="mw-headline" id="Forum_Posts">Forum Posts</span></h2>
<ul><li><a rel="nofollow" class="external text" href="http://forum.osdev.org/viewtopic.php?f=1&amp;t=21260">Booting non-ELF kernel with GRUB tutorial</a></li>
<li><a rel="nofollow" class="external text" href="http://forum.osdev.org/viewtopic.php?f=2&amp;t=21859">MSVC Grub - A new way</a></li></ul>
<!-- 
NewPP limit report
Cached time: 20250212012300
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.058 seconds
Real time usage: 0.972 seconds
Preprocessor visited node count: 176/1000000
Post‐expand include size: 838/2097152 bytes
Template argument size: 210/2097152 bytes
Highest expansion depth: 6/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 13073/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    1.216      1 -total
100.00%    1.216      1 Template:FirstPerson
 41.52%    0.505      1 Template:NoteBox
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1454-0!canonical and timestamp 20250212012259 and revision id 25386.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Visual_Studio&amp;oldid=25386">https://wiki.osdev.org/index.php?title=Visual_Studio&amp;oldid=25386</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Articles_Written_in_First_Person" title="Category:Articles Written in First Person">Articles Written in First Person</a></li><li><a href="./Category:IDEs" title="Category:IDEs">IDEs</a></li><li><a href="./Category:Compilers" title="Category:Compilers">Compilers</a></li><li><a href="./Category:Visual_C++" title="Category:Visual C++">Visual C++</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Visual+Studio" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Visual_C#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Visual_Studio" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:Visual_Studio" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Visual_Studio"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Visual_Studio&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Visual_Studio&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Visual_Studio" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Visual_Studio" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Visual_Studio&amp;oldid=25386" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Visual_Studio&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 28 November 2020, at 04:21.</li>
	<li id="footer-info-0">This page has been accessed 12,522 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Visual_Studio&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.058","walltime":"0.972","ppvisitednodes":{"value":176,"limit":1000000},"postexpandincludesize":{"value":838,"limit":2097152},"templateargumentsize":{"value":210,"limit":2097152},"expansiondepth":{"value":6,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":13073,"limit":5000000},"timingprofile":["100.00%    1.216      1 -total","100.00%    1.216      1 Template:FirstPerson"," 41.52%    0.505      1 Template:NoteBox"]},"cachereport":{"timestamp":"20250212012300","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":1072});});</script>
</body>
</html>