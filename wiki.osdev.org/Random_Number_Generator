<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Random Number Generator - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"4584e5352e64936003396944","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Random_Number_Generator","wgTitle":"Random Number Generator","wgCurRevisionId":27595,"wgRevisionId":27595,"wgArticleId":2935,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Common Algorithms"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Random_Number_Generator","wgRelevantArticleId":2935,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],
"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Random_Number_Generator rootpage-Random_Number_Generator skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Random Number Generator</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Random_Number_Generator#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Random_Number_Generator#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>Random number generators (RNG) can be implemented in lots of different ways. This article explains some of them.
</p><p><br />
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Random_Number_Generator#Entropy"><span class="tocnumber">1</span> <span class="toctext">Entropy</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Random_Number_Generator#Types_of_random_number_generators"><span class="tocnumber">2</span> <span class="toctext">Types of random number generators</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="Random_Number_Generator#Sources_of_random_numbers"><span class="tocnumber">2.1</span> <span class="toctext">Sources of random numbers</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="Random_Number_Generator#Applications_of_random_numbers"><span class="tocnumber">2.2</span> <span class="toctext">Applications of random numbers</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="Random_Number_Generator#True_random_number_generators"><span class="tocnumber">3</span> <span class="toctext">True random number generators</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="Random_Number_Generator#x86_RDSEED_Instruction"><span class="tocnumber">3.1</span> <span class="toctext">x86 RDSEED Instruction</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Random_Number_Generator#Dedicated_hardware"><span class="tocnumber">3.2</span> <span class="toctext">Dedicated hardware</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="Random_Number_Generator#Sampling_manually"><span class="tocnumber">3.3</span> <span class="toctext">Sampling manually</span></a>
<ul>
<li class="toclevel-3 tocsection-9"><a href="Random_Number_Generator#Adversarial_entropy"><span class="tocnumber">3.3.1</span> <span class="toctext">Adversarial entropy</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-10"><a href="Random_Number_Generator#Cryptographically_secure_pseudorandom_number_generators"><span class="tocnumber">4</span> <span class="toctext">Cryptographically secure pseudorandom number generators</span></a>
<ul>
<li class="toclevel-2 tocsection-11"><a href="Random_Number_Generator#x86_RDRAND_Instruction"><span class="tocnumber">4.1</span> <span class="toctext">x86 RDRAND Instruction</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="Random_Number_Generator#Ciphers"><span class="tocnumber">4.2</span> <span class="toctext">Ciphers</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-13"><a href="Random_Number_Generator#Pseudorandom_number_generators"><span class="tocnumber">5</span> <span class="toctext">Pseudorandom number generators</span></a>
<ul>
<li class="toclevel-2 tocsection-14"><a href="Random_Number_Generator#The_Standard&#39;s_Example"><span class="tocnumber">5.1</span> <span class="toctext">The Standard's Example</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="Random_Number_Generator#Fibonacci_random_number"><span class="tocnumber">5.2</span> <span class="toctext">Fibonacci random number</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="Random_Number_Generator#Linear_Feedback_Shift_Register"><span class="tocnumber">5.3</span> <span class="toctext">Linear Feedback Shift Register</span></a></li>
<li class="toclevel-2 tocsection-17"><a href="Random_Number_Generator#Wichmann-Hill"><span class="tocnumber">5.4</span> <span class="toctext">Wichmann-Hill</span></a></li>
<li class="toclevel-2 tocsection-18"><a href="Random_Number_Generator#Mersenne_Twister"><span class="tocnumber">5.5</span> <span class="toctext">Mersenne Twister</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="Random_Number_Generator#PCG_family"><span class="tocnumber">5.6</span> <span class="toctext">PCG family</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="Random_Number_Generator#xoshiro_family"><span class="tocnumber">5.7</span> <span class="toctext">xoshiro family</span></a></li>
<li class="toclevel-2 tocsection-21"><a href="Random_Number_Generator#Rolling_your_own"><span class="tocnumber">5.8</span> <span class="toctext">Rolling your own</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Entropy">Entropy</span></h2>
<p>Computers are deterministic devices. If the program is the same and all inputs are the same, the same result will be calculated every time. How, then, can a computer generate random numbers? The computer cannot, but the physical world around it can. Many physical events are random to some degree, or more technically, have some degree of entropy. A sound recording will contain some level of noise even in the best shielded recording rooms on the planet. Humans type on keyboards with an inconsistent timing, and type quasi-random text like the article you are currently reading. Even other computers can provide entropy: while most network traffic is entirely machine generated, the exact relative timing of network packets in the end derives from the moment the power button was pressed, another human action. Therefore the timing and nature of input events can provide us with some entropy.
</p>
<h2><span class="mw-headline" id="Types_of_random_number_generators">Types of random number generators</span></h2>
<p>There are multiple ways to divide random number generators; one way is by how the numbers are generated, another is by how they can be used. These are important distinctions: the former may impact how you design your OS, and the latter can make or break the security of your system.
</p>
<h3><span class="mw-headline" id="Sources_of_random_numbers">Sources of random numbers</span></h3>
<p>There are two kinds of random numbers: "true" random and pseudo-random. 
</p><p>For "true" random number generation, the system continuously measures a certain set of events that are expected to be random. This can be anything from cosmic radiation and atomic decay, to the timing of user input and clock jitter. Measurements are de-biased and "stirred" into a pool of <em>entropy</em>, from which random numbers can be extracted.
</p><p>Pseudo-random numbers are generated by an algorithm (a <em>PRNG</em>) that transforms some internal state and calculates an output value upon request. The initial seed can be set, but after that the next state only depends on the previous state. There are many different PRNGs out there, some of which are discussed below.
</p><p>It is possible to use some "true" random numbers to seed the state of a pseudo-random generator, but this does not make the PRNG "truly random". Depending on the exact algorithm, it may be trivial to predict all next outputs given as few as one previous output. This can have serious implications, as discussed in the next section.
</p>
<h3><span class="mw-headline" id="Applications_of_random_numbers">Applications of random numbers</span></h3>
<p>There are roughly two kinds of applications: cryptography, and everything else. 
</p><p>In order to understand the following section, we first should review what cryptographic security means with respect to random number generators. Cryptographers distinguish two types of security: information-theoretic security and computational security. The former of these is the stronger claim. If a cryptosystem is information-theoretically secure, an attacker cannot say anything about an encrypted message without owning the key. Such cryptosystems are rare. Since the attacker must not be able to say <b>anything</b>, everything including patterns, timing and even the length must be hidden. How can one even hide the length of a message? The only choices are to not send the message at all, which defeats the purpose of a cryptosystem, or to send an infinitely long message. So once you start sending, you can never stop.
</p><p>This is why computational security is the weaker, but more practical kind: the ciphertext must be difficult to find, <i>given some reasonable computing power</i>. This limit is chosen with the expectation that it will not be reached in the coming decades. This also allows the user to "leak" some information about the ciphertext (the length, for example), as long finding the original input remains difficult. These systems usually use some operation that is difficult to invert unless the key is known, such as <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/RSA_(cryptosystem)">factoring very large primes</a>. It should be obvious that the key must not be predictable: if an adversary knows what the next outputs will be, it will be very easy for them to guess keys until the correct one is found.
</p><p>"True" random numbers are the best source for cryptographically-secure randomness, however it is difficult to build a large, quickly-replenished pool of entropy where each source is perfectly de-biased and cannot be influenced by the other sources. To "stretch" the entropy in a way that is difficult to reverse, one can use a cryptographically-secure random number generator (CSPRNG). CSPRNGs guarantee that it is computationally difficult to guess the next output having seen previous results, and, if the generator's state is known, which values preceded the known outputs.
</p>
<h2><span class="mw-headline" id="True_random_number_generators">True random number generators</span></h2>
<p>True random number generators use physical devices or phenomena to generate random numbers, whose unpredictability can be traced to the laws of quantum mechanics.
</p>
<h3><span class="mw-headline" id="x86_RDSEED_Instruction">x86 RDSEED Instruction</span></h3>
<p>Newer x86 and x86-64 processors have the instruction RDSEED for generating random numbers.
To use RDSEED you will first need to check if the instruction is available.
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">7</span><span class="w">     </span><span class="c1">; set EAX to request function 7</span>
<span class="nf">mov</span><span class="w"> </span><span class="no">ecx</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="w">     </span><span class="c1">; set ECX to request subfunction 0</span>
<span class="nf">cpuid</span><span class="w"></span>
<span class="nf">shr</span><span class="w"> </span><span class="no">ebx</span><span class="p">,</span><span class="w"> </span><span class="mi">18</span><span class="w">    </span><span class="c1">; the result we want is in EBX...</span>
<span class="nf">and</span><span class="w"> </span><span class="no">ebx</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w">     </span><span class="c1">; ...test for the flag of interest...</span>
</pre></div>
<p>If EBX is set to 1 (or ZF is unset), the instruction is available. Then it can be used to generate a 16/32/64 bit random number (depending on the register size used as an argument). If a random number was generated, the Carry flag is set. 
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">mov</span><span class="w"> </span><span class="no">ecx</span><span class="p">,</span><span class="w"> </span><span class="mi">100</span><span class="w">   </span><span class="c1">; number of retries</span>
<span class="nl">.retry:</span><span class="w"></span>
<span class="w">    </span><span class="nf">rdseed</span><span class="w"> </span><span class="no">eax</span><span class="w"></span>
<span class="w">    </span><span class="nf">jc</span><span class="w"> </span><span class="no">.done</span><span class="w">      </span><span class="c1">; carry flag is set on success</span>
<span class="w">    </span><span class="nf">loop</span><span class="w"> </span><span class="no">.retry</span><span class="w"></span>
<span class="nl">.fail:</span><span class="w"></span>
<span class="w">    </span><span class="c1">; no random number available</span>
<span class="nl">.done:</span><span class="w"></span>
<span class="w">    </span><span class="c1">; random number is in EAX</span>
</pre></div>
<p>It is up to you and your users to trust RDSEED. Because it is implemented in hardware, it effectively is a black box that may contain all sorts of bugs, or worse, backdoors. 
</p>
<h3><span class="mw-headline" id="Dedicated_hardware">Dedicated hardware</span></h3>
<p>There exist devices dedicated to generating "true" random numbers. These range from the consumer-level TPMs, to PCIe "crypto accelerators". These are a generalization of RDSEED/RDRAND, with the downside that you need additional drivers to interface with the device and that the users may not have such a device installed.
</p><p>TPMs, or Trusted Platform Modules, are small co-processors that can be installed on modern motherboards. In addition to random number generation, they also provide <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Trusted_Computing">other trusted computing services</a>. Notably, Windows 11 requires the presence of a TPM. They can also be emulated on the CPU (e.g., Intel PTT or AMD fTPM). As with RDSEED, backdooring may be a concern.
</p>
<h3><span class="mw-headline" id="Sampling_manually">Sampling manually</span></h3>
<p>There are plenty of processes happening with in a running system that are effectively random. Think about all the different interrupts that arrive every second: timers with accuracies of multiple parts-per-million, peripheral I/O, the user interacting with the entire system, and more. 
</p><p>The challenge is finding sources that are (paradoxically) reliably random and difficult to influence and observe from outside. For each of these sources, an estimate must be made of how much entropy they contribute. Measurements add their respective amount of entropy to the pool, while reads decrease the entropy.
</p><p>Because you have full control of this generation method, you can also incorporate the values generated by hardware generators. You can yourself decide how much entropy you count for these generations, even 0 bits.
</p><p>When using timing as entropy source, the timestamp read should be as precise as possible. The TSC works well for this. Gauging the entropy gained from that operation requires knowledge of the timing window for the event to occur in and the tick rate of the TSC. For example, if a TSC has a tick rate of 3 GHz and an event has a 10ms window to occur, then the TSC read can have any one of 30 million values, which means the entropy gained from this is ca. 24.8 bits. Were the TSC slower, only 1 GHz, then the entropy would only be ca. 23.2 bits. 
</p>
<h4><span class="mw-headline" id="Adversarial_entropy">Adversarial entropy</span></h4>
<p>If an adversary can somehow observe the state of the entropy pool and contribute their own entropy into the pool, then it is possible that they would provide entropy in such a way as to force the entropy pool into a lower entropy state. A simple example would be an entropy source periodically checking if a certain bit in the pool is set, and then providing entropy until it is clear. This way, for most of the time, that given bit is clear, and the number of possible states the entropy buffer can be in is halved. A more sophisticated attack is described on DJB's blog: <a rel="nofollow" class="external free" href="https://blog.cr.yp.to/20140205-entropy.html">https://blog.cr.yp.to/20140205-entropy.html</a>
</p><p>It is also partly for this reason that it is unwise to expose the entropy pool unmodified if the user requests a random number. If an adversary has access to the pool (either via a dedicated "add-entropy" interface or a sampled event source), it will be very easy to poison it. A common method used to hide the exact state is to hash (parts of) the pool in combination with counter, for instance the entropy counter, and a salt, using a cryptographically secure hashing function like SHA-256. Because these hash algorithms are difficult to invert, its inputs cannot be easily guessed. It is important to do this only if the pool has some entropy left.
</p>
<h2><span class="mw-headline" id="Cryptographically_secure_pseudorandom_number_generators">Cryptographically secure pseudorandom number generators</span></h2>
<p>Now follow some CSPRNGs. It is important to remember that, as with everything cryptographic, it is best <em>not</em> to homebrew it if you are planning on actually using it. There are many ways things can go wrong, and the more complex the algorithm, the more chances of you making a mistake. Of course, for hobby uses it's perfectly fine; just don't go online banking with your handmade TLS key source.
</p>
<h3><span class="mw-headline" id="x86_RDRAND_Instruction">x86 RDRAND Instruction</span></h3>
<p>RDRAND is slightly older than RDSEED, and provides (<a rel="nofollow" class="external text" href="https://software.intel.com/content/www/us/en/develop/blogs/the-difference-between-rdrand-and-rdseed.html">what Intel claims to be</a>) a CSPRNG.
Its presence is indicated by CPUID leaf 1, ECX bit 30:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w">     </span><span class="c1">; set EAX to request function 1</span>
<span class="nf">mov</span><span class="w"> </span><span class="no">ecx</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="w">     </span><span class="c1">; set ECX to request subfunction 0</span>
<span class="nf">cpuid</span><span class="w"></span>
<span class="nf">shr</span><span class="w"> </span><span class="no">ecx</span><span class="p">,</span><span class="w"> </span><span class="mi">30</span><span class="w">    </span><span class="c1">; the result we want is in ECX...</span>
<span class="nf">and</span><span class="w"> </span><span class="no">ecx</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w">     </span><span class="c1">; ...test for the flag of interest...</span>
</pre></div>
<p>If ECX is set to 1 (or ZF is unset), the instruction is available. Usage is identical to RDSEED:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">mov</span><span class="w"> </span><span class="no">ecx</span><span class="p">,</span><span class="w"> </span><span class="mi">100</span><span class="w">   </span><span class="c1">; number of retries</span>
<span class="nl">.retry:</span><span class="w"></span>
<span class="w">    </span><span class="nf">rdrand</span><span class="w"> </span><span class="no">eax</span><span class="w"></span>
<span class="w">    </span><span class="nf">jc</span><span class="w"> </span><span class="no">.done</span><span class="w">      </span><span class="c1">; carry flag is set on success</span>
<span class="w">    </span><span class="nf">loop</span><span class="w"> </span><span class="no">.retry</span><span class="w"></span>
<span class="nl">.fail:</span><span class="w"></span>
<span class="w">    </span><span class="c1">; no random number available</span>
<span class="nl">.done:</span><span class="w"></span>
<span class="w">    </span><span class="c1">; random number is in EAX</span>
</pre></div>
<p>It is automatically seeded by the same entropy source that RDSEED reads from, and cannot be seeded manually. It therefore is subject to the same caveats as RDSEED.
</p>
<h3><span class="mw-headline" id="Ciphers">Ciphers</span></h3>
<p>It is fairly common to construct a CSPRNG by seeding a secure cipher, such as ChaCha20 and AES, and running many cycles where the output gets re-encrypted together with a running counter. Every once in a while, a new key is created, potentially involving another secure random source.
</p><p><a rel="nofollow" class="external text" href="https://www.bentasker.co.uk/blog/software-development/689-writing-a-chacha20-based-csprng">Writing (and backdooring) a ChaCha20 based CSPRNG</a> may be an interesting article on the subject, and how it can go wrong in surprising ways.
</p>
<h2><span class="mw-headline" id="Pseudorandom_number_generators">Pseudorandom number generators</span></h2>
<p>Next are various regular PRNGs. These vary in all dimensions of quality, simplicity and speed. Carefully read each explanation!
</p>
<h3><span id="The_Standard.27s_Example"></span><span class="mw-headline" id="The_Standard's_Example">The Standard's Example</span></h3>
<p>Taken directly from the <a rel="nofollow" class="external text" href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf">C standard document (p. 347)</a>:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">// The following functions define a portable implementation of rand and srand.</span>

<span class="k">static</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">  </span><span class="c1">// NB: &quot;unsigned long int&quot; is assumed to be 32 bits wide</span>

<span class="kt">int</span><span class="w"> </span><span class="nf">rand</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w">  </span><span class="c1">// RAND_MAX assumed to be 32767</span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">next</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">1103515245</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">12345</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="n">next</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">65536</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">32768</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kt">void</span><span class="w"> </span><span class="nf">srand</span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">seed</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">seed</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>This is a fairly standard but mediocre <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Linear_congruential_generator">Linear Congruential Generator</a> (LCG). It returns 15 random bits.
</p><p>It is based on this recurrence formula
</p>
<pre> X<sub>n+1</sub> = (aX<sub>n</sub> + c) mod m
</pre>
<p>where the modulus m is the maximum number of random values the LCG can produce. For the example in the C standard, a = 1103515245, c = 12345 and m = 2<sup>32</sup> (implicitly).
The quality of the LCG depends heavily on these values and finding good values is difficult. Wikipedia has <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use">a list of common parameters</a>.
</p>
<h3><span class="mw-headline" id="Fibonacci_random_number">Fibonacci random number</span></h3>
<p>A special "remake" of the Fibonacci sequence can be used to generate random numbers. This is done by having 4 "seeds", which start off as really weird values (e.g. 45, 80, 22, 32).
The seed() function adds a new seed to the end of the sequence, and erases the first one (the seeds are referred to as A, B, C and D). The rand() function just returns the sum of the seeds, and calls seed() with the result. <a href="./User:Mariuszp" title="User:Mariuszp">Glidix</a> is a good example of this RNG implementation.
</p>
<h3><span class="mw-headline" id="Linear_Feedback_Shift_Register">Linear Feedback Shift Register</span></h3>
<p>A Linear Feedback Shift Register (LFSR) is a simple way to generate a very long sequence of random numbers, given a non-zero seed. The idea is as follows: an <i>n</i>-bit LFSR has <i>n</i> bits (either 0 or 1). Initially, the register is filled with an <i>n</i>-bit seed. For each next value to be generated, "tap" certain bits from the register and XOR them together. Feed the resulting binary value into the left-most bit, shifting all bits one position to the right. The bit that is shifted out of the LFSR on the right-most side is the generated random bit.
</p><p>The sequence of bits that an LFSR can produce will eventually repeat, but by choosing the XOR'ed bits carefully the period of the LFSR can be increased to up to 2<sup>n</sup> - 1 bits. This means that after a sequence of 2<sup>n</sup> - 1 bits, the same sequence will be returned. However, this is a property that all pseudo-random number generators have: without changing the seed, they will eventually repeat themselves.
</p><p>The following is an example of an 16-bit LFSR using bits 11, 13, 14 and 16 XOR'ed together as its input. The period of this LFSR is 65535 bits, so it will generate a pseudo-random sequence of 65535 bits before the sequence repeats itself. The next bit produced by the LFSR is 1 (the value of bit 16) and the next input bit is 0.
</p>
<pre>            1                                       11      13  14      16
          +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
INPUT --&gt; | 0   1   0   0   0   1   0   0   1   1   1   1   0   0   0   1 | --&gt; OUTPUT
          +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

INPUT = bit 11 XOR bit 13 XOR bit 14 XOR bit 16
</pre>
<p>Larger (and smaller) LFSR's are also possible. Smart people have derived polynomials that will ensure that given any non-zero input, the period of the LFSR is as large as it can be (2<sup>n</sup> - 1). Such a polynomial is written as x<sup>16</sup> + x<sup>14</sup> + x<sup>13</sup> + x<sup>11</sup> + 1. For this example polynomial for <i>n</i> = 16, bits 16, 14, 13 and 11 must be XOR'ed together and provided as input, counting from the left and starting with 1. Polynomials for other values of <i>n</i> can be found <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Linear_feedback_shift_register#Some_polynomials_for_maximal_LFSRs">here on Wikipedia</a> and on page 5 of <a rel="nofollow" class="external text" href="http://www.xilinx.com/support/documentation/application_notes/xapp052.pdf">this PDF document</a>.
</p><p>Note that the seed must never be zero. This also means that it is never possible for all registers to have bit value zero, and that of the 2<sup>n</sup> possible combinations of registers, the all-zero state is not allowed. Therefore, 2<sup>n</sup> - 1 states is the maximum possible.
</p>
<h3><span class="mw-headline" id="Wichmann-Hill">Wichmann-Hill</span></h3>
<p>In 1982, Brian Wichmann and David Hill <a rel="nofollow" class="external text" href="https://doi.org/10.2307/2347988">proposed</a> to combine three linear congruential generators, then normalizing and summing the results to get a number uniformly distributed between 0 and 1. A common instance is:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">static</span><span class="w"> </span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">seed</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="w"> </span><span class="cm">/* seed with numbers between 1 and 30000 */</span><span class="w"></span>
<span class="kt">float</span><span class="w"> </span><span class="nf">wichmann_hill</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">  </span><span class="n">seed</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="mi">171</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">seed</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">30269</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="n">seed</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="mi">172</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">seed</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">30307</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="n">seed</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="mi">170</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">seed</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">30323</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="n">fmod</span><span class="p">(</span><span class="n">seed</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mf">30269.0</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">seed</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mf">30307.0</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">seed</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mf">30323.0</span><span class="p">,</span><span class="w"> </span><span class="mf">1.0</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>This version is known to have a period of just shy of of seven trillion (the least common multiple of 30268, 30306, and 30322).
</p>
<h3><span class="mw-headline" id="Mersenne_Twister">Mersenne Twister</span></h3>
<p>The Mersenne Twister is an incredibly popular PRNG and is available on most platforms; for example, it is part of the set of generators required by the C++11 standard library. An implementation of the 64-bit MT-19937 version in C is as follows:
</p><p>Implementation according to Wikipedia:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stddef.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdint.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;assert.h&gt;</span><span class="cp"></span>

<span class="cp">#ifdef USE32</span>
<span class="k">typedef</span><span class="w"> </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">word_t</span><span class="p">;</span><span class="w"></span>
<span class="cp">#define STATE_SIZE  624</span>
<span class="cp">#define MIDDLE      397</span>
<span class="cp">#define INIT_SHIFT  30</span>
<span class="cp">#define INIT_FACT   1812433253</span>
<span class="cp">#define TWIST_MASK  0x9908b0df</span>
<span class="cp">#define SHIFT1      11</span>
<span class="cp">#define MASK1       0xffffffff</span>
<span class="cp">#define SHIFT2      7</span>
<span class="cp">#define MASK2       0x9d2c5680</span>
<span class="cp">#define SHIFT3      15</span>
<span class="cp">#define MASK3       0xefc60000</span>
<span class="cp">#define SHIFT4      18</span>
<span class="cp">#else</span>
<span class="k">typedef</span><span class="w"> </span><span class="kt">uint64_t</span><span class="w"> </span><span class="n">word_t</span><span class="p">;</span><span class="w"></span>
<span class="cp">#define STATE_SIZE  312</span>
<span class="cp">#define MIDDLE      156</span>
<span class="cp">#define INIT_SHIFT  62</span>
<span class="cp">#define TWIST_MASK  0xb5026f5aa96619e9</span>
<span class="cp">#define INIT_FACT   6364136223846793005</span>
<span class="cp">#define SHIFT1      29</span>
<span class="cp">#define MASK1       0x5555555555555555</span>
<span class="cp">#define SHIFT2      17</span>
<span class="cp">#define MASK2       0x71d67fffeda60000</span>
<span class="cp">#define SHIFT3      37</span>
<span class="cp">#define MASK3       0xfff7eee000000000</span>
<span class="cp">#define SHIFT4      43</span>
<span class="cp">#endif</span>

<span class="cp">#define LOWER_MASK  0x7fffffff</span>
<span class="cp">#define UPPER_MASK  (~(word_t)LOWER_MASK)</span>
<span class="k">static</span><span class="w"> </span><span class="n">word_t</span><span class="w"> </span><span class="n">state</span><span class="p">[</span><span class="n">STATE_SIZE</span><span class="p">];</span><span class="w"></span>
<span class="k">static</span><span class="w"> </span><span class="kt">size_t</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">STATE_SIZE</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>

<span class="k">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">seed</span><span class="p">(</span><span class="n">word_t</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">STATE_SIZE</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">size_t</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">STATE_SIZE</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"></span>
<span class="w">        </span><span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">INIT_FACT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">INIT_SHIFT</span><span class="p">)))</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="k">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">twist</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">size_t</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">STATE_SIZE</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">word_t</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">UPPER_MASK</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">state</span><span class="p">[(</span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">STATE_SIZE</span><span class="p">]</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">LOWER_MASK</span><span class="p">);</span><span class="w"></span>
<span class="w">        </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">1</span><span class="o">?</span><span class="w"> </span><span class="n">TWIST_MASK</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w"></span>
<span class="w">        </span><span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">state</span><span class="p">[(</span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">MIDDLE</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">STATE_SIZE</span><span class="p">]</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="n">x</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="n">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="k">static</span><span class="w"> </span><span class="n">word_t</span><span class="w"> </span><span class="nf">mt_random</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">index</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">STATE_SIZE</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">assert</span><span class="p">(</span><span class="n">index</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">STATE_SIZE</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="o">!</span><span class="s">&quot;Generator never seeded&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">        </span><span class="n">twist</span><span class="p">();</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="n">word_t</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">state</span><span class="p">[</span><span class="n">index</span><span class="p">];</span><span class="w"></span>
<span class="w">    </span><span class="n">y</span><span class="w"> </span><span class="o">^=</span><span class="w"> </span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">SHIFT1</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">MASK1</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">y</span><span class="w"> </span><span class="o">^=</span><span class="w"> </span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">SHIFT2</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">MASK2</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">y</span><span class="w"> </span><span class="o">^=</span><span class="w"> </span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">SHIFT3</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">MASK3</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">y</span><span class="w"> </span><span class="o">^=</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">SHIFT4</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="n">index</span><span class="o">++</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">y</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>Some implementations automatically seed the generator with seed 5489, but this will (obviously) lead to the same outputs at every initialization.
</p><p><br />
It outperforms all PRNGs listed above, but it is rather slow due to its large state size. It also has problems in some statistical areas. See <a rel="nofollow" class="external text" href="https://arxiv.org/abs/1910.06437">"It is high time we let go of the Mersenne Twister"</a>.
</p>
<h3><span class="mw-headline" id="PCG_family">PCG family</span></h3>
<p>The <a rel="nofollow" class="external text" href="https://www.pcg-random.org/">PCG family</a> is a relatively recent addition to the field of PRNGs. The simplest version uses an LCG with a permutation operator to scramble the output. It was built to pass as many statistical tests as it could, while still staying small and fast. There is a <a rel="nofollow" class="external text" href="https://www.pcg-random.org/pdf/hmc-cs-2014-0905.pdf">comprehensive paper</a> describing the generators and Apache 2.0-licensed code is available: <a rel="nofollow" class="external free" href="https://www.pcg-random.org/download.html">https://www.pcg-random.org/download.html</a>.
</p><p>Note that the site claims that PCG's outputs are more difficult to predict than those of other PRNGs and that that means that PCG is more secure. It is possible to predict some generators after <a rel="nofollow" class="external text" href="https://pcg.di.unimi.it/pcg.php#claims">only three outputs</a>, so it should not be considered "hard to break" and definitely not "more secure". The predictability of a <i>non</i>-cryptographically-secure PRNG is usually not a problem.
</p>
<h3><span class="mw-headline" id="xoshiro_family">xoshiro family</span></h3>
<p>Like PCG, the xoshiro and related xoroshiro families are fairly new PRNGs.
</p>
<h3><span class="mw-headline" id="Rolling_your_own">Rolling your own</span></h3>
<p>If you are still not satisfied, you may want to build your own PRNG. You can do this in a fairly trial-and-error way by writing something that looks good and subjecting it to automated statistical testing suites such as <a rel="nofollow" class="external text" href="http://simul.iro.umontreal.ca/testu01/tu01.html">TestU01</a>'s SmallCrush, Crush and finally BigCrush. These tests are very easy to run and can quickly point out problems, for example:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;unif01.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;bbattery.h&gt;</span><span class="cp"></span>

<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdint.h&gt;</span><span class="cp"></span>

<span class="k">static</span><span class="w"> </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">custom_rand</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="c1">// This is a terrible generator!</span>
<span class="w">    </span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">next</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mh">0x4B4B9656U</span><span class="p">)</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="p">(</span><span class="n">next</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mh">0x565AC3C3U</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">next</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">next</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">unif01_Gen</span><span class="w"> </span><span class="o">*</span><span class="n">gen</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unif01_CreateExternGenBits</span><span class="p">(</span><span class="s">&quot;custom_rand&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">custom_rand</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">bbattery_SmallCrush</span><span class="p">(</span><span class="n">gen</span><span class="p">);</span><span class="w">  </span><span class="c1">// or bbattery_Crush or bbattery_BigCrush</span>
<span class="w">    </span><span class="n">unif01_DeleteExternGenBits</span><span class="p">(</span><span class="n">gen</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>SmallCrush will report that this generator failed 12 out of 15 statistical tests. The other tests, which are also much slower, are therefore not necessary.
</p>
<!-- 
NewPP limit report
Cached time: 20250212011603
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.062 seconds
Real time usage: 1.119 seconds
Preprocessor visited node count: 107/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 27390/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:2935-0!canonical and timestamp 20250212011602 and revision id 27595.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Random_Number_Generator&amp;oldid=27595">https://wiki.osdev.org/index.php?title=Random_Number_Generator&amp;oldid=27595</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Common_Algorithms" title="Category:Common Algorithms">Common Algorithms</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Random+Number+Generator" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Random_Number_Generator#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Random_Number_Generator" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:Random_Number_Generator" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Random_Number_Generator"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Random_Number_Generator&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Random_Number_Generator&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Random_Number_Generator" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Random_Number_Generator" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Random_Number_Generator&amp;oldid=27595" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Random_Number_Generator&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 16 January 2023, at 02:22.</li>
	<li id="footer-info-0">This page has been accessed 6,452 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Random_Number_Generator&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.062","walltime":"1.119","ppvisitednodes":{"value":107,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":27390,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250212011603","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":1226});});</script>
</body>
</html>