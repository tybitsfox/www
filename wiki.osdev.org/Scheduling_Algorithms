<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Scheduling Algorithms - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"c0fa7d6580d95d73e2cbad15","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Scheduling_Algorithms","wgTitle":"Scheduling Algorithms","wgCurRevisionId":28155,"wgRevisionId":28155,"wgArticleId":1477,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Stubs","Processes and Threads","Common Algorithms","Multitasking","Scheduling"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Scheduling_Algorithms","wgRelevantArticleId":1477,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[]
,"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Scheduling_Algorithms rootpage-Scheduling_Algorithms skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Scheduling Algorithms</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Scheduling_Algorithms#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Scheduling_Algorithms#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>A scheduling algorithm is the algorithm which dictates how much CPU time is allocated to <a href="Processes_and_Threads" title="Processes and Threads">Processes and Threads</a>. The goal of any scheduling algorithm is to fulfill a number of criteria:
</p>
<ul><li>no task must be starved of resources - all tasks must get their chance at CPU time;</li>
<li>if using priorities, a low-priority task must not hold up a high-priority task;</li>
<li>the scheduler must scale well with a growing number of tasks, ideally being O(1). This has been done, for example, in the Linux kernel.</li></ul>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Scheduling_Algorithms#Interactive_Scheduling_Algorithms"><span class="tocnumber">1</span> <span class="toctext">Interactive Scheduling Algorithms</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="Scheduling_Algorithms#Round_Robin"><span class="tocnumber">1.1</span> <span class="toctext">Round Robin</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="Scheduling_Algorithms#Priority-Based_Round_Robin"><span class="tocnumber">1.2</span> <span class="toctext">Priority-Based Round Robin</span></a>
<ul>
<li class="toclevel-3 tocsection-4"><a href="Scheduling_Algorithms#SVR2_Unix_Implementation"><span class="tocnumber">1.2.1</span> <span class="toctext">SVR2 Unix Implementation</span></a>
<ul>
<li class="toclevel-4 tocsection-5"><a href="Scheduling_Algorithms#References"><span class="tocnumber">1.2.1.1</span> <span class="toctext">References</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-2 tocsection-6"><a href="Scheduling_Algorithms#Shortest_Process_Next"><span class="tocnumber">1.3</span> <span class="toctext">Shortest Process Next</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Scheduling_Algorithms#Lottery_Scheduling"><span class="tocnumber">1.4</span> <span class="toctext">Lottery Scheduling</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-8"><a href="Scheduling_Algorithms#Batch_Scheduling_Algorithms"><span class="tocnumber">2</span> <span class="toctext">Batch Scheduling Algorithms</span></a>
<ul>
<li class="toclevel-2 tocsection-9"><a href="Scheduling_Algorithms#First_Come_First_Served"><span class="tocnumber">2.1</span> <span class="toctext">First Come First Served</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="Scheduling_Algorithms#Shortest_Job_First_(SJF)"><span class="tocnumber">2.2</span> <span class="toctext">Shortest Job First (SJF)</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="Scheduling_Algorithms#Shortest_Remaining_Time_Next"><span class="tocnumber">2.3</span> <span class="toctext">Shortest Remaining Time Next</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="Scheduling_Algorithms#Highest_Response_Ratio_Next"><span class="tocnumber">2.4</span> <span class="toctext">Highest Response Ratio Next</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-13"><a href="Scheduling_Algorithms#Real-Time_Scheduling_Algorithms"><span class="tocnumber">3</span> <span class="toctext">Real-Time Scheduling Algorithms</span></a>
<ul>
<li class="toclevel-2 tocsection-14"><a href="Scheduling_Algorithms#Rate_Monotonic_Scheduling"><span class="tocnumber">3.1</span> <span class="toctext">Rate Monotonic Scheduling</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="Scheduling_Algorithms#Earliest_Deadline_First"><span class="tocnumber">3.2</span> <span class="toctext">Earliest Deadline First</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-16"><a href="Scheduling_Algorithms#See_Also"><span class="tocnumber">4</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-17"><a href="Scheduling_Algorithms#Articles"><span class="tocnumber">4.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-18"><a href="Scheduling_Algorithms#Threads"><span class="tocnumber">4.2</span> <span class="toctext">Threads</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="Scheduling_Algorithms#External_Links"><span class="tocnumber">4.3</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Interactive_Scheduling_Algorithms">Interactive Scheduling Algorithms</span></h2>
<h3><span class="mw-headline" id="Round_Robin">Round Robin</span></h3>
<p>Round Robin is the simplest algorithm for a preemptive scheduler. Only a single queue of processes is used. When the system timer fires, the next process in the queue is switched to, and the preempted process is put back into the queue.
</p><p>Each process is assigned a time slice or "quantum". This quantum dictates the number of system timer ticks the process may run for before being preempted. For example, if the timer runs at 100Hz, and a process' quantum is 10 ticks, it may run for 100 milliseconds (10/100 of a second). To achieve this, the running process is given a variable that starts at its quantum, and is then decremented each tick until it reaches zero. The process may also relinquish its quantum by doing a blocking system call (i.e. I/O), like in other preemptive algorithms.
</p><p>In the Round Robin algorithm, each process is given an equal quantum; the big question is how to choose the time quantum.
</p><p>Here are some considerations:
The smaller the quantum, the larger the proportion of the time used in context switches.<br />
Interactive processes should do I/O before being preempted, so that unnecessary preemptions are avoided.<br />
The larger the quantum, the "laggier" the user experience - quanta above 100ms should be avoided.<br /> 
</p><p>A frequently chosen compromise for the quantum is between 20ms and 50ms.
</p><p>Advantages of Round Robin include its simplicity and strict "first come, first served" nature. Disadvantages include the absence of a priority system: lots of low privilege processes may starve one high privilege one.
</p>
<h3><span class="mw-headline" id="Priority-Based_Round_Robin">Priority-Based Round Robin</span></h3>
<p>Priority scheduling is similar to Round Robin, but allows a hierarchy of processes. Multiple process queues are used, one for each priority. As long as there are processes in a higher priority queue, they are run first. For example, if you have 2 queues, "high" and "low", in this state:
</p><p>"high": X<br />
"low": xterm, vim, firefox
</p><p>The first process to run would be X, then if it blocked (for I/O, probably), the state would be:
</p><p>"high":<br />
"low": xterm, vim, firefox
</p><p>The next process that would run would be xterm. If process "kswapd" is added to "high", it would then get the next quantum:
</p><p>"high": kswapd<br />
"low": vim, firefox, xterm
</p><p>There are usually between four and sixteen queues used in a priority scheduler.
</p><p>Advantages of this algorithm are simplicity and reasonable support for priorities. The disadvantage (or possible advantage) is that privileged processes may completely starve unprivileged ones. This is less of a problem than it appears, because processes (especially daemons, which are usually privileged) are usually blocked for I/O. 
</p><p>Let's have a look on the round robin scheduler with three processes in the queue: A B C:
</p>
<pre>A(time 0) B(time 10) C(time 10)  A's time slice is zero: let's do round robin scheduling:
B(time 10) C(time 10) A(time 10) ... one clock tick occurs ... the next one ...
B(time 8) C(time 10) A(time 10)  ... several clock ticks occur ... b's time slice is worn out ...
C(time 10) A(time 10) B(time 10) ... ten clock ticks later ...
A(time 10) B(time 10) C(time 10) ... now A has its share of CPU time again.
</pre>
<h4><span class="mw-headline" id="SVR2_Unix_Implementation">SVR2 Unix Implementation</span></h4>
<p>Classical UNIX systems scheduled <i>equal-priority</i> processes in a round-robin manner, each running for a fixed time quantum. If a higher priority process becomes runnable, it will preempt the current process (if it's <i>not</i> running in kernel mode, since classical UNIX kernels were non-preemptive) even if the process did not finish its time quantum. This way, high priority processes can possibly starve low-priority ones. To avoid this, a new factor in calculating a process priority was introduced: the 'usage' factor.
</p><p>This factor allows the kernel to vary processes priorities dynamically. When a process is not running, the kernel periodically increases its priority. When a process receives some CPU time, the kernel reduces its priority. This scheme will potentially prevent the starvation of any process, since eventually the priority of any waiting process will rise high enough to be scheduled.
</p><p>All user-space priorities are lower than the lowest system priority. The usage factor of a user-process is calculated by the amount of compute time to real-time consumed by the process. A process that has used a lot of compute time in the last real-time unit is assigned a low user priority. Because interactive processes are characterized by low ratios of compute to real time, interactive response is maintained without any special arrangements.
</p><p>If there are no processes eligible for execution, the CPU idles till the next interrupt, which will happen <i>at most</i> after one clock tick. After handling the interrupt, the kernel again attempts to schedule a process to run.
</p>
<h5><span class="mw-headline" id="References">References</span></h5>
<p>Ken Thompson, "UNIX Implementation", 2.3 - Synchronization and Scheduling, Bell Laboratories
</p><p>Maurice J. Bach, "The Design of the UNIX Operating System", Chapter 8 - Process Scheduling and Time, Prentice Hall
</p>
<h3><span class="mw-headline" id="Shortest_Process_Next">Shortest Process Next</span></h3>
<p>Version of SRTN (Shortest Remaining Time Next) for interactive systems. The Problem here is that we can't say what the user's next command will be. This algorithm needs prediction&#160;:)
</p>
<h3><span class="mw-headline" id="Lottery_Scheduling">Lottery Scheduling</span></h3>
<p>Lottery Scheduling is a simple algorithm that statistically guarantees a variable fraction of processor time to each runnable process. The concept is much like a lottery. At each scheduling decision, each runnable process is given a number of "lottery tickets". Then a random number is generated, corresponding to a specific ticket. The process with that ticket gets the quantum.
</p><p>Although there is no absolute guarantee that processes will be treated equally, the frequency of scheduling events in a preemptive multitasking system means that it comes very close to doing so. The number of tickets given to a process divided by the total number of tickets is the statistical fraction of the quanta given to that process. For example, if these processes are given this number of tickets:
</p><p>foo - 5<br />
bar - 7<br />
bash - 4
</p><p>The fractions of processor time given to each should be:
</p><p>foo - 5/16 - 31%<br />
bar - 7/16 - 44%<br />
bash - 4/16 - 25%
</p><p>As you can see, it is trivial to create a fine grained priority system: just give higher priority processes more tickets.
</p><p>Advantages of Lottery Scheduling include fine grained priorities and statistical fairness. Disadvantages include the need for a reliable random number generator and non-absolute guarantees, especially on systems with large quanta.
</p><p>You need to implement a <a href="Random_Number_Generator" title="Random Number Generator">Random Number Generator</a> to use this algorithm.
</p>
<h2><span class="mw-headline" id="Batch_Scheduling_Algorithms">Batch Scheduling Algorithms</span></h2>
<h3><span class="mw-headline" id="First_Come_First_Served">First Come First Served</span></h3>
<p>This scheduling method is used on Batch-Systems, it is NON-PREEMPTIVE.
It implements just one queue which holds the tasks in order they come in.
</p><p>The order the tasks arrive is very important for the Turnaround-Time:
</p><p>Task1(24) Task2(6) Task3(6)<br />
avg. Turnaround-Time = (24 + 30 + 36) / 3 = 30 time units  (this assumes all tasks arrive at time 0)
</p><p>Task1(6) Task2(6) Task3(24)<br />
avg. Turnaround-Time = (6 +12 +36) / 3 = 18 time units (this assumes all tasks arrive at time 0)
</p><p>Strengths:
</p><p>-Simple<br />
-Fair
</p><p>Problems:
</p><p>-Convoy Effect<br />
-Order of task arrival is very important for average Turnaround time
</p>
<h3><span id="Shortest_Job_First_.28SJF.29"></span><span class="mw-headline" id="Shortest_Job_First_(SJF)">Shortest Job First (SJF)</span></h3>
<p>Is also NON-PREEMPTIVE. It selects the shortest Job/Process which is available in the run queue.<br />
This scheduling algorithm assumes that run times are known in advance.
</p><p>Strengths:
</p><p>-nearly optimal (Turnaround Time)
</p><p>Problems:
</p><p>-Only optimal if all jobs/process are available simultaneously<br /> 
-Usually run times are not known ...
</p>
<h3><span class="mw-headline" id="Shortest_Remaining_Time_Next">Shortest Remaining Time Next</span></h3>
<p>Preemptive version of SJF (Shortest Job First).
Schedulre picks the job/process which has the lowest remaining time to run.
</p><p>Strengths:
</p><p>-probably optimal (Tournaround Time)
</p><p>Problems:
</p><p>-again run times must be known
</p>
<h3><span class="mw-headline" id="Highest_Response_Ratio_Next">Highest Response Ratio Next</span></h3>
<center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p><a href="./File:Stub.png" class="image" title="This article is a stub!"><img alt="This article is a stub!" src="images/f/fe/Stub.png" decoding="async" width="50" height="50" data-file-width="50" data-file-height="50" /></a>
This page or section is a <a href="./Category:Stubs" title="Category:Stubs">stub</a>. You can help the wiki by <i>accurately</i> <a rel="nofollow" class="external text" href="https://wiki.osdev.org/index.php?title=Scheduling_Algorithms&amp;action=edit">contributing</a> to it.
</p>
</td>
<td>
</td></tr></tbody></table>
</center>
<h2><span class="mw-headline" id="Real-Time_Scheduling_Algorithms">Real-Time Scheduling Algorithms</span></h2>
<p>Real-Time Scheduling Algorithms are a special class of algorithms of which it is required that they can guarantee a process will be done before its deadline. The only way these algorithms can work is if they at least know when the deadline for a process is, and how much the process takes of the system. Only if the system is not overloaded (subjective term) can the threads be guaranteed to finish before their deadline.
</p><p>Each task has to be scheduled X<sub>t</sub> times a second, or every Y<sub>t</sub> milliseconds (Y<sub>t</sub> = 1000 / X<sub>t</sub>). Each run of that task takes at most Z<sub>t</sub> milliseconds. This task then creates a load of L<sub>t</sub> = Z<sub>t</sub> / Y<sub>t</sub>.
</p><p>The system as a whole has a load L, which is the sum of all task-loads: L = <big>E</big> L<sub>t</sub>. If the system load exceeds 0.7 (in some rare cases it can be slightly larger, but we don't count them) the system is unschedulable using Rate Monotonic Scheduling. If this system load exceeds 1.0 it is unschedulable for any real-time system. Note that for normal systems any load is possible, including the ones that are extremely large. They will make the system very unusable though.
</p>
<h3><span class="mw-headline" id="Rate_Monotonic_Scheduling">Rate Monotonic Scheduling</span></h3>
<p>Rate Monotonic Scheduling is a way to schedule Real-Time threads in such a way, that can be guaranteed that none of the threads will ever exceed their deadline.
</p><p>The load of the system may vary, but there is a utilisation-based test that, if satisfied, guarantees that the system will always be schedulable. As an example the utilisation limit for a system with one process is 100% (as there is no need for preemption). The utilisation limit for a system with 3 processes is approximately 69%.
</p><p>The utilisation based test is <i>sufficient</i> but not <i>necessary</i>. If a process set passes the utilisation based test, it will be schedulable. However, process sets can be constructed that fail the utilisation test but are in fact (trivially) schedulable.
</p><p>The RMS scheduling works by assigning each task a priority based on its interval. The task with the shortest interval gets the highest priority and the task with the largest interval gets the lowest priority (still real-time though). The tasks are then run similar to a prioritized preempting [#Round-Robin]. This means, any task that can run runs, and if a task runs but a task with a higher priority is available, the higher one runs instead.
</p><p>If your system is based on a <a href="Scheduling_Algorithms#Round-Robin">Round-Robin</a> scheduler, this is the easiest way to do Real-Time scheduling.
</p>
<h3><span class="mw-headline" id="Earliest_Deadline_First">Earliest Deadline First</span></h3>
<p>Each task in an EDF scheduler is assigned a _deadline_ (e.g. a moment in the future at which the task _must_ be completed). Every time a task is inserted in the system or completed, the scheduler looks for the task which has the closest deadline and selects it for execution. In order to ensure that the scheduler is still able to meet each deadline, a '<i>monitor</i> must evaluate if each new task doesn't overload the system and deny execution if it will do so.
</p><p>In order to implement EDF-based system, one will have to know both the _deadline_ of the task (which could optionally be computed as "no more than X ms in the future") and the expected time needed to perform the task (required by the monitor). QoS network routers usually implement variants of EDF scheduling.
</p><p>Again, there is a utilisation based test for EDF systems. The limit is simpler however - it is always 100%, no matter how many processes are in the set. This makes dynamic analysis of schedulability easier. Not only that, but the EDF utilisation test is both <i>sufficient</i> and <i>necessary</i>, so can be relied on to provide an accurate indication of schedulability.
</p><p>For more information, see "Real time systems and programming languages" by Burns &amp; Wellings.
</p>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<h3><span class="mw-headline" id="Articles">Articles</span></h3>
<ul><li><a href="Real-Time_Systems" title="Real-Time Systems">Real-Time Systems</a></li></ul>
<h3><span class="mw-headline" id="Threads">Threads</span></h3>
<ul><li><a href="http://forum.osdev.org/viewtopic.php?t=8575" class="extiw" title="topic:8575">Real-Time Scheduling</a></li></ul>
<h3><span class="mw-headline" id="External_Links">External Links</span></h3>
<ul><li><a rel="nofollow" class="external text" href="https://web.archive.org/web/20070818053107/http://josh.trancesoftware.com/linux/">Linux 2.6 scheduler, under FDL</a></li>
<li><a href="https://wikipedia.org/wiki/Scheduling_(computing)" class="extiw" title="wikipedia:Scheduling (computing)">Wikipedia:Scheduling (computing)</a></li></ul>
<!-- 
NewPP limit report
Cached time: 20250211121902
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.017 seconds
Real time usage: 0.017 seconds
Preprocessor visited node count: 74/1000000
Post‐expand include size: 491/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 4/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 419/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.744      1 Template:Stub
100.00%    0.744      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1477-0!canonical and timestamp 20250211121902 and revision id 28155.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Scheduling_Algorithms&amp;oldid=28155">https://wiki.osdev.org/index.php?title=Scheduling_Algorithms&amp;oldid=28155</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="./Category:Stubs" title="Category:Stubs">Stubs</a></li><li><a href="./Category:Processes_and_Threads" title="Category:Processes and Threads">Processes and Threads</a></li><li><a href="./Category:Common_Algorithms" title="Category:Common Algorithms">Common Algorithms</a></li><li><a href="./Category:Multitasking" title="Category:Multitasking">Multitasking</a></li><li><a href="./Category:Scheduling" title="Category:Scheduling">Scheduling</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Scheduling+Algorithms" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Scheduling_Algorithms#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Scheduling_Algorithms" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:Scheduling_Algorithms&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Scheduling_Algorithms"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Scheduling_Algorithms&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Scheduling_Algorithms&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Scheduling_Algorithms" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Scheduling_Algorithms" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Scheduling_Algorithms&amp;oldid=28155" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Scheduling_Algorithms&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 10 July 2023, at 14:36.</li>
	<li id="footer-info-0">This page has been accessed 14,340 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Scheduling_Algorithms&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.017","walltime":"0.017","ppvisitednodes":{"value":74,"limit":1000000},"postexpandincludesize":{"value":491,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":4,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":419,"limit":5000000},"timingprofile":["100.00%    0.744      1 Template:Stub","100.00%    0.744      1 -total"]},"cachereport":{"timestamp":"20250211121902","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":109});});</script>
</body>
</html>