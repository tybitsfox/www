<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>User:Glauxosdever/Version Control Software - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"4de85e6e337f85d323f52b31","wgCSPNonce":false,"wgCanonicalNamespace":"User","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":2,"wgPageName":"User:Glauxosdever/Version_Control_Software","wgTitle":"Glauxosdever/Version Control Software","wgCurRevisionId":23202,"wgRevisionId":23202,"wgArticleId":4351,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Stubs"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"User:Glauxosdever/Version_Control_Software","wgRelevantArticleId":4351,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":
false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRelevantUserName":"Glauxosdever","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="../favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="../opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="../api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-2 ns-subject page-User_Glauxosdever_Version_Control_Software rootpage-User_Glauxosdever skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-namespace">User</span><span class="mw-page-title-separator">:</span><span class="mw-page-title-main">Glauxosdever/Version Control Software</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Version_Control_Software#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Version_Control_Software#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p><a href="../File:Stub.png" class="image" title="This article is a stub!"><img alt="This article is a stub!" src="../images/f/fe/Stub.png" decoding="async" width="50" height="50" data-file-width="50" data-file-height="50" /></a>
This page or section is a <a href="../Category:Stubs" title="Category:Stubs">stub</a>. You can help the wiki by <i>accurately</i> <a rel="nofollow" class="external text" href="https://wiki.osdev.org/index.php?title=User:Glauxosdever/Version_Control_Software&amp;action=edit">contributing</a> to it.
</p>
</td>
<td>
</td></tr></tbody></table>
</center>
<p><b>Version Control Software</b> (<b>VCS</b>) is fundamental when it comes to managing your source code repository. It basically allows you (singular or plural) to work on several features in parallel and to revert your code to a previous known working state. Most OSDev projects use <a href="../Git" title="Git">git</a> as their VCS and <a rel="nofollow" class="external text" href="https://github.com">github</a> or <a rel="nofollow" class="external text" href="http://gitlab.com">gitlab</a> for repository hosting. But what happens if your goal is to write an OS that is different to anything that can run git (so no git for your OS), but you also want to do meaningful stuff with your repository on your OS, and/or self-host your repository on a server that is running your OS? There are two possible answers: 1) reimplement git, or 2) write your own VCS. If you picked 1), you should read about the git internals. If you picked 2), you should continue reading this page.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Version_Control_Software#Roadmap"><span class="tocnumber">1</span> <span class="toctext">Roadmap</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="Version_Control_Software#Approach_A"><span class="tocnumber">1.1</span> <span class="toctext">Approach A</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="Version_Control_Software#Approach_B"><span class="tocnumber">1.2</span> <span class="toctext">Approach B</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="Version_Control_Software#Types_of_VCS"><span class="tocnumber">2</span> <span class="toctext">Types of VCS</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="Version_Control_Software#Writing_a_Basic_VCS"><span class="tocnumber">3</span> <span class="toctext">Writing a Basic VCS</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="Version_Control_Software#The_Internals"><span class="tocnumber">3.1</span> <span class="toctext">The Internals</span></a>
<ul>
<li class="toclevel-3 tocsection-7"><a href="Version_Control_Software#Branches"><span class="tocnumber">3.1.1</span> <span class="toctext">Branches</span></a></li>
<li class="toclevel-3 tocsection-8"><a href="Version_Control_Software#Commits"><span class="tocnumber">3.1.2</span> <span class="toctext">Commits</span></a></li>
<li class="toclevel-3 tocsection-9"><a href="Version_Control_Software#Files"><span class="tocnumber">3.1.3</span> <span class="toctext">Files</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-10"><a href="Version_Control_Software#The_Code"><span class="tocnumber">3.2</span> <span class="toctext">The Code</span></a>
<ul>
<li class="toclevel-3 tocsection-11"><a href="Version_Control_Software#utils.py"><span class="tocnumber">3.2.1</span> <span class="toctext">utils.py</span></a></li>
<li class="toclevel-3 tocsection-12"><a href="Version_Control_Software#init.py"><span class="tocnumber">3.2.2</span> <span class="toctext">init.py</span></a></li>
<li class="toclevel-3 tocsection-13"><a href="Version_Control_Software#branch.py"><span class="tocnumber">3.2.3</span> <span class="toctext">branch.py</span></a></li>
<li class="toclevel-3 tocsection-14"><a href="Version_Control_Software#commit.py"><span class="tocnumber">3.2.4</span> <span class="toctext">commit.py</span></a></li>
<li class="toclevel-3 tocsection-15"><a href="Version_Control_Software#fsck.py"><span class="tocnumber">3.2.5</span> <span class="toctext">fsck.py</span></a></li>
<li class="toclevel-3 tocsection-16"><a href="Version_Control_Software#merge.py"><span class="tocnumber">3.2.6</span> <span class="toctext">merge.py</span></a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Roadmap">Roadmap</span></h2>
<p>There are two possible approaches to writing a VCS for your OS.
</p>
<h3><span class="mw-headline" id="Approach_A">Approach A</span></h3>
<p>Initially, use <a href="../Git" title="Git">git</a> or any other ready VCS. Then, when your OS is ready to be self-hosting, write a VCS that runs on your OS and switch all development to it. This will have the drawback that your new repository will not hold the past history of the period that you used git or any other ready VCS.
</p>
<h3><span class="mw-headline" id="Approach_B">Approach B</span></h3>
<p>Write a VCS that runs on your host machine before starting developing your OS. Then, when your OS is ready to be self-hosting, write a compatible VCS that runs on your OS. Switching development to it should be (mostly) seamless.
</p>
<h2><span class="mw-headline" id="Types_of_VCS">Types of VCS</span></h2>
<p><i><b>TODO</b></i>
</p>
<h2><span class="mw-headline" id="Writing_a_Basic_VCS">Writing a Basic VCS</span></h2>
<p>In this section, we will write a very basic VCS. It will not even remotely support any remote functionality (pun intended), but it will be enough to get you started. We will write it in <a href="../Python" title="Python">Python</a>, since Python is a good programming language for prototyping stuff.
</p>
<h3><span class="mw-headline" id="The_Internals">The Internals</span></h3>
<p>We will create a snapshot-based VCS, i.e. we won't store the diff of the files in each commit. Instead, we will store the full files in order for retrieving source trees to be an efficient operation. You may of course want to change that later.
</p><p>We will store the repository on the filesystem (you could use a database instead if you like it). The root directory of the repository will be <code>.repo</code>, which will contain the subdirectories <code>branches</code>, <code>commits</code> and <code>files</code>. As you probably guessed, <code>branches</code> will contain information about branches. However, <code>commits</code> will only contain information about the contents of commits, i.e. no author, time, and such information -- that's in order to deduplicate space when two commits are similar in contents. <code>files</code> will only contain information about the file contents, i.e. no author, time, and such information -- again, that's in order to deduplicate space when two files are similar in contents.
</p><p>Additionally, the working directory for each branch will be in a directory at the same level as the <code>.repo</code> directory, which will be named after the branch.
</p>
<h4><span class="mw-headline" id="Branches">Branches</span></h4>
<p>The <code>branches</code> directory will contain subdirectories named after the names of the branches. For example, if we create a branch "master", a subdirectory <code>master</code> will be created. Inside, we will have a <code>commits</code> file that will contain, per line per commit, a commit hash and a timestamp.
</p><p>The <code>commits</code> file may look like this:
</p>
<pre>d97cf57b44b1b43d8d66e360c6d0c8a66a04ee18e092a4cad4684e26c86fbf41 1547387622
ba04414fa9bf63b8a39f658483edc0f6b8a8c759f707ec6846134986db9dc929 1547388056
</pre>
<h4><span class="mw-headline" id="Commits">Commits</span></h4>
<p>The <code>commits</code> directory will contain subdirectories named after the hashes of the commits. For example, if we create a commit "d97cf57b44b1b43d8d66e360c6d0c8a66a04ee18e092a4cad4684e26c86fbf41", a subdirectory <code>d97cf57b44b1b43d8d66e360c6d0c8a66a04ee18e092a4cad4684e26c86fbf41</code> will be created. Inside, we will have a <code>branches</code> file that will list the branches where this commit it exists. Also, we will have a <code>files</code> file that will list, per line per file, its hash and its path.
</p><p>The <code>branches</code> file may look like this:
</p>
<pre>master
feature1
feature2
</pre>
<p>The <code>files</code> file may look like this:
</p>
<pre>7d2b62d9a6f9a0ebfdde033e3cfb197f4d46998c22853861eab603cbd1246920 Makefile
487ea42328a8738a12b378dce4329e2432a0938ff12832ec932fa88c948ca015 src/test.c
</pre>
<p>A commit hash will be derived using the SHA256 algorithm, where the input will be the concatenation of all paths sorted in alphabetical order and all file contents in the same order as the paths. You may want to change that possibly (but, if you include the timestamp, you won't be able to deduplicate similar commits).
</p>
<ul><li><i><b>Note</b></i>: Real VCSs (e.g. <a href="../Git" title="Git">git</a>) don't put all hashes in one directory. Instead, they split the hashes into directory levels. That's in order to minimise directory search times.</li>
<li><i><b>Note</b></i>: Git includes the timestamp in the input string for deriving the commit hash.</li></ul>
<h4><span class="mw-headline" id="Files">Files</span></h4>
<p>The <code>files</code> directory will contain subdirectories named after the hashes of the file revisions. Inside, we will have a <code>commits</code> file that will list the commits where this file revision exists. Also, the <code>data</code> file will contain the contents of the file as is appears during that revision.
</p><p>The <code>commits</code> file may look like this:
</p>
<pre>d97cf57b44b1b43d8d66e360c6d0c8a66a04ee18e092a4cad4684e26c86fbf41
ba04414fa9bf63b8a39f658483edc0f6b8a8c759f707ec6846134986db9dc929
</pre>
<ul><li><i><b>Note</b></i>: Real VCSs employ compression for the file contents, in order to decrease disk space usage.</li></ul>
<h3><span class="mw-headline" id="The_Code">The Code</span></h3>
<p>So we get the following <code>.py</code> files...
</p>
<h4><span class="mw-headline" id="utils.py">utils.py</span></h4>
<p>This file contains four functions as described in the comments. It's still nothing VCS-specific.
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="c1"># This function reads &lt;filename&gt; into a list of lines.</span>
<span class="c1"># The trailing &#39;\n&#39; character of each line is discarded.</span>
<span class="k">def</span> <span class="nf">readlines</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="n">fp</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">)</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="n">fp</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">lines</span>

<span class="c1"># This function writes a list of lines into &lt;filename&gt;.</span>
<span class="c1"># The trailing &#39;\n&#39; character of each line is added.</span>
<span class="k">def</span> <span class="nf">writelines</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">lines</span><span class="p">):</span>
    <span class="n">fp</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
        <span class="n">fp</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">line</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span> 
    <span class="n">fp</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

<span class="c1"># This function reads &lt;filename&gt; into a list of lists of words.</span>
<span class="k">def</span> <span class="nf">readwordlines</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="n">readlines</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
    <span class="n">wordlines</span> <span class="o">=</span> <span class="p">[</span><span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">wordlines</span>

<span class="c1"># This function writes a list of lists of words into &lt;filename&gt;.</span>
<span class="k">def</span> <span class="nf">writewordlines</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">wordlines</span><span class="p">):</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">wordline</span><span class="p">)</span> <span class="k">for</span> <span class="n">wordline</span> <span class="ow">in</span> <span class="n">wordlines</span><span class="p">]</span>
    <span class="n">writelines</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">lines</span><span class="p">)</span>
</pre></div>
<h4><span class="mw-headline" id="init.py">init.py</span></h4>
<p>This file contains code to initialise an empty repository. You should make it executable.
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="ch">#! /usr/bin/python</span>

<span class="kn">import</span> <span class="nn">os</span>

<span class="kn">import</span> <span class="nn">utils</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="c1"># Create necessary directories.</span>
    <span class="n">os</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="s2">&quot;.repo&quot;</span><span class="p">,</span> <span class="mi">0755</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="s2">&quot;.repo/branches&quot;</span><span class="p">,</span> <span class="mi">0755</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="s2">&quot;.repo/commits&quot;</span><span class="p">,</span> <span class="mi">0755</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="s2">&quot;.repo/files&quot;</span><span class="p">,</span> <span class="mi">0755</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
<h4><span class="mw-headline" id="branch.py">branch.py</span></h4>
<p>This file contains code to create an empty branch. You should also make it executable.
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="ch">#! /usr/bin/python</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="kn">import</span> <span class="nn">utils</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="c1"># Get branch name.</span>
    <span class="n">branch</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="c1"># Here you should probably check if the branch name is allowed.</span>
    <span class="c1"># For example, you may want to disallow certain names that have</span>
    <span class="c1"># a special meaning in your internal representation.</span>

    <span class="c1"># Create the .repo/branches/&lt;branch&gt; directory.</span>
    <span class="n">os</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="s2">&quot;.repo/branches/&quot;</span> <span class="o">+</span> <span class="n">branch</span><span class="p">,</span> <span class="mi">0755</span><span class="p">)</span>

    <span class="c1"># Create an empty .repo/branches/&lt;branch&gt;/commits file.</span>
    <span class="n">fp</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;.repo/branches/&quot;</span> <span class="o">+</span> <span class="n">branch</span> <span class="o">+</span> <span class="s2">&quot;/commits&quot;</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span>
    <span class="n">fp</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

    <span class="c1"># Create the &lt;branch&gt; directory, if it doesn&#39;t already exist.</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">os</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">branch</span><span class="p">,</span> <span class="mi">0755</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">OSError</span><span class="p">:</span>
        <span class="c1"># Directory already exists.</span>
        <span class="k">pass</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
<h4><span class="mw-headline" id="commit.py">commit.py</span></h4>
<p>Now stuff is getting complex. I hope I have explained it well in the comments...
</p><p>You should also make this file executable.
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="ch">#! /usr/bin/python</span>

<span class="kn">import</span> <span class="nn">hashlib</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="kn">import</span> <span class="nn">utils</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="c1"># Get branch name.</span>
    <span class="n">branch</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

    <span class="c1"># Get current time.</span>
    <span class="n">now</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">())</span>

    <span class="c1"># Get the list of all files in the branch source tree.</span>
    <span class="n">filepaths</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">cur</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="n">branch</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
            <span class="c1"># Get the paths without the beginning &quot;&lt;branch&gt;/&quot;.</span>
            <span class="c1"># For example, the path &quot;master/src/main.c&quot; becomes &quot;src/main.c&quot;.</span>
            <span class="n">filepaths</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">cur</span> <span class="o">+</span> <span class="s2">&quot;/&quot;</span> <span class="o">+</span> <span class="n">f</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span>

    <span class="c1"># Sort the paths as it&#39;s important for them to be in a specific order</span>
    <span class="c1"># for the SHA256 hash function. Imagine if you got two different hashes</span>
    <span class="c1"># for the same directory structure; that would be broken!</span>
    <span class="n">filepaths</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>

    <span class="c1"># Get the list of all file contents.</span>
    <span class="c1"># Normally, the paths should be traversed sequentially, thus the contents</span>
    <span class="c1"># should be in the correct order for the SHA256 hash function.</span>
    <span class="c1"># TODO: I don&#39;t know if this is the case, you should verify it</span>
    <span class="c1">#       if you are serious about using this code to get started.</span>
    <span class="n">filecontents</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">filepath</span> <span class="ow">in</span> <span class="n">filepaths</span><span class="p">:</span>
        <span class="n">fp</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">branch</span> <span class="o">+</span> <span class="s2">&quot;/&quot;</span> <span class="o">+</span> <span class="n">filepath</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">)</span>
        <span class="n">filecontents</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">fp</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
        <span class="n">fp</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

    <span class="c1"># Get file paths string.</span>
    <span class="n">filepathsstr</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
    <span class="k">for</span> <span class="n">filepath</span> <span class="ow">in</span> <span class="n">filepaths</span><span class="p">:</span>
        <span class="n">filepathsstr</span> <span class="o">+=</span> <span class="n">filepath</span>

    <span class="c1"># Get file contents string.</span>
    <span class="n">filecontentsstr</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
    <span class="k">for</span> <span class="n">filecontent</span> <span class="ow">in</span> <span class="n">filecontents</span><span class="p">:</span>
        <span class="n">filecontentsstr</span> <span class="o">+=</span> <span class="n">filecontent</span>

    <span class="c1"># Derive the commit hash.</span>
    <span class="n">commithash</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">(</span><span class="n">filepathsstr</span> <span class="o">+</span> <span class="n">filecontentsstr</span><span class="p">)</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>

    <span class="c1"># Create the .repo/commits/&lt;commit&gt; directory. If the directory already</span>
    <span class="c1"># exists, we will just update the list of branches where it is present.</span>
    <span class="n">commitexists</span> <span class="o">=</span> <span class="kc">False</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">os</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="s2">&quot;.repo/commits/&quot;</span> <span class="o">+</span> <span class="n">commithash</span><span class="p">,</span> <span class="mi">0755</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">OSError</span><span class="p">:</span>
        <span class="n">commitexists</span> <span class="o">=</span> <span class="kc">True</span>

    <span class="k">if</span> <span class="n">commitexists</span><span class="p">:</span>
        <span class="c1"># Update the .repo/commits/&lt;commit&gt;/branches file, in case &lt;branch&gt;</span>
        <span class="c1"># is not found in it.</span>
        <span class="n">commitbranches</span> <span class="o">=</span> <span class="n">utils</span><span class="o">.</span><span class="n">readlines</span><span class="p">(</span><span class="s2">&quot;.repo/commits/&quot;</span> <span class="o">+</span> <span class="n">commithash</span> <span class="o">+</span> <span class="s2">&quot;/branches&quot;</span><span class="p">)</span>
        <span class="n">found</span> <span class="o">=</span> <span class="kc">False</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">commitbranches</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">commitbranches</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">branch</span><span class="p">:</span>
                <span class="n">found</span> <span class="o">=</span> <span class="kc">True</span>
                <span class="k">break</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">found</span><span class="p">:</span>
            <span class="n">commitbranches</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">branch</span><span class="p">)</span>
            <span class="n">utils</span><span class="o">.</span><span class="n">writelines</span><span class="p">(</span><span class="s2">&quot;.repo/commits/&quot;</span> <span class="o">+</span> <span class="n">commithash</span> <span class="o">+</span> <span class="s2">&quot;/branches&quot;</span><span class="p">,</span> <span class="n">commitbranches</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Loop through paths and contents.</span>
        <span class="n">filehashes</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">filepaths</span><span class="p">)):</span>
            <span class="c1"># Create the file hash. We will use the file contents.</span>
            <span class="n">filehash</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">(</span><span class="n">filecontents</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>

            <span class="c1"># Append the file hash to the list of file hashes.</span>
            <span class="n">filehashes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">filehash</span><span class="p">)</span>

            <span class="c1"># Create the .repo/files/&lt;file&gt; directory. If the file already exists,</span>
            <span class="c1"># we will just update the list of commits where it is present.</span>
            <span class="n">fileexists</span> <span class="o">=</span> <span class="kc">False</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">os</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="s2">&quot;.repo/files/&quot;</span> <span class="o">+</span> <span class="n">filehash</span><span class="p">,</span> <span class="mi">0755</span><span class="p">)</span>
            <span class="k">except</span> <span class="ne">OSError</span><span class="p">:</span>
                <span class="c1"># File already exists.</span>
                <span class="n">fileexists</span> <span class="o">=</span> <span class="kc">True</span>

            <span class="k">if</span> <span class="n">fileexists</span><span class="p">:</span>
                <span class="c1"># Update the .repo/files/&lt;file&gt;/commits file.</span>
                <span class="n">filecommits</span> <span class="o">=</span> <span class="n">utils</span><span class="o">.</span><span class="n">readlines</span><span class="p">(</span><span class="s2">&quot;.repo/files/&quot;</span> <span class="o">+</span> <span class="n">filehash</span> <span class="o">+</span> <span class="s2">&quot;/commits&quot;</span><span class="p">)</span>
                <span class="n">filecommits</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">commithash</span><span class="p">)</span>
                <span class="n">utils</span><span class="o">.</span><span class="n">writelines</span><span class="p">(</span><span class="s2">&quot;.repo/files/&quot;</span> <span class="o">+</span> <span class="n">filehash</span> <span class="o">+</span> <span class="s2">&quot;/commits&quot;</span><span class="p">,</span> <span class="n">filecommits</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c1"># Create the .repo/files/&lt;file&gt;/data file.</span>
                <span class="n">fp</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;.repo/files/&quot;</span> <span class="o">+</span> <span class="n">filehash</span> <span class="o">+</span> <span class="s2">&quot;/data&quot;</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span>
                <span class="n">fp</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">filecontents</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="n">fp</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

                <span class="c1"># Create the .repo/files/&lt;file&gt;/commits file.</span>
                <span class="n">filecommits</span> <span class="o">=</span> <span class="p">[</span><span class="n">commithash</span><span class="p">]</span>
                <span class="n">utils</span><span class="o">.</span><span class="n">writelines</span><span class="p">(</span><span class="s2">&quot;.repo/files/&quot;</span> <span class="o">+</span> <span class="n">filehash</span> <span class="o">+</span> <span class="s2">&quot;/commits&quot;</span><span class="p">,</span> <span class="n">filecommits</span><span class="p">)</span>

        <span class="c1"># Create the .repo/commits/&lt;commit&gt;/files file.</span>
        <span class="n">commitfiles</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">filepaths</span><span class="p">)):</span>
            <span class="n">commitfiles</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">filehashes</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">filepaths</span><span class="p">[</span><span class="n">i</span><span class="p">]])</span>
        <span class="n">utils</span><span class="o">.</span><span class="n">writewordlines</span><span class="p">(</span><span class="s2">&quot;.repo/commits/&quot;</span> <span class="o">+</span> <span class="n">commithash</span> <span class="o">+</span> <span class="s2">&quot;/files&quot;</span><span class="p">,</span> <span class="n">commitfiles</span><span class="p">)</span>

        <span class="c1"># Create the .repo/commits/&lt;commit&gt;/branches file.</span>
        <span class="n">commitbranches</span> <span class="o">=</span> <span class="p">[</span><span class="n">branch</span><span class="p">]</span>
        <span class="n">utils</span><span class="o">.</span><span class="n">writelines</span><span class="p">(</span><span class="s2">&quot;.repo/commits/&quot;</span> <span class="o">+</span> <span class="n">commithash</span> <span class="o">+</span> <span class="s2">&quot;/branches&quot;</span><span class="p">,</span> <span class="n">commitbranches</span><span class="p">)</span>

    <span class="c1"># Update the .repo/branches/&lt;branch&gt;/commits file.</span>
    <span class="n">branchcommits</span> <span class="o">=</span> <span class="n">utils</span><span class="o">.</span><span class="n">readwordlines</span><span class="p">(</span><span class="s2">&quot;.repo/branches/&quot;</span> <span class="o">+</span> <span class="n">branch</span> <span class="o">+</span> <span class="s2">&quot;/commits&quot;</span><span class="p">)</span>
    <span class="n">branchcommits</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">commithash</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">now</span><span class="p">)])</span>
    <span class="n">utils</span><span class="o">.</span><span class="n">writewordlines</span><span class="p">(</span><span class="s2">&quot;.repo/branches/&quot;</span> <span class="o">+</span> <span class="n">branch</span> <span class="o">+</span> <span class="s2">&quot;/commits&quot;</span><span class="p">,</span> <span class="n">branchcommits</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
<h4><span class="mw-headline" id="fsck.py">fsck.py</span></h4>
<p>This one is very important. It does an integrity check of the repository (also useful when testing if the VCS that will run on your OS is compatible with this one).
</p><p>It is also quite complex, I hope it is correct and that I explained stuff well in the comments. Again, make it executable.
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="ch">#! /usr/bin/python</span>

<span class="kn">import</span> <span class="nn">hashlib</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="kn">import</span> <span class="nn">utils</span>

<span class="k">def</span> <span class="nf">fsckfile</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
    <span class="c1"># Get file data.</span>
    <span class="n">fp</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;.repo/files/&quot;</span> <span class="o">+</span> <span class="n">f</span> <span class="o">+</span> <span class="s2">&quot;/data&quot;</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">fp</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
    <span class="n">fp</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

    <span class="c1"># Check if the file hash is correct.</span>
    <span class="n">filehash</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">filehash</span> <span class="o">!=</span> <span class="n">f</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Integrity check failed: File &quot;</span> <span class="o">+</span> <span class="n">f</span> <span class="o">+</span> <span class="s2">&quot; should have hash &quot;</span> <span class="o">+</span> <span class="n">filehash</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">checkcommitinfile</span><span class="p">(</span><span class="n">commit</span><span class="p">,</span> <span class="n">f</span><span class="p">):</span>
    <span class="c1"># Get the list of commits that &lt;f&gt; lists. &lt;commit&gt; should be listed.</span>
    <span class="n">commits</span> <span class="o">=</span> <span class="n">utils</span><span class="o">.</span><span class="n">readlines</span><span class="p">(</span><span class="s2">&quot;.repo/files/&quot;</span> <span class="o">+</span> <span class="n">f</span> <span class="o">+</span> <span class="s2">&quot;/commits&quot;</span><span class="p">)</span>
    <span class="n">found</span> <span class="o">=</span> <span class="kc">False</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">commits</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="n">commit</span><span class="p">:</span>
            <span class="n">found</span> <span class="o">=</span> <span class="kc">True</span>
            <span class="k">break</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">found</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Integrity check failed: File &quot;</span> <span class="o">+</span> <span class="n">f</span> <span class="o">+</span> <span class="s2">&quot; is listed in commit &quot;</span> <span class="o">+</span> <span class="n">commit</span> <span class="o">+</span> <span class="s2">&quot;, but file &quot;</span> <span class="o">+</span> <span class="n">f</span> <span class="o">+</span> <span class="s2">&quot; doesn&#39;t list commit &quot;</span> <span class="o">+</span> <span class="n">commit</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">fsckcommit</span><span class="p">(</span><span class="n">commit</span><span class="p">):</span>
    <span class="c1"># Get the list of files that are listed in &lt;commit&gt;.</span>
    <span class="n">files</span> <span class="o">=</span> <span class="n">utils</span><span class="o">.</span><span class="n">readwordlines</span><span class="p">(</span><span class="s2">&quot;.repo/commits/&quot;</span> <span class="o">+</span> <span class="n">commit</span> <span class="o">+</span> <span class="s2">&quot;/files&quot;</span><span class="p">)</span>

    <span class="c1"># Get the list of file hashes and paths based on files above.</span>
    <span class="n">filehashes</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">filepaths</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
        <span class="n">filehashes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">filepaths</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>

    <span class="c1"># Get file paths string.</span>
    <span class="n">filepathsstr</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
    <span class="k">for</span> <span class="n">filepath</span> <span class="ow">in</span> <span class="n">filepaths</span><span class="p">:</span>
        <span class="n">filepathsstr</span> <span class="o">+=</span> <span class="n">filepath</span>

    <span class="c1"># Get file contents string. Also detect if some files are missing.</span>
    <span class="n">filecontentsstr</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
    <span class="n">missing</span> <span class="o">=</span> <span class="kc">False</span>
    <span class="k">for</span> <span class="n">filehash</span> <span class="ow">in</span> <span class="n">filehashes</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fp</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;.repo/files/&quot;</span> <span class="o">+</span> <span class="n">filehash</span> <span class="o">+</span> <span class="s2">&quot;/data&quot;</span><span class="p">)</span>
            <span class="n">filecontentsstr</span> <span class="o">+=</span> <span class="n">fp</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
            <span class="n">fp</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
        <span class="k">except</span> <span class="ne">IOError</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Integrity check failed: Commit &quot;</span> <span class="o">+</span> <span class="n">commit</span> <span class="o">+</span> <span class="s2">&quot; lists file &quot;</span> <span class="o">+</span> <span class="n">filehash</span> <span class="o">+</span> <span class="s2">&quot;, but file &quot;</span> <span class="o">+</span> <span class="n">filehash</span> <span class="o">+</span> <span class="s2">&quot; doesn&#39;t exist&quot;</span><span class="p">)</span>
            <span class="n">missing</span> <span class="o">=</span> <span class="kc">True</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">missing</span><span class="p">:</span>
        <span class="c1"># Check if the commit hash is correct.</span>
        <span class="n">commithash</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">(</span><span class="n">filepathsstr</span> <span class="o">+</span> <span class="n">filecontentsstr</span><span class="p">)</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">commithash</span> <span class="o">!=</span> <span class="n">commit</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Integrity check failed: Commit &quot;</span> <span class="o">+</span> <span class="n">commit</span> <span class="o">+</span> <span class="s2">&quot; should have hash &quot;</span> <span class="o">+</span> <span class="n">commithash</span><span class="p">)</span>

        <span class="c1"># Check if the relation of this commit and its files is bidirectional.</span>
        <span class="k">for</span> <span class="n">filehash</span> <span class="ow">in</span> <span class="n">filehashes</span><span class="p">:</span>
            <span class="n">checkcommitinfile</span><span class="p">(</span><span class="n">commit</span><span class="p">,</span> <span class="n">filehash</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">checkbranchincommit</span><span class="p">(</span><span class="n">branch</span><span class="p">,</span> <span class="n">commit</span><span class="p">):</span>
    <span class="c1"># Get the list of branches that &lt;commit&gt; lists. &lt;branch&gt; should be listed.</span>
    <span class="n">branches</span> <span class="o">=</span> <span class="n">utils</span><span class="o">.</span><span class="n">readlines</span><span class="p">(</span><span class="s2">&quot;.repo/commits/&quot;</span> <span class="o">+</span> <span class="n">commit</span> <span class="o">+</span> <span class="s2">&quot;/branches&quot;</span><span class="p">)</span>
    <span class="n">found</span> <span class="o">=</span> <span class="kc">False</span>
    <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">branches</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="n">branch</span><span class="p">:</span>
            <span class="n">found</span> <span class="o">=</span> <span class="kc">True</span>
            <span class="k">break</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">found</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Integrity check failed: Commit &quot;</span> <span class="o">+</span> <span class="n">commit</span> <span class="o">+</span> <span class="s2">&quot; is listed in branch &quot;</span> <span class="o">+</span> <span class="n">branch</span> <span class="o">+</span> <span class="s2">&quot;, but commit &quot;</span> <span class="o">+</span> <span class="n">commit</span> <span class="o">+</span> <span class="s2">&quot; doesn&#39;t list branch &quot;</span> <span class="o">+</span> <span class="n">branch</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">fsckbranch</span><span class="p">(</span><span class="n">branch</span><span class="p">):</span>
    <span class="c1"># Get the list of commits that are listed in &lt;branch&gt;.</span>
    <span class="n">commits</span> <span class="o">=</span> <span class="n">utils</span><span class="o">.</span><span class="n">readwordlines</span><span class="p">(</span><span class="s2">&quot;.repo/branches/&quot;</span> <span class="o">+</span> <span class="n">branch</span> <span class="o">+</span> <span class="s2">&quot;/commits&quot;</span><span class="p">)</span>

    <span class="c1"># Get the list of commit hashes based on commits above.</span>
    <span class="n">commithashes</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">commit</span> <span class="ow">in</span> <span class="n">commits</span><span class="p">:</span>
        <span class="n">commithashes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">commit</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    
    <span class="c1"># Check if the relation of this branch and its commits is bidirectional.</span>
    <span class="c1"># Also detect if any commits are missing.</span>
    <span class="k">for</span> <span class="n">commithash</span> <span class="ow">in</span> <span class="n">commithashes</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="s2">&quot;.repo/commits/&quot;</span> <span class="o">+</span> <span class="n">commithash</span><span class="p">):</span>
            <span class="n">checkbranchincommit</span><span class="p">(</span><span class="n">branch</span><span class="p">,</span> <span class="n">commithash</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Integrity check failed: Branch &quot;</span> <span class="o">+</span> <span class="n">branch</span> <span class="o">+</span> <span class="s2">&quot; lists commit &quot;</span> <span class="o">+</span> <span class="n">commithash</span> <span class="o">+</span> <span class="s2">&quot;, but commit &quot;</span> <span class="o">+</span> <span class="n">commithash</span> <span class="o">+</span> <span class="s2">&quot; doesn&#39;t exist&quot;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="c1"># Check integrity for each file.</span>
    <span class="k">for</span> <span class="n">cur</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="s2">&quot;.repo/files&quot;</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">dirs</span><span class="p">:</span>
            <span class="n">fsckfile</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>

    <span class="c1"># Check integrity for each commit.</span>
    <span class="k">for</span> <span class="n">cur</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="s2">&quot;.repo/commits&quot;</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">dirs</span><span class="p">:</span>
            <span class="n">fsckcommit</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>

    <span class="c1"># Check integrity for each branch.</span>
    <span class="k">for</span> <span class="n">cur</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="s2">&quot;.repo/branches&quot;</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">dirs</span><span class="p">:</span>
            <span class="n">fsckbranch</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
<h4><span class="mw-headline" id="merge.py">merge.py</span></h4>
<p><i><b>TODO</b></i>
</p>
<!-- 
NewPP limit report
Cached time: 20250211142226
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.058 seconds
Real time usage: 0.903 seconds
Preprocessor visited node count: 103/1000000
Post‐expand include size: 554/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 4/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 41177/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.794      1 Template:Stub
100.00%    0.794      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4351-0!canonical and timestamp 20250211142226 and revision id 23202.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=User:Glauxosdever/Version_Control_Software&amp;oldid=23202">https://wiki.osdev.org/index.php?title=User:Glauxosdever/Version_Control_Software&amp;oldid=23202</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="../Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="../Category:Stubs" title="Category:Stubs">Stubs</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=User%3AGlauxosdever%2FVersion+Control+Software" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Version_Control_Software#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-user" class="selected mw-list-item"><a href="Version_Control_Software" title="View the user page [c]" accesskey="c"><span>User page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User_talk:Glauxosdever/Version_Control_Software&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Version_Control_Software"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Glauxosdever/Version_Control_Software&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Glauxosdever/Version_Control_Software&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="../index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="../index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="../Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="../Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="../OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="../OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="../OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="../Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="https://wiki.osdev.org/Special:WhatLinksHere/User:Glauxosdever/Version_Control_Software" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/User:Glauxosdever/Version_Control_Software" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-contributions" class="mw-list-item"><a href="../Special:Contributions/Glauxosdever" title="A list of contributions by this user"><span>User contributions</span></a></li><li id="t-log" class="mw-list-item"><a href="../Special:Log/Glauxosdever"><span>Logs</span></a></li><li id="t-userrights" class="mw-list-item"><a href="../Special:UserRights/Glauxosdever"><span>View user groups</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="../Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Glauxosdever/Version_Control_Software&amp;oldid=23202" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Glauxosdever/Version_Control_Software&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 13 January 2019, at 15:01.</li>
	<li id="footer-info-0">This page has been accessed 538 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="../OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="../OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="../OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=User:Glauxosdever/Version_Control_Software&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="../resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="../resources/assets/poweredby_mediawiki_132x47.png 1.5x, ../resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.058","walltime":"0.903","ppvisitednodes":{"value":103,"limit":1000000},"postexpandincludesize":{"value":554,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":4,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":41177,"limit":5000000},"timingprofile":["100.00%    0.794      1 Template:Stub","100.00%    0.794      1 -total"]},"cachereport":{"timestamp":"20250211142226","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":1020});});</script>
</body>
</html>