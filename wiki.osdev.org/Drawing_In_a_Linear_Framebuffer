<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Drawing In a Linear Framebuffer - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"038add7fd1150e27ee035419","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Drawing_In_a_Linear_Framebuffer","wgTitle":"Drawing In a Linear Framebuffer","wgCurRevisionId":29343,"wgRevisionId":29343,"wgArticleId":4597,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Video","Graphical UI","Tutorials"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Drawing_In_a_Linear_Framebuffer","wgRelevantArticleId":4597,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,
"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Drawing_In_a_Linear_Framebuffer rootpage-Drawing_In_a_Linear_Framebuffer skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Drawing In a Linear Framebuffer</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Drawing_In_a_Linear_Framebuffer#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Drawing_In_a_Linear_Framebuffer#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>Now that you know how you can easily write text to the screen using Hardware VGA support, you might be wondering how you'll be able to display nice images, windows, menus, icons, fancy cursors and buttons, etc. This page describes how to display graphics in a linear framebuffer, a simple array mapped in memory that represents the screen.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Drawing_In_a_Linear_Framebuffer#Graphics_Modes"><span class="tocnumber">1</span> <span class="toctext">Graphics Modes</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Drawing_In_a_Linear_Framebuffer#Switching"><span class="tocnumber">2</span> <span class="toctext">Switching</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Drawing_In_a_Linear_Framebuffer#Locating_Video_Memory"><span class="tocnumber">3</span> <span class="toctext">Locating Video Memory</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="Drawing_In_a_Linear_Framebuffer#Plotting_Pixels"><span class="tocnumber">4</span> <span class="toctext">Plotting Pixels</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="Drawing_In_a_Linear_Framebuffer#Location"><span class="tocnumber">4.1</span> <span class="toctext">Location</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="Drawing_In_a_Linear_Framebuffer#Color"><span class="tocnumber">4.2</span> <span class="toctext">Color</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Drawing_In_a_Linear_Framebuffer#Optimizations"><span class="tocnumber">4.3</span> <span class="toctext">Optimizations</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-8"><a href="Drawing_In_a_Linear_Framebuffer#Drawing_Text"><span class="tocnumber">5</span> <span class="toctext">Drawing Text</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="Drawing_In_a_Linear_Framebuffer#Drawing_Icons"><span class="tocnumber">6</span> <span class="toctext">Drawing Icons</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="Drawing_In_a_Linear_Framebuffer#See_Also"><span class="tocnumber">7</span> <span class="toctext">See Also</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="Drawing_In_a_Linear_Framebuffer#External_Links"><span class="tocnumber">8</span> <span class="toctext">External Links</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Graphics_Modes">Graphics Modes</span></h2>
<dl><dd><i>Main article:</i> <a href="Getting_VBE_Mode_Info" class="mw-redirect" title="Getting VBE Mode Info">Getting VBE Mode Info</a></dd>
<dd><i>Main article:</i> <a href="GOP" title="GOP">GOP</a></dd></dl>
<p>VGA and VBE modes can be selected using BIOS interrupt 0x10 (while in real mode). <a rel="nofollow" class="external text" href="http://www.ctyme.com/intr/int-10.htm">INT 0x10</a>, <a href="VESA_Video_Modes" title="VESA Video Modes">VESA Video Modes</a> and <a rel="nofollow" class="external text" href="http://www.vesa.org/">VESA</a> are resources for, VGA and VBE/VESA.
</p><p>VGA is limited to 16-color 640x480, meanwhile VBE (BIOS systems) and <a href="GOP" title="GOP">GOP</a> (<a href="UEFI" title="UEFI">UEFI</a> machines excluding some very early ones) can go up to the monitor and video card's maximum supported resolution.
</p>
<h2><span class="mw-headline" id="Switching">Switching</span></h2>
<p>The cleanest way to set up your video mode is to go through the video BIOS. It can be performed through the regular <tt>Int 0x10</tt> interface, or through the (optional) <a href="Protected_mode" class="mw-redirect" title="Protected mode">Protected mode</a> interface offered by VBE3. As you can guess, <tt>Int 0x10</tt> requires a 16-bit environment, so you can only use it in <a href="Real_Mode" title="Real Mode">Real Mode</a> or <a href="Virtual_8086_Mode" title="Virtual 8086 Mode">Virtual 8086 Mode</a>
</p><p>Practically, the options are (in order of difficulty):
</p>
<ul><li>Set up the mode you want at early stage (in the bootloader) before entering protected mode.
<ul><li>Develop on an <a href="UEFI" title="UEFI">UEFI</a> system, and get a <a href="GOP" title="GOP">GOP</a> framebuffer at boot-time.</li>
<li>Let your <a href="Bootloader" title="Bootloader">Bootloader</a> do the switch for you.</li></ul></li>
<li>Switch back to <a href="Real_Mode" title="Real Mode">Real Mode</a> or <a href="Unreal_Mode" title="Unreal Mode">Unreal Mode</a> for setting the proper video mode (Napalm at <a rel="nofollow" class="external text" href="http://www.rohitab.com/discuss/topic/35103-switch-between-real-mode-and-protected-mode/">rohitab.com</a> has a neat little function for reference.)</li>
<li>Write a <a href="VGA_Hardware" title="VGA Hardware">VGA driver</a> that can do low-resolution modes on practically all hardware</li>
<li>Use the PMID from VBE3, if present</li>
<li>Set up a <a href="Virtual_8086_Mode" title="Virtual 8086 Mode">V8086</a> <a href="Virtual_Monitor" class="mw-redirect" title="Virtual Monitor">monitor</a> that will execute the mode-switching code</li>
<li>Run a software code translation tool to produce pmode code out of bios rmode code. (<a rel="nofollow" class="external text" href="http://www.osdev.org/phpBB2/viewtopic.php?t=10321">SANiK is on the catch</a>)</li>
<li>You write a driver for your specific <a href="./Category:Video" title="Category:Video">graphics card</a></li></ul>
<h2><span class="mw-headline" id="Locating_Video_Memory">Locating Video Memory</span></h2>
<p>For standard VGA video modes the video memory will be at address <tt>0xA0000</tt> for EGA/VGA video modes and <tt>0xB8000</tt> for CGA and text modes. To find out which one look at the following table:
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1&#125;&#125;&#125;">

<tbody><tr>
<td>00
</td>
<td>text 40*25 16 color (mono)
</td></tr>
<tr>
<td>01
</td>
<td>text 40*25 16 color
</td></tr>
<tr>
<td>02
</td>
<td>text 80*25 16 color (mono)
</td></tr>
<tr>
<td>03
</td>
<td>text 80*25 16 color
</td></tr>
<tr>
<td>04
</td>
<td>CGA 320*200 4 color
</td></tr>
<tr>
<td>05
</td>
<td>CGA 320*200 4 color (m)
</td></tr>
<tr>
<td>06
</td>
<td>CGA 640*200 2 color
</td></tr>
<tr>
<td>07
</td>
<td>MDA monochrome text 80*25
</td></tr>
<tr>
<td>08
</td>
<td>PCjr
</td></tr>
<tr>
<td>09
</td>
<td>PCjr
</td></tr>
<tr>
<td>0A
</td>
<td>PCjr
</td></tr>
<tr>
<td>0B
</td>
<td><i>reserved</i>
</td></tr>
<tr>
<td>0C
</td>
<td><i>reserved</i>
</td></tr>
<tr>
<td>0D
</td>
<td>EGA 320*200 16 color
</td></tr>
<tr>
<td>0E
</td>
<td>EGA 640*200 16 color
</td></tr>
<tr>
<td>0F
</td>
<td>EGA 640*350 mono
</td></tr>
<tr>
<td>10
</td>
<td>EGA 640*350 16 color
</td></tr>
<tr>
<td>11
</td>
<td>VGA 640*480 mono
</td></tr>
<tr>
<td>12
</td>
<td>VGA 640*480 16 color
</td></tr>
<tr>
<td>13
</td>
<td>VGA 320*200 256 color
</td></tr>
</tbody></table>
<p>For VESA modes, the framebuffer address is stored in the <a href="Getting_VBE_Mode_Info" class="mw-redirect" title="Getting VBE Mode Info">mode info block</a>. This is the <b>physical</b> address of the linear framebuffer (it is not a 16-bit far pointer but a 32-bit linear pointer)&#160;: if you use paging, you have to map it somewhere to use it. The length of the framebuffer in bytes is pitch * height.
</p><p>For GOP, the framebuffer address is in the EFI_GRAPHICS_PROTOCOL struct, gop-&gt;Mode-&gt;FrameBufferBase. GOP <b>does not</b> support teletype character modes, only graphics pixel oriented modes.
</p>
<h2><span class="mw-headline" id="Plotting_Pixels">Plotting Pixels</span></h2>
<h3><span class="mw-headline" id="Location">Location</span></h3>
<p>If you wanted to plot a red pixel in the middle of your screen. The first thing you have to know is where the middle of the screen is. In 320x200x8 (mode 13), this will be at 100x320+160 = 32160. In general, your screen can be described by:
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1&#125;&#125;&#125;">
<tbody><tr>
<td>width
</td>
<td>how many pixels you have on a horizontal line
</td></tr>
<tr>
<td>height
</td>
<td>how many horizontal lines of pixels are present
</td></tr>
<tr>
<td>pitch
</td>
<td>how many <i>bytes</i> of VRAM you should skip to go one pixel down
</td></tr>
<tr>
<td>depth
</td>
<td>how many <i>bits</i> of color you have
</td></tr>
<tr>
<td>"pixelwidth"
</td>
<td>how many bytes of VRAM you should skip to go one pixel right.
</td></tr></tbody></table>
<p>"pitch" and "width" may seem redundant at first sight but they aren't. It's not rare once you go to higher (and exotic) resolutions to have e.g. 8K bytes per line while your screen is actually 1500 pixels wide (32-bits per pixel). The good news is that it allows smooth horizontal scrolling (which is mainly useful for 2D games :P )
</p><p>Pitch and pixel width are usually announced by VESA mode info. Once you know them, you can calculate the place where you plot your pixel as:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pixel</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vram</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">y</span><span class="o">*</span><span class="n">pitch</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">x</span><span class="o">*</span><span class="n">pixelwidth</span><span class="p">;</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="Color">Color</span></h3>
<p>The second thing to know is what value you should write for "red". This depends on your screen setup, again. In EGA mode, you have a fixed palette featuring dark-red (color 4) and light-red (color 12). Yet, EGA requires you to plot each bit of that on different pixel plane, so refer to EGA programming tutorials if you <b>really</b> want such modes supported.
In conventional 320x200x8 VGA mode, you have the same colours 4 and 12 as in EGA so you would plot your red pixel with
</p>
<pre>*pixel = 4;
</pre>
<p>Yet, in VGA, the palette is reprogrammable (as you can learn in FreeVGA documents), so virtually any value between 0..255 could be 'red' if you program the palette so :P
</p><p>So a full "putpixel" function for VGA would be
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cm">/* example for 320x200 VGA */</span><span class="w"></span>
<span class="kt">void</span><span class="w"> </span><span class="nf">putpixel</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">pos_x</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">pos_y</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">VGA_COLOR</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="o">*</span><span class="w"> </span><span class="n">location</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="mh">0xA0000</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">320</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">pos_y</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">pos_x</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="n">location</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">VGA_COLOR</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>Finally, in VESA and GOP modes, you usually have truecolor or hicolor, and in both of them, you have to give independent red, green and blue values for each pixel. modeinfo will (again) instruct you of how the RGB components are organized in the pixel bits. E.g. you will have <tt>0bRRRRRGGGGGBBBBB</tt> for 15-bits mode, meaning that #ff0000 red is there <tt>0x7800</tt>, and #808080 grey is <tt>0x4210</tt> (pickup pencil, draw the bits and see by yourself)
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">putpixel</span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="o">*</span><span class="w"> </span><span class="n">screen</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">color</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="n">where</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="o">*</span><span class="n">pixelwidth</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">y</span><span class="o">*</span><span class="n">pitch</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">screen</span><span class="p">[</span><span class="n">where</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">255</span><span class="p">;</span><span class="w">              </span><span class="c1">// BLUE</span>
<span class="w">    </span><span class="n">screen</span><span class="p">[</span><span class="n">where</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">255</span><span class="p">;</span><span class="w">   </span><span class="c1">// GREEN</span>
<span class="w">    </span><span class="n">screen</span><span class="p">[</span><span class="n">where</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">2</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">16</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">255</span><span class="p">;</span><span class="w">  </span><span class="c1">// RED</span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="Optimizations">Optimizations</span></h3>
<p>It can be tempting from here to write other drawing functions from calls to putpixel... Don't. Drawing a filled rectangle means you access successive pixels and then advance by "pitch - rect_width" to fill the next line. If you do a "for(y=100;y&lt;200;y++) for(x=100;x&lt;200;x++) putpixel (screen,x,y,RED);" loop, you'll recompute 'where' about 10,000 times, as well as make an excessive amount of function calls. Even if the compiler has optimized y*pitch into adds and shifts instead of multiplication, it's silly to waste CPU time while you could do
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">fillrect</span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">vram</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">r</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">g</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w">   </span><span class="kt">char</span><span class="w"> </span><span class="n">b</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">w</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">h</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">where</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vram</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">w</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">h</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">            </span><span class="c1">//putpixel(vram, 64 + j, 64 + i, (r &lt;&lt; 16) + (g &lt;&lt; 8) + b);</span>
<span class="w">            </span><span class="n">where</span><span class="p">[</span><span class="n">j</span><span class="o">*</span><span class="n">pixelwidth</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">r</span><span class="p">;</span><span class="w"></span>
<span class="w">            </span><span class="n">where</span><span class="p">[</span><span class="n">j</span><span class="o">*</span><span class="n">pixelwidth</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">g</span><span class="p">;</span><span class="w"></span>
<span class="w">            </span><span class="n">where</span><span class="p">[</span><span class="n">j</span><span class="o">*</span><span class="n">pixelwidth</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">2</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">b</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="p">}</span><span class="w"></span>
<span class="w">        </span><span class="n">where</span><span class="o">+=</span><span class="n">pitch</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>That should be enough to get you started coding (or googling for) a decent video library.
</p>
<h2><span class="mw-headline" id="Drawing_Text">Drawing Text</span></h2>
<dl><dd><i>Main article:</i> <a href="VGA_Fonts" title="VGA Fonts">VGA Fonts</a></dd></dl>
<p>Once in graphic mode, you no longer have the BIOS or the hardware to draw fonts for you. The basic idea is to have font data for each character and use it to plot (or not to plot) pixels. There are plenty of ways to store those fonts depending on whether they have multiple colors or not, alpha channel or not etc. What you will basically have, however, is:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">// holding what you need for every character of the set</span>
<span class="n">font_char</span><span class="o">*</span><span class="w"> </span><span class="n">font_data</span><span class="p">[</span><span class="n">CHARS</span><span class="p">];</span><span class="w"></span>
<span class="w"> </span>
<span class="c1">// rendering one of the character, given its font_data</span>
<span class="kt">void</span><span class="w"> </span><span class="nf">draw_char</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span><span class="w"> </span><span class="n">where</span><span class="p">,</span><span class="w"> </span><span class="n">font_char</span><span class="o">*</span><span class="p">);</span><span class="w"></span>

<span class="kt">void</span><span class="w"> </span><span class="nf">draw_string</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span><span class="w"> </span><span class="n">where</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="o">*</span><span class="w"> </span><span class="n">input</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">input</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">draw_char</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span><span class="n">where</span><span class="p">,</span><span class="n">font_data</span><span class="p">[</span><span class="n">input</span><span class="p">]);</span><span class="w"></span>
<span class="w">        </span><span class="n">where</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="n">char_width</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="n">input</span><span class="o">++</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
<span class="w"> </span>
<span class="kt">void</span><span class="w"> </span><span class="nf">draw_char</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span><span class="w"> </span><span class="n">where</span><span class="p">,</span><span class="w"> </span><span class="n">font_char</span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">l</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">l</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">8</span><span class="p">;</span><span class="w"> </span><span class="n">l</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">8</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">--</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">            </span><span class="n">j</span><span class="o">++</span><span class="p">;</span><span class="w"></span>
<span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">((</span><span class="n">font_char</span><span class="p">[</span><span class="n">l</span><span class="p">]</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">i</span><span class="p">)))</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">                </span><span class="n">c</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">c1</span><span class="p">;</span><span class="w"></span>
<span class="w">                </span><span class="n">put_pixel</span><span class="p">(</span><span class="n">j</span><span class="p">,</span><span class="w"> </span><span class="n">h</span><span class="p">,</span><span class="w"> </span><span class="n">c</span><span class="p">);</span><span class="w"></span>
<span class="w">            </span><span class="p">}</span><span class="w"></span>
<span class="w">        </span><span class="p">}</span><span class="w"></span>
<span class="w">        </span><span class="n">h</span><span class="o">++</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="Drawing_Icons">Drawing Icons</span></h2>
<dl><dd><i>Main article:</i> <a href="Loading_Icons" title="Loading Icons">Loading Icons</a></dd></dl>
<p>For a GUI, you'll probably want to display icons. It's as simple as
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">void</span><span class="w"> </span><span class="nf">draw_icon</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">w</span><span class="p">,</span><span class="w"> </span><span class="n">h</span><span class="p">,</span><span class="w"> </span><span class="n">pixels</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">l</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">l</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">h</span><span class="p">;</span><span class="w"> </span><span class="n">l</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">w</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">            </span><span class="n">put_pixel</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">l</span><span class="p">,</span><span class="w"> </span><span class="n">pixels</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span><span class="w"></span>
<span class="w">        </span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>The difficulty is, icons aren't stored as width, height and pixels array on disk. First you have to <a href="Loading_Icons" title="Loading Icons">decode an image file</a> to get that information.
</p>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<ul><li><a href="How_do_I_set_a_graphics_mode" title="How do I set a graphics mode">Extra Notes</a></li>
<li><a href="Double_Buffering" title="Double Buffering">Double Buffering</a></li>
<li><a href="3D_Renderer_Basics" title="3D Renderer Basics">3D Renderer Basics</a></li>
<li><a href="PC_Screen_Font" title="PC Screen Font">PC Screen Font</a></li>
<li><a href="Scalable_Screen_Font" title="Scalable Screen Font">Scalable Screen Font</a></li>
<li><a href="Loading_Icons" title="Loading Icons">Loading Icons</a></li></ul>
<h2><span class="mw-headline" id="External_Links">External Links</span></h2>
<ul><li><a rel="nofollow" class="external text" href="http://bos.asmhackers.net/forum/viewtopic.php?id=65">Covers basically the same, and is ASM-oriented.</a></li></ul>
<!-- 
NewPP limit report
Cached time: 20250211122443
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.051 seconds
Real time usage: 0.817 seconds
Preprocessor visited node count: 118/1000000
Post‐expand include size: 462/2097152 bytes
Template argument size: 46/2097152 bytes
Highest expansion depth: 3/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 19353/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%  658.809      1 -total
  0.11%    0.747      4 Template:Main
  0.05%    0.353      2 Template:Wikitable
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4597-0!canonical and timestamp 20250211122442 and revision id 29343.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Drawing_In_a_Linear_Framebuffer&amp;oldid=29343">https://wiki.osdev.org/index.php?title=Drawing_In_a_Linear_Framebuffer&amp;oldid=29343</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Video" title="Category:Video">Video</a></li><li><a href="./Category:Graphical_UI" title="Category:Graphical UI">Graphical UI</a></li><li><a href="./Category:Tutorials" title="Category:Tutorials">Tutorials</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Drawing+In+a+Linear+Framebuffer" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Drawing_In_a_Linear_Framebuffer#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Drawing_In_a_Linear_Framebuffer" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:Drawing_In_a_Linear_Framebuffer&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Drawing_In_a_Linear_Framebuffer"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Drawing_In_a_Linear_Framebuffer&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Drawing_In_a_Linear_Framebuffer&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Drawing_In_a_Linear_Framebuffer" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="./Special:RecentChangesLinked/Drawing_In_a_Linear_Framebuffer" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Drawing_In_a_Linear_Framebuffer&amp;oldid=29343" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Drawing_In_a_Linear_Framebuffer&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 21 January 2025, at 15:36.</li>
	<li id="footer-info-0">This page has been accessed 14,187 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Drawing_In_a_Linear_Framebuffer&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.051","walltime":"0.817","ppvisitednodes":{"value":118,"limit":1000000},"postexpandincludesize":{"value":462,"limit":2097152},"templateargumentsize":{"value":46,"limit":2097152},"expansiondepth":{"value":3,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":19353,"limit":5000000},"timingprofile":["100.00%  658.809      1 -total","  0.11%    0.747      4 Template:Main","  0.05%    0.353      2 Template:Wikitable"]},"cachereport":{"timestamp":"20250211122443","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":914});});</script>
</body>
</html>