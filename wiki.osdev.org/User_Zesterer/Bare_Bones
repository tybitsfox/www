<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>User:Zesterer/Bare Bones - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"1bafe482470f15421a8dc352","wgCSPNonce":false,"wgCanonicalNamespace":"User","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":2,"wgPageName":"User:Zesterer/Bare_Bones","wgTitle":"Zesterer/Bare Bones","wgCurRevisionId":21048,"wgRevisionId":21048,"wgArticleId":4045,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using duplicate arguments in template calls","Pages using deprecated source tags","Level 1 Tutorials","Bare bones tutorials","C","C++"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"User:Zesterer/Bare_Bones","wgRelevantArticleId":4045,"wgIsProbablyEditable"
:false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRelevantUserName":"Zesterer","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook",
"ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="../favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="../opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="../api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-2 ns-subject page-User_Zesterer_Bare_Bones rootpage-User_Zesterer skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-namespace">User</span><span class="mw-page-title-separator">:</span><span class="mw-page-title-main">Zesterer/Bare Bones</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Bare_Bones#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Bare_Bones#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear:right; border:1px solid #aaaaaa; background:#eee; text-align:center;;"><tbody><tr><th>Difficulty level</th></tr><tr><td><a href="../File:Difficulty_1.png" class="image"><img alt="Difficulty 1.png" src="../images/d/d3/Difficulty_1.png" decoding="async" width="46" height="14" data-file-width="46" data-file-height="14" /></a><br />Beginner</td></tr></tbody></table><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear: right; border:1px solid #aaaaaa; background:#eee; text-align:center; width:200px; ;"><tbody><tr><th style="background:#ffce7b; padding:0.3em; font-size:1.1em;"><a href="../Kernels" class="mw-redirect" title="Kernels">Kernel Designs</a></th></tr><tr><th>Models</th></tr><tr><td><div>
<p><a href="../Monolithic_Kernel" title="Monolithic Kernel">Monolithic Kernel</a><br />
<a href="../Microkernel" title="Microkernel">Microkernel</a><br />
<a href="../Hybrid_Kernel" title="Hybrid Kernel">Hybrid Kernel</a><br />
<a href="../Exokernel" title="Exokernel">Exokernel</a><br />
<a href="../Nanokernel" class="mw-redirect" title="Nanokernel">Nano/Picokernel</a><br />
<a href="../Exokernel#Cache_Kernel" title="Exokernel">Cache Kernel</a><br />
<a href="../Exokernel#Virtualizing_Kernel" title="Exokernel">Virtualizing Kernel</a><br />
<a href="../Megalithic_Kernel" title="Megalithic Kernel">Megalithic Kernel</a><br />
</p>
</div></td></tr><tr><th>Other Concepts</th></tr><tr><td><div>
<p><a href="../Modular_Kernel" title="Modular Kernel">Modular Kernel</a><br />
<a href="../Higher_Half_Kernel" title="Higher Half Kernel">Higher Half Kernel</a><br />
<a href="../Creating_a_64-bit_kernel" title="Creating a 64-bit kernel">64-bit Kernel</a><br />
</p>
</div></td></tr></tbody></table>
<p>This is an introductory tutorial for kernel development on the x86 architecture. It is a minimal example only, and does not show you how to structure a serious project. However, completing this project is a good first step for aspiring kernel developers.
</p><p>By the end of this tutorial, you will have the following:
</p>
<ul><li>A simple kernel written in C and x86 Assembly capable of displaying text on the screen</li>
<li>An ISO disk image containing your kernel that can be run from an emulator or on real hardware.</li>
<li>A rudimentary understanding of the x86 and x86 assembly.</li></ul>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Bare_Bones#What_This_Is_Not"><span class="tocnumber">1</span> <span class="toctext">What This Is Not</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Bare_Bones#Requirements"><span class="tocnumber">2</span> <span class="toctext">Requirements</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="Bare_Bones#Required_Knowledge"><span class="tocnumber">2.1</span> <span class="toctext">Required Knowledge</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="Bare_Bones#Required_Tools"><span class="tocnumber">2.2</span> <span class="toctext">Required Tools</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="Bare_Bones#Some_Background_Knowledge"><span class="tocnumber">3</span> <span class="toctext">Some Background Knowledge</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="Bare_Bones#Building_A_Cross-Compiler"><span class="tocnumber">4</span> <span class="toctext">Building A Cross-Compiler</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="Bare_Bones#The_Code"><span class="tocnumber">5</span> <span class="toctext">The Code</span></a>
<ul>
<li class="toclevel-2 tocsection-8"><a href="Bare_Bones#Freestanding_-_What_Does_This_Mean?"><span class="tocnumber">5.1</span> <span class="toctext">Freestanding - What Does This Mean?</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Bare_Bones#The_Project_Structure"><span class="tocnumber">5.2</span> <span class="toctext">The Project Structure</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="Bare_Bones#start.s"><span class="tocnumber">5.3</span> <span class="toctext">start.s</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="Bare_Bones#kernel.c"><span class="tocnumber">5.4</span> <span class="toctext">kernel.c</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="Bare_Bones#linker.ld"><span class="tocnumber">5.5</span> <span class="toctext">linker.ld</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-13"><a href="Bare_Bones#Compiling_And_Linking"><span class="tocnumber">6</span> <span class="toctext">Compiling And Linking</span></a>
<ul>
<li class="toclevel-2 tocsection-14"><a href="Bare_Bones#Compiling"><span class="tocnumber">6.1</span> <span class="toctext">Compiling</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="Bare_Bones#Linking"><span class="tocnumber">6.2</span> <span class="toctext">Linking</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-16"><a href="Bare_Bones#Running_The_Kernel_With_QEMU"><span class="tocnumber">7</span> <span class="toctext">Running The Kernel With QEMU</span></a></li>
<li class="toclevel-1 tocsection-17"><a href="Bare_Bones#Running_The_Kernel_With_GRUB_And_Real_Hardware"><span class="tocnumber">8</span> <span class="toctext">Running The Kernel With GRUB And Real Hardware</span></a>
<ul>
<li class="toclevel-2 tocsection-18"><a href="Bare_Bones#grub.cfg"><span class="tocnumber">8.1</span> <span class="toctext">grub.cfg</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-19"><a href="Bare_Bones#What_Now?"><span class="tocnumber">9</span> <span class="toctext">What Now?</span></a>
<ul>
<li class="toclevel-2 tocsection-20"><a href="Bare_Bones#Add_Color_Support_To_Your_Terminal"><span class="tocnumber">9.1</span> <span class="toctext">Add Color Support To Your Terminal</span></a></li>
<li class="toclevel-2 tocsection-21"><a href="Bare_Bones#Add_ANSI_Support_To_Your_Terminal"><span class="tocnumber">9.2</span> <span class="toctext">Add ANSI Support To Your Terminal</span></a></li>
<li class="toclevel-2 tocsection-22"><a href="Bare_Bones#Add_Scrolling_To_Your_Terminal"><span class="tocnumber">9.3</span> <span class="toctext">Add Scrolling To Your Terminal</span></a></li>
<li class="toclevel-2 tocsection-23"><a href="Bare_Bones#Create_A_Build_System_For_Your_Kernel"><span class="tocnumber">9.4</span> <span class="toctext">Create A Build System For Your Kernel</span></a></li>
<li class="toclevel-2 tocsection-24"><a href="Bare_Bones#Call_Global_Constructors"><span class="tocnumber">9.5</span> <span class="toctext">Call Global Constructors</span></a></li>
<li class="toclevel-2 tocsection-25"><a href="Bare_Bones#Going_Further_On_x86"><span class="tocnumber">9.6</span> <span class="toctext">Going Further On x86</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="What_This_Is_Not">What This Is Not</span></h2>
<ul><li>A make-your-own operating system tutorial. Developing a complete operating system requires years of work and, in most cases, decades of experience.</li>
<li>A one-size-fits-all introduction. There are many languages, architectures and approaches to operating system development. However, this tends to be a common route taken by beginners.</li>
<li>A proper and full kernel implementation. Real operating system kernels are vastly more complicated than the code shown here. This setup makes many assumptions about the system and ignored many things that will become important as you develop your kernel further.</li></ul>
<h2><span class="mw-headline" id="Requirements">Requirements</span></h2>
<p>Before proceeding, make sure you have the basics ready.
</p>
<h3><span class="mw-headline" id="Required_Knowledge">Required Knowledge</span></h3>
<p>It is important to make sure that you have enough basic knowledge. Kernel development has an extremely steep learning curve.
</p>
<ul><li>A sense of realism. You are not going to be making the next Linux or Windows any time soon. In fact, it'll take a lot of hard work to even get your system displaying text and responding to user input.</li>
<li>A basic understanding of the C programming language. You should be comfortable with functions, pointers, casting and flow control.</li>
<li>A basic understanding of computer architecture. You should know the difference between ROM and RAM, you should know what CPU registers are, and what machine code &amp; executables are.</li>
<li>A basic understanding of computer logic and mathematics. You should understand hexadecimal &amp; binary, as well as bitwise operators and the purpose of a stack.</li>
<li>Some basic command-line skills. You should understand how to run simple commands, navigate your filesystem and manipulate files.</li></ul>
<p><br />
<b>If after reading this you feel like you have a few holes in your knowledge, I highly recommend reading <a href="../Beginner_Mistakes" title="Beginner Mistakes">Beginner Mistakes</a> and related <a href="../Category:OS_theory" title="Category:OS theory">OS theory</a> first.</b>
</p>
<h3><span class="mw-headline" id="Required_Tools">Required Tools</span></h3>
<p>You will also require some software tools to develop this project.
</p>
<ul><li>A UNIX-like operating system that supports operating system development well such as Linux or a UNIX-like environment (MinGW or Cygwin if you are using Windows).</li>
<li>A text editor of some sort, preferably with syntax highlighting (it will make your life easier). I recommend the cross-platform <a rel="nofollow" class="external text" href="https://atom.io/">Atom editor</a>.</li>
<li>A copy of QEMU for the i386 architecture. This is only necessary if you want to test your kernel without real hardware.</li></ul>
<h2><span class="mw-headline" id="Some_Background_Knowledge">Some Background Knowledge</span></h2>
<p>First, a little background information.
</p><p>We will be developing our kernel for the x86 architecture. The x86 is a family of computer architectures first introduced in the 1970s. Most modern PCs are backwards-compatible with x86 however, so we should have no problem running our finished kernel on real hardware.
</p><p>The x86 is a CISC (Complex Instruction Set Computer) architecture. This means that it has a large instruction set that we can manipulate in order to execute programs.
</p><p>We will be compiling our kernel with our current operating system, with the intention of it running <b>free-standing</b> (i.e: independent of any other OS). For this reason, we will be using a <b>cross-compiler</b> to create our final executable. Cross-compilation is the first stage of writing a new operating system. After a huge amount of work, it is possible to make an operating system 'self-hosting'. This means that it is capable of compiling itself rather than relying on an existing OS. However, that is a long way down the road. For the foreseeable future, you will be cross-compiling your operating system.
</p><p>We'll be writing the kernel in x86 assembly and the C programming language. When the x86 first loads up our kernel, it won't yet be in a fit state to run C code. This is why we must use assembly to first set up a basic C environment. Once this is done, we can write (most) of the rest of the kernel in C.
</p><p>The x86 is a complex architecture with various different CPU states and modes. To avoid having to deal with them right now, we'll be using the GRUB bootloader to load our kernel into memory and set up a stable 32-bit 'protected-mode' environment.
</p><p>To test our kernel, we'll be running it in QEMU. QEMU is an emulator that will allow us to test our kernel without rebooting real hardware to test every change we make.
</p>
<h2><span class="mw-headline" id="Building_A_Cross-Compiler">Building A Cross-Compiler</span></h2>
<dl><dd><i>Main article: <a href="../GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a>, <a href="https://wiki.osdev.org/index.php?title=Why_do_I_need_a_Cross-Compiler%3F&amp;action=edit&amp;redlink=1" class="new" title="Why do I need a Cross-Compiler? (page does not exist)">Why do I need a Cross-Compiler?</a></i></dd></dl>
<p>The first thing we need to do is to build ourselves a cross-compiler toolchain to let us compile and link code for the x86. Until we have that, we can't do anything. A standard C compiler won't work: it doesn't understand how to generate the machine code we need for this project.
</p><p>You can find instructions for building a GCC cross-compiler for the <b>i686-elf</b> target here: <a href="../GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a>
</p><p>Don't attempt the rest of the tutorial without getting yourself the correct compiler. I can assure you: it won't work.
</p>
<h2><span class="mw-headline" id="The_Code">The Code</span></h2>
<p>So we know the theory, and we have our tools ready. What now? Code? Well... before putting finger to keyboard, it's a good idea for us to take a step back and think about what we have to work with.
</p>
<h3><span id="Freestanding_-_What_Does_This_Mean.3F"></span><span class="mw-headline" id="Freestanding_-_What_Does_This_Mean?">Freestanding - What Does This Mean?</span></h3>
<p>I've already mentioned that we're running our code '<b>freestanding'</b>. But what does this mean, and how will it affect us? It's important you know. Normally when you write C code in a hosted environment, you have a plethora or interfaces available to you. You can read from files, you can output messages, you can get user input... All with just a few lines of code. Sadly, we don't have that. Those things are provided by an operating system. And right now, we don't have one since we <b>ARE</b> the operating system.
</p><p>What we <b>DO</b> have access to however is a few useful headers GCC automatically provides us with (they give us things like fixed-width integers) and the hardware of the x86. We'd like to output text, so for that we're going to write ourselves a very simple driver that interacts with the x86's VGA buffer and allows us to display text on the screen. In doing this, we'll have to avoid using anything like the C standard library, because it simply isn't available when we're compiling for a freestanding target like we are now.
</p><p>So without further ado... Let's start programming!
</p>
<h3><span class="mw-headline" id="The_Project_Structure">The Project Structure</span></h3>
<p>Please remember, this is a minimal setup. A more advanced kernel project will have a more complex code structure, as well as an automated build system.
</p><p>For now, we'll be creating 3 files in our project directory. They are:
</p>
<pre>start.s     - This file will contain our x86 assembly code that starts our kernel and sets up the x86
kernel.c    - This file will contain the majority of our kernel, written in C
linker.ld   - This file will give the compiler information about how it should construct our kernel executable by linking the previous files together
</pre>
<h3><span class="mw-headline" id="start.s">start.s</span></h3>
<p>First, we create <b>start.s</b>. To best understand the code, I recommend typing it out by hand such that you can understand each part in detail.
</p>
<div class="mw-highlight mw-highlight-lang-text mw-content-ltr" dir="ltr"><pre><span></span>// We declare the &#39;kernel_main&#39; label as being external to this file.
// That&#39;s because it&#39;s the name of the main C function in &#39;kernel.c&#39;.
.extern kernel_main
 
// We declare the &#39;start&#39; label as global (accessible from outside this file), since the linker will need to know where it is.
// In a bit, we&#39;ll actually take a look at the code that defines this label.
.global start
 
// Our bootloader, GRUB, needs to know some basic information about our kernel before it can boot it.
// We give GRUB this information using a standard known as &#39;Multiboot&#39;.
// To define a valid &#39;Multiboot header&#39; that will be recognised by GRUB, we need to hard code some
// constants into the executable. The following code calculates those constants.
.set MB_MAGIC, 0x1BADB002          // This is a &#39;magic&#39; constant that GRUB will use to detect our kernel&#39;s location.
.set MB_FLAGS, (1 &lt;&lt; 0) | (1 &lt;&lt; 1) // This tells GRUB to 1: load modules on page boundaries and 2: provide a memory map (this is useful later in development)
// Finally, we calculate a checksum that includes all the previous values
.set MB_CHECKSUM, (0 - (MB_MAGIC + MB_FLAGS))
 
// We now start the section of the executable that will contain our Multiboot header
.section .multiboot
	.align 4 // Make sure the following data is aligned on a multiple of 4 bytes
	// Use the previously calculated constants in executable code
	.long MB_MAGIC
	.long MB_FLAGS
	// Use the checksum we calculated earlier
	.long MB_CHECKSUM
 
// This section contains data initialised to zeroes when the kernel is loaded
.section .bss
	// Our C code will need a stack to run. Here, we allocate 4096 bytes (or 4 Kilobytes) for our stack.
	// We can expand this later if we want a larger stack. For now, it will be perfectly adequate.
	.align 16
	stack_bottom:
		.skip 4096 // Reserve a 4096-byte (4K) stack
	stack_top:
 
// This section contains our actual assembly code to be run when our kernel loads
.section .text
	// Here is the &#39;start&#39; label we mentioned before. This is the first code that gets run in our kernel.
	start:
		// First thing&#39;s first: we want to set up an environment that&#39;s ready to run C code.
		// C is very relaxed in its requirements: All we need to do is to set up the stack.
		// Please note that on x86, the stack grows DOWNWARD. This is why we start at the top.
		mov $stack_top, %esp // Set the stack pointer to the top of the stack
 
		// Now we have a C-worthy (haha!) environment ready to run the rest of our kernel.
		// At this point, we can call our main C function.
		call kernel_main
 
		// If, by some mysterious circumstances, the kernel&#39;s C code ever returns, all we want to do is to hang the CPU
		hang:
			cli      // Disable CPU interrupts
			hlt      // Halt the CPU
			jmp hang // If that didn&#39;t work, loop around and try again.
</pre></div>
<h3><span class="mw-headline" id="kernel.c">kernel.c</span></h3>
<p>'kernel.c' contains our main kernel code. Specifically, it contains code for displaying text on the screen using the VGA textmode buffer.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">// GCC provides these header files automatically</span>
<span class="c1">// They give us access to useful things like fixed-width types</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stddef.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdint.h&gt;</span><span class="cp"></span>

<span class="c1">// First, let&#39;s do some basic checks to make sure we are using our x86-elf cross-compiler correctly</span>
<span class="cp">#if defined(__linux__)</span>
<span class="w">	</span><span class="cp">#error &quot;This code must be compiled with a cross-compiler&quot;</span>
<span class="cp">#elif !defined(__i386__)</span>
<span class="w">	</span><span class="cp">#error &quot;This code must be compiled with an x86-elf compiler&quot;</span>
<span class="cp">#endif</span>

<span class="c1">// This is the x86&#39;s VGA textmode buffer. To display text, we write data to this memory location</span>
<span class="k">volatile</span><span class="w"> </span><span class="kt">uint16_t</span><span class="o">*</span><span class="w"> </span><span class="n">vga_buffer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint16_t</span><span class="o">*</span><span class="p">)</span><span class="mh">0xB8000</span><span class="p">;</span><span class="w"></span>
<span class="c1">// By default, the VGA textmode buffer has a size of 80x25 characters</span>
<span class="k">const</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">VGA_COLS</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">80</span><span class="p">;</span><span class="w"></span>
<span class="k">const</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">VGA_ROWS</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">25</span><span class="p">;</span><span class="w"></span>

<span class="c1">// We start displaying text in the top-left of the screen (column = 0, row = 0)</span>
<span class="kt">int</span><span class="w"> </span><span class="n">term_col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">term_row</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="kt">uint8_t</span><span class="w"> </span><span class="n">term_color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x0F</span><span class="p">;</span><span class="w"> </span><span class="c1">// Black background, White foreground</span>

<span class="c1">// This function initiates the terminal by clearing it</span>
<span class="kt">void</span><span class="w"> </span><span class="nf">term_init</span><span class="p">()</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="c1">// Clear the textmode buffer</span>
<span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">VGA_COLS</span><span class="p">;</span><span class="w"> </span><span class="n">col</span><span class="w"> </span><span class="o">++</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">row</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">row</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">VGA_ROWS</span><span class="p">;</span><span class="w"> </span><span class="n">row</span><span class="w"> </span><span class="o">++</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="c1">// The VGA textmode buffer has size (VGA_COLS * VGA_ROWS).</span>
<span class="w">			</span><span class="c1">// Given this, we find an index into the buffer for our character</span>
<span class="w">			</span><span class="k">const</span><span class="w"> </span><span class="kt">size_t</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">VGA_COLS</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">row</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">col</span><span class="p">;</span><span class="w"></span>
<span class="w">			</span><span class="c1">// Entries in the VGA buffer take the binary form BBBBFFFFCCCCCCCC, where:</span>
<span class="w">			</span><span class="c1">// - B is the background color</span>
<span class="w">			</span><span class="c1">// - F is the foreground color</span>
<span class="w">			</span><span class="c1">// - C is the ASCII character</span>
<span class="w">			</span><span class="n">vga_buffer</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">((</span><span class="kt">uint16_t</span><span class="p">)</span><span class="n">term_color</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="sc">&#39; &#39;</span><span class="p">;</span><span class="w"> </span><span class="c1">// Set the character to blank (a space character)</span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="c1">// This function places a single character onto the screen</span>
<span class="kt">void</span><span class="w"> </span><span class="nf">term_putc</span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="c1">// Remember - we don&#39;t want to display ALL characters!</span>
<span class="w">	</span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">c</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="k">case</span><span class="w"> </span><span class="sc">&#39;\n&#39;</span><span class="o">:</span><span class="w"> </span><span class="c1">// Newline characters should return the column to 0, and increment the row</span>
<span class="w">		</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="n">term_col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">			</span><span class="n">term_row</span><span class="w"> </span><span class="o">++</span><span class="p">;</span><span class="w"></span>
<span class="w">			</span><span class="k">break</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">		</span>
<span class="w">	</span><span class="k">default</span><span class="o">:</span><span class="w"> </span><span class="c1">// Normal characters just get displayed and then increment the column</span>
<span class="w">		</span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="k">const</span><span class="w"> </span><span class="kt">size_t</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">VGA_COLS</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">term_row</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">term_col</span><span class="p">;</span><span class="w"> </span><span class="c1">// Like before, calculate the buffer index</span>
<span class="w">			</span><span class="n">vga_buffer</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">((</span><span class="kt">uint16_t</span><span class="p">)</span><span class="n">term_color</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">c</span><span class="p">;</span><span class="w"></span>
<span class="w">			</span><span class="n">term_col</span><span class="w"> </span><span class="o">++</span><span class="p">;</span><span class="w"></span>
<span class="w">			</span><span class="k">break</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="c1">// What happens if we get past the last column? We need to reset the column to 0, and increment the row to get to a new line</span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">term_col</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">VGA_COLS</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">term_col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="n">term_row</span><span class="w"> </span><span class="o">++</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="c1">// What happens if we get past the last row? We need to reset both column and row to 0 in order to loop back to the top of the screen</span>
<span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">term_row</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">VGA_ROWS</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">term_col</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="n">term_row</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="c1">// This function prints an entire string onto the screen</span>
<span class="kt">void</span><span class="w"> </span><span class="nf">term_print</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="o">*</span><span class="w"> </span><span class="n">str</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">size_t</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="sc">&#39;\0&#39;</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="c1">// Keep placing characters until we hit the null-terminating character (&#39;\0&#39;)</span>
<span class="w">		</span><span class="n">term_putc</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>



<span class="c1">// This is our kernel&#39;s main function</span>
<span class="kt">void</span><span class="w"> </span><span class="nf">kernel_main</span><span class="p">()</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="c1">// We&#39;re here! Let&#39;s initiate the terminal and display a message to show we got here.</span>
<span class="w">	</span>
<span class="w">	</span><span class="c1">// Initiate terminal</span>
<span class="w">	</span><span class="n">term_init</span><span class="p">();</span><span class="w"></span>

<span class="w">	</span><span class="c1">// Display some messages</span>
<span class="w">	</span><span class="n">term_print</span><span class="p">(</span><span class="s">&quot;Hello, World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">term_print</span><span class="p">(</span><span class="s">&quot;Welcome to the kernel.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="linker.ld">linker.ld</span></h3>
<p>This file is a <b>link script</b>. It is used to define how bits of the final kernel executable will be stitched together. It allows us to specify alignment, address offset, and other such useful properties of parts of the code that we need when our kernel gets linked together into an executable. You don't normally do this when you're writing C code - the compiler will do this for you. But this an operating system kernel, so we need to explicitly define a lot of these things.
</p>
<div class="mw-highlight mw-highlight-lang-text mw-content-ltr" dir="ltr"><pre><span></span>/* The bootloader will start execution at the symbol designated as the entry point. In this case, that&#39;s &#39;start&#39; (defined in start.s) */
ENTRY(start)

/* Tell the linker part of the compiler where the various sections of the kernel will be put in the final kernel executable. */
SECTIONS
{
	/* Begin putting sections at 1 Megabyte (1M), a good place for kernels to be loaded at by the bootloader. */
	/* This is because memory below 1 Megabyte is reserved for other x86-related things, so we can&#39;t use it */
	. = 1M;

	/* We align all sections in the executable at multiples of 4 Kilobytes (4K). This will become useful later in development when we add paging */

	/* First put the multiboot header, as it&#39;s required to be near the start of the executable otherwise the bootloader won&#39;t find it */
	/* The Multiboot header is Read-Only data, so we can put it in a &#39;.rodata&#39; section. */
	.rodata BLOCK(4K)&#160;: ALIGN(4K)
	{
		*(.multiboot)
	}

	/* Executable code */
	.text BLOCK(4K)&#160;: ALIGN(4K)
	{
		*(.text)
	}

	/* Read-only data. */
	.rodata BLOCK(4K)&#160;: ALIGN(4K)
	{
		*(.rodata)
	}

	/* Read-write data (initialized) */
	.data BLOCK(4K)&#160;: ALIGN(4K)
	{
		*(.data)
	}

	/* Read-write data (uninitialized) and stack */
	.bss BLOCK(4K)&#160;: ALIGN(4K)
	{
		*(COMMON)
		*(.bss)
	}
}
</pre></div>
<h2><span class="mw-headline" id="Compiling_And_Linking">Compiling And Linking</span></h2>
<p>Now comes the magic. We'll be compiling the code we've just written into <b>object</b> files (if you don't know what these are, you can think of them as flat-pack shelves from IKEA. They are blobs of compiled code packaged along with instructions explaining how they should be linked into a larger executable).
</p><p>Once we've compiled the object files, we'll be using our linker (part of our cross-compiler toolchain) to link the object files together into the final kernel executable!
</p>
<h3><span class="mw-headline" id="Compiling">Compiling</span></h3>
<p>To compile our code, we'll need to run the following commands:
</p>
<pre>i686-elf-gcc -std=gnu99 -ffreestanding -g -c start.s -o start.o
i686-elf-gcc -std=gnu99 -ffreestanding -g -c kernel.c -o kernel.o
</pre>
<p>This will create two object files named <b>start.o</b> and <b>kernel.o</b> ready for linking.
</p><p>There are several parts to the above command:
</p>
<ul><li><b>-std=gnu99</b> tells the compiler to adhere to the C99 GNU standard. This gives us all of the abilities of C99, plus a bunch of useful extra things that the GNU developers added in for us.</li>
<li><b>-ffreestanding</b> tells the compiler to generate free-standing code (i.e: does not rely on an existing operating system to run).</li>
<li><b>-g</b> tells the compiler to add debugging symbols to the compiled code. As the kernel grows, it'll be increasingly useful to have a good way of debugging problems. It's best to start early.</li>
<li><b>-c</b> tells the compiler to generate just object files rather than compiled and linked executables.</li></ul>
<h3><span class="mw-headline" id="Linking">Linking</span></h3>
<p>Finally, to link the objects together into the final executable, we'll run the following command:
</p>
<pre>i686-elf-gcc -ffreestanding -nostdlib -g -T linker.ld start.o kernel.o -o mykernel.elf -lgcc
</pre>
<p>This command also has several unexplained parts:
</p>
<ul><li><b>-nostdlib</b> is used to specify that we aren't linking against a C standard library. This should be obvious, since we're running freestanding.</li>
<li><b>-T &lt;link-script&gt;</b> is used to specify our linker script, 'linker.ld'.</li>
<li><b>-lgcc</b> tells the linker to link against <b>libgcc</b> which the the built-in platform-independent library that gcc provides for us to deal with simple code that GCC can implicitly generate (i.e: moving and manipulating data, low-level maths operations, etc.)</li></ul>
<h2><span class="mw-headline" id="Running_The_Kernel_With_QEMU">Running The Kernel With QEMU</span></h2>
<p>After all that, the linker command should have produced a file named <b>mykernel.elf</b>. This is our kernel image. Congratulations! I would tell you to give yourself a pat on the back, but it's wise to wait until we've seen it actually working before doing that.
</p><p>Do you remember how I said that we'd need to use the GRUB bootloader? We will need to for real hardware. But luckily for us, QEMU has the ability to read Multiboot kernels built-in, so we don't need to go through the hassle of attaching our kernel to GRUB.
</p><p>To run your kernel with QEMU, you can use the following command (replace <b>mykernel.elf</b> with the name of your kernel file)
</p>
<pre>qemu-system-i386 -kernel mykernel.elf
</pre>
<p>If everything went to plan, you should see something like the following appear:
</p><p><a href="../File:Qemu-barebones-x86-c.png" class="image"><img alt="Qemu-barebones-x86-c.png" src="../images/c/c1/Qemu-barebones-x86-c.png" decoding="async" width="741" height="471" data-file-width="741" data-file-height="471" /></a>
</p><p>If this isn't what you see, then I recommend going back through the code and checking you typed everything up correctly, ran the correct commands, and that you have a working cross-compiler. Please only ask for help on the forums or via IRC if you've double-checked your method.
</p>
<h2><span class="mw-headline" id="Running_The_Kernel_With_GRUB_And_Real_Hardware">Running The Kernel With GRUB And Real Hardware</span></h2>
<p>To attach your kernel to GRUB and test it on real hardware, you'll have to first have GRUB installed. We'll be using GRUB2, so make sure you have the latest version on your system.
</p><p>We'll need to start by creating a new directory tree for our GRUB ISO build. I call it 'isoroot', but you can choose whatever name you want. Inside that directory, you'll need to create a directory called 'boot' and a directory below that called 'grub'. Create a GRUB configuration file called <b>grub.cfg</b> in 'isoroot/boot/grub'. You'll want to put the following in it, and then adjust the contents according to your directory structure and kernel name.
</p>
<h3><span class="mw-headline" id="grub.cfg">grub.cfg</span></h3>
<div class="mw-highlight mw-highlight-lang-text mw-content-ltr" dir="ltr"><pre><span></span>menuentry &quot;My Kernel&quot; {
	multiboot /boot/mykernel.elf
	boot
}
</pre></div>
<p>Once you have done this, copy your final kernel <b>.elf</b> executable that we linked previously into the 'isoroot/boot' directory.
</p><p>Your final file structure should look roughly like this:
</p>
<pre>├── isoroot
│&#160;&#160; └── boot
│&#160;&#160;     ├── grub
│&#160;&#160;     │&#160;&#160; └── grub.cfg
│&#160;&#160;     └── mykernel.elf
</pre>
<p>This last command will take your GRUB directory, read it, and produce a final ISO at the end. Make sure you replace 'isoroot' with whatever your GRUB directory name is.
</p>
<pre>grub-mkrescue isodir -o mykernel.iso
</pre>
<p>Congratulations! If all went to plan, you've just produced your first ever working x86 kernel ISO disk image. This disk image will happily run on emulators like VMWare, QEMU, VirtualBox and Microsoft VirtualPC. If you want to run it on real hardware, simply flash it to a USB or disk drive like you would a Linux distribution LiveCD. For a good tutorial on how to do this, take a look at [<a rel="nofollow" class="external text" href="https://help.ubuntu.com/community/BurningIsoHowto">Ubuntu: Burning ISO File Tutorial</a>].
</p><p>Note: The x86 VGA textmode device we rely on in this tutorial is dependent on the existence of the BIOS. This ISO can only be booted properly from a UEFI system if it is in a BIOS compatibility mode (often referred to as 'legacy mode').
</p>
<h2><span id="What_Now.3F"></span><span class="mw-headline" id="What_Now?">What Now?</span></h2>
<p>At this point, you may be wondering what else we can do. I'm sure you have grand visions of a working filesystem, a GUI (Graphical User Interface), or even your system running some of your favourite games. But now is not the time for grand visions: You would end up disappointed anyway. The path to writing a complete operating system is a long and confusing one that involves years of dedicated work. Keep your goals realistic, but feel free to play around with the code and test out new ideas.
</p><p>With that in mind, here are a list of things you can probably achieve within at most a few days with a little work.
</p>
<h3><span class="mw-headline" id="Add_Color_Support_To_Your_Terminal">Add Color Support To Your Terminal</span></h3>
<p>Color will improve the look of your kernel a lot. You'll need to find a sensible way of defining available colors in code (The VGA textmode buffer provides support for 16 colors in both the background and foreground of your text) and then changing them in the code. Color support will also be useful for displaying colorful error messages as your kernel grows in size (trust me: you'll spend a lot of time debugging).
</p>
<h3><span class="mw-headline" id="Add_ANSI_Support_To_Your_Terminal">Add ANSI Support To Your Terminal</span></h3>
<p>ANSI (American National Standards Institute) has a standardised system of escape codes that modern computer terminals should understand. These escape codes allow a computer program to manipulate terminal color, text effects, clear the screen and move the text cursor around. You can find more details about ANSI here: [<a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/ANSI_escape_code">ANSI Escape Codes - Wikipedia</a>].
</p>
<h3><span class="mw-headline" id="Add_Scrolling_To_Your_Terminal">Add Scrolling To Your Terminal</span></h3>
<p>Scrolling is a common feature in CLIs (Command-Line Interfaces). When text runs off the bottom of the screen, can scroll the rest of the text upwards to fit a new line below rather than simply loop back to the top of the screen as we do now. To achieve this, you'll need to shift all the characters in the VGA buffer upwards by one row.
</p>
<h3><span class="mw-headline" id="Create_A_Build_System_For_Your_Kernel">Create A Build System For Your Kernel</span></h3>
<dl><dd><i>Main article: <a href="../Meaty_Skeleton" title="Meaty Skeleton">Meaty Skeleton</a></i></dd></dl>
<p>At the moment, we compile and link our kernel by manually running several commands. As your kernel grows, this will no longer be a realistic way of doing things. You'll need to design and implement a build system that can build your kernel for you. Common kernel build systems use 'make', 'CMake', 'autoconf', 'SCons' or 'Tup'.
</p>
<h3><span class="mw-headline" id="Call_Global_Constructors">Call Global Constructors</span></h3>
<dl><dd><i>Main article: <a href="../Calling_Global_Constructors" title="Calling Global Constructors">Calling Global Constructors</a></i></dd></dl>
<p>In C and particularly C++, the compiler will often generate code that is meant to be run when the program starts. Currently, we don't have any means to run such code. As our kernel grows, we'll need to add support for this.
</p>
<h3><span class="mw-headline" id="Going_Further_On_x86">Going Further On x86</span></h3>
<dl><dd><i>Main article: <a href="../Going_Further_on_x86" title="Going Further on x86">Going Further on x86</a></i></dd></dl>
<p>There is a whole world of interesting things to explore through operating system development. To improve our kernel further, we will need to better understand the x86 and what hardware we have available.
</p>
<!-- 
NewPP limit report
Cached time: 20250211123327
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.061 seconds
Real time usage: 0.545 seconds
Preprocessor visited node count: 493/1000000
Post‐expand include size: 2554/2097152 bytes
Template argument size: 2248/2097152 bytes
Highest expansion depth: 15/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 20681/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    8.391      1 -total
 66.49%    5.579     22 Template:If
 50.28%    4.219      1 Template:Kernel_designs
 49.02%    4.113      1 Template:Rating
 48.74%    4.090     22 Template:Show1
 44.30%    3.717      1 Template:SmallNavBox
  9.79%    0.822      2 Template:Eq
  4.68%    0.393      2 Template:Eq1
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4045-0!canonical and timestamp 20250211123327 and revision id 21048.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=User:Zesterer/Bare_Bones&amp;oldid=21048">https://wiki.osdev.org/index.php?title=User:Zesterer/Bare_Bones&amp;oldid=21048</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="../Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_duplicate_arguments_in_template_calls&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using duplicate arguments in template calls (page does not exist)">Pages using duplicate arguments in template calls</a></li><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="../Category:Level_1_Tutorials" title="Category:Level 1 Tutorials">Level 1 Tutorials</a></li><li><a href="../Category:Bare_bones_tutorials" title="Category:Bare bones tutorials">Bare bones tutorials</a></li><li><a href="../Category:C" title="Category:C">C</a></li><li><a href="../Category:C++" title="Category:C++">C++</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=User%3AZesterer%2FBare+Bones" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Bare_Bones#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-user" class="selected mw-list-item"><a href="Bare_Bones" title="View the user page [c]" accesskey="c"><span>User page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="../User_talk:Zesterer/Bare_Bones" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Bare_Bones"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Zesterer/Bare_Bones&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Zesterer/Bare_Bones&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="../index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="../index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="../Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="../Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="../OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="../OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="../OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="../Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="../Special:WhatLinksHere/User:Zesterer/Bare_Bones" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/User:Zesterer/Bare_Bones" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-contributions" class="mw-list-item"><a href="../Special:Contributions/Zesterer" title="A list of contributions by this user"><span>User contributions</span></a></li><li id="t-log" class="mw-list-item"><a href="../Special:Log/Zesterer"><span>Logs</span></a></li><li id="t-userrights" class="mw-list-item"><a href="../Special:UserRights/Zesterer"><span>View user groups</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="../Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Zesterer/Bare_Bones&amp;oldid=21048" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Zesterer/Bare_Bones&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 4 August 2017, at 15:57.</li>
	<li id="footer-info-0">This page has been accessed 3,942 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="../OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="../OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="../OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=User:Zesterer/Bare_Bones&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="../resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="../resources/assets/poweredby_mediawiki_132x47.png 1.5x, ../resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.061","walltime":"0.545","ppvisitednodes":{"value":493,"limit":1000000},"postexpandincludesize":{"value":2554,"limit":2097152},"templateargumentsize":{"value":2248,"limit":2097152},"expansiondepth":{"value":15,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":20681,"limit":5000000},"timingprofile":["100.00%    8.391      1 -total"," 66.49%    5.579     22 Template:If"," 50.28%    4.219      1 Template:Kernel_designs"," 49.02%    4.113      1 Template:Rating"," 48.74%    4.090     22 Template:Show1"," 44.30%    3.717      1 Template:SmallNavBox","  9.79%    0.822      2 Template:Eq","  4.68%    0.393      2 Template:Eq1"]},"cachereport":{"timestamp":"20250211123327","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":110});});</script>
</body>
</html>