<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Getting to Ring 3 - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"7ce1bd2107a78374f0b339b0","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Getting_to_Ring_3","wgTitle":"Getting to Ring 3","wgCurRevisionId":27736,"wgRevisionId":27736,"wgArticleId":2603,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","In Progress","Tutorials","X86 CPU"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Getting_to_Ring_3","wgRelevantArticleId":2603,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],
"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Getting_to_Ring_3 rootpage-Getting_to_Ring_3 skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Getting to Ring 3</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Getting_to_Ring_3#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Getting_to_Ring_3#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p><a href="./File:Under_Construction.png" class="image" title="This page is under construction!"><img alt="This page is under construction!" src="images/1/14/Under_Construction.png" decoding="async" width="50" height="50" data-file-width="50" data-file-height="50" /></a>
This page or section is a work in progress and may thus be incomplete. Its content may be changed in the near future.
</p>
</td>
<td>
</td></tr></tbody></table>
</center>
<p>The end goal of writing a kernel is to get to <b>userspace</b>, or, in other words, going from ring 0 to ring 3. While one might expect that a ring 3 <a href="GDT" class="mw-redirect" title="GDT">GDT</a> entries would be sufficient, it is more complicated. All of the following tasks must be completed:
</p>
<ul><li>Add two new GDT entries (at least) configured for ring 3.
<ul><li>These entries are needed for the user's code and data segments (one each)</li></ul></li>
<li>Set up a barebones <a href="TSS" class="mw-redirect" title="TSS">TSS</a> with an ESP0 stack.
<ul><li>When an interrupt (be it fault, IRQ, or software interrupt) happens while the CPU is in user mode, the CPU needs to know where the kernel stack is located. This location is stored in the ESP0 (0 for ring 0) entry of the TSS.</li></ul></li>
<li>Set up an <a href="IDT" class="mw-redirect" title="IDT">IDT</a> entry for ring 3 system call interrupts (optional).
<ul><li>System calls are the way user code requests the kernel to do IO and process management. For more information see <a href="System_Calls" title="System Calls">System Calls</a></li></ul></li></ul>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Getting_to_Ring_3#Requirements"><span class="tocnumber">1</span> <span class="toctext">Requirements</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Getting_to_Ring_3#GDT"><span class="tocnumber">2</span> <span class="toctext">GDT</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Getting_to_Ring_3#The_TSS"><span class="tocnumber">3</span> <span class="toctext">The TSS</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="Getting_to_Ring_3#Entering_Ring_3"><span class="tocnumber">4</span> <span class="toctext">Entering Ring 3</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="Getting_to_Ring_3#iret_method"><span class="tocnumber">4.1</span> <span class="toctext">iret method</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="Getting_to_Ring_3#sysexit_method"><span class="tocnumber">4.2</span> <span class="toctext">sysexit method</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Getting_to_Ring_3#sysret_method"><span class="tocnumber">4.3</span> <span class="toctext">sysret method</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-8"><a href="Getting_to_Ring_3#Multitasking_considerations"><span class="tocnumber">5</span> <span class="toctext">Multitasking considerations</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Requirements">Requirements</span></h2>
<ul><li>Ring 0 GDT and IDT</li>
<li>IRQ handling</li>
<li>Plans for multitasking with task switching</li></ul>
<h2><span class="mw-headline" id="GDT">GDT</span></h2>
<p>Following is an example of a GDT entry structure in C, utilizing bit-fields:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">struct</span><span class="w"> </span><span class="nc">gdt_entry_bits</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">limit_low</span><span class="w">              </span><span class="o">:</span><span class="w"> </span><span class="mi">16</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">base_low</span><span class="w">               </span><span class="o">:</span><span class="w"> </span><span class="mi">24</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">accessed</span><span class="w">               </span><span class="o">:</span><span class="w">  </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">read_write</span><span class="w">             </span><span class="o">:</span><span class="w">  </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="c1">// readable for code, writable for data</span>
<span class="w">	</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">conforming_expand_down</span><span class="w"> </span><span class="o">:</span><span class="w">  </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="c1">// conforming for code, expand down for data</span>
<span class="w">	</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">code</span><span class="w">                   </span><span class="o">:</span><span class="w">  </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="c1">// 1 for code, 0 for data</span>
<span class="w">	</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">code_data_segment</span><span class="w">      </span><span class="o">:</span><span class="w">  </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="c1">// should be 1 for everything but TSS and LDT</span>
<span class="w">	</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">DPL</span><span class="w">                    </span><span class="o">:</span><span class="w">  </span><span class="mi">2</span><span class="p">;</span><span class="w"> </span><span class="c1">// privilege level</span>
<span class="w">	</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">present</span><span class="w">                </span><span class="o">:</span><span class="w">  </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">limit_high</span><span class="w">             </span><span class="o">:</span><span class="w">  </span><span class="mi">4</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">available</span><span class="w">              </span><span class="o">:</span><span class="w">  </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="c1">// only used in software; has no effect on hardware</span>
<span class="w">	</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">long_mode</span><span class="w">              </span><span class="o">:</span><span class="w">  </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">big</span><span class="w">                    </span><span class="o">:</span><span class="w">  </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="c1">// 32-bit opcodes for code, uint32_t stack for data</span>
<span class="w">	</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">gran</span><span class="w">                   </span><span class="o">:</span><span class="w">  </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="c1">// 1 to use 4k page addressing, 0 for byte addressing</span>
<span class="w">	</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">base_high</span><span class="w">              </span><span class="o">:</span><span class="w">  </span><span class="mi">8</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">__packed</span><span class="p">;</span><span class="w"> </span><span class="c1">// or `__attribute__((packed))` depending on compiler</span>
</pre></div>
<p>Using this structure, two ring 3 segments, both with base of 0 and limit of 0xFFFFFFFF, can be added, as follows:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">static</span><span class="w"> </span><span class="n">gdt_entry_bits</span><span class="w"> </span><span class="n">gdt</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span><span class="w"> </span><span class="c1">// one null segment, two ring 0 segments, two ring 3 segments, TSS segment</span>
<span class="c1">// (ring 0 segments)</span>

<span class="n">gdt_entry_bits</span><span class="w"> </span><span class="o">*</span><span class="n">ring3_code</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">gdt</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="w"></span>
<span class="n">gdt_entry_bits</span><span class="w"> </span><span class="o">*</span><span class="n">ring3_data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">gdt</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="w"></span>

<span class="n">ring3_code</span><span class="o">-&gt;</span><span class="n">limit_low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0xFFFF</span><span class="p">;</span><span class="w"></span>
<span class="n">ring3_code</span><span class="o">-&gt;</span><span class="n">base_low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="n">ring3_code</span><span class="o">-&gt;</span><span class="n">accessed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="n">ring3_code</span><span class="o">-&gt;</span><span class="n">read_write</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="c1">// since this is a code segment, specifies that the segment is readable</span>
<span class="n">ring3_code</span><span class="o">-&gt;</span><span class="n">conforming</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="c1">// does not matter for ring 3 as no lower privilege level exists</span>
<span class="n">ring3_code</span><span class="o">-&gt;</span><span class="n">code</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="n">ring3_code</span><span class="o">-&gt;</span><span class="n">code_data_segment</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="n">ring3_code</span><span class="o">-&gt;</span><span class="n">DPL</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3</span><span class="p">;</span><span class="w"> </span><span class="c1">// ring 3</span>
<span class="n">ring3_code</span><span class="o">-&gt;</span><span class="n">present</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="n">ring3_code</span><span class="o">-&gt;</span><span class="n">limit_high</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0xF</span><span class="p">;</span><span class="w"></span>
<span class="n">ring3_code</span><span class="o">-&gt;</span><span class="n">available</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="n">ring3_code</span><span class="o">-&gt;</span><span class="n">long_mode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="n">ring3_code</span><span class="o">-&gt;</span><span class="n">big</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="c1">// it&#39;s 32 bits</span>
<span class="n">ring3_code</span><span class="o">-&gt;</span><span class="n">gran</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="c1">// 4KB page addressing</span>
<span class="n">ring3_code</span><span class="o">-&gt;</span><span class="n">base_high</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>

<span class="o">*</span><span class="n">ring3_data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">*</span><span class="n">ring3_code</span><span class="p">;</span><span class="w"> </span><span class="c1">// contents are similar so save time by copying</span>
<span class="n">ring3_data</span><span class="o">-&gt;</span><span class="n">code</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="c1">// not code but data</span>

<span class="n">install_tss</span><span class="p">(</span><span class="o">&amp;</span><span class="n">gdt</span><span class="p">[</span><span class="mi">5</span><span class="p">]);</span><span class="w"> </span><span class="c1">// TSS segment will be the fifth </span>

<span class="n">flush_tss</span><span class="p">();</span><span class="w"></span>
</pre></div>
<p>In actuality, the CPU can be put into user mode with just these two segments. However it is impossible to return to ring 0 for system calls, faults, or even IRQs. That is where the TSS comes in.
</p>
<h2><span class="mw-headline" id="The_TSS">The TSS</span></h2>
<p>The TSS can be used for multitasking, though it is recommended to use software multitasking for these reasons:
</p>
<ul><li>Software task switching is faster (usually)</li>
<li>When you port your OS to a different CPU, it probably won't have the TSS, so you'll have to implement software task switching anyway</li>
<li>x86 64-bit mode does not allow you to use the TSS for task switching (the main reason, especially if your goal is to read 64-bit mode)</li></ul>
<p>This guide will use software multitasking. Because of this the 32-bit TSS will contain a lot of junk we don't need. Here is the structure of the TSS:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">struct</span><span class="w"> </span><span class="nc">tss_entry_struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">prev_tss</span><span class="p">;</span><span class="w"> </span><span class="c1">// The previous TSS - with hardware task switching these form a kind of backward linked list.</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">esp0</span><span class="p">;</span><span class="w">     </span><span class="c1">// The stack pointer to load when changing to kernel mode.</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">ss0</span><span class="p">;</span><span class="w">      </span><span class="c1">// The stack segment to load when changing to kernel mode.</span>
<span class="w">	</span><span class="c1">// Everything below here is unused.</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">esp1</span><span class="p">;</span><span class="w"> </span><span class="c1">// esp and ss 1 and 2 would be used when switching to rings 1 or 2.</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">ss1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">esp2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">ss2</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">cr3</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">eip</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">eflags</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">eax</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">ecx</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">edx</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">ebx</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">esp</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">ebp</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">esi</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">edi</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">es</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">cs</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">ss</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">ds</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">fs</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">gs</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">ldt</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">trap</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">iomap_base</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">__packed</span><span class="p">;</span><span class="w"></span>

<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">tss_entry_struct</span><span class="w"> </span><span class="n">tss_entry_t</span><span class="p">;</span><span class="w"></span>
</pre></div>
<p>To setup this TSS structure, give it an initial esp0 stack with the correct ss0 segment.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">// Note: some of the GDT entry struct field names may not match perfectly to the TSS entries.</span>
<span class="n">tss_entry_t</span><span class="w"> </span><span class="n">tss_entry</span><span class="p">;</span><span class="w"></span>

<span class="kt">void</span><span class="w"> </span><span class="nf">write_tss</span><span class="p">(</span><span class="n">gdt_entry_bits</span><span class="w"> </span><span class="o">*</span><span class="n">g</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="c1">// Compute the base and limit of the TSS for use in the GDT entry.</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">base</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint32_t</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="n">tss_entry</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">limit</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">sizeof</span><span class="w"> </span><span class="n">tss_entry</span><span class="p">;</span><span class="w"></span>

<span class="w">	</span><span class="c1">// Add a TSS descriptor to the GDT.</span>
<span class="w">	</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">limit_low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">limit</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">base_low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">base</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">accessed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="c1">// With a system entry (`code_data_segment` = 0), 1 indicates TSS and 0 indicates LDT</span>
<span class="w">	</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">read_write</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="c1">// For a TSS, indicates busy (1) or not busy (0).</span>
<span class="w">	</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">conforming_expand_down</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="c1">// always 0 for TSS</span>
<span class="w">	</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">code</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="c1">// For a TSS, 1 indicates 32-bit (1) or 16-bit (0).</span>
<span class="w">	</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">code_data_segment</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="c1">// indicates TSS/LDT (see also `accessed`)</span>
<span class="w">	</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">DPL</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="c1">// ring 0, see the comments below</span>
<span class="w">	</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">present</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">limit_high</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">limit</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="p">(</span><span class="mh">0xf</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">16</span><span class="p">))</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">16</span><span class="p">;</span><span class="w"> </span><span class="c1">// isolate top nibble</span>
<span class="w">	</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">available</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="c1">// 0 for a TSS</span>
<span class="w">	</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">long_mode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">big</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="c1">// should leave zero according to manuals.</span>
<span class="w">	</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">gran</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="c1">// limit is in bytes, not pages</span>
<span class="w">	</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">base_high</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">base</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="p">(</span><span class="mh">0xff</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">24</span><span class="p">))</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">24</span><span class="p">;</span><span class="w"> </span><span class="c1">//isolate top byte</span>

<span class="w">	</span><span class="c1">// Ensure the TSS is initially zero&#39;d.</span>
<span class="w">	</span><span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tss_entry</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="k">sizeof</span><span class="w"> </span><span class="n">tss_entry</span><span class="p">);</span><span class="w"></span>

<span class="w">	</span><span class="n">tss_entry</span><span class="p">.</span><span class="n">ss0</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">REPLACE_KERNEL_DATA_SEGMENT</span><span class="p">;</span><span class="w">  </span><span class="c1">// Set the kernel stack segment.</span>
<span class="w">	</span><span class="n">tss_entry</span><span class="p">.</span><span class="n">esp0</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">REPLACE_KERNEL_STACK_ADDRESS</span><span class="p">;</span><span class="w"> </span><span class="c1">// Set the kernel stack pointer.</span>
<span class="w">	</span><span class="c1">//note that CS is loaded from the IDT entry and should be the regular kernel code segment</span>
<span class="p">}</span><span class="w"></span>

<span class="kt">void</span><span class="w"> </span><span class="nf">set_kernel_stack</span><span class="p">(</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">stack</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// Used when an interrupt occurs</span>
<span class="w">	</span><span class="n">tss_entry</span><span class="p">.</span><span class="n">esp0</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">stack</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>Finally, the implementation of the flush_tss function (Intel syntax):
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">; C declaration: void flush_tss(void);</span>
<span class="nf">global</span><span class="w"> </span><span class="no">flush_tss</span><span class="w"></span>
<span class="nl">flush_tss:</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="mi">5</span><span class="w"> </span><span class="p">*</span><span class="w"> </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="c1">; fifth 8-byte selector, symbolically OR-ed with 0 to set the RPL (requested privilege level).</span>
<span class="w">	</span><span class="nf">ltr</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">	</span><span class="nf">ret</span><span class="w"></span>
</pre></div>
<p>At this point the kernel is ready to enter ring 3. It's worth noticing that the DPL of the TSS descriptor in GDT has <i>nothing</i> to do with the privilege level the task will run on: that depends on the DPL of the code segment used to set CS. The DPL of the TSS descriptor determines at which privilege level is it possible to CALL it, triggering a hardware context switch (32-bit only).
</p><p>From the Intel® 64 and IA-32 Architectures Software Developer’s Manual Volume 3, Section 7.2.2 (TSS Descriptor):
</p>
<blockquote><p>In most systems, the DPLs of TSS descriptors are set to values less than 3, so that only privileged software can perform task switching. However, in multitasking applications, DPLs for some TSS descriptors may be set to 3 to allow task switching at the application (or user) privilege level.</p></blockquote>
<h2><span class="mw-headline" id="Entering_Ring_3">Entering Ring 3</span></h2>
<p>The x86 is a tricky CPU. No matter how you approach it, there is no easy way to enter user mode. Nonetheless, below are three ways to enter user mode.
</p>
<h3><span class="mw-headline" id="iret_method">iret method</span></h3>
<p>One of the ways to get to ring 3 is to make the processor think it was already in ring 3 to start with. This can be accomplished with an iret. Following is a simple example of this trick:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">global</span><span class="w"> </span><span class="no">jump_usermode</span><span class="w"></span>
<span class="nf">extern</span><span class="w"> </span><span class="no">test_user_function</span><span class="w"></span>
<span class="nl">jump_usermode:</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="mi">4</span><span class="w"> </span><span class="p">*</span><span class="w"> </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="c1">; ring 3 data with bottom 2 bits set for ring 3</span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">ds</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">es</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"> </span>
<span class="w">	</span><span class="no">mov</span><span class="w"> </span><span class="no">fs</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"> </span>
<span class="w">	</span><span class="no">mov</span><span class="w"> </span><span class="no">gs</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"> </span><span class="c1">; SS is handled by iret</span>

<span class="w">	</span><span class="c1">; set up the stack frame iret expects</span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="no">esp</span><span class="w"></span>
<span class="w">	</span><span class="nf">push</span><span class="w"> </span><span class="p">(</span><span class="mi">4</span><span class="w"> </span><span class="p">*</span><span class="w"> </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="c1">; data selector</span>
<span class="w">	</span><span class="nf">push</span><span class="w"> </span><span class="no">eax</span><span class="w"> </span><span class="c1">; current esp</span>
<span class="w">	</span><span class="nf">pushf</span><span class="w"> </span><span class="c1">; eflags</span>
<span class="w">	</span><span class="nf">push</span><span class="w"> </span><span class="p">(</span><span class="mi">3</span><span class="w"> </span><span class="p">*</span><span class="w"> </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="c1">; code selector (ring 3 code with bottom 2 bits set for ring 3)</span>
<span class="w">	</span><span class="nf">push</span><span class="w"> </span><span class="no">test_user_function</span><span class="w"> </span><span class="c1">; instruction address to return to</span>
<span class="w">	</span><span class="nf">iret</span><span class="w"></span>
</pre></div>
<p>This will call test_user_function and it will be operating in user mode! Have the test_user_function execute a cli or other privileged instruction and you'll be pleased by a <a href="General_Protection_Fault" class="mw-redirect" title="General Protection Fault">General Protection Fault</a>.
</p>
<h3><span class="mw-headline" id="sysexit_method">sysexit method</span></h3>
<p>The second way is to use the sysexit instruction as follows:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">global</span><span class="w"> </span><span class="no">jump_usermode</span><span class="w"></span>
<span class="nf">extern</span><span class="w"> </span><span class="no">test_user_function</span><span class="w"></span>
<span class="nl">jump_usermode:</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="mi">4</span><span class="w"> </span><span class="p">*</span><span class="w"> </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="c1">; user data segment with RPL 3</span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">ds</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">es</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">fs</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">gs</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"> </span><span class="c1">; sysexit sets SS</span>

<span class="w">	</span><span class="c1">; setup wrmsr inputs</span>
<span class="w">	</span><span class="nf">xor</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="w"> </span><span class="no">edx</span><span class="w"> </span><span class="c1">; not necessary; set to 0</span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">0x8</span><span class="w"> </span><span class="c1">; the segments are computed as follows: CS=MSR+0x10 (0x8+0x10=0x18), SS=MSR+0x18 (0x8+0x18=0x20).</span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">ecx</span><span class="p">,</span><span class="w"> </span><span class="mi">0x174</span><span class="w"> </span><span class="c1">; MSR specifier: IA32_SYSENTER_CS</span>
<span class="w">	</span><span class="nf">wrmsr</span><span class="w"> </span><span class="c1">; set sysexit segments</span>

<span class="w">	</span><span class="c1">; setup sysexit inputs</span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="w"> </span><span class="no">test_user_function</span><span class="w"> </span><span class="c1">; to be loaded into EIP</span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">ecx</span><span class="p">,</span><span class="w"> </span><span class="no">esp</span><span class="w"> </span><span class="c1">; to be loaded into ESP</span>
<span class="w">	</span><span class="nf">sysexit</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="sysret_method">sysret method</span></h3>
<p>The other way is to use the sysret instruction as follows:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">; note: this code is for 64-bit long mode only.</span>
<span class="c1">;       it is unknown if it works in protected mode.</span>
<span class="c1">;       using intel assembly style</span>
<span class="nf">global</span><span class="w"> </span><span class="no">jump_usermode</span><span class="w"></span>
<span class="nf">extern</span><span class="w"> </span><span class="no">test_user_function</span><span class="w"></span>
<span class="nl">jump_usermode:</span><span class="w"></span>
<span class="c1">;enable system call extensions that enables sysret and syscall</span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">rcx</span><span class="p">,</span><span class="w"> </span><span class="mi">0xc0000082</span><span class="w"></span>
<span class="w">	</span><span class="nf">wrmsr</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">rcx</span><span class="p">,</span><span class="w"> </span><span class="mi">0xc0000080</span><span class="w"></span>
<span class="w">	</span><span class="nf">rdmsr</span><span class="w"></span>
<span class="w">	</span><span class="nf">or</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"></span>
<span class="w">	</span><span class="nf">wrmsr</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">rcx</span><span class="p">,</span><span class="w"> </span><span class="mi">0xc0000081</span><span class="w"></span>
<span class="w">	</span><span class="nf">rdmsr</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="w"> </span><span class="mi">0x00180008</span><span class="w"></span>
<span class="w">	</span><span class="nf">wrmsr</span><span class="w"></span>

<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">ecx</span><span class="p">,</span><span class="w"> </span><span class="no">test_user_function</span><span class="w"> </span><span class="c1">; to be loaded into RIP</span>
<span class="w">	</span><span class="nf">mov</span><span class="w"> </span><span class="no">r11</span><span class="p">,</span><span class="w"> </span><span class="mi">0x202</span><span class="w"> </span><span class="c1">; to be loaded into EFLAGS</span>
<span class="w">	</span><span class="nf">sysretq</span><span class="w"> </span><span class="c1">;use &quot;o64 sysret&quot; if you assemble with NASM</span>
</pre></div>
<h2><span class="mw-headline" id="Multitasking_considerations">Multitasking considerations</span></h2>
<p>There are a lot of subtle aspects of user mode and task switching. Whenever a system call interrupt happens, ESP0 is loaded into the stack pointer and all system information is pushed before the interrupt handler is entered. This could become a problem with two ring 3 tasks. Imagine: esp is currently set to the ESP0 stack. When the interrupt is receive, esp is set to the other task's esp which is the same ESP0 stack. To avoid overwriting data, the handler must change the ESP0 stack (along with the interrupt-pushed ESP stack) on each task switch.
</p>
<!-- 
NewPP limit report
Cached time: 20250212011314
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.067 seconds
Real time usage: 1.127 seconds
Preprocessor visited node count: 72/1000000
Post‐expand include size: 358/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 37032/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.616      1 Template:In_Progress
100.00%    0.616      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:2603-0!canonical and timestamp 20250212011313 and revision id 27736.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Getting_to_Ring_3&amp;oldid=27736">https://wiki.osdev.org/index.php?title=Getting_to_Ring_3&amp;oldid=27736</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:In_Progress" title="Category:In Progress">In Progress</a></li><li><a href="./Category:Tutorials" title="Category:Tutorials">Tutorials</a></li><li><a href="./Category:X86_CPU" title="Category:X86 CPU">X86 CPU</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Getting+to+Ring+3" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Getting_to_Ring_3#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Getting_to_Ring_3" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:Getting_to_Ring_3" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Getting_to_Ring_3"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Getting_to_Ring_3&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Getting_to_Ring_3&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Getting_to_Ring_3" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Getting_to_Ring_3" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Getting_to_Ring_3&amp;oldid=27736" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Getting_to_Ring_3&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 7 April 2023, at 18:45.</li>
	<li id="footer-info-0">This page has been accessed 12,244 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Getting_to_Ring_3&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.067","walltime":"1.127","ppvisitednodes":{"value":72,"limit":1000000},"postexpandincludesize":{"value":358,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":37032,"limit":5000000},"timingprofile":["100.00%    0.616      1 Template:In_Progress","100.00%    0.616      1 -total"]},"cachereport":{"timestamp":"20250212011314","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":1223});});</script>
</body>
</html>