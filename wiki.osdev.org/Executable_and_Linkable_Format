<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>ELF - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"ba0e6c29e9582011b7d731b5","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"ELF","wgTitle":"ELF","wgCurRevisionId":29077,"wgRevisionId":29077,"wgArticleId":1542,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using duplicate arguments in template calls","ABI","Executable Formats","Object Files","Standards"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"ELF","wgRelevantArticleId":1542,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],
"wgRedirectedFrom":"Executable_and_Linkable_Format","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgInternalRedirectTargetUrl":"/ELF","wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["mediawiki.action.view.redirect","site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<link rel="canonical" href="ELF"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-ELF rootpage-ELF skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">ELF</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"><span class="mw-redirectedfrom">(Redirected from <a href="https://wiki.osdev.org/index.php?title=Executable_and_Linkable_Format&amp;redirect=no" class="mw-redirect" title="Executable and Linkable Format">Executable and Linkable Format</a>)</span></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Executable_and_Linkable_Format#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Executable_and_Linkable_Format#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear: right; border:1px solid #aaaaaa; background:#eee; text-align:center; width:200px; ;"><tbody><tr><th style="background:#ffce7b; padding:0.3em; font-size:1.1em;"><a href="Executable_Formats" title="Executable Formats">Executable Formats</a></th></tr><tr><th>Microsoft</th></tr><tr><td><div>
<p><b>16 bit:</b><br />
<a href="COM" title="COM">COM</a><br />
<a href="MZ" title="MZ">MZ</a><br />
<a href="NE" title="NE">NE</a><br />
<b>Mixed (16/32 bit):</b><br />
<a href="LE" title="LE">LE</a><br />
<b>32/64 bit:</b><br />
<a href="PE" title="PE">PE</a><br />
<a href="COFF" title="COFF">COFF</a><br />
</p>
</div></td></tr><tr><th>*nix</th></tr><tr><td><div>
<p><a href="A.out" title="A.out">a.out</a><br />
<a class="mw-selflink selflink">ELF</a><br />
</p>
</div></td></tr><tr><th>Apple</th></tr><tr><td><div>
<p><a href="Mach-O" title="Mach-O">Mach-O</a><br />
</p>
</div></td></tr></tbody></table>
<p>ELF (Executable and Linkable Format) was designed by Unix System Laboratories while working with Sun Microsystems on SVR4 (UNIX System V Release 4.0). Consequently, ELF first appeared in Solaris 2.0 (aka SunOS 5.0), which is based on SVR4. The format is specified in the <a href="System_V_ABI" title="System V ABI">System V ABI</a>.
</p><p>A very versatile file format, it was later picked up by many other operating systems for use as both executable files and as shared library files. It does distinguish between TEXT, DATA and BSS.
</p><p>Today, ELF is considered the standard format on Unix-alike systems. While it has some drawbacks (e.g., using up one of the scarce general purpose registers of the IA-32 when using position-independent code), it is well supported and documented.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Executable_and_Linkable_Format#File_Structure"><span class="tocnumber">1</span> <span class="toctext">File Structure</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Executable_and_Linkable_Format#Loading_ELF_Binaries"><span class="tocnumber">2</span> <span class="toctext">Loading ELF Binaries</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Executable_and_Linkable_Format#Relocation"><span class="tocnumber">3</span> <span class="toctext">Relocation</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="Executable_and_Linkable_Format#Tables"><span class="tocnumber">4</span> <span class="toctext">Tables</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="Executable_and_Linkable_Format#ELF_Header"><span class="tocnumber">4.1</span> <span class="toctext">ELF Header</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="Executable_and_Linkable_Format#Program_header"><span class="tocnumber">4.2</span> <span class="toctext">Program header</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Executable_and_Linkable_Format#Dynamic_Linking"><span class="tocnumber">4.3</span> <span class="toctext">Dynamic Linking</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-8"><a href="Executable_and_Linkable_Format#See_Also"><span class="tocnumber">5</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-9"><a href="Executable_and_Linkable_Format#Articles"><span class="tocnumber">5.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="Executable_and_Linkable_Format#External_Links"><span class="tocnumber">5.2</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="File_Structure">File Structure</span></h2>
<p>ELF is a format for storing many program types (see ELF Header table) on the disk, created as a result of compiling and linking. An ELF file might indepedenently contain sections or segments. For an executable program, an ELF header and a segment are the bare minimum, while sections are optional, though it's common for an executable to have a ".text" section for the code and ".data" section for initialized data. Libraries don't have segments, but only sections because they are used for linking purposes. Sections and segments are described by their respective headers that contain information about their sizes, required alignment, etc.
</p><p>Note that depending on whether your file is a linkable or an executable file, the headers in the ELF file won't be the same:
process.o, result of gcc -c process.c $SOME_FLAGS
</p>
<pre>C32/kernel/bin/.process.o
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000333  00000000  00000000  00000040  2**4
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000050  00000000  00000000  00000380  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000003d0  2**2
                  ALLOC
  3 .note         00000014  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY
  4 .stab         000020e8  00000000  00000000  000003e4  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .stabstr      00008f17  00000000  00000000  000024cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .rodata       000001e4  00000000  00000000  0000b400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .comment      00000023  00000000  00000000  0000b5e4  2**0
                  CONTENTS, READONLY
</pre>
<p>The 'flags' will tell you what's actually available in the ELF file. Here, we have <a href="Symbol_Table" title="Symbol Table">symbol tables</a> and relocation: all that we need to link the file against another, but virtually no information about how to load the file in memory (even if that could be guessed). We don't have the program entry point, for instance, and we have a sections table rather than a program header.
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1&#125;&#125;&#125;">

<tbody><tr>
<td>.text
</td>
<td>where code live, as said above. objdump -drS .process.o will show you that
</td></tr>
<tr>
<td>.data
</td>
<td>where global tables, variables, etc. live. objdump -s -j .data .process.o will hexdump it.
</td></tr>
<tr>
<td>.bss
</td>
<td>don't look for bits of .bss in your file: there's none. That's where your uninitialized arrays and variable are, and the loader 'knows' they should be filled with zeroes ... there's no point storing more zeroes on your disk than there already are, is it?
</td></tr>
<tr>
<td>.rodata
</td>
<td>that's where your strings go, usually the things you forgot when linking and that cause your kernel not to work. objdump -s -j .rodata .process.o will hexdump it. Note that depending on the compiler, you may have more sections like this.
</td></tr>
<tr>
<td>.comment &amp; .note
</td>
<td>just comments put there by the compiler/linker toolchain
</td></tr>
<tr>
<td>.stab &amp; .stabstr
</td>
<td>debugging symbols &amp; similar information.
</td></tr></tbody></table>
<p>/bin/bash, a real executable file
</p>
<pre>/bin/bash:     file format elf32-i386
/bin/bash
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08056c40

Program Header:
    PHDR off    0x00000034 vaddr 0x08048034 paddr 0x08048034 align 2**2
         filesz 0x000000e0 memsz 0x000000e0 flags r-x
</pre>
<p>The program header itself... taking 224 bytes, and starting at offset 0x34 in the file
</p>
<pre>  INTERP off    0x00000114 vaddr 0x08048114 paddr 0x08048114 align 2**0
         filesz 0x00000013 memsz 0x00000013 flags r--
</pre>
<p>The program that should be used to 'execute' the binary. Here, it reads as '/lib/ld-linux.so.2', which means some dynamic libraries linking will be required before we run the program.
</p>
<pre>    LOAD off    0x00000000 vaddr 0x08048000 paddr 0x08048000 align 2**12
         filesz 0x0007411c memsz 0x0007411c flags r-x
</pre>
<p>Now we're requested to read 7411c bytes, starting at file's start (?) and being 7411c bytes large (that's virtually the whole file!), which will be read-only but executable. They'll be to appear starting at virtual address 0x08048000 for the program to work properly.
</p>
<pre>    LOAD off    0x00074120 vaddr 0x080bd120 paddr 0x080bd120 align 2**12
         filesz 0x000022ac memsz 0x000082d0 flags rw-
</pre>
<p>More bits to load, (likely to be .data section). Notice that the 'filesize' and 'memsize' differ, which means the .bss section will actually be allocated through this statement, but left as zeroes while 'real' data only occupy first 0x22ac bytes starting at virtual address 0x80bd120.
</p>
<pre> DYNAMIC off    0x00075f4c vaddr 0x080bef4c paddr 0x080bef4c align 2**2
         filesz 0x000000e8 memsz 0x000000e8 flags rw-
</pre>
<p>The dynamic sections are used to store information used in the dynamic linking process, such as required libraries and relocation entries.
</p>
<pre>    NOTE off    0x00000128 vaddr 0x08048128 paddr 0x08048128 align 2**2
         filesz 0x00000020 memsz 0x00000020 flags r--
</pre>
<p>NOTE sections contain information left by either the programmer or the linker, for most programs linked using the GNU 'ld' linker it just says 'GNU'
</p>
<pre>EH_FRAME off    0x000740f0 vaddr 0x080bc0f0 paddr 0x080bc0f0 align 2**2
         filesz 0x0000002c memsz 0x0000002c flags r--
</pre>
<p>That's for Exception Handler information, in case we should link against some C++ binaries at execution (Needs citing).
</p>
<pre>/bin/bash, loaded (as in /proc/xxxx/maps)

08048000-080bd000 r-xp 00000000 03:06 30574      /bin/bash
080bd000-080c0000 rw-p 00074000 03:06 30574      /bin/bash
080c0000-08103000 rwxp 00000000 00:00 0
40000000-40014000 r-xp 00000000 03:06 27304      /lib/ld-2.3.2.so
40014000-40015000 rw-p 00013000 03:06 27304      /lib/ld-2.3.2.so
</pre>
<p>We can recognize our 'code bits' and 'data bits', by stating that the second one should be loaded at 0x080bd*120* and that it starts in file at 0x00074*120*, we actually preserved page-to-disk blocks mapping (e.g. if page 0x80bc000 is missing, just fetch file blocks from 0x75000). That means, however, that a part of the code is mapped twice, but with different permissions. I suggest you do give them different physical pages too if you don't want to end up with modifiable code.
</p>
<h2><span class="mw-headline" id="Loading_ELF_Binaries">Loading ELF Binaries</span></h2>
<div class="thumb tright"><div class="thumbinner" style="width:702px;"><a href="./File:Elfdiagram.png" class="image"><img alt="" src="images/f/fe/Elfdiagram.png" decoding="async" width="700" height="600" class="thumbimage" data-file-width="700" data-file-height="600" /></a>  <div class="thumbcaption">Executable image and elf binary can being mapped onto each other</div></div></div>
<p>The ELF header contains all of the relevant information required to load an ELF executable. The format of this header is described in the <a rel="nofollow" class="external text" href="http://www.skyfree.org/linux/references/ELF_Format.pdf">ELF Specification</a>. The most relevant sections for this purpose are 1.1 to 1.4 and 2.1 to 2.7. Instructions on loading an executable are contained within section 2.7.
</p><p>The following is a rough outline of the steps that an ELF executable loader must perform:
</p>
<ul><li>Verify that the file starts with the ELF magic number (4 bytes) as described in figure 1-4 (and subsequent table) on page 11 in the ELF specification.</li>
<li>Read the ELF Header. The ELF header is always located at the very beginning of an ELF file. The ELF header contains information about how the rest of the file is laid out. An executable loader is only concerned with the program headers.</li>
<li>Read the ELF executable's program headers. These specify where in the file the program segments are located, and where they need to be loaded into memory.</li>
<li>Parse the program headers to determine the number of program segments that must be loaded. Each program header has an associated type, as described in Figure 2-2 of the ELF specification. Only headers with a type of <tt>PT_LOAD</tt> describe a loadable segment.</li>
<li>Load each of the loadable segments. This is performed as follows:
<ul><li>Allocate virtual memory for each segment, at the address specified by the <tt>p_vaddr</tt> member in the program header. The size of the segment in memory is specified by the <tt>p_memsz</tt> member.</li>
<li>Copy the segment data from the file offset specified by the <tt>p_offset</tt> member to the virtual memory address specified by the <tt>p_vaddr</tt> member. The size of the segment in the file is contained in the <tt>p_filesz</tt> member. This can be zero.</li>
<li>The <tt>p_memsz</tt> member specifies the size the segment occupies in memory. This can be zero. If the <tt>p_filesz</tt> and <tt>p_memsz</tt> members differ, this indicates that the segment is padded with zeros. All bytes in memory between the ending offset of the file size, and the segment's virtual memory size are to be cleared with zeros.</li></ul></li>
<li>Read the executable's entry point from the ELF header.</li>
<li>Jump to the executable's entry point in the newly loaded memory.</li></ul>
<h2><span class="mw-headline" id="Relocation">Relocation</span></h2>
<p>Relocation becomes handy when you need to load, for example, modules or drivers. It's possible to use the "-r" option to ld to permit you to have multiple object files linked into one big one, which means easier coding and faster testing.
</p><p>The basic outline of things you need to do for relocation:
</p>
<ol><li>Check the object file header (it has to be ELF, not PE, for example)</li>
<li>Get a load address (eg. all drivers start at 0xA0000000, need some method of keeping track of driver locations)</li>
<li>Allocate enough space for all program sections (ST_PROGBITS)</li>
<li>Copy from the image in RAM to the allocated space</li>
<li>Go through all sections resolving external references against the kernel symbol table</li>
<li>If all succeeded, you can use the "e_entry" field of the header as the offset from the load address to call the entry point (if one was specified), or do a symbol lookup, or just return a success error code.</li></ol>
<p>Once you can relocate ELF objects you'll be able to have drivers loaded when needed instead of at startup - which is always a Good Thing (tm).
</p>
<h2><span class="mw-headline" id="Tables">Tables</span></h2>
<h3><span class="mw-headline" id="ELF_Header">ELF Header</span></h3>
<p>The ELF header is always found at the start of the file.
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1&#125;&#125;&#125;">

<tbody><tr>
<td>Position (32 bit)
</td>
<td>Position (64 bit)
</td>
<td>Value
</td></tr>
<tr>
<td>0-3
</td>
<td>0-3
</td>
<td>Magic number - 0x7F, then 'ELF' in ASCII
</td></tr>
<tr>
<td>4
</td>
<td>4
</td>
<td>1 = 32 bit, 2 = 64 bit
</td></tr>
<tr>
<td>5
</td>
<td>5
</td>
<td>1 = little endian, 2 = big endian
</td></tr>
<tr>
<td>6
</td>
<td>6
</td>
<td>ELF header version
</td></tr>
<tr>
<td>7
</td>
<td>7
</td>
<td>OS ABI - usually 0 for System V
</td></tr>
<tr>
<td>8-15
</td>
<td>8-15
</td>
<td>Unused/padding
</td></tr>
<tr>
<td>16-17
</td>
<td>16-17
</td>
<td>Type (1 = relocatable, 2 = executable, 3 = shared, 4 = core)
</td></tr>
<tr>
<td>18-19
</td>
<td>18-19
</td>
<td>Instruction set - see table below
</td></tr>
<tr>
<td>20-23
</td>
<td>20-23
</td>
<td>ELF Version (currently 1)
</td></tr>
<tr>
<td>24-27
</td>
<td>24-31
</td>
<td>Program entry offset
</td></tr>
<tr>
<td>28-31
</td>
<td>32-39
</td>
<td>Program header table offset
</td></tr>
<tr>
<td>32-35
</td>
<td>40-47
</td>
<td>Section header table offset
</td></tr>
<tr>
<td>36-39
</td>
<td>48-51
</td>
<td>Flags - architecture dependent; see note below
</td></tr>
<tr>
<td>40-41
</td>
<td>52-53
</td>
<td>ELF Header size
</td></tr>
<tr>
<td>42-43
</td>
<td>54-55
</td>
<td>Size of an entry in the program header table
</td></tr>
<tr>
<td>44-45
</td>
<td>56-57
</td>
<td>Number of entries in the program header table
</td></tr>
<tr>
<td>46-47
</td>
<td>58-59
</td>
<td>Size of an entry in the section header table
</td></tr>
<tr>
<td>48-49
</td>
<td>60-61
</td>
<td>Number of entries in the section header table
</td></tr>
<tr>
<td>50-51
</td>
<td>62-63
</td>
<td>Section index to the section header string table
</td></tr></tbody></table>
<p>The flags entry can probably be ignored for x86 ELFs, as no flags are actually defined.
</p><p>Instruction Set Architectures:
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1&#125;&#125;&#125;">

<tbody><tr>
<td><b>Architecture</b>
</td>
<td><b>Value</b>
</td></tr>
<tr>
<td>No Specific
</td>
<td>0x00
</td></tr>
<tr>
<td><a href="./Category:Sparc" title="Category:Sparc"> Sparc</a>
</td>
<td>0x02
</td></tr>
<tr>
<td><b><a href="X86" class="mw-redirect" title="X86">x86</a></b>
</td>
<td>0x03
</td></tr>
<tr>
<td><a href="./Category:MIPS" title="Category:MIPS"> MIPS</a>
</td>
<td>0x08
</td></tr>
<tr>
<td><a href="PowerPC" class="mw-redirect" title="PowerPC">PowerPC</a>
</td>
<td>0x14
</td></tr>
<tr>
<td><b><a href="./Category:ARM" title="Category:ARM"> ARM</a></b>
</td>
<td>0x28
</td></tr>
<tr>
<td><a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/SuperH">SuperH</a>
</td>
<td>0x2A
</td></tr>
<tr>
<td><a href="IA-64" title="IA-64">IA-64</a>
</td>
<td>0x32
</td></tr>
<tr>
<td><b><a href="X86-64" title="X86-64">x86-64</a></b>
</td>
<td>0x3E
</td></tr>
<tr>
<td><b><a href="./Category:ARM" title="Category:ARM"> AArch64</a></b>
</td>
<td>0xB7
</td></tr>
<tr>
<td><a href="RISC-V" title="RISC-V">RISC-V</a>
</td>
<td>0xF3
</td></tr></tbody></table>
<p>The most common architectures are in bold.
</p>
<h3><span class="mw-headline" id="Program_header">Program header</span></h3>
<p>This is an array of N (given in the main header) entries in the following format. Make sure to use the correct version depending on whether the file is 32 bit or 64 bit as the tables are quite different.
</p><p>32 bit version:
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1&#125;&#125;&#125;">

<tbody><tr>
<td>Position
</td>
<td>Value
</td></tr>
<tr>
<td>0-3
</td>
<td>Type of segment (see below)
</td></tr>
<tr>
<td>4-7
</td>
<td>The offset in the file that the data for this segment can be found (p_offset)
</td></tr>
<tr>
<td>8-11
</td>
<td>Where you should start to put this segment in virtual memory (p_vaddr)
</td></tr>
<tr>
<td>12-15
</td>
<td>Reserved for segment's physical address (p_paddr)
</td></tr>
<tr>
<td>16-19
</td>
<td>Size of the segment in the file (p_filesz)
</td></tr>
<tr>
<td>20-23
</td>
<td>Size of the segment in memory (p_memsz, at least as big as p_filesz)
</td></tr>
<tr>
<td>24-27
</td>
<td>Flags (see below)
</td></tr>
<tr>
<td>28-31
</td>
<td>The required alignment for this section (usually a power of 2)
</td></tr></tbody></table>
<p>64 bit version:
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1&#125;&#125;&#125;">

<tbody><tr>
<td>Position
</td>
<td>Value
</td></tr>
<tr>
<td>0-3
</td>
<td>Type of segment (see below)
</td></tr>
<tr>
<td>4-7
</td>
<td>Flags (see below)
</td></tr>
<tr>
<td>8-15
</td>
<td>The offset in the file that the data for this segment can be found (p_offset)
</td></tr>
<tr>
<td>16-23
</td>
<td>Where you should start to put this segment in virtual memory (p_vaddr)
</td></tr>
<tr>
<td>24-31
</td>
<td>Reserved for segment's physical address (p_paddr)
</td></tr>
<tr>
<td>32-39
</td>
<td>Size of the segment in the file (p_filesz)
</td></tr>
<tr>
<td>40-47
</td>
<td>Size of the segment in memory (p_memsz, at least as big as p_filesz)
</td></tr>
<tr>
<td>48-55
</td>
<td>The required alignment for this section (usually a power of 2)
</td></tr></tbody></table>
<p>Segment types: 0 = null - ignore the entry; 1 = load - clear p_memsz bytes at p_vaddr to 0, then copy p_filesz bytes from p_offset to p_vaddr; 2 = dynamic - requires dynamic linking; 3 = interp - contains a file path to an executable to use as an interpreter for the following segment;  4 = note section. There are more values, but mostly contain architecture/environment specific information, which is probably not required for the majority of ELF files.
</p><p>Flags: 1 = executable, 2 = writable, 4 = readable.
</p>
<h3><span class="mw-headline" id="Dynamic_Linking">Dynamic Linking</span></h3>
<dl><dd><i>Main article:</i> <a href="Dynamic_Linker" title="Dynamic Linker">Dynamic Linker</a></dd></dl>
<p>Dynamic Linking is when the OS gives a program shared libraries if it needs them. Meaning, the libraries are found in the system and then "bind" to the program that needs them while the program is running, versus static linking, which links the libraries <b>before</b> the program is run. The main advantages are that programs take up less memory, and are smaller in file size. The main disadvantage, however, is that the program becomes less portable because the program depends on many different shared libraries.
</p><p>In order to implement this, you need to have proper scheduling in place, a library, and a program to use that library.
You can create a library with GCC:
</p>
<pre>myos-gcc -c -fPIC -o oneobject.o oneobject.c
myos-gcc -c -fPIC -o anotherobject.o anotherobject.c
myos-gcc -shared -fPIC -Wl,-soname,nameofmylib oneobject.o anotherobject.o -o mylib.so
</pre>
<p>This library should be treated as a file, which is loaded when the OS detects its attempted usage. You will need to implement this "<a href="Dynamic_Linker" title="Dynamic Linker">Dynamic Linker</a>" into a certain classification of code such as in your memory management or your task management section. When the ELF program is run, the system should attach the shared object data to a malloc() region of memory, where the function calls to the libraries redirect to that malloc() region of memory. Once the program is finished, the region can be given up back to the OS with a call to free().
</p><p>That should be a good starting point to writing a dynamic linker.
</p>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<h3><span class="mw-headline" id="Articles">Articles</span></h3>
<ul><li><a href="System_V_ABI" title="System V ABI">System V ABI</a></li>
<li><a href="Symbol_Table" title="Symbol Table">Symbol Table</a></li>
<li><a href="Modular_Kernel" title="Modular Kernel">Modular Kernel</a></li>
<li><a href="DWARF" title="DWARF">DWARF</a></li></ul>
<h3><span class="mw-headline" id="External_Links">External Links</span></h3>
<ul><li><a rel="nofollow" class="external text" href="http://www.skyfree.org/linux/references/ELF_Format.pdf">The ELF file format</a> in detail</li>
<li><a rel="nofollow" class="external text" href="http://docs.oracle.com/cd/E23824_01/html/819-0690/chapter6-46512.html#scrolltoc">ELF Format Specifications</a> Detailed and up-to-date ELF information (including SPARC in depth) by Oracle.</li>
<li><a rel="nofollow" class="external text" href="http://www.sco.com/developers/gabi/latest/contents.html">System V ABI</a> about ELF</li>
<li><a rel="nofollow" class="external text" href="http://www.linuxfoundation.org/en/Specifications">LSB specifications</a><br />See (generic or platform-specific) 'Core' specifications for additional ELF information.</li>
<li><a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">Executable and Linkable Format on Wikipedia</a>,which contains a detail of elf references</li>
<li><a rel="nofollow" class="external text" href="https://uclibc.org/docs/elf-64-gen.pdf">The ELF file format(64-bit)</a> ELF 64-Bit, General extension to ELF32.</li>
<li><a rel="nofollow" class="external text" href="http://www.x86-64.org/documentation/abi.pdf">x86-64 ABI</a> Documented x86-64 specific extensions with ELF64.</li>
<li><a rel="nofollow" class="external text" href="http://www.robinhoksbergen.com/papers/howto_elf.html">Manually Creating an ELF Executable</a> (dead, <a rel="nofollow" class="external text" href="https://web.archive.org/web/20140130143820/http://www.robinhoksbergen.com/papers/howto_elf.html">link from archive.org</a>) Detailed guide on how to create ELF binaries from scratch.</li>
<li><a rel="nofollow" class="external text" href="https://www.youtube.com/playlist?list=PLZCIHSjpQ12woLj0sjsnqDH8yVuXwTy3p">Handmade Linux x86 executables</a> Youtube playlist about Linux x86 executables, explains ELF binary structure</li></ul>
<!-- 
NewPP limit report
Cached time: 20250212011950
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.029 seconds
Real time usage: 0.029 seconds
Preprocessor visited node count: 423/1000000
Post‐expand include size: 2501/2097152 bytes
Template argument size: 936/2097152 bytes
Highest expansion depth: 8/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 2729/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    7.528      1 -total
 79.91%    6.016      1 Template:File_formats
 70.59%    5.314      1 Template:SmallNavBox
 53.35%    4.016     20 Template:If
 36.06%    2.714     20 Template:Show1
  5.40%    0.407      5 Template:Wikitable
  4.37%    0.329      1 Template:Main
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1542-0!canonical and timestamp 20250212011950 and revision id 29077.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=ELF&amp;oldid=29077">https://wiki.osdev.org/index.php?title=ELF&amp;oldid=29077</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_duplicate_arguments_in_template_calls&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using duplicate arguments in template calls (page does not exist)">Pages using duplicate arguments in template calls</a></li><li><a href="./Category:ABI" title="Category:ABI">ABI</a></li><li><a href="./Category:Executable_Formats" title="Category:Executable Formats">Executable Formats</a></li><li><a href="./Category:Object_Files" title="Category:Object Files">Object Files</a></li><li><a href="./Category:Standards" title="Category:Standards">Standards</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=ELF" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Executable_and_Linkable_Format#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="ELF" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:ELF" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="ELF"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ELF&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ELF&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/ELF" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="./Special:RecentChangesLinked/ELF" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ELF&amp;oldid=29077" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ELF&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-lang" class="vector-menu mw-portlet mw-portlet-lang vector-menu-portal portal" aria-labelledby="p-lang-label" role="navigation"  >
	<h3
		id="p-lang-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">In other languages</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li class="interlanguage-link interwiki-de mw-list-item"><a href="http://www.lowlevel.eu/wiki/Executable_and_Linking_Format" title="Executable and Linking Format – Deutsch" lang="de" hreflang="de" class="interlanguage-link-target"><span>Deutsch</span></a></li></ul>
		
	</div>
</nav>

</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 7 June 2024, at 13:36.</li>
	<li id="footer-info-0">This page has been accessed 38,463 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=ELF&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.029","walltime":"0.029","ppvisitednodes":{"value":423,"limit":1000000},"postexpandincludesize":{"value":2501,"limit":2097152},"templateargumentsize":{"value":936,"limit":2097152},"expansiondepth":{"value":8,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":2729,"limit":5000000},"timingprofile":["100.00%    7.528      1 -total"," 79.91%    6.016      1 Template:File_formats"," 70.59%    5.314      1 Template:SmallNavBox"," 53.35%    4.016     20 Template:If"," 36.06%    2.714     20 Template:Show1","  5.40%    0.407      5 Template:Wikitable","  4.37%    0.329      1 Template:Main"]},"cachereport":{"timestamp":"20250212011950","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":132});});</script>
</body>
</html>