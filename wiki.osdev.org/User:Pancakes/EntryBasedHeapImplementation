<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>User:Pancakes/EntryBasedHeapImplementation - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"bed0a8fd100f2bef6cdce6f8","wgCSPNonce":false,"wgCanonicalNamespace":"User","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":2,"wgPageName":"User:Pancakes/EntryBasedHeapImplementation","wgTitle":"Pancakes/EntryBasedHeapImplementation","wgCurRevisionId":16348,"wgRevisionId":16348,"wgArticleId":3455,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":[],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"User:Pancakes/EntryBasedHeapImplementation","wgRelevantArticleId":3455,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],
"wgRestrictionMove":[],"wgRelevantUserName":"Pancakes","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="../favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="../opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="../api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-2 ns-subject page-User_Pancakes_EntryBasedHeapImplementation rootpage-User_Pancakes skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-namespace">User</span><span class="mw-page-title-separator">:</span><span class="mw-page-title-main">Pancakes/EntryBasedHeapImplementation</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"><span class="subpages">&lt; <a href="https://wiki.osdev.org/User:Pancakes" title="User:Pancakes">User:Pancakes</a></span></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="EntryBasedHeapImplementation#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="EntryBasedHeapImplementation#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="EntryBasedHeapImplementation#Simple_Heap_Implementation"><span class="tocnumber">1</span> <span class="toctext">Simple Heap Implementation</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="EntryBasedHeapImplementation#Gotcha"><span class="tocnumber">1.1</span> <span class="toctext">Gotcha</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="EntryBasedHeapImplementation#k_heapInit"><span class="tocnumber">1.2</span> <span class="toctext">k_heapInit</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="EntryBasedHeapImplementation#k_heapAddBlock"><span class="tocnumber">1.3</span> <span class="toctext">k_heapAddBlock</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="EntryBasedHeapImplementation#k_heapAlloc"><span class="tocnumber">1.4</span> <span class="toctext">k_heapAlloc</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="EntryBasedHeapImplementation#k_heapFree"><span class="tocnumber">1.5</span> <span class="toctext">k_heapFree</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="EntryBasedHeapImplementation#Example_Usage"><span class="tocnumber">1.6</span> <span class="toctext">Example Usage</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="EntryBasedHeapImplementation#C/C++_Code"><span class="tocnumber">1.7</span> <span class="toctext">C/C++ Code</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-9"><a href="EntryBasedHeapImplementation#Problems/Suggestions/Feedback"><span class="tocnumber">2</span> <span class="toctext">Problems/Suggestions/Feedback</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Simple_Heap_Implementation">Simple Heap Implementation</span></h2>
<p>This is a fairly simple heap implementation. It has not been well tested so it could have a bug somewhere, but so far it seems to work well and I have not run into any problems. It basically works by you assigning blocks of memory to the heap. Each block of
memory is separate. So the maximum allocation you can make is the size of the largest block minus the header. Also, over time the
heap can become kind of fragmented from calls to alloc and free which eventually create spots between allocations and this can
reduce your maximum allocation size. A good fallback would be for you to add another block to the heap if an allocation can not be
made in the event the heap becomes highly fragmented. I do not add another block here because I wanted to keep this implementation with out any dependencies. The best way would likely be to wrap these calls in another layer than can handle the failed call to
the allocation function and try to add another block (and also check adding another block will work).
</p><p>Also, I forgot to mention there is a maximum block size set at 2,147,483,647 bytes (31-bit). This is because each header/chunk inside the block only has 31 bits to specify it's size (free or used). The highest bit (32nd bit) is used to flag if the header/chunk is used or free. However, the implementation is so short and simple that if you needed to support bigger blocks and allocations you could simply expand the header to handle any. I just settled for 2GB because I think that is good for most hobby projects, while still keeping the overhead low on memory consumption and still being quite fast.
</p><p>A good idea is to build a wrapper around these calls (not only for your kernel to call k_heapAddBlock) to provide a debugging ability. What you do is catch all alloc calls and add some extra bytes onto the size. Then place a special signature at the
beginning and end to catch under-flows and overflows for writing. It is not easy to catch over reading or under reading, but
at least you can catch when your heap has become corrupted!
</p>
<h3><span class="mw-headline" id="Gotcha">Gotcha</span></h3>
<p>I forgot to make it align on at least a specific boundary such as 4-byte boundary. So, I think it would be good practice for whomever if using this to code that in! At least until I get around to fixing it. The fix should be fairly simple, and mainly just involve some code on the allocation function.
</p>
<h3><span class="mw-headline" id="k_heapInit">k_heapInit</span></h3>
<p>This initializes the heap structure. Nothing too complex.
</p>
<h3><span class="mw-headline" id="k_heapAddBlock">k_heapAddBlock</span></h3>
<p>You use this to add a block to the heap. Like, h_heapAddBlock(&amp;heap, 0x1000, 0x2000) would add 2KB starting at 1KB.
</p>
<h3><span class="mw-headline" id="k_heapAlloc">k_heapAlloc</span></h3>
<p>This will allocate a chunk which can be used.
</p>
<h3><span class="mw-headline" id="k_heapFree">k_heapFree</span></h3>
<p>This will free a chunk.
</p>
<h3><span class="mw-headline" id="Example_Usage">Example Usage</span></h3>
<pre>    KHEAP       kheap;
    char        *ptr;

    k_heapLCABInit(&amp;kheap);                          /* initialize the heap */
    k_heapLCABAddBlock(&amp;kheap, 0x100000, 0x100000);  /* add block to heap (starting 1MB mark and length of 1MB) */
    ptr = (char*)k_heapLCABAlloc(&amp;kheap, 256);               /* allocate 256 bytes (malloc) */
    k_heapLCABFree(&amp;kheap, ptr);                             /* free the pointer (free) */
</pre>
<p>Also, you could wrap the functions so that <i>kheap</i> does not need to be passed thus making the calls
much more simple and easy to write. I thought it was better to give the programmer the ability to have
multiple heaps than to restrict them. So if you only want to use one heap then create an abstraction
layer that hands in the <i>kheap</i> argument.
</p>
<h3><span id="C.2FC.2B.2B_Code"></span><span class="mw-headline" id="C/C++_Code">C/C++ Code</span></h3>
<pre>/*
    2014 Leonard Kevin McGuire Jr (www.kmcg3413.net) (<a href="../cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b4dfd9d7d387808587f4d3d9d5ddd89ad7dbd9">[email&#160;protected]</a>)
*/
typedef unsigned int uint32;
typedef unsigned char uint8;
typedef unsigned int uintptr;

#define KHEAPFLAG_USED			0x80000000

typedef struct _KHEAPHDRLCAB {
	uint32				prevsize;
	uint32				flagsize;
} KHEAPHDRLCAB;

typedef struct _KHEAPBLOCKLCAB {
	uint32					size;
	uint32					used;
	struct _KHEAPBLOCKLCAB	                *next;
	uint32					lastdsize;
	KHEAPHDRLCAB			        *lastdhdr;
} KHEAPBLOCKLCAB;

typedef struct _KHEAPLCAB {
	KHEAPBLOCKLCAB		       *fblock;
	uint32				bcnt;
} KHEAPLCAB;

void k_heapLCABInit(KHEAPLCAB *heap) {
		heap-&gt;fblock = 0;
		heap-&gt;bcnt = 0;
}

int k_heapLCABAddBlock(KHEAPLCAB *heap, uintptr addr, uint32 size) {
	KHEAPBLOCKLCAB			*hb;
	KHEAPHDRLCAB			*hdr;
	
	//printf("add block addr:%p size:%x\n", addr, size);
	
	hb = (KHEAPBLOCKLCAB*)addr;
	hb-&gt;size = size;
	hb-&gt;used = 0;
	hb-&gt;next = heap-&gt;fblock;
	heap-&gt;fblock = hb;
	
	hdr = (KHEAPHDRLCAB*)&amp;hb[1];
	hdr-&gt;flagsize = hb-&gt;size - (sizeof(KHEAPBLOCKLCAB) + 32);
	
	++heap-&gt;bcnt;
	
	hb-&gt;lastdsize = 0;
	hb-&gt;lastdhdr = 0;
	
	//printf("added block; block-count:%u\n", heap-&gt;bcnt);
	
	//printf("added block hb:%p hb-&gt;next:%p\n", hb, hb-&gt;next);
	//sleep(10);
	return 1;
}

/*
	Look behind and forward to see if we can merge back into some chunks.
*/
void k_heapLCABFree(KHEAPLCAB *heap, void *ptr) {
	KHEAPHDRLCAB				*hdr, *phdr, *nhdr;
	KHEAPBLOCKLCAB				*hb;
	uint32						sz;
	uint8						fg;
	
	//printf("lab pre-free ptr:%p\n", ptr);
	
	hdr = (KHEAPHDRLCAB*)ptr;
	//printf("GGGG\n");
	hdr[-1].flagsize &amp;= ~0x80000000;
		
	//printf("lcab free\n");
		
	phdr = 0;
	/* find the block we are located in */
	for (hb = heap-&gt;fblock; hb; hb = hb-&gt;next) {
		//printf("lcab free looking at block:%p next:%p ptr:%p end:%p\n", hb, hb-&gt;next, ptr, (uintptr)hb + hb-&gt;size);
		if (((uintptr)ptr &gt; (uintptr)hb) &amp;&amp; ((uintptr)ptr &lt; (uintptr)hb + hb-&gt;size)) {
			/* we have found the heap block */
			
			/* get header */
			hdr = (KHEAPHDRLCAB*)((uintptr)ptr - sizeof(KHEAPHDRLCAB));
			
			/* set to free */
			hdr-&gt;flagsize &amp;= ~0x80000000;
			
			hb-&gt;used -= hdr-&gt;flagsize;
			
			/* get previous header if it exists */
			if (hdr-&gt;prevsize) {
				phdr = (KHEAPHDRLCAB*)((uintptr)&amp;hdr - (sizeof(KHEAPHDRLCAB) + hdr-&gt;prevsize));
			} else {
				phdr = 0;
			}
			
			//printf("hdr:%p hdr-&gt;flagsize:%x hdr-&gt;prevsize:%x\n", hdr, hdr-&gt;flagsize, hdr-&gt;prevsize);
			/* get next header */
			nhdr = (KHEAPHDRLCAB*)((uintptr)&amp;hdr[1] + hdr-&gt;flagsize);
			if ((uintptr)nhdr &gt;= ((uintptr)hb + hb-&gt;size)) {
				nhdr = 0;
			}
						
			//fg = hdr-&gt;flagsize &gt;&gt; 31;
			//sz = hdr-&gt;flagsize &amp; 0x7fffffff;			
			
			//printf("hdr:%p phdr:%p nhdr:%p phdr-&gt;flagsize:%x hdr-&gt;flagsize:%x\n", hdr, phdr, nhdr, phdr-&gt;flagsize, hdr-&gt;flagsize);
			if (nhdr) {
				if (!(nhdr-&gt;flagsize &amp; 0x80000000)) {
					/* combine with it */
					hdr-&gt;flagsize += sizeof(KHEAPHDRLCAB) + nhdr-&gt;flagsize;
					hb-&gt;used -= sizeof(KHEAPHDRLCAB);
					/* set next header prevsize */
					nhdr = (KHEAPHDRLCAB*)((uintptr)&amp;hdr[1] + hdr-&gt;flagsize);
					nhdr-&gt;prevsize = hdr-&gt;flagsize;
				}
			}
			
			//printf("here hdr:%p prevsize:%x\n", hdr, hdr-&gt;prevsize);
			
			/* can we combine with previous header? */
			if (phdr) {				
				if (!(phdr-&gt;flagsize &amp; 0x80000000)) {
					//printf("combine backward\n");
					phdr-&gt;flagsize += sizeof(KHEAPHDRLCAB) + hdr-&gt;flagsize;
					hb-&gt;used -= sizeof(KHEAPHDRLCAB);
					hdr = phdr;
					/* set next header prevsize */
					nhdr = (KHEAPHDRLCAB*)((uintptr)&amp;hdr[1] + hdr-&gt;flagsize);
					if ((uintptr)nhdr &lt; (uintptr)hb + sizeof(KHEAPBLOCKLCAB) + hb-&gt;size) {
						nhdr-&gt;prevsize = hdr-&gt;flagsize;
					}
				}
			}
			
			/* optimization */
			if (hdr-&gt;flagsize &gt; hb-&gt;lastdsize) {
				hb-&gt;lastdsize = hdr-&gt;flagsize;
				hb-&gt;lastdhdr = hdr;
			}
			
			return;
		}
	}
	
	printf("uhoh ptr:%p\n", ptr);
	for (hb = heap-&gt;fblock; hb; hb = hb-&gt;next) {
		printf("lcab free looking at block:%p next:%p ptr:%p end:%p\n", hb, hb-&gt;next, ptr, (uintptr)hb + hb-&gt;size);
		if (((uintptr)ptr &gt; (uintptr)hb)) {
			printf("above\n");
			if (((uintptr)ptr &lt; ((uintptr)hb + hb-&gt;size))) {
				printf("found\n");
			}
		}
	}
	for (;;);
	/* uhoh.. this should not happen.. */
	return;
}

/*
	This will allocate a chunk of memory by the specified size, and if
	no memory chunk can be found it will return zero.
*/
void* k_heapLCABAlloc(KHEAPLCAB *heap, uint32 size) {
	KHEAPBLOCKLCAB		*hb;
	KHEAPHDRLCAB		*hdr, *_hdr, *phdr;
	uint32				sz;
	uint8				fg;
	uint32				checks;
	uint32				bc;
	
	checks = 0;
	bc =0;
	
	//printf("lcab alloc\n");
	/* first find heap block with enough space */
	for (hb = heap-&gt;fblock; hb; hb = hb-&gt;next) {
		if ((hb-&gt;size - hb-&gt;used) &gt;= (size + sizeof(KHEAPHDRLCAB))) {
			++bc;
			/* optimization */
			//if (hb-&gt;lastdsize &gt;= size) {
				/* optimization (use block) */
				//hdr = hb-&gt;lastdhdr;
				//hb-&gt;lastdhdr = 0;
				//hb-&gt;lastdsize = 0;
			//} else {
			hdr = (KHEAPHDRLCAB*)&amp;hb[1];
			//}
			
			//printf("enter loop\n");
			phdr = 0;
			while ((uintptr)hdr &lt; ((uintptr)hb + hb-&gt;size)) {
				++checks;
				//printf("lcab alloc found\n");
				fg = hdr-&gt;flagsize &gt;&gt; 31;
				sz = hdr-&gt;flagsize &amp; 0x7fffffff;
				//printf("hdr:%p fg:%x sz:%x\n", hdr, fg, sz);
				if (!fg) {
					//printf("lcab alloc got chunk\n");
					if (sz &gt;= size) {
						//printf("lcab alloc thinking of splitting\n");
						// else take whole chunk
						if (sz &gt; (size + sizeof(KHEAPHDRLCAB) + 16)) {
							//printf("lcab alloc splitting\n");
							/* has enough left over (break into two) */
							_hdr = (KHEAPHDRLCAB*)((uintptr)&amp;hdr[1] + size);
							//printf("AA\n");
							/* take out data size and header size */
							_hdr-&gt;flagsize = sz - (size + sizeof(KHEAPHDRLCAB));
							_hdr-&gt;prevsize = size;
							//printf("BB\n");
							/* set to used and set new size */
							hdr-&gt;flagsize = 0x80000000 | size;
							//printf("CC\n");
							hb-&gt;used += sizeof(KHEAPHDRLCAB);
							//printf("DD\n");
						} else {
							/* simply set to used */
							hdr-&gt;flagsize |= 0x80000000;
						}
						hb-&gt;used += size;
						
						//printf("ptr:%p\n", &amp;hdr[1]);
						//printf("alloced checks:%u blocks-checked:%u\n", checks, bc);
						
						return &amp;hdr[1];
					}
				}
				phdr = hdr;
				hdr = (KHEAPHDRLCAB*)((uintptr)&amp;hdr[1] + sz);
			}
			//printf("exit loop\n");
		}
	}
	
	//printf("return null\n");
	return 0;
}
</pre>
<h2><span id="Problems.2FSuggestions.2FFeedback"></span><span class="mw-headline" id="Problems/Suggestions/Feedback">Problems/Suggestions/Feedback</span></h2>
<p>I rarely get any feedback from a lot of stuff. So even negative feedback is good. If you want to tell me something just drop a message at, <a rel="nofollow" class="external text" href="../cdn-cgi/l/email-protection#cba0a6a8acf8fffaf88baca6aaa2a7e5a8a4a6"><span class="__cf_email__" data-cfemail="afc4c2ccc89c9b9e9cefc8c2cec6c381ccc0c2">[email&#160;protected]</span></a>. I am always curious who actually find usage for things that I put up on the internet.
</p>
<!-- 
NewPP limit report
Cached time: 20250212024218
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.008 seconds
Real time usage: 0.008 seconds
Preprocessor visited node count: 36/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 7105/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3455-0!canonical and timestamp 20250212024218 and revision id 16348.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=User:Pancakes/EntryBasedHeapImplementation&amp;oldid=16348">https://wiki.osdev.org/index.php?title=User:Pancakes/EntryBasedHeapImplementation&amp;oldid=16348</a>"</div></div>
		<div id="catlinks" class="catlinks catlinks-allhidden" data-mw="interface"></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=User%3APancakes%2FEntryBasedHeapImplementation" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="EntryBasedHeapImplementation#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-user" class="selected mw-list-item"><a href="EntryBasedHeapImplementation" title="View the user page [c]" accesskey="c"><span>User page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User_talk:Pancakes/EntryBasedHeapImplementation&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="EntryBasedHeapImplementation"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Pancakes/EntryBasedHeapImplementation&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Pancakes/EntryBasedHeapImplementation&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="../index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="../index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="../Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="../Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="../OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="../OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="../OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="../Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="../Special:WhatLinksHere/User:Pancakes/EntryBasedHeapImplementation" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/User:Pancakes/EntryBasedHeapImplementation" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-contributions" class="mw-list-item"><a href="../Special:Contributions/Pancakes" title="A list of contributions by this user"><span>User contributions</span></a></li><li id="t-log" class="mw-list-item"><a href="../Special:Log/Pancakes"><span>Logs</span></a></li><li id="t-userrights" class="mw-list-item"><a href="../Special:UserRights/Pancakes"><span>View user groups</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="../Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Pancakes/EntryBasedHeapImplementation&amp;oldid=16348" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Pancakes/EntryBasedHeapImplementation&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 7 May 2014, at 06:46.</li>
	<li id="footer-info-0">This page has been accessed 458 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="../OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="../OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="../OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=User:Pancakes/EntryBasedHeapImplementation&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="../resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="../resources/assets/poweredby_mediawiki_132x47.png 1.5x, ../resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script data-cfasync="false" src="../cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.008","walltime":"0.008","ppvisitednodes":{"value":36,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":7105,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250212024218","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":106});});</script>
</body>
</html>