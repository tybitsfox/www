<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>User:Pancakes/arm qemu realview-pb-a - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"ba46e0b246e137cc8f417e91","wgCSPNonce":false,"wgCanonicalNamespace":"User","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":2,"wgPageName":"User:Pancakes/arm_qemu_realview-pb-a","wgTitle":"Pancakes/arm qemu realview-pb-a","wgCurRevisionId":16327,"wgRevisionId":16327,"wgArticleId":3588,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"User:Pancakes/arm_qemu_realview-pb-a","wgRelevantArticleId":3588,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[
],"wgRestrictionMove":[],"wgRelevantUserName":"Pancakes","wgRedirectedFrom":"User:Pancakes/ARM_QEMU_REALVIEW-PB-A","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgInternalRedirectTargetUrl":"/User:Pancakes/arm_qemu_realview-pb-a","wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["mediawiki.action.view.redirect","site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify",
"ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="../favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="../opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="../api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<link rel="canonical" href="arm_qemu_realview-pb-a"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-2 ns-subject page-User_Pancakes_arm_qemu_realview-pb-a rootpage-User_Pancakes skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-namespace">User</span><span class="mw-page-title-separator">:</span><span class="mw-page-title-main">Pancakes/arm qemu realview-pb-a</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"><span class="subpages">&lt; <a href="https://wiki.osdev.org/User:Pancakes" title="User:Pancakes">User:Pancakes</a></span><span class="mw-redirectedfrom">(Redirected from <a href="https://wiki.osdev.org/index.php?title=User:Pancakes/ARM_QEMU_REALVIEW-PB-A&amp;redirect=no" class="mw-redirect" title="User:Pancakes/ARM QEMU REALVIEW-PB-A">User:Pancakes/ARM QEMU REALVIEW-PB-A</a>)</span></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="ARM_QEMU_REALVIEW-PB-A#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="ARM_QEMU_REALVIEW-PB-A#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="ARM_QEMU_REALVIEW-PB-A#ARM_QEMU_REALVIEW-PB-A"><span class="tocnumber">1</span> <span class="toctext">ARM QEMU REALVIEW-PB-A</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="ARM_QEMU_REALVIEW-PB-A#How_To_Use_It"><span class="tocnumber">1.1</span> <span class="toctext">How To Use It</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="ARM_QEMU_REALVIEW-PB-A#Multiple_Cores_On_Boot"><span class="tocnumber">1.2</span> <span class="toctext">Multiple Cores On Boot</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="ARM_QEMU_REALVIEW-PB-A#Waking_Up_Other_Cores"><span class="tocnumber">1.3</span> <span class="toctext">Waking Up Other Cores</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="ARM_QEMU_REALVIEW-PB-A#Setting_Up_PIC_And_Timer"><span class="tocnumber">1.4</span> <span class="toctext">Setting Up PIC And Timer</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="ARM_QEMU_REALVIEW-PB-A#GICC_and_GICD"><span class="tocnumber">1.5</span> <span class="toctext">GICC and GICD</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="ARM_QEMU_REALVIEW-PB-A#Peripheral_Base"><span class="tocnumber">1.6</span> <span class="toctext">Peripheral Base</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="ARM_QEMU_REALVIEW-PB-A#Private_Timer_Per_CPU_(Initialization_And_Handling_Example)"><span class="tocnumber">1.7</span> <span class="toctext">Private Timer Per CPU (Initialization And Handling Example)</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="ARM_QEMU_REALVIEW-PB-A#Hardware"><span class="tocnumber">1.8</span> <span class="toctext">Hardware</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="ARM_QEMU_REALVIEW-PB-A">ARM QEMU REALVIEW-PB-A</span></h2>
<p>This is an ARM board emulated by QEMU that supports 4 cores. I hope to help ease you into
working with this board by giving you the information needed to at least get control over
what is going on.
</p><p>See <a href="../ARM_Overview" title="ARM Overview">ARM_Overview</a>, (at the end) for links to tutorials, other boards, and stuff.
</p>
<h4><span class="mw-headline" id="How_To_Use_It">How To Use It</span></h4>
<p>I just realized that someone who comes to this page might be lost as in how to use this board. You could of course find one and buy it, but if you did that you might find it easier and better just to 
buy some of the newer things out there.
</p><p>So the main reason you would be interested in this board is for QEMU. Here is my boot line that
I am using and you will likely find pretty useful too. I do not use graphics because the darned
window pops up and annoys me because I am mainly looking at serial output. I start all 4 CPUs
and set the memory to 64MB. Also specify my flat binary image, and yes it can handle an ELF32 
image. It auto detects what type of image it is. The <i>realview-pbx-a9</i> is the actual board. By
default QEMU will normally use the <i>integrator-cp</i> which is a single core board, but it comes with
a graphics display that I have detailed how to initialize and draw pixels too somewhere around here.
</p>
<pre>    qemu-system-arm -M realview-pbx-a9 -smp 4 -m 64 -kernel armos.bin -serial stdio -nographic
</pre>
<p><br />
</p>
<h4><span class="mw-headline" id="Multiple_Cores_On_Boot">Multiple Cores On Boot</span></h4>
<p>From my testing it appears that the boot ROM (special boot ROM) grabs the other cores
and puts them into a WFI sleeping loop. They basically go to sleep until an interrupt 
wakes them then they check there special boot register (explained further below), and
if it is set to non-zero they jump to that address. One easy way to wake them is to 
send a SGI (software generated interrupt) to them. See the section below on waking up
the CPUs.
</p><p>Below is an example of getting the ID of the CPU and placing it into a busy loop.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="w">	</span><span class="cm">/* stop all cpus but cpu 0 */</span><span class="w"></span>
<span class="w">	</span><span class="k">asm</span><span class="p">(</span><span class="s">&quot;	mrc p15, 0, r0, c0, c0, 5</span><span class="se">\n</span><span class="s">\</span>
<span class="s">		and r0, r0, #3</span><span class="se">\n</span><span class="s">\</span>
<span class="s">		cmp r0, #0</span><span class="se">\n</span><span class="s">\</span>
<span class="s">		____here: bne ____here</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="w">	</span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>This will access the CPUID (for currently execting CPU), and if the ID is not zero then it
will be placed into a busy loop thus only allowing <i>CPU0</i> to continue.
</p><p><i>Also, at this point you could branch each CPU to it's own handler and set a stack for each</i>
if desired.<i></i>
</p><p>This will use the serial to output the letter 'A' for CPU0, 'B' for CPU1, 'C' for CPU2, and
'D' for CPU3. But, from my testing only CPU0 and CPU1 start on a cold boot at your entry 
address when loading a flat binary file (by default loaded to 0x10000).
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="w">	</span><span class="k">asm</span><span class="p">(</span><span class="s">&quot;	mrc p15, 0, r0, c0, c0, 5</span><span class="se">\n</span><span class="s">\</span>
<span class="s">		and r0, r0, #3</span><span class="se">\n</span><span class="s">\</span>
<span class="s">		mov r1, #0x1000</span><span class="se">\n</span><span class="s">\</span>
<span class="s">		lsl r1, r1, #16</span><span class="se">\n</span><span class="s">\</span>
<span class="s">		orr r1, r1, #0x9000</span><span class="se">\n</span><span class="s">\</span>
<span class="s">		mov r2, #65</span><span class="se">\n</span><span class="s">\</span>
<span class="s">		add r2, r2, r0</span><span class="se">\n</span><span class="s">\</span>
<span class="s">		str r2, [r1]</span><span class="se">\n</span><span class="s">\</span>
<span class="s">		cmp r0, #0</span><span class="se">\n</span><span class="s">\</span>
<span class="s">		____here: bne ____here</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="w">	</span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>A more appropriate way to handle trapping the CPUs might be to rather issue them a //WFI// or //WFE// instruction so they go into low-power mode while waiting for your main CPU to wake them up again with a SGI (software generated interrupt). This is the method that I currently use. Somewhere below you can find code to issue an SGI (its not an instruction).
</p>
<h4><span class="mw-headline" id="Waking_Up_Other_Cores">Waking Up Other Cores</span></h4>
<p>To wake up the other cores (with QEMU at least) this is the 
minimal process required:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define REALVIEWPBA_PERBASE	0x1f000000	</span><span class="cm">/* peripheal base */</span><span class="cp"></span>
<span class="cp">#define REALVIEWPBA_GICOFF	0x0100	</span><span class="cm">/* general interrupt controller */</span><span class="cp"></span>
<span class="cp">#define REALVIEWPBA_GDIOFF	0x1000  </span><span class="cm">/* GIC distributor */</span><span class="cp"></span>

<span class="w">	</span><span class="n">t</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">uint32</span><span class="o">*</span><span class="p">)</span><span class="mh">0x10000030</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x10000</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* enable general interrupt controller */</span><span class="w"></span>
<span class="w">	</span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">uint8</span><span class="o">*</span><span class="p">)(</span><span class="n">REALVIEWPBA_PERBASE</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">REALVIEWPBA_GICOFF</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3</span><span class="p">;</span><span class="w">     </span><span class="cm">/* enable */</span><span class="w"></span>
<span class="w">	</span><span class="n">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0xff</span><span class="p">;</span><span class="w">  </span><span class="cm">/* set required priority */</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* enable distributor then send SGI with distributor */</span><span class="w"></span>
<span class="w">	</span><span class="n">t</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">uint32</span><span class="o">*</span><span class="p">)(</span><span class="n">REALVIEWPBA_PERBASE</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">REALVIEWPBA_GDIOFF</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3</span><span class="p">;</span><span class="w">     </span><span class="cm">/* enable */</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="n">t</span><span class="p">[</span><span class="mh">0xf00</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">2</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">24</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">    </span><span class="cm">/* issue SGI 0 */</span><span class="w"></span>
</pre></div>
<p>You should be able to use any SGI, which are 0-15. There are also other
things that will wake the CPUs up. The boot code places them to sleep with
the <i>WFI</i> (wait for interrupt) instruction. Once woken the address
<i>0x10000030</i> is checked if it is non-zero. If it is zero it returns to
the <i>WFI</i> instruction and sleeps, but if it is non-zero it will jump to
the 32-bit address specified at <i>0x10000030</i>.
</p>
<h4><span class="mw-headline" id="Setting_Up_PIC_And_Timer">Setting Up PIC And Timer</span></h4>
<p>Here is some simple demonstration code to setup the PIC and PIT. For more
information refer to the datasheet for each device.  This PIT is global to all
CPUs so do not confuse it with the private PIT for each CPU (which is exampled further below).
</p><p><i>This has ONLY been tested on QEMU. On real hardware you might need to do more, and</i>
you should refer to your datasheets on the hardware to diagnose problems. But, for QEMU
this code should work for release QEMU-2.0.0-rc0.<i></i>
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define CTRL_ENABLE			0x80</span>
<span class="cp">#define CTRL_MODE_FREE		0x00</span>
<span class="cp">#define CTRL_MODE_PERIODIC	0x40</span>
<span class="cp">#define CTRL_INT_ENABLE		(1&lt;&lt;5)</span>
<span class="cp">#define CTRL_DIV_NONE		0x00</span>
<span class="cp">#define CTRL_DIV_16			0x04</span>
<span class="cp">#define CTRL_DIV_256		0x08</span>
<span class="cp">#define CTRL_SIZE_32		0x02</span>
<span class="cp">#define CTRL_ONESHOT		0x01</span>

<span class="cp">#define REG_LOAD		0x00</span>
<span class="cp">#define REG_VALUE		0x01</span>
<span class="cp">#define REG_CTRL		0x02</span>
<span class="cp">#define REG_INTCLR		0x03</span>
<span class="cp">#define REG_INTSTAT		0x04</span>
<span class="cp">#define REG_INTMASK		0x05</span>
<span class="cp">#define REG_BGLOAD		0x06</span>


<span class="w">        </span><span class="n">uint8</span><span class="w">   </span><span class="o">*</span><span class="n">picmmio1</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="n">uint8</span><span class="w">   </span><span class="o">*</span><span class="n">picmmio0</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="n">uint32</span><span class="w">  </span><span class="o">*</span><span class="n">pitmmio</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="n">uint32</span><span class="w">  </span><span class="o">*</span><span class="n">serialmmio</span><span class="p">;</span><span class="w"></span>

<span class="w">        </span><span class="n">picmmio0</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">uint8</span><span class="o">*</span><span class="p">)</span><span class="mh">0x1f000100</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="n">picmmio1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">uint8</span><span class="o">*</span><span class="p">)</span><span class="mh">0x1f001000</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="n">pit</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">uint32</span><span class="o">*</span><span class="p">)</span><span class="mh">0x10011000</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="n">serialmmio</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">uint32</span><span class="o">*</span><span class="p">)</span><span class="mh">0x10009000</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span>

<span class="w">	</span><span class="cm">/* talk to CPU interface*/</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* enable PIC for CPU 0 */</span><span class="w"></span>
<span class="w">	</span><span class="n">picmmio0</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* set priority mask for CPU 0 */</span><span class="w"></span>
<span class="w">	</span><span class="n">picmmio0</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0xff</span><span class="p">;</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* talk to actual PIC stuff */</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* enable PIC */</span><span class="w"></span>
<span class="w">	</span><span class="n">picmmio1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="cm">/* 36 is the interrupt (on cold boot) for the timer below */</span><span class="w">	</span>
<span class="w">	</span><span class="n">picmmio1</span><span class="p">[</span><span class="mh">0x100</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="mi">36</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">3</span><span class="p">)]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="p">(</span><span class="mi">36</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mi">7</span><span class="p">));</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="n">pitmmio</span><span class="p">[</span><span class="n">REG_LOAD</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">KTASKTICKS</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">pitmmio</span><span class="p">[</span><span class="n">REG_BGLOAD</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">KTASKTICKS</span><span class="p">;</span><span class="w">			</span>
<span class="w">	</span><span class="n">pitmmio</span><span class="p">[</span><span class="n">REG_CTRL</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CTRL_ENABLE</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">CTRL_MODE_PERIODIC</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">CTRL_SIZE_32</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">CTRL_DIV_NONE</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">CTRL_INT_ENABLE</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="n">pitmmio</span><span class="p">[</span><span class="n">REG_INTCLR</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">~</span><span class="mi">0</span><span class="p">;</span><span class="w">		</span><span class="cm">/* make sure interrupt is clear (might not be mandatory) */</span><span class="w"></span>

<span class="w">        </span><span class="cm">/* write character to serial output */</span><span class="w"></span>
<span class="w">        </span><span class="n">serialmmio</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sc">&#39;A&#39;</span><span class="p">;</span><span class="w"></span>
</pre></div>
<h4><span class="mw-headline" id="GICC_and_GICD">GICC and GICD</span></h4>
<p>The GICC is known as the <i>CPU Interface</i> and the GICD is known as the <i>Distributor</i>. The GIC is for <i>General Interrupt Controller</i> and actually represents the two devices. The GICC is local to each CPU while the GICD sits in front of these controllers and distributes the interrupts to them.
</p><p>Each CPU has it's on GICC mapped at the same address (not required by SoCs but recommend). So this makes it not possible for one CPU to access the GICC of another CPU unless they are mapped in different places and made accessible (not sure if possible). So just assume that you can only access the local GICC for with each core.
</p><p><i>Since yourprimary CPU can not access the GICC for the other cores the boot code (flashed into ROM) on the device will configure the GICC for each core therefore allowing you to send an SGI to wake them up.</i>
</p><p>The GICC base is located at 0x1f000100, and the GICD base is located at 0x1f001000.
</p>
<h4><span class="mw-headline" id="Peripheral_Base">Peripheral Base</span></h4>
<p>Here are just a few offsets to the CPU specific stuff, except the GICD which (AFAIK) is global.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define REALVIEWPBA_PERBASE	0x1f000000	</span><span class="cm">/* peripheal base */</span><span class="cp"></span>
<span class="cp">#define REALVIEWPBA_SCUOFF	0x0000	</span><span class="cm">/* snoop control unit */</span><span class="cp"></span>
<span class="cp">#define REALVIEWPBA_GICOFF	0x0100	</span><span class="cm">/* general interrupt controller */</span><span class="cp"></span>
<span class="cp">#define REALVIEWPBA_GTIOFF	0x0200	</span><span class="cm">/* global timer */</span><span class="cp"></span>
<span class="cp">#define REALVIEWPBA_PTIOFF	0x0600	</span><span class="cm">/* private timer */</span><span class="cp"></span>
<span class="cp">#define REALVIEWPBA_GDIOFF	0x1000  </span><span class="cm">/* GIC distributor */</span><span class="cp"></span>
</pre></div>
<h4><span id="Private_Timer_Per_CPU_.28Initialization_And_Handling_Example.29"></span><span class="mw-headline" id="Private_Timer_Per_CPU_(Initialization_And_Handling_Example)">Private Timer Per CPU (Initialization And Handling Example)</span></h4>
<p>The <i>PTIOFF</i> is a private timer for each CPU. I can not remember if it is specified for the cortex-a9 or the realview-pb. I want to say the cortex-a9, but in any event. Each CPU has it's
own timer which is accessed as <i>REALVIEWPBA_PERBASE + REALVIEWPBA_PTIOFF</i>. Here is some example code to enable and timer and handle its interrupt:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define SET1BF(bf, off, i) bf[off + (i &gt;&gt; 3)] = (1 &lt;&lt; (i &amp; 7))</span>

<span class="w">        </span><span class="n">uint8</span><span class="w">   </span><span class="o">*</span><span class="n">gicc</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="n">gicd</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="n">uint32</span><span class="w">  </span><span class="o">*</span><span class="n">pt</span><span class="p">;</span><span class="w"></span>

<span class="w">        </span><span class="n">gicc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">uint8</span><span class="o">*</span><span class="p">)(</span><span class="n">REALVIEWPBA_PERBASE</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">REALVIEWPBA_GICOFF</span><span class="p">);</span><span class="w"></span>
<span class="w">        </span><span class="n">gicd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">uint8</span><span class="o">*</span><span class="p">)(</span><span class="n">REALVIEWPBA_PERBASE</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">REALVIEWPBA_GDIOFF</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">pt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">uint32</span><span class="o">*</span><span class="p">)(</span><span class="n">REALVIEWPBA_PERBASE</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">REALVIEWPBA_PTIMER</span><span class="p">);</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* enable IRQ and FIQ OR just enable one */</span><span class="w"></span>
<span class="w">	</span><span class="n">arm4_cpsrset</span><span class="p">(</span><span class="n">arm4_cpsrget</span><span class="p">()</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="o">~</span><span class="p">((</span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">7</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">6</span><span class="p">)));</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* enable local PIC */</span><span class="w"></span>
<span class="w">	</span><span class="n">gicc</span><span class="p">[</span><span class="mh">0x100</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* set priority mask*/</span><span class="w"></span>
<span class="w">	</span><span class="n">gicc</span><span class="p">[</span><span class="mh">0x100</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">4</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0xff</span><span class="p">;</span><span class="w"></span>

<span class="w">        </span><span class="cm">/* enable global distributor */</span><span class="w"></span>
<span class="w">	</span><span class="n">gicd</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">	</span>
<span class="w">	</span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* enable interrupt 29 in distributor */</span><span class="w"></span>
<span class="w">	</span><span class="n">SET1BF</span><span class="p">(</span><span class="n">gicd</span><span class="p">,</span><span class="w"> </span><span class="mh">0x100</span><span class="p">,</span><span class="w"> </span><span class="mi">29</span><span class="p">);</span><span class="w"></span>

<span class="w">        </span><span class="cm">/* enable timer */</span><span class="w"></span>
<span class="w">	</span><span class="n">pt</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">pt</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x4000000</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="n">pt</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>See the technical documents for exactly meaning of bits. To handle an interrupt you use
the following general process.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="w">        </span><span class="n">uint8</span><span class="w">   </span><span class="o">*</span><span class="n">gicc</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="n">uint32</span><span class="w">  </span><span class="o">*</span><span class="n">pt</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="n">uint32</span><span class="w">  </span><span class="n">irq</span><span class="p">;</span><span class="w"></span>

<span class="w">        </span><span class="n">gicc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">uint8</span><span class="o">*</span><span class="p">)(</span><span class="n">REALVIEWPBA_PERBASE</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">REALVIEWPBA_GICOFF</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">pt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">uint32</span><span class="o">*</span><span class="p">)(</span><span class="n">REALVIEWPBA_PERBASE</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">REALVIEWPBA_PTIMER</span><span class="p">);</span><span class="w"></span>

<span class="w">        </span><span class="cm">/* get interrupt to handle (irq == 1023 means spurious interrupt) */</span><span class="w"></span>
<span class="w">        </span><span class="n">irq</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gicc</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="w"></span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">irq</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">29</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">                </span><span class="cm">/* private timer is interrupt 29 (clear private timer interrupt line) */</span><span class="w"></span>
<span class="w">                </span><span class="n">pt</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="w">                </span><span class="cm">/* not sure but you might have to clear interrupt below THEN clear private timer interrupt */</span><span class="w"></span>
<span class="w">        </span><span class="p">}</span><span class="w"></span>
<span class="w">        </span><span class="cm">/* clear interrupt by saying we handled it */</span><span class="w"></span>
<span class="w">        </span><span class="n">gicc</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">irq</span><span class="p">;</span><span class="w"></span>
</pre></div>
<p>The above is, of course, part of you execution chain from an IRQ/FIQ exception.
</p>
<h4><span class="mw-headline" id="Hardware">Hardware</span></h4>
<p>This is the only datasheet that I have found, <a rel="nofollow" class="external free" href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0411d/DUI0411D_realview_platform_baseboard_ug.pdf">http://infocenter.arm.com/help/topic/com.arm.doc.dui0411d/DUI0411D_realview_platform_baseboard_ug.pdf</a>. I am not sure how accurate it is to the revision the QEMU board was built too.
</p><p>Here is a fairly accurate memory map of all the MMIO.
</p>
<pre>    /* Memory map for RealView Emulation Baseboard:  */
    /* 0x10000000 System registers.  */
    /* 0x10001000 System controller.  */
    /* 0x10002000 Two-Wire Serial Bus.  */
    /* 0x10003000 Reserved.  */
    /* 0x10004000 AACI.  */
    /* 0x10005000 MCI.  */
    /* 0x10006000 KMI0.  */
    /* 0x10007000 KMI1.  */
    /* 0x10009000 UART0.  */
    /* 0x1000a000 UART1.  */
    /* 0x1000b000 UART2.  */
    /* 0x1000c000 UART3.  */
    /* 0x1000d000 SSPI.  */
    /* 0x1000e000 SCI.  */
    /* 0x1000f000 Reserved.  */
    /* 0x10010000 Watchdog.  */
    /* 0x10011000 Timer 0+1.  */
    /* 0x10012000 Timer 2+3.  */
    /* 0x10013000 GPIO 0.  */
    /* 0x10014000 GPIO 1.  */
    /* 0x10015000 GPIO 2.  */
    /* 0x10002000 Two-Wire Serial Bus - DVI. (PB) */
    /* 0x10017000 RTC.  */
    /* 0x10018000 DMC.  */
    /* 0x10019000 PCI controller config.  */
    /* 0x10020000 CLCD.  */
    /* 0x10030000 DMA Controller.  */
    /* 0x10080000 SMC.  */
    /* 0x1e000000 GIC1. (PB) */
    /* 0x1e001000 GIC2. (PB) */
    /* 0x1e002000 GIC3. (PB) */
    /* 0x1e003000 GIC4. (PB) */
    /* 0x40000000 NOR flash.  */
    /* 0x44000000 DoC flash.  */
    /* 0x48000000 SRAM.  */
    /* 0x4c000000 Configuration flash.  */
    /* 0x4e000000 Ethernet.  */
    /* 0x4f000000 USB.  */
    /* 0x50000000 PISMO.  */
    /* 0x54000000 PISMO.  */
    /* 0x58000000 PISMO.  */
    /* 0x5c000000 PISMO.  */
    /* 0x60000000 PCI.  */
    /* 0x60000000 PCI Self Config.  */
    /* 0x61000000 PCI Config.  */
    /* 0x62000000 PCI IO.  */
    /* 0x63000000 PCI mem 0.  */
    /* 0x64000000 PCI mem 1.  */
    /* 0x68000000 PCI mem 2.  */
</pre>
<!-- 
NewPP limit report
Cached time: 20250212012238
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.050 seconds
Real time usage: 0.938 seconds
Preprocessor visited node count: 70/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 25642/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3588-0!canonical and timestamp 20250212012237 and revision id 16327.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=User:Pancakes/arm_qemu_realview-pb-a&amp;oldid=16327">https://wiki.osdev.org/index.php?title=User:Pancakes/arm_qemu_realview-pb-a&amp;oldid=16327</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="../Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=User%3APancakes%2Farm+qemu+realview-pb-a" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="ARM_QEMU_REALVIEW-PB-A#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-user" class="selected mw-list-item"><a href="arm_qemu_realview-pb-a" title="View the user page [c]" accesskey="c"><span>User page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User_talk:Pancakes/arm_qemu_realview-pb-a&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="arm_qemu_realview-pb-a"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Pancakes/arm_qemu_realview-pb-a&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Pancakes/arm_qemu_realview-pb-a&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="../index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="../index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="../Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="../Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="../OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="../OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="../OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="../Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="../Special:WhatLinksHere/User:Pancakes/arm_qemu_realview-pb-a" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/User:Pancakes/arm_qemu_realview-pb-a" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-contributions" class="mw-list-item"><a href="../Special:Contributions/Pancakes" title="A list of contributions by this user"><span>User contributions</span></a></li><li id="t-log" class="mw-list-item"><a href="../Special:Log/Pancakes"><span>Logs</span></a></li><li id="t-userrights" class="mw-list-item"><a href="../Special:UserRights/Pancakes"><span>View user groups</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="../Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Pancakes/arm_qemu_realview-pb-a&amp;oldid=16327" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Pancakes/arm_qemu_realview-pb-a&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 1 May 2014, at 00:04.</li>
	<li id="footer-info-0">This page has been accessed 1,368 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="../OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="../OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="../OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=User:Pancakes/arm_qemu_realview-pb-a&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="../resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="../resources/assets/poweredby_mediawiki_132x47.png 1.5x, ../resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.050","walltime":"0.938","ppvisitednodes":{"value":70,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":25642,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250212012238","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":1057});});</script>
</body>
</html>