<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>GDT Tutorial - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"a4e29bfa89b30b2a552a3ee0","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"GDT_Tutorial","wgTitle":"GDT Tutorial","wgCurRevisionId":28705,"wgRevisionId":28705,"wgArticleId":1531,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using duplicate arguments in template calls","Pages using deprecated source tags","Level 1 Tutorials","Tutorials","X86 CPU","Memory Segmentation"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"GDT_Tutorial","wgRelevantArticleId":1531,"wgIsProbablyEditable":false,
"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-GDT_Tutorial rootpage-GDT_Tutorial skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">GDT Tutorial</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="GDT_Tutorial#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="GDT_Tutorial#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear:right; border:1px solid #aaaaaa; background:#eee; text-align:center;;"><tbody><tr><th>Difficulty level</th></tr><tr><td><a href="./File:Difficulty_1.png" class="image"><img alt="Difficulty 1.png" src="images/d/d3/Difficulty_1.png" decoding="async" width="46" height="14" data-file-width="46" data-file-height="14" /></a><br />Beginner</td></tr></tbody></table>
<p>On the <a href="IA32_Architecture_Family" title="IA32 Architecture Family">IA-32</a> and <a href="X86-64" title="X86-64">x86-64</a> architectures, and more precisely in <b><a href="Protected_Mode" title="Protected Mode">Protected Mode</a></b> or <b><a href="Long_Mode" class="mw-redirect" title="Long Mode">Long Mode</a></b>, <a href="Interrupt_Service_Routines" title="Interrupt Service Routines">Interrupt Service Routines</a> and a good deal of <a href="Memory_management" title="Memory management">memory management</a> are controlled through tables of descriptors. Each descriptor stores information about a single object (e.g. a service routine, a task, a chunk of code or data) the CPU might need at some time. If you try, for instance, to load a new value into a <b><a href="Segmentation" title="Segmentation">Segment Register</a></b>, the CPU needs to perform safety and access control checks to see whether you're actually entitled to access that specific memory area. Once the checks are performed, useful values (such as the lowest and highest addresses) are cached in invisible CPU registers.
</p><p>On these architectures, there are three of this type of table: The <b><a href="Global_Descriptor_Table" title="Global Descriptor Table">Global Descriptor Table</a></b>, the <b><a href="Local_Descriptor_Table" title="Local Descriptor Table">Local Descriptor Table</a></b> and the <b><a href="Interrupt_Descriptor_Table" title="Interrupt Descriptor Table">Interrupt Descriptor Table</a></b> (which supplants the <b><a href="Interrupt_Vector_Table" title="Interrupt Vector Table">Interrupt Vector Table</a></b>). Each table is defined using their size and <b><a href="https://wiki.osdev.org/index.php?title=Linear_address&amp;action=edit&amp;redlink=1" class="new" title="Linear address (page does not exist)">linear address</a></b> to the CPU through the <b>LGDT</b>, <b>LLDT</b>, and <b>LIDT</b> instructions respectively. In almost all use cases, these tables are only placed into memory once, at boot time, and then edited later when needed.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="GDT_Tutorial#Survival_Glossary"><span class="tocnumber">1</span> <span class="toctext">Survival Glossary</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="GDT_Tutorial#What_to_Put_In_a_GDT"><span class="tocnumber">2</span> <span class="toctext">What to Put In a GDT</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="GDT_Tutorial#Basics"><span class="tocnumber">2.1</span> <span class="toctext">Basics</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="GDT_Tutorial#Flat_/_Long_Mode_Setup"><span class="tocnumber">2.2</span> <span class="toctext">Flat / Long Mode Setup</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="GDT_Tutorial#Small_Kernel_Setup"><span class="tocnumber">2.3</span> <span class="toctext">Small Kernel Setup</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="GDT_Tutorial#SYSENTER_/_SYSEXIT"><span class="tocnumber">2.4</span> <span class="toctext">SYSENTER / SYSEXIT</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-7"><a href="GDT_Tutorial#How_to_Set_Up_The_GDT"><span class="tocnumber">3</span> <span class="toctext">How to Set Up The GDT</span></a>
<ul>
<li class="toclevel-2 tocsection-8"><a href="GDT_Tutorial#Disable_Interrupts"><span class="tocnumber">3.1</span> <span class="toctext">Disable Interrupts</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="GDT_Tutorial#Filling_the_Table"><span class="tocnumber">3.2</span> <span class="toctext">Filling the Table</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="GDT_Tutorial#Telling_the_CPU_Where_the_Table_Is"><span class="tocnumber">3.3</span> <span class="toctext">Telling the CPU Where the Table Is</span></a>
<ul>
<li class="toclevel-3 tocsection-11"><a href="GDT_Tutorial#Real_Mode"><span class="tocnumber">3.3.1</span> <span class="toctext">Real Mode</span></a></li>
<li class="toclevel-3 tocsection-12"><a href="GDT_Tutorial#Protected_Mode,_Flat_Model"><span class="tocnumber">3.3.2</span> <span class="toctext">Protected Mode, Flat Model</span></a></li>
<li class="toclevel-3 tocsection-13"><a href="GDT_Tutorial#Protected_Mode,_Non-Flat_Model"><span class="tocnumber">3.3.3</span> <span class="toctext">Protected Mode, Non-Flat Model</span></a></li>
<li class="toclevel-3 tocsection-14"><a href="GDT_Tutorial#Long_Mode"><span class="tocnumber">3.3.4</span> <span class="toctext">Long Mode</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-15"><a href="GDT_Tutorial#Reload_Segment_Registers"><span class="tocnumber">3.4</span> <span class="toctext">Reload Segment Registers</span></a>
<ul>
<li class="toclevel-3 tocsection-16"><a href="GDT_Tutorial#Protected_Mode"><span class="tocnumber">3.4.1</span> <span class="toctext">Protected Mode</span></a></li>
<li class="toclevel-3 tocsection-17"><a href="GDT_Tutorial#Long_Mode_2"><span class="tocnumber">3.4.2</span> <span class="toctext">Long Mode</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-18"><a href="GDT_Tutorial#The_LDT"><span class="tocnumber">4</span> <span class="toctext">The LDT</span></a></li>
<li class="toclevel-1 tocsection-19"><a href="GDT_Tutorial#The_IDT_and_why_it&#39;s_needed"><span class="tocnumber">5</span> <span class="toctext">The IDT and why it's needed</span></a></li>
<li class="toclevel-1 tocsection-20"><a href="GDT_Tutorial#Some_stuff_to_make_your_life_easy"><span class="tocnumber">6</span> <span class="toctext">Some stuff to make your life easy</span></a></li>
<li class="toclevel-1 tocsection-21"><a href="GDT_Tutorial#See_Also"><span class="tocnumber">7</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-22"><a href="GDT_Tutorial#Articles"><span class="tocnumber">7.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-23"><a href="GDT_Tutorial#Threads"><span class="tocnumber">7.2</span> <span class="toctext">Threads</span></a></li>
<li class="toclevel-2 tocsection-24"><a href="GDT_Tutorial#External_Links"><span class="tocnumber">7.3</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Survival_Glossary">Survival Glossary</span></h2>
<dl><dt><b><a href="Segmentation" title="Segmentation">Segment</a></b></dt>
<dd>A logically contiguous chunk of memory with consistent properties (from the CPU's perspective).</dd>
<dt><b>Segment Register</b></dt>
<dd>A register of your CPU that refers to a segment for a particular purpose (<b>CS</b>, <b>DS</b>, <b>SS</b>, <b>ES</b>) or for general use (<b>FS</b>, <b>GS</b>)</dd>
<dt><b><a href="Segment_Selector" title="Segment Selector">Segment Selector</a></b></dt>
<dd>A reference to a descriptor, which you can load into a segment register; the selector is an offset into a descriptor table pointing to one of its entries. These entries are typically 8 bytes long, therefore bits 3 and up only declare the descriptor table entry offset, while bit 2 specifies if this selector is a GDT or LDT selector (LDT - bit set, GDT - bit cleared), and bits 0 - 1 declare the ring level that needs to correspond to the descriptor table entry's DPL field. If it doesn't, a General Protection Fault occurs; if it does correspond then the CPL level of the selector used is changed accordingly.</dd>
<dt><b><a href="Global_Descriptor_Table#Segment_Descriptor" title="Global Descriptor Table">Segment Descriptor</a></b></dt>
<dd>An entry in a descriptor table. These are a binary data structure that tells the CPU the attributes of a given segment.</dd></dl>
<h2><span class="mw-headline" id="What_to_Put_In_a_GDT">What to Put In a GDT</span></h2>
<h3><span class="mw-headline" id="Basics">Basics</span></h3>
<p>For the sake of sanity, you should always have these items stored in your GDT:
</p>
<ul><li>Entry 0 in a descriptor table, or the <b>Null Descriptor</b>, is never referenced by the processor, and should always contain no data. Certain emulators, like Bochs, will complain about limit exceptions if you do not have one present. Some use this descriptor to store a pointer to the GDT itself (to use with the LGDT instruction). The null descriptor is 8 bytes wide and the pointer is 6 bytes wide so it might just be the perfect place for this.</li>
<li>A DPL 0 <b>Code Segment</b> descriptor (for your kernel)</li>
<li>A <b>Data Segment</b> descriptor (writing to code segments is not allowed)</li>
<li>A <b><a href="Task_State_Segment" title="Task State Segment">Task State Segment</a></b> segment descriptor (its very useful to have at least one)</li>
<li>Room for more segments if you need them (e.g. user-level, <a href="LDT" class="mw-redirect" title="LDT">LDTs</a>, more TSS, whatever)</li></ul>
<h3><span id="Flat_.2F_Long_Mode_Setup"></span><span class="mw-headline" id="Flat_/_Long_Mode_Setup">Flat / Long Mode Setup</span></h3>
<p>If you do not desire to use <b><a href="Segmentation" title="Segmentation">Segmentation</a></b> to separate memory into protected areas, you can get away with using only a few segment descriptors. One reason may be that you desire to only use paging to protect memory. As well, this model is <i>strictly enforced</i> in <b><a href="Long_Mode" class="mw-redirect" title="Long Mode">Long Mode</a></b>, as the base and limit values are ignored.
</p><p>In this scenario, the only <b><a href="Global_Descriptor_Table#Segment_Descriptor" title="Global Descriptor Table">Segment Descriptors</a></b> necessary are the <b>Null Descriptor</b>, and one descriptor for each combination of privilege level, segment type, and execution mode desired, as well as system descriptors. Usually this will consist of the one code and one data segment for kernel and user mode, and a <b><a href="Task_State_Segment" title="Task State Segment">Task State Segment</a></b>.
</p>
<table class="wikitable" style="display: inline-table;">
<caption>32-bit
</caption>
<tbody><tr>
<th>Offset</th>
<th>Use</th>
<th>Content
</th></tr>
<tr>
<td>0x0000</td>
<td>Null Descriptor</td>
<td><tt>Base = 0<br />Limit = 0x00000000<br />Access Byte = 0x00<br />Flags = 0x0</tt>
</td></tr>
<tr>
<td>0x0008</td>
<td>Kernel Mode Code Segment</td>
<td><tt>Base = 0<br />Limit = 0xFFFFF<br />Access Byte = 0x9A<br />Flags = 0xC</tt>
</td></tr>
<tr>
<td>0x0010</td>
<td>Kernel Mode Data Segment</td>
<td><tt>Base = 0<br />Limit = 0xFFFFF<br />Access Byte = 0x92<br />Flags = 0xC</tt>
</td></tr>
<tr>
<td>0x0018</td>
<td>User Mode Code Segment</td>
<td><tt>Base = 0<br />Limit = 0xFFFFF<br />Access Byte = 0xFA<br />Flags = 0xC</tt>
</td></tr>
<tr>
<td>0x0020</td>
<td>User Mode Data Segment</td>
<td><tt>Base = 0<br />Limit = 0xFFFFF<br />Access Byte = 0xF2<br />Flags = 0xC</tt>
</td></tr>
<tr>
<td>0x0028</td>
<td>Task State Segment</td>
<td><tt>Base = &amp;TSS<br />Limit = sizeof(TSS)-1<br />Access Byte = 0x89<br />Flags = 0x0</tt>
</td></tr></tbody></table>
<table class="wikitable" style="display: inline-table;">
<caption>64-bit
</caption>
<tbody><tr>
<th>Offset</th>
<th>Use</th>
<th>Content
</th></tr>
<tr>
<td>0x0000</td>
<td>Null Descriptor</td>
<td><tt>Base = 0<br />Limit = 0x00000000<br />Access Byte = 0x00<br />Flags = 0x0</tt>
</td></tr>
<tr>
<td>0x0008</td>
<td>Kernel Mode Code Segment</td>
<td><tt>Base = 0<br />Limit = 0xFFFFF<br />Access Byte = 0x9A<br />Flags = 0xA</tt>
</td></tr>
<tr>
<td>0x0010</td>
<td>Kernel Mode Data Segment</td>
<td><tt>Base = 0<br />Limit = 0xFFFFF<br />Access Byte = 0x92<br />Flags = 0xC</tt>
</td></tr>
<tr>
<td>0x0018</td>
<td>User Mode Code Segment</td>
<td><tt>Base = 0<br />Limit = 0xFFFFF<br />Access Byte = 0xFA<br />Flags = 0xA</tt>
</td></tr>
<tr>
<td>0x0020</td>
<td>User Mode Data Segment</td>
<td><tt>Base = 0<br />Limit = 0xFFFFF<br />Access Byte = 0xF2<br />Flags = 0xC</tt>
</td></tr>
<tr>
<td>0x0028</td>
<td>Task State Segment<br />(<b><a href="Global_Descriptor_Table#Long_Mode_System_Segment_Descriptor" title="Global Descriptor Table">64-bit System Segment</a></b>)</td>
<td><tt>Base = &amp;TSS<br />Limit = sizeof(TSS)-1<br />Access Byte = 0x89<br />Flags = 0x0</tt>
</td></tr></tbody></table>
<h3><span class="mw-headline" id="Small_Kernel_Setup">Small Kernel Setup</span></h3>
<p>If you desire to separate memory into protected areas of code and data, you will have to set the <b>Base</b> and <b>Limit</b> value of each entry in the table to the desired format.
</p><p>For example, you may want to have two segments, a 4MiB Code Segment starting at 4MiB, and a 4MiB Data Segment starting at 8MiB, both accessible only to Ring 0. In that case, your GDT may look like this:
</p>
<table class="wikitable" style="display: inline-table;">
<caption>Small Kernel
</caption>
<tbody><tr>
<th>Offset</th>
<th>Use</th>
<th>Content
</th></tr>
<tr>
<td>0x0000</td>
<td>Null Descriptor</td>
<td><tt>Base = 0<br />Limit = 0x00000000<br />Access Byte = 0x00<br />Flags = 0x0</tt>
</td></tr>
<tr>
<td>0x0008</td>
<td>Kernel Mode Code Segment</td>
<td><tt>Base = 0x00400000<br />Limit = 0x003FFFFF<br />Access Byte = 0x9A<br />Flags = 0xC</tt>
</td></tr>
<tr>
<td>0x0010</td>
<td>Kernel Mode Data Segment</td>
<td><tt>Base = 0x00800000<br />Limit = 0x003FFFFF<br />Access Byte = 0x92<br />Flags = 0xC</tt>
</td></tr>
<tr>
<td>0x0018</td>
<td>Task State Segment</td>
<td><tt>Base = &amp;TSS<br />Limit = sizeof(TSS)-1<br />Access Byte = 0x89<br />Flags = 0x0</tt>
</td></tr></tbody></table>
<p>That means whatever you load at physical address 4 MiB will appear as code at <b>CS:0</b> and what you load at physical address 8 MiB will appear as data at <b>DS:0</b>.
</p><p>This specifically is not a recommended design, but shows how to think about using the <b>GDT</b> to define separated segments.
</p>
<h3><span id="SYSENTER_.2F_SYSEXIT"></span><span class="mw-headline" id="SYSENTER_/_SYSEXIT">SYSENTER / SYSEXIT</span></h3>
<p>If you are using the Intel <b>SYSENTER</b> / <b>SYSEXIT</b> routines, the <b>GDT</b> must contain four special entries, the first one pointed to by the value in the <b>IA32_SYSENTER_CS</b> <b><a href="Model_Specific_Registers" title="Model Specific Registers">Model Specific Register</a></b> (MSR 0x0174).
</p><p>For more information, see the sections on <b>SYSENTER</b> and <b>SYSEXIT</b> in <b>Chapter 4.3: Instructions (M-U)</b> of the Intel Software Developer Manual, Volume 2-B.
</p>
<table class="wikitable">
<caption>GDT
</caption>
<tbody><tr>
<th>Offset</th>
<th>Use
</th></tr>
<tr>
<td>Preceding Entries</td>
<td>Null Descriptor<br />Kernel Segments<br />etc.
</td></tr>
<tr>
<td>IA32_SYSENTER_CS + 0x0000</td>
<td>DPL 0 Code Segment<br /><b>SYSENTER</b> Code
</td></tr>
<tr>
<td>IA32_SYSENTER_CS + 0x0008</td>
<td>DPL 0 Data Segment<br /><b>SYSENTER</b> Stack
</td></tr>
<tr>
<td>IA32_SYSENTER_CS + 0x0010</td>
<td>DPL 3 Code Segment<br /><b>SYSEXIT</b> Code
</td></tr>
<tr>
<td>IA32_SYSENTER_CS + 0x0018</td>
<td>DPL 3 Data Segment<br /><b>SYSEXIT</b> Stack
</td></tr>
<tr>
<td>Successive Entries</td>
<td>Any Other Descriptors
</td></tr></tbody></table>
<p>The actual values stored in these segments will depend on your system design.
</p>
<h2><span class="mw-headline" id="How_to_Set_Up_The_GDT">How to Set Up The GDT</span></h2>
<h3><span class="mw-headline" id="Disable_Interrupts">Disable Interrupts</span></h3>
<p>If they're enabled, <i>be absolutely sure</i> to turn them off or you could run into undesired behavior and exceptions. This can be achieved through the <b>CLI</b> assembly instruction.
</p>
<h3><span class="mw-headline" id="Filling_the_Table">Filling the Table</span></h3>
<p>The above structure of the <b>GDT</b> doesn't show you how to write entries in the correct format. The actual structure of descriptors is a little messy for backwards compatibility with the 286's <b>GDT</b>. Base address are split across three different fields and you cannot encode any limit you want.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">void</span><span class="w"> </span><span class="nf">encodeGdtEntry</span><span class="p">(</span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="n">target</span><span class="p">,</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">GDT</span><span class="w"> </span><span class="n">source</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="c1">// Check the limit to make sure that it can be encoded</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">limit</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mh">0xFFFFF</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="n">kerror</span><span class="p">(</span><span class="s">&quot;GDT cannot encode limits larger than 0xFFFFF&quot;</span><span class="p">);}</span><span class="w"></span>
<span class="w">    </span>
<span class="w">    </span><span class="c1">// Encode the limit</span>
<span class="w">    </span><span class="n">target</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">source</span><span class="p">.</span><span class="n">limit</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFF</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">target</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">limit</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFF</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">target</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">limit</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">16</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x0F</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span>
<span class="w">    </span><span class="c1">// Encode the base</span>
<span class="w">    </span><span class="n">target</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">source</span><span class="p">.</span><span class="n">base</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFF</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">target</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">base</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFF</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">target</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">base</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">16</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFF</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">target</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">base</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">24</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFF</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span>
<span class="w">    </span><span class="c1">// Encode the access byte</span>
<span class="w">    </span><span class="n">target</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">source</span><span class="p">.</span><span class="n">access_byte</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span>
<span class="w">    </span><span class="c1">// Encode the flags</span>
<span class="w">    </span><span class="n">target</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="w"> </span><span class="o">|=</span><span class="w"> </span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">flags</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">4</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>In order to fill your table, you will want to use this function once for each entry, with <tt>*target</tt> pointing to the logical address of the <b>Segment Descriptor</b> and <tt>source</tt> being a struct of your design containing the necessary information.
</p><p>You can hard-code values in the <b>GDT</b> rather than converting them at runtime, of course.
</p>
<h3><span class="mw-headline" id="Telling_the_CPU_Where_the_Table_Is">Telling the CPU Where the Table Is</span></h3>
<p>Some assembly is required here. While you could use <a href="Inline_assembly" class="mw-redirect" title="Inline assembly">inline assembly</a>, the memory packing expected by the <b>LGDT</b> and <b>LIDT</b> instructions makes it much easier to write a small assembly routine instead. As said above, you'll use <b>LGDT</b> instruction to load the base address and the limit of the GDT. Since the base address should be a linear address, you'll need a bit of tweaking depending of your current <a href="MMU" class="mw-redirect" title="MMU">MMU</a> setup.
</p>
<h4><span class="mw-headline" id="Real_Mode">Real Mode</span></h4>
<p>The linear address should here be computed as <tt>segment * 16 + offset</tt>. <tt>GDT</tt> and <tt>GDT_end</tt> are assumed to be symbols in the current data segment.
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">gdtr</span><span class="w"> </span><span class="no">DW</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="c1">; For limit storage</span>
<span class="w">     </span><span class="nf">DD</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="c1">; For base storage</span>

<span class="nl">setGdt:</span><span class="w"></span>
<span class="w">   </span><span class="nf">XOR</span><span class="w">   </span><span class="no">EAX</span><span class="p">,</span><span class="w"> </span><span class="no">EAX</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="no">AX</span><span class="p">,</span><span class="w"> </span><span class="no">DS</span><span class="w"></span>
<span class="w">   </span><span class="nf">SHL</span><span class="w">   </span><span class="no">EAX</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="w"></span>
<span class="w">   </span><span class="nf">ADD</span><span class="w">   </span><span class="no">EAX</span><span class="p">,</span><span class="w"> </span><span class="err">&#39;&#39;</span><span class="no">GDT</span><span class="err">&#39;&#39;</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="p">[</span><span class="no">gdtr</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="mi">2</span><span class="p">],</span><span class="w"> </span><span class="no">eax</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="no">EAX</span><span class="p">,</span><span class="w"> </span><span class="err">&#39;&#39;</span><span class="no">GDT_end</span><span class="err">&#39;&#39;</span><span class="w"></span>
<span class="w">   </span><span class="nf">SUB</span><span class="w">   </span><span class="no">EAX</span><span class="p">,</span><span class="w"> </span><span class="err">&#39;&#39;</span><span class="no">GDT</span><span class="err">&#39;&#39;</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="p">[</span><span class="no">gdtr</span><span class="p">],</span><span class="w"> </span><span class="no">AX</span><span class="w"></span>
<span class="w">   </span><span class="nf">LGDT</span><span class="w">  </span><span class="p">[</span><span class="no">gdtr</span><span class="p">]</span><span class="w"></span>
<span class="w">   </span><span class="nf">RET</span><span class="w"></span>
</pre></div>
<h4><span id="Protected_Mode.2C_Flat_Model"></span><span class="mw-headline" id="Protected_Mode,_Flat_Model">Protected Mode, Flat Model</span></h4>
<p>"Flat" meaning the base of your Data Segment is 0 (regardless of whether <b><a href="Paging" title="Paging">Paging</a></b> is enabled). This is the case if your code has just been booted by <a href="GRUB" title="GRUB">GRUB</a>, for instance. In the <b><a href="System_V_ABI" title="System V ABI">System V ABI</a></b>, arguments are passed on reverse order in the stack, so a function that can be called as <tt>setGdt(limit, base)</tt> might look like the following example code.
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">gdtr</span><span class="w"> </span><span class="no">DW</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="c1">; For limit storage</span>
<span class="w">     </span><span class="nf">DD</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="c1">; For base storage</span>

<span class="nl">setGdt:</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="no">AX</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">esp</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="mi">4</span><span class="p">]</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="p">[</span><span class="no">gdtr</span><span class="p">],</span><span class="w"> </span><span class="no">AX</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="no">EAX</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">ESP</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="mi">8</span><span class="p">]</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="p">[</span><span class="no">gdtr</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="mi">2</span><span class="p">],</span><span class="w"> </span><span class="no">EAX</span><span class="w"></span>
<span class="w">   </span><span class="nf">LGDT</span><span class="w">  </span><span class="p">[</span><span class="no">gdtr</span><span class="p">]</span><span class="w"></span>
<span class="w">   </span><span class="nf">RET</span><span class="w"></span>
</pre></div>
<h4><span id="Protected_Mode.2C_Non-Flat_Model"></span><span class="mw-headline" id="Protected_Mode,_Non-Flat_Model">Protected Mode, Non-Flat Model</span></h4>
<p>If your data segment has a non-zero base, you'll have to adjust the instructions of the sequence above to include the ability to add the base offset of your data segment, which should be a known value to you. You can pass it in as an argument and call this function as <tt>setGdt(limit, base, offset)</tt>.
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">gdtr</span><span class="w"> </span><span class="no">DW</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="c1">; For limit storage</span>
<span class="w">     </span><span class="nf">DD</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="c1">; For base storage</span>

<span class="nl">setGdt:</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="no">AX</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">esp</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="mi">4</span><span class="p">]</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="p">[</span><span class="no">gdtr</span><span class="p">],</span><span class="w"> </span><span class="no">AX</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="no">EAX</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">ESP</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="mi">8</span><span class="p">]</span><span class="w"></span>
<span class="w">   </span><span class="nf">ADD</span><span class="w">   </span><span class="no">EAX</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">ESP</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="mi">12</span><span class="p">]</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="p">[</span><span class="no">gdtr</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="mi">2</span><span class="p">],</span><span class="w"> </span><span class="no">EAX</span><span class="w"></span>
<span class="w">   </span><span class="nf">LGDT</span><span class="w">  </span><span class="p">[</span><span class="no">gdtr</span><span class="p">]</span><span class="w"></span>
<span class="w">   </span><span class="nf">RET</span><span class="w"></span>
</pre></div>
<h4><span class="mw-headline" id="Long_Mode">Long Mode</span></h4>
<p>In <b><a href="Long_Mode" class="mw-redirect" title="Long Mode">Long Mode</a></b>, the length of the <b>Base</b> field is 8 bytes, rather than 4. As well, the <b><a href="System_V_ABI" title="System V ABI">System V ABI</a></b> passes the first two arguments via the <b>RDI</b> and <b>RSI</b> registers. Thus, this example code can be called as <tt>setGdt(limit, base)</tt>. As well, only a flat model is possible in long mode, so no considerations have to be made otherwise.
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">gdtr</span><span class="w"> </span><span class="no">DW</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="c1">; For limit storage</span>
<span class="w">     </span><span class="nf">DQ</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="c1">; For base storage</span>

<span class="nl">setGdt:</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="p">[</span><span class="no">gdtr</span><span class="p">],</span><span class="w"> </span><span class="no">DI</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="p">[</span><span class="no">gdtr</span><span class="err">+</span><span class="mi">2</span><span class="p">],</span><span class="w"> </span><span class="no">RSI</span><span class="w"></span>
<span class="w">   </span><span class="nf">LGDT</span><span class="w">  </span><span class="p">[</span><span class="no">gdtr</span><span class="p">]</span><span class="w"></span>
<span class="w">   </span><span class="nf">RET</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="Reload_Segment_Registers">Reload Segment Registers</span></h3>
<p>Whatever you do with the <b>GDT</b> has no effect on the CPU until you load new <b>Segment Selectors</b> into <b>Segment Registers</b>. For most of these registers, the process is as simple as using <b>MOV</b> instructions, but changing the <b>CS</b> register requires code resembling a jump or call to elsewhere, as this is the only way its value is meant to be changed.
</p>
<h4><span class="mw-headline" id="Protected_Mode">Protected Mode</span></h4>
<p>In this case, reloading <b>CS</b> is as simple as performing a far jump to the required segment, directly after the jump instruction:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nl">reloadSegments:</span><span class="w"></span>
<span class="w">   </span><span class="c1">; Reload CS register containing code selector:</span>
<span class="w">   </span><span class="nf">JMP</span><span class="w">   </span><span class="mi">0x08</span><span class="p">:.</span><span class="no">reload_CS</span><span class="w"> </span><span class="c1">; 0x08 is a stand-in for your code segment</span>
<span class="nl">.reload_CS:</span><span class="w"></span>
<span class="w">   </span><span class="c1">; Reload data segment registers:</span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="no">AX</span><span class="p">,</span><span class="w"> </span><span class="mi">0x10</span><span class="w"> </span><span class="c1">; 0x10 is a stand-in for your data segment</span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="no">DS</span><span class="p">,</span><span class="w"> </span><span class="no">AX</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="no">ES</span><span class="p">,</span><span class="w"> </span><span class="no">AX</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="no">FS</span><span class="p">,</span><span class="w"> </span><span class="no">AX</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="no">GS</span><span class="p">,</span><span class="w"> </span><span class="no">AX</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="no">SS</span><span class="p">,</span><span class="w"> </span><span class="no">AX</span><span class="w"></span>
<span class="w">   </span><span class="nf">RET</span><span class="w"></span>
</pre></div>
<p>An explanation of the above code can be found <a rel="nofollow" class="external text" href="http://stackoverflow.com/questions/23978486/far-jump-in-gdt-in-bootloader">here</a>.
</p>
<h4><span class="mw-headline" id="Long_Mode_2">Long Mode</span></h4>
<p>In <b><a href="Long_Mode" class="mw-redirect" title="Long Mode">Long Mode</a></b> the process of changing <b>CS</b> is not simple as far jumps cannot be used. Using a far return is recommended instead:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nl">reloadSegments:</span><span class="w"></span>
<span class="w">   </span><span class="c1">; Reload CS register:</span>
<span class="w">   </span><span class="nf">PUSH</span><span class="w"> </span><span class="mi">0x08</span><span class="w">                 </span><span class="c1">; Push code segment to stack, 0x08 is a stand-in for your code segment</span>
<span class="w">   </span><span class="nf">LEA</span><span class="w"> </span><span class="no">RAX</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">rel</span><span class="w"> </span><span class="no">.reload_CS</span><span class="p">]</span><span class="w"> </span><span class="c1">; Load address of .reload_CS into RAX</span>
<span class="w">   </span><span class="nf">PUSH</span><span class="w"> </span><span class="no">RAX</span><span class="w">                  </span><span class="c1">; Push this value to the stack</span>
<span class="w">   </span><span class="nf">RETFQ</span><span class="w">                     </span><span class="c1">; Perform a far return, RETFQ or LRETQ depending on syntax</span>
<span class="nl">.reload_CS:</span><span class="w"></span>
<span class="w">   </span><span class="c1">; Reload data segment registers</span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="no">AX</span><span class="p">,</span><span class="w"> </span><span class="mi">0x10</span><span class="w"> </span><span class="c1">; 0x10 is a stand-in for your data segment</span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="no">DS</span><span class="p">,</span><span class="w"> </span><span class="no">AX</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="no">ES</span><span class="p">,</span><span class="w"> </span><span class="no">AX</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="no">FS</span><span class="p">,</span><span class="w"> </span><span class="no">AX</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="no">GS</span><span class="p">,</span><span class="w"> </span><span class="no">AX</span><span class="w"></span>
<span class="w">   </span><span class="nf">MOV</span><span class="w">   </span><span class="no">SS</span><span class="p">,</span><span class="w"> </span><span class="no">AX</span><span class="w"></span>
<span class="w">   </span><span class="nf">RET</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="The_LDT">The LDT</span></h2>
<p>Much like the GDT (global descriptor table), the LDT (<i>local</i> descriptor table) contains descriptors for memory segments description, call gates, etc. The good thing with the LDT is that each task can have its own LDT and that the processor will automatically switch to the right LDT when you use hardware task switching.
</p><p>Since its content may be different in each task, the LDT is not a suitable place to put system stuff such as TSS or other LDT descriptors: Those are the sole property of the GDT. Since it is meant to change often, the command used for loading an LDT is a bit different from the GDT and IDT loading. Rather than giving directly the LDT's base address and size, those parameters are stored in a descriptor of the GDT (with proper "LDT" type) and the selector of that entry is given.
</p>
<pre>               GDTR (base + limit)
              +-- GDT ------------+
              |                   |
SELECTOR ---&gt; [LDT descriptor     ]----&gt; LDTR (base + limit)
              |                   |     +-- LDT ------------+
              |                   |     |                   |
             ...                 ...   ...                 ...
              +-------------------+     +-------------------+
</pre>
<p>Note that with 386+ processors, the paging has made LDT almost obsolete, and there's no longer need for multiple LDT descriptors, so you can almost safely ignore the LDT for OS developing, unless you have by design many different segments to store.
</p>
<h2><span id="The_IDT_and_why_it.27s_needed"></span><span class="mw-headline" id="The_IDT_and_why_it's_needed">The IDT and why it's needed</span></h2>
<p>As said above, the IDT (Interrupt Descriptor Table) loads much the same way as the GDT and its structure is roughly the same except that it only contains gates and not segments. Each gate gives a full reference to a piece of code (code segment, privilege level and offset to the code in that segment) that is now bound to a number between 0 and 255 (the slot in the IDT).
</p><p>The IDT will be one of the first things to be enabled in your kernel sequence, so that you can catch hardware exceptions, listen to external events, etc. See <a href="Interrupts" title="Interrupts">Interrupts</a> for more information about the interrupts of X86 family.
</p>
<h2><span class="mw-headline" id="Some_stuff_to_make_your_life_easy">Some stuff to make your life easy</span></h2>
<p>Tool for easily creating GDT entries.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">// Used for creating GDT segment descriptors in 64-bit integer form.</span>
<span class="w"> </span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdint.h&gt;</span><span class="cp"></span>
<span class="w"> </span>
<span class="c1">// Each define here is for a specific flag in the descriptor.</span>
<span class="c1">// Refer to the intel documentation for a description of what each one does.</span>
<span class="cp">#define SEG_DESCTYPE(x)  ((x) &lt;&lt; 0x04) </span><span class="c1">// Descriptor type (0 for system, 1 for code/data)</span>
<span class="cp">#define SEG_PRES(x)      ((x) &lt;&lt; 0x07) </span><span class="c1">// Present</span>
<span class="cp">#define SEG_SAVL(x)      ((x) &lt;&lt; 0x0C) </span><span class="c1">// Available for system use</span>
<span class="cp">#define SEG_LONG(x)      ((x) &lt;&lt; 0x0D) </span><span class="c1">// Long mode</span>
<span class="cp">#define SEG_SIZE(x)      ((x) &lt;&lt; 0x0E) </span><span class="c1">// Size (0 for 16-bit, 1 for 32)</span>
<span class="cp">#define SEG_GRAN(x)      ((x) &lt;&lt; 0x0F) </span><span class="c1">// Granularity (0 for 1B - 1MB, 1 for 4KB - 4GB)</span>
<span class="cp">#define SEG_PRIV(x)     (((x) &amp;  0x03) &lt;&lt; 0x05)   </span><span class="c1">// Set privilege level (0 - 3)</span>
<span class="w"> </span>
<span class="cp">#define SEG_DATA_RD        0x00 </span><span class="c1">// Read-Only</span>
<span class="cp">#define SEG_DATA_RDA       0x01 </span><span class="c1">// Read-Only, accessed</span>
<span class="cp">#define SEG_DATA_RDWR      0x02 </span><span class="c1">// Read/Write</span>
<span class="cp">#define SEG_DATA_RDWRA     0x03 </span><span class="c1">// Read/Write, accessed</span>
<span class="cp">#define SEG_DATA_RDEXPD    0x04 </span><span class="c1">// Read-Only, expand-down</span>
<span class="cp">#define SEG_DATA_RDEXPDA   0x05 </span><span class="c1">// Read-Only, expand-down, accessed</span>
<span class="cp">#define SEG_DATA_RDWREXPD  0x06 </span><span class="c1">// Read/Write, expand-down</span>
<span class="cp">#define SEG_DATA_RDWREXPDA 0x07 </span><span class="c1">// Read/Write, expand-down, accessed</span>
<span class="cp">#define SEG_CODE_EX        0x08 </span><span class="c1">// Execute-Only</span>
<span class="cp">#define SEG_CODE_EXA       0x09 </span><span class="c1">// Execute-Only, accessed</span>
<span class="cp">#define SEG_CODE_EXRD      0x0A </span><span class="c1">// Execute/Read</span>
<span class="cp">#define SEG_CODE_EXRDA     0x0B </span><span class="c1">// Execute/Read, accessed</span>
<span class="cp">#define SEG_CODE_EXC       0x0C </span><span class="c1">// Execute-Only, conforming</span>
<span class="cp">#define SEG_CODE_EXCA      0x0D </span><span class="c1">// Execute-Only, conforming, accessed</span>
<span class="cp">#define SEG_CODE_EXRDC     0x0E </span><span class="c1">// Execute/Read, conforming</span>
<span class="cp">#define SEG_CODE_EXRDCA    0x0F </span><span class="c1">// Execute/Read, conforming, accessed</span>
<span class="w"> </span>
<span class="cp">#define GDT_CODE_PL0 SEG_DESCTYPE(1) | SEG_PRES(1) | SEG_SAVL(0) | \</span>
<span class="cp">                     SEG_LONG(0)     | SEG_SIZE(1) | SEG_GRAN(1) | \</span>
<span class="cp">                     SEG_PRIV(0)     | SEG_CODE_EXRD</span>
<span class="w"> </span>
<span class="cp">#define GDT_DATA_PL0 SEG_DESCTYPE(1) | SEG_PRES(1) | SEG_SAVL(0) | \</span>
<span class="cp">                     SEG_LONG(0)     | SEG_SIZE(1) | SEG_GRAN(1) | \</span>
<span class="cp">                     SEG_PRIV(0)     | SEG_DATA_RDWR</span>
<span class="w"> </span>
<span class="cp">#define GDT_CODE_PL3 SEG_DESCTYPE(1) | SEG_PRES(1) | SEG_SAVL(0) | \</span>
<span class="cp">                     SEG_LONG(0)     | SEG_SIZE(1) | SEG_GRAN(1) | \</span>
<span class="cp">                     SEG_PRIV(3)     | SEG_CODE_EXRD</span>
<span class="w"> </span>
<span class="cp">#define GDT_DATA_PL3 SEG_DESCTYPE(1) | SEG_PRES(1) | SEG_SAVL(0) | \</span>
<span class="cp">                     SEG_LONG(0)     | SEG_SIZE(1) | SEG_GRAN(1) | \</span>
<span class="cp">                     SEG_PRIV(3)     | SEG_DATA_RDWR</span>
<span class="w"> </span>
<span class="kt">void</span><span class="w"></span>
<span class="nf">create_descriptor</span><span class="p">(</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">base</span><span class="p">,</span><span class="w"> </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">limit</span><span class="p">,</span><span class="w"> </span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">flag</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint64_t</span><span class="w"> </span><span class="n">descriptor</span><span class="p">;</span><span class="w"></span>
<span class="w"> </span>
<span class="w">    </span><span class="c1">// Create the high 32 bit segment</span>
<span class="w">    </span><span class="n">descriptor</span><span class="w">  </span><span class="o">=</span><span class="w">  </span><span class="n">limit</span><span class="w">       </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x000F0000</span><span class="p">;</span><span class="w">         </span><span class="c1">// set limit bits 19:16</span>
<span class="w">    </span><span class="n">descriptor</span><span class="w"> </span><span class="o">|=</span><span class="w"> </span><span class="p">(</span><span class="n">flag</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w">  </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x00F0FF00</span><span class="p">;</span><span class="w">         </span><span class="c1">// set type, p, dpl, s, g, d/b, l and avl fields</span>
<span class="w">    </span><span class="n">descriptor</span><span class="w"> </span><span class="o">|=</span><span class="w"> </span><span class="p">(</span><span class="n">base</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">16</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x000000FF</span><span class="p">;</span><span class="w">         </span><span class="c1">// set base bits 23:16</span>
<span class="w">    </span><span class="n">descriptor</span><span class="w"> </span><span class="o">|=</span><span class="w">  </span><span class="n">base</span><span class="w">        </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFF000000</span><span class="p">;</span><span class="w">         </span><span class="c1">// set base bits 31:24</span>
<span class="w"> </span>
<span class="w">    </span><span class="c1">// Shift by 32 to allow for low part of segment</span>
<span class="w">    </span><span class="n">descriptor</span><span class="w"> </span><span class="o">&lt;&lt;=</span><span class="w"> </span><span class="mi">32</span><span class="p">;</span><span class="w"></span>
<span class="w"> </span>
<span class="w">    </span><span class="c1">// Create the low 32 bit segment</span>
<span class="w">    </span><span class="n">descriptor</span><span class="w"> </span><span class="o">|=</span><span class="w"> </span><span class="n">base</span><span class="w">  </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">16</span><span class="p">;</span><span class="w">                       </span><span class="c1">// set base bits 15:0</span>
<span class="w">    </span><span class="n">descriptor</span><span class="w"> </span><span class="o">|=</span><span class="w"> </span><span class="n">limit</span><span class="w">  </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x0000FFFF</span><span class="p">;</span><span class="w">               </span><span class="c1">// set limit bits 15:0</span>
<span class="w"> </span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;0x%.16llX</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">descriptor</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
<span class="w"> </span>
<span class="kt">int</span><span class="w"></span>
<span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">create_descriptor</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">create_descriptor</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mh">0x000FFFFF</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">GDT_CODE_PL0</span><span class="p">));</span><span class="w"></span>
<span class="w">    </span><span class="n">create_descriptor</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mh">0x000FFFFF</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">GDT_DATA_PL0</span><span class="p">));</span><span class="w"></span>
<span class="w">    </span><span class="n">create_descriptor</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mh">0x000FFFFF</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">GDT_CODE_PL3</span><span class="p">));</span><span class="w"></span>
<span class="w">    </span><span class="n">create_descriptor</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mh">0x000FFFFF</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">GDT_DATA_PL3</span><span class="p">));</span><span class="w"></span>
<span class="w"> </span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<h3><span class="mw-headline" id="Articles">Articles</span></h3>
<ul><li><a href="Global_Descriptor_Table" title="Global Descriptor Table">Global Descriptor Table</a></li>
<li><a rel="nofollow" class="external free" href="http://web.archive.org/web/20190424213806/http://www.osdever.net/tutorials/view/the-world-of-protected-mode">http://web.archive.org/web/20190424213806/http://www.osdever.net/tutorials/view/the-world-of-protected-mode</a> - how to set up GDT in assembler</li></ul>
<h3><span class="mw-headline" id="Threads">Threads</span></h3>
<h3><span class="mw-headline" id="External_Links">External Links</span></h3>
<!-- 
NewPP limit report
Cached time: 20250212010420
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.077 seconds
Real time usage: 1.139 seconds
Preprocessor visited node count: 208/1000000
Post‐expand include size: 340/2097152 bytes
Template argument size: 44/2097152 bytes
Highest expansion depth: 15/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 30870/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    3.796      1 Template:Rating
100.00%    3.796      1 -total
 81.90%    3.109      2 Template:If
 67.86%    2.576      2 Template:Show1
 22.45%    0.852      2 Template:Eq
 10.35%    0.393      2 Template:Eq1
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1531-0!canonical and timestamp 20250212010419 and revision id 28705.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=GDT_Tutorial&amp;oldid=28705">https://wiki.osdev.org/index.php?title=GDT_Tutorial&amp;oldid=28705</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_duplicate_arguments_in_template_calls&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using duplicate arguments in template calls (page does not exist)">Pages using duplicate arguments in template calls</a></li><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Level_1_Tutorials" title="Category:Level 1 Tutorials">Level 1 Tutorials</a></li><li><a href="./Category:Tutorials" title="Category:Tutorials">Tutorials</a></li><li><a href="./Category:X86_CPU" title="Category:X86 CPU">X86 CPU</a></li><li><a href="./Category:Memory_Segmentation" title="Category:Memory Segmentation">Memory Segmentation</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=GDT+Tutorial" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="GDT_Tutorial#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="GDT_Tutorial" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:GDT_Tutorial" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="GDT_Tutorial"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=GDT_Tutorial&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=GDT_Tutorial&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/GDT_Tutorial" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="./Special:RecentChangesLinked/GDT_Tutorial" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=GDT_Tutorial&amp;oldid=28705" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=GDT_Tutorial&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 19 March 2024, at 15:43.</li>
	<li id="footer-info-0">This page has been accessed 35,927 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=GDT_Tutorial&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.077","walltime":"1.139","ppvisitednodes":{"value":208,"limit":1000000},"postexpandincludesize":{"value":340,"limit":2097152},"templateargumentsize":{"value":44,"limit":2097152},"expansiondepth":{"value":15,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":30870,"limit":5000000},"timingprofile":["100.00%    3.796      1 Template:Rating","100.00%    3.796      1 -total"," 81.90%    3.109      2 Template:If"," 67.86%    2.576      2 Template:Show1"," 22.45%    0.852      2 Template:Eq"," 10.35%    0.393      2 Template:Eq1"]},"cachereport":{"timestamp":"20250212010420","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":1241});});</script>
</body>
</html>