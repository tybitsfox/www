<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>PinePhone/DRAM initialization - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"cef95b4d50d00e42b6c4aec3","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"PinePhone/DRAM_initialization","wgTitle":"PinePhone/DRAM initialization","wgCurRevisionId":28311,"wgRevisionId":28311,"wgArticleId":4718,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":[],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"PinePhone/DRAM_initialization","wgRelevantArticleId":4718,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],
"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="../favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="../opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="../api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-PinePhone_DRAM_initialization rootpage-PinePhone_DRAM_initialization skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">PinePhone/DRAM initialization</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="DRAM_initialization#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="DRAM_initialization#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>There are two things we have to do here: (1) enable the DRAM controller module's clock and reset; (2) configure the DRAM controller.
</p><p><b>License warning</b>: the sequence of operations needed was derived from U-boot, but is written here in the author's own code. In the author's opinion, since only the facts and not the code are derived, U-boot's license (GPL) doesn't carry over. Note there is <b>no way</b> to know what registers to write, other than copying what Allwinner ultimately provided, detailed hardware reverse-engineering, or an extremely lucky guess.
</p><p><b>Quality warning</b>: the code here got DRAM to work for the author, but actual correctness is not guaranteed. Especially since the entire DRAM controller is barely documented (in the comments of u-boot and linux drivers), we might be close to some threshold of unreliablity without knowing.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="DRAM_initialization#Power_up_DRAM_controller"><span class="tocnumber">1</span> <span class="toctext">Power up DRAM controller</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="DRAM_initialization#Configure_DRAM_controller"><span class="tocnumber">2</span> <span class="toctext">Configure DRAM controller</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="DRAM_initialization#Detecting_memory_size"><span class="tocnumber">3</span> <span class="toctext">Detecting memory size</span></a>
<ul>
<li class="toclevel-2 tocsection-4"><a href="DRAM_initialization#Controller_memory_size_registers"><span class="tocnumber">3.1</span> <span class="toctext">Controller memory size registers</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="DRAM_initialization#Accessing_the_top_1GB_on_the_convergence_package"><span class="tocnumber">3.2</span> <span class="toctext">Accessing the top 1GB on the convergence package</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="DRAM_initialization#Crossbar_priority"><span class="tocnumber">3.3</span> <span class="toctext">Crossbar priority</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Power_up_DRAM_controller">Power up DRAM controller</span></h2>
<p>This part is documented in the A64 User Manual so it's pretty safe 
</p>
<pre>#define U32_REG(addr) (*(volatile uint32_t*)(addr))

#define PLL_DDR0_CTRL_REG U32_REG(0x01C20020)
#define PLL_DDR0_ENABLE_FLAG 0x80000000

#define PLL_DDR1_CTRL_REG U32_REG(0x01C2004C)
#define PLL_DDR1_ENABLE_FLAG 0x80000000
#define PLL_DDR1_UPDATE_FLAG 0x40000000
#define PLL_DDR1_FACTOR_N(n) ((((n) - 1) &lt;&lt; 8) &amp; 0x3F00)

#define MBUS_RST_REG U32_REG(0x01C200FC)
#define MBUS_RST_RELEASE 0x80000000 // zero value means reset, this flag means not reset

#define MBUS_CLK_REG U32_REG(0x01C2015C)
#define MBUS_CLK_CLOCK_ENABLE 0x80000000

#define BUS_CLK_GATING_REG0 U32_REG(0x01C20060)
#define BUS_CLK_RESET_RELEASE_REG0 U32_REG(0x01C202C0) // same bitfields
#define BUS_CLK_REG0_DRAM_GATING 0x00004000

#define DRAM_CFG_REG U32_REG(0x01C200F4)
#define DRAM_CFG_RESET_RELEASE 0x80000000
#define DRAM_CFG_SRC_PLL_DDR1 0x00100000
#define DRAM_CFG_UPDATE_FLAG 0x00010000

static void dsb() {
	// wait for all outstanding memory accesses to complete before continuing.
	// Probably not actually the right thing to do in most cases!
	__asm__ __volatile__("dsb"&#160;::: "memory");
}
static void delay() {
	for(volatile int i = 0; i &lt; 0x1000; i++) {}
}

static void delay() {
	int n = 0x1000;
	while(n--) {
		__asm__ __volatile__(""&#160;: "=r"(n)&#160;: "0"(n)&#160;: "memory");
	}
}

void dram_clock_init()
{
	// A64 User Manual 3.3.6.4. says we should always release reset before releasing clock gate. So logically we should do the reverse order when disabling a clock.
	MBUS_CLK_REG &amp;= ~MBUS_CLK_CLOCK_ENABLE; // disable MBUS clock
	BUS_CLK_GATING_REG0 &amp;= ~BUS_CLK_REG0_DRAM_GATING; // disable DRAM clock
	PLL_DDR0_CTRL_REG &amp;= ~PLL_DDR0_ENABLE_FLAG; // disable DRAM clock (maybe)
	PLL_DDR1_CTRL_REG &amp;= ~PLL_DDR1_ENABLE_FLAG; // disable DRAM clock (maybe)
	MBUS_RST_REG &amp;= ~MBUS_RST_RELEASE; // assert MBUS reset
	BUS_CLK_RESET_RELEASE_REG0 &amp;= ~BUS_CLK_REG0_DRAM_GATING; // assert DRAM reset
	// shouldn't we disable the DRAM controller clock?
	DRAM_CFG_REG &amp;= ~DRAM_CFG_RESET_RELEASE; // assert DRAM controller reset
	dsb();

	// N factor calculation:
	// 553MHz DDR clock; *2 because the DRAM controller internal clock apparently runs at DDR (not surprising I guess)
	// divided by the 24MHz base clock which is apparently the input to the PLL
	// gives 553*2/24 = 46.083, rounded to 46 (which gives 552MHz)
	// note the value in register is this -1 (see the macro) so it's 45 to give an actual divisor of 46
	// note the DDR register values are also calculated based on the 553MHz clock speed
	PLL_DDR1_CTRL_REG = PLL_DDR1_ENABLE_FLAG | PLL_DDR1_UPDATE_FLAG | PLL_DDR1_FACTOR_N(46);

	// Then wait for the PLL change to be processed by the hardware. (Does this wait for the PLL to actually lock? Not clear)
	while (PLL_DDR1_CTRL_REG &amp; PLL_DDR1_UPDATE_FLAG) {}

	// there's also a clock divisor in this register; default (zero value) is divide-by-1
	DRAM_CFG_REG = DRAM_CFG_SRC_PLL_DDR1 | DRAM_CFG_UPDATE_FLAG;
	while(DRAM_CFG_REG &amp; DRAM_CFG_UPDATE_FLAG) {}

	// as mentioned, A64 User Manual 3.3.6.4. says we should always release reset before releasing clock gate.
	MBUS_RST_REG |= MBUS_RST_RELEASE; // release MBUS reset
	MBUS_CLK_REG |= MBUS_CLK_CLOCK_ENABLE; // enable MBUS clock
	BUS_CLK_RESET_RELEASE_REG0 |= BUS_CLK_REG0_DRAM_GATING; // release DRAM reset
	BUS_CLK_GATING_REG0 |= BUS_CLK_REG0_DRAM_GATING; // enable DRAM clock

	// apparently that rule does not apply to this one. Perhaps because the clock enable is inside the block (next register)
	DRAM_CFG_REG |= DRAM_CFG_RESET_RELEASE; // release DRAM controller reset

	U32_REG(0x01C6300C) = 0x0000c00e; // enable DRAM controller clock via undocumented register
	// Some kind of readiness check. If we don't wait for this, MCTL_PGSR0_REG&amp;1 never becomes true. u-boot uses a fixed delay, not this register
	while(U32_REG(0x01C63018) == 0) {}
}

</pre>
<h2><span class="mw-headline" id="Configure_DRAM_controller">Configure DRAM controller</span></h2>
<p>According to the A64 User Manual, the DRAM controller initializes itself automatically. <i>Compared to some other processors</i>, this is true. On some other platforms, software has to measure the delay on every wire between the memory chip and the CPU chip, and then decide the optimal delays and tell the DRAM controller how much delay to add to make them all equal. On A64 we don't have to do that, but we still have a bunch of undocumented registers to set...
</p><p>Here's the sequence - just the raw register writes and magic numbers to make the controller work.
This might be expanded once more is known about the controller. Actually this was distilled down from u-boot, losing a lot of documentation in the process.
</p>
<pre>// All identifiers and comments in this code were written for the wiki page or based on the A64 manual.
// It is the author's opinion that this code no longer contains any copyrightable material from u-boot.

#define U32_REG(addr) (*(volatile uint32_t*)(addr))
#define MCTL_CR0_REG U32_REG(0x01C62000)
#define MCTL_CR1_REG U32_REG(0x01C62004)
#define MCTL_PIR_REG U32_REG(0x01C63000)
#define MCTL_PGSR0_REG U32_REG(0x01C63010)

static const unsigned char AC_DELAYS[] =
	{5, 5, 13, 10, 2, 5, 3, 3, 0, 3, 3, 3, 1, 0, 0, 0, 3, 4, 0, 3, 4, 1, 4, 0, 1, 1, 0, 1, 13, 5, 4};

static const unsigned short READ_AND_WRITE_DELAYS[4][11] =
	{{0x0010, 0x0010, 0x0010, 0x0010, 0x0011, 0x0010, 0x0010, 0x0011, 0x0010, 0x0f01, 0x0f00},
	 {0x0011, 0x0011, 0x0011, 0x0011, 0x0111, 0x0111, 0x0111, 0x0111, 0x0011, 0x0a01, 0x0a00},
	 {0x0110, 0x0011, 0x0111, 0x0110, 0x0110, 0x0110, 0x0110, 0x0110, 0x0010, 0x0b00, 0x0b00},
	 {0x0111, 0x0011, 0x0011, 0x0111, 0x0111, 0x0111, 0x0111, 0x0111, 0x0011, 0x0c01, 0x0c00}};

static void memcpy32(u32 dst_, const u32 *src, size_t nregs)
{
	u32 *dst = (u32*)dst_;
	while(nregs--) {
		*dst++ = *src++;
	}
}

static void init_dram_controller()
{
	MCTL_CR1_REG = MCTL_CR0_REG = 0x004f19f4;

	memcpy32(0x01C63034, (const u32[]){0xc3, 0xa, 0x2}, 3);
	memcpy32(0x01C63050, (const u32[]){0x0381b009, 0x22a017c4, 0x0d0e180c, 0x00030314, 0x03060d0b, 0x0005500c, 0x07020308, 0x0505050c}, 8);
	U32_REG(0x01C63078) = 0x90006610;
	U32_REG(0x01C63080) = 0x02050102;
	U32_REG(0x01C63090) = 0x0021003a;

	U32_REG(0x01C63100) = 0x04005400;
	U32_REG(0x016C3104) = 0x4680c620; // This is probably a typo for 0x01C63104. This code was tested WITH the typo. Maybe you can fix this typo and see if it changes anything, then add some information here.

	U32_REG(0x01C63208) = 0x0000034A;
	U32_REG(0x01C63108) = 0x000008C0;

	U32_REG(0x01C63100) = 0x00005400; // unlock access to bit delay registers?

	// bytewise bit delay line timing. Low byte delay when reading, high byte delay when writing
	for (int i = 0; i &lt; 4; i++)
		for (int j = 0; j &lt; 11; j++) // DQ0-7, then DM, DQS, DQSN
			U32_REG(0x01C63310 + (i&lt;&lt;7) + (j&lt;&lt;2)) = READ_AND_WRITE_DELAYS[i][j];

	// command/address bit delay line timing
	for (int i = 0; i &lt; 31; i++)
		*(u32*)(0x01C63210 + (i&lt;&lt;2)) = AC_DELAYS[i] &lt;&lt; 8;

	__asm__ __volatile__("dsb"&#160;::: "memory"); // not sure if necessary. Isn't cache disabled at this point?
	U32_REG(0x01C63100) = 0x04005400; // re-lock access to bit delay registers?

	U32_REG(0x01C63140) = 0x013b3bdd;

	MCTL_PIR_REG = 0x5F3;
	while(!(MCTL_PGSR0_REG &amp; 1)) {}

	// if any of these bits are set, u-boot does some stuff that doesn't make any sense. Let's skip over that.
	assert((MCTL_PGSR0_REG &amp; 0x0fe00000) == 0);

	while(!(U32_REG(0x01C63018) &amp; 1)) {}

	U32_REG(0x01C6310C) = 0xc0aa0060;
	U32_REG(0x01C63140) = 0x817b7bfc;

	U32_REG(0x01C63120) = 0x00000303;
	U32_REG(0x01C630B8) = 0x0000021f;
	U32_REG(0x01C620D0) = 0x80103040; // if you forget this, accessing DRAM will hang.
}
</pre>
<h2><span class="mw-headline" id="Detecting_memory_size">Detecting memory size</span></h2>
<p>Memory address consists of concatenated rank, row, bank, column, and column width.
<b>ALL OF THESE</b> must be set correctly.
They can also be set too low, but then the memory controller doesn't know about all of your memory.
</p><p>So e.g. if you have 2 ranks, 12 row bits, 8 banks, and 12 column bits, the physical RAM address looks like this:
</p>
<pre> 3 3 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0
 1 0 9 8 7 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|XXXXXXXXX|R|          row          | bank|       column      |wid|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 ^^^^^^^^^ ^
 ignored   rank
</pre>
<p>Detecting the width of one of these parts consists of configuring the memory controller, writing a value at address N, then a different value at address N+(1&lt;&lt;SHIFT) and detecting whether it overwrote address N. If it overwrote the address, it means the memory controller is trying to use bits that aren't wired up to anything.
</p><p>For example if we tell the controller there are 11 column bits, but actually there are only 8, then our address layout is like this:
</p>
<pre> 3 3 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0
 1 0 9 8 7 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|XXXXXXX|R|          row          | bank|XXXXX|     column    |wid|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</pre>
<p>If we write address 0x444 the memory controller will access rank 0, row 0, bank 0, column 0x111, however since there are only 8 column bits in the RAM chip, it will access column 0x11, the same as address 0x044. By detecting that 0x444 and 0x044 access the same byte of memory, we know the RAM chip has less than 11 column bits. Of course, if we correctly configure the controller for 8 column bits, the 0x400 bit will be one of the bank bits, and then we use the same procedure to detect the size of the bank address and then the row address.
</p><p>There's one other thing to note: each rank can have a different number of row+bank+column bits.
</p><p>All PinePhones have 2 identical ranks (1 bit), 8 banks (3 bits), and a 4-byte column width (2 bits) which is hard-wired. So you can skip detecting those if you want. Indeed the init code above has the rank detection stripped out.
</p><p>From the CPU's point of view the RAM starts at CPU address 0x40000000. If the CPU accesses address 0x40000000 it will go to address 0x00000000 on the RAM chip. Address 0x80000000 goes to address 0x40000000 on the RAM chip, 0xFFFFFFFF goes to RAM address 0xBFFFFFFF, etc.
</p><p><br />
</p><p>The memory chip is different depending on whether you got the "convergence package" or not.<br />
Non-convergence package: you have the following chip with 2GB of memory. <a rel="nofollow" class="external text" href="http://files.pine64.org/doc/datasheet/pinephone/ATL3A1632H12A_mobile_lpddr3_11x11.5_v1.0_1600.pdf">Datasheet</a><br />
Convergence package: you have an unknown one with 4GB of memory.<br />
You might notice that despite having a 4GB RAM chip you can only access 3GB because the CPU can't go above address 0xFFFFFFFF which corresponds to 3GB-1 on the RAM chip. That's why the convergence package phone is advertised as 3GB despite having a 4GB chip.
</p><p>According to the datasheet, on the non-convergence package it should be 15 row bits, 10 column bits.<br />
The convergence package seems to also be 15 row bits which means it presumably has 11 column bits.
</p>
<h3><span class="mw-headline" id="Controller_memory_size_registers">Controller memory size registers</span></h3>
<pre> 
          31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
Rank 0   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
01C62000 |?????????????????|25|?????|BL|21|20|1T|  type  |SQ|?????|FW|    page   |    row    |??|8B|01|DR|
         +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

Rank 1   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
01C62004 |???????????????????????????????????????????????????????????|    page   |    row    |??|8B|?????|
         +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

All&#160;??s should be set to 0 but may have unknown function.

BL: unknown. Full name "BL8". Set to true on the Pinephone.
25: if set, accessing rank 1 hangs the CPU
21, 20: should be 0. Playing with these bits caused random inversions of bit 4 of the address, even after setting them back to the normal 0 value. This condition ended with DRAM controller power-cycle. Also sometimes the CPU hangs.
1T: unknown. Set to 1 on the Pinephone. "1T" is official name. If set to 0, mode is "2T"
type: Select memory type. Set to 7 (LPDDR3) on the Pinephone.
  2: DDR2. 3: DDR3. 6: LPDDR2 (i.e. 2|4). 7: LPDDR3 (i.e. 3|4).
SQ: sequential mode. Set to 0 on the Pinephone.
  Unknown effect
FW: full-width. Set to true on the Pinephone.
  If you set it to false, the controller only accesses the bottom 16 bits out of each 32-bit word,
  and does two accesses to complete a 32-bit access. TODO: figure out how this affects the bit layout of addresses.
page: Number of page bits (column + column width), with some bias (I think raw value 0 means 2 page bits, up to raw value 15 means 17 page bits. Maybe it's actually the number of columns not including the width? This is inconsistent with u-boot)
  Minimum (raw) value is 6, maximum is 12. Values outside this range are treated as raw value 7.
row: Number of row bits, with some bias (I think raw value 0 means 1 row bit, up to 15 means 16 row bits)
  Minimum (raw) value is 10, maximum is unknown, possibly 15. Values outside this range are treated as raw value 15.
8B: set to 1 for 8 banks (3 bank bits), 0 for 4 banks (2 bank bits)
01: if set, accessing rank 1 hangs the CPU.
DR: enables second rank (dual-rank mode).

</pre>
<p>Optimum raw values on the convergence package (discovered by brute force): page=10, row=14.<br />
Without the convergence package it's probably page=9, row=13 but this remains to be verified.
</p>
<h3><span class="mw-headline" id="Accessing_the_top_1GB_on_the_convergence_package">Accessing the top 1GB on the convergence package</span></h3>
<p>If you bought the convergence package you have 4GB of RAM, but the 3GB address window on the CPU only allows you to use 3/4 of it normally.
</p><p>But wait - it's divided into two ranks and the memory controller has separate settings for each rank. If we lie to the memory controller and say the lower rank is only 1GB instead of 2GB, now our memory layout divided into GBs looks like this: [internal memory &amp; I/O registers][rank 0 with mangled address pattern][rank 1 first half][rank 1 second half] and we should be able to access the top GB. This wasn't tested yet.
</p><p>If we do it by shrinking the page size, it probably won't break refresh as refresh is row-wise and the memory controller doesn't handle the data during refresh (so it won't only refresh half of each page). This wasn't confirmed yet. Shrinking anything other than the row bits will mangle the address layout of rank 0 due to deleting address bits from the middle, but shrinking the row bits has a risk of breaking refresh (leading to a debugging nightmare six months down the line when RAM randomly loses data). Data to be transferred to/from the upper 1GB would have to be staged in the first half of rank 1 (or a striped pattern in rank 0).
</p><p>This could possibly be used as a swap device, or as main memory, depending on how fast and reliable changing the controller settings is.
</p>
<h3><span class="mw-headline" id="Crossbar_priority">Crossbar priority</span></h3>
<p>The controller includes a priority crossbar switch which allocates memory bandwidth to various clients, such as the CPU, GPU, display output. This is left uninitialized here because it doesn't seem to matter if you just want to run the CPU, however this could lead to starvation for some clients - especially for the display output which has to output pixels at a certain rate or else the display presumably just breaks (black pixels or lost synchronization).
</p>
<!-- 
NewPP limit report
Cached time: 20250211170314
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.007 seconds
Real time usage: 0.008 seconds
Preprocessor visited node count: 43/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 9978/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4718-0!canonical and timestamp 20250211170314 and revision id 28311.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=PinePhone/DRAM_initialization&amp;oldid=28311">https://wiki.osdev.org/index.php?title=PinePhone/DRAM_initialization&amp;oldid=28311</a>"</div></div>
		<div id="catlinks" class="catlinks catlinks-allhidden" data-mw="interface"></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=PinePhone%2FDRAM+initialization" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="DRAM_initialization#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="DRAM_initialization" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:PinePhone/DRAM_initialization&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="DRAM_initialization"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=PinePhone/DRAM_initialization&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=PinePhone/DRAM_initialization&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="../index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="../index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="../Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="../Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="../OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="../OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="../OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="../Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="../Special:WhatLinksHere/PinePhone/DRAM_initialization" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/PinePhone/DRAM_initialization" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="../Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=PinePhone/DRAM_initialization&amp;oldid=28311" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=PinePhone/DRAM_initialization&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 16 September 2023, at 12:45.</li>
	<li id="footer-info-0">This page has been accessed 1,038 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="../OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="../OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="../OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=PinePhone/DRAM_initialization&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="../resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="../resources/assets/poweredby_mediawiki_132x47.png 1.5x, ../resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.007","walltime":"0.008","ppvisitednodes":{"value":43,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":9978,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250211170314","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":109});});</script>
</body>
</html>