<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Intel HD Graphics - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"a5c666919c9b549e6993527d","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Intel_HD_Graphics","wgTitle":"Intel HD Graphics","wgCurRevisionId":28917,"wgRevisionId":28917,"wgArticleId":4023,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Video","Hardware"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Intel_HD_Graphics","wgRelevantArticleId":4023,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false
,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Intel_HD_Graphics rootpage-Intel_HD_Graphics skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Intel HD Graphics</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Intel_HD_Graphics#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Intel_HD_Graphics#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Intel_HD_Graphics#Introduction"><span class="tocnumber">1</span> <span class="toctext">Introduction</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Intel_HD_Graphics#Experimenting_with_the_device"><span class="tocnumber">2</span> <span class="toctext">Experimenting with the device</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Intel_HD_Graphics#Register_Locations_and_Definitions"><span class="tocnumber">3</span> <span class="toctext">Register Locations and Definitions</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="Intel_HD_Graphics#Recommended_reading"><span class="tocnumber">4</span> <span class="toctext">Recommended reading</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="Intel_HD_Graphics#Graphics_Northbridge_and_Southbridge"><span class="tocnumber">5</span> <span class="toctext">Graphics Northbridge and Southbridge</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="Intel_HD_Graphics#PCI_interface_and_graphics_memory"><span class="tocnumber">6</span> <span class="toctext">PCI interface and graphics memory</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="Intel_HD_Graphics#Built-in_display_backlight"><span class="tocnumber">7</span> <span class="toctext">Built-in display backlight</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="Intel_HD_Graphics#Display_detection"><span class="tocnumber">8</span> <span class="toctext">Display detection</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="Intel_HD_Graphics#GMBUS_registers_and_the_EDID"><span class="tocnumber">9</span> <span class="toctext">GMBUS registers and the EDID</span></a>
<ul>
<li class="toclevel-2 tocsection-10"><a href="Intel_HD_Graphics#Getting_the_EDID_from_a_DisplayPort_device"><span class="tocnumber">9.1</span> <span class="toctext">Getting the EDID from a DisplayPort device</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="Intel_HD_Graphics#Display_pipeline_structure"><span class="tocnumber">9.2</span> <span class="toctext">Display pipeline structure</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="Intel_HD_Graphics#Display_Pipes"><span class="tocnumber">9.3</span> <span class="toctext">Display Pipes</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="Intel_HD_Graphics#Display_FDI"><span class="tocnumber">9.4</span> <span class="toctext">Display FDI</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="Intel_HD_Graphics#Display_planes"><span class="tocnumber">9.5</span> <span class="toctext">Display planes</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-15"><a href="Intel_HD_Graphics#Simple_mode_set_sequence"><span class="tocnumber">10</span> <span class="toctext">Simple mode set sequence</span></a></li>
<li class="toclevel-1 tocsection-16"><a href="Intel_HD_Graphics#Full_mode_set_sequence"><span class="tocnumber">11</span> <span class="toctext">Full mode set sequence</span></a>
<ul>
<li class="toclevel-2 tocsection-17"><a href="Intel_HD_Graphics#Link_Training_Notes"><span class="tocnumber">11.1</span> <span class="toctext">Link Training Notes</span></a></li>
<li class="toclevel-2 tocsection-18"><a href="Intel_HD_Graphics#Graphics_virtual_memory_configuration"><span class="tocnumber">11.2</span> <span class="toctext">Graphics virtual memory configuration</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="Intel_HD_Graphics#The_ring_buffer"><span class="tocnumber">11.3</span> <span class="toctext">The ring buffer</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="Intel_HD_Graphics#Blitter_-_Block_Litigated_Transfer_engine"><span class="tocnumber">11.4</span> <span class="toctext">Blitter - Block Litigated Transfer engine</span></a></li>
<li class="toclevel-2 tocsection-21"><a href="Intel_HD_Graphics#3D_pipeline"><span class="tocnumber">11.5</span> <span class="toctext">3D pipeline</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-22"><a href="Intel_HD_Graphics#See_also"><span class="tocnumber">12</span> <span class="toctext">See also</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Introduction">Introduction</span></h2>
<p>This page covers implementing driver support for Intel's integrated graphics technology. At the moment this only covers first generation 'Intel HD graphics’, codename Ironlake. Please note that graphics drivers are complex and while Intel's is on the simpler side, it is still a difficult topic not intended for newcomers, some experience writing drivers for other modern hardware is suggested before attempting this. Additionally, the reader is responsible for any damage due to inaccuracies in this documentation.
</p><p><br />
</p>
<h2><span class="mw-headline" id="Experimenting_with_the_device">Experimenting with the device</span></h2>
<p>There are various tools available to study the behavior of the graphics device for simpler tasks in order to gain an understanding of how something is done. One way to do so is to use Intel's graphics debugging utilities (The intel-gpu-tools package), which allow reading and writing to the device registers from the terminal. This can be very useful, for instance, this method proved invaluable when studying the GMBUS. The same can be done using GRUB2’s built in terminal by obtaining the MMIO base address using lspci and then using the read/write commands (read_byte/read_word/read_dword and write_byte/write_word/write_dword) to perform the associated operation on the desired register.
</p>
<h2><span class="mw-headline" id="Register_Locations_and_Definitions">Register Locations and Definitions</span></h2>
<p>Many registers may move between generations or may be replaced completely with a different set of registers, an appropriate note will be made where possible, but it is recommended that this document be read alongside the programming reference manuals for the intended generation. Additionally, the register location definitions for the driver for Cardinal can be found <a rel="nofollow" class="external text" href="https://github.com/himanshugoel2797/Cardinal/blob/master/drivers/display/ihd/common/include/ihd_regs.h">Cardinal GitHub</a>.
</p><p><br />
</p>
<h2><span class="mw-headline" id="Recommended_reading">Recommended reading</span></h2>
<p>Some additional reading is highly recommended before tackling graphics/display drivers which will help clarify a lot of the designs and terminology used in the official PRMs. Understanding the following is recommended:
</p>
<ul><li>EDID</li>
<li>I2C</li>
<li>DisplayPort</li>
<li>Intel Integrated graphics Programming Reference Manuals (PRMs)</li>
<li>OpenGL 4.0+/Vulkan/DirectX 9+: This is only really necessary if you intend to implement 3d acceleration. Understanding how the graphics pipeline functions and is structured at a higher level will help with understanding the hardware level structure exposed the graphics chipset.</li></ul>
<p><br />
</p>
<h2><span class="mw-headline" id="Graphics_Northbridge_and_Southbridge">Graphics Northbridge and Southbridge</span></h2>
<p>The display controller pipeline structure is split among two components depending on their speed requirements and overall use. The Northbridge is connected directly to the processor, and is used for the built-in display as well as the display pipes and various planes. The Southbridge contains the external ports and the GMBUS (Graphics Management Bus). The GMBUS is an I2C compatible protocol used to communicate with devices to obtain information from them (such as the display's EDID). The two bridges communicate through a transmitter and receiver mechanism; this is done by assigning FDIs to displays on the Southbridge and configuring the display pipes on the Northbridge to receive from the assigned FDI. This system is discussed in detail in the <a href="Intel_HD_Graphics#Display_Pipeline_Structure">#Display Pipeline Structure</a> section.
</p>
<h2><span class="mw-headline" id="PCI_interface_and_graphics_memory">PCI interface and graphics memory</span></h2>
<p>The PCI BARs 0 (offset 0x10) and 2 (offset 0x18) contains the 64bit addresses for the MMIO region and snooped graphics memory respectively.
</p><p><br />
</p>
<h2><span class="mw-headline" id="Built-in_display_backlight">Built-in display backlight</span></h2>
<p>The display backlight is controlled by a PWM (pulse width modulation) unit. For the built in LVDS display, the PWM initialization registers are present on the south bridge, while the actual control value is specified on a register on the North bridge. 
</p><p><br />
</p>
<h2><span class="mw-headline" id="Display_detection">Display detection</span></h2>
<p>Display detection can be done by either polling or using interrupts. The interrupt method will be discussed here. 
</p><p><br />
</p>
<h2><span class="mw-headline" id="GMBUS_registers_and_the_EDID">GMBUS registers and the EDID</span></h2>
<p>The GMBUS or Graphics Management Bus is an I2C compatible protocol used to communicate with the attached displays to obtain their information such as the EDID. This method cannot be used to read the EDID of a <a href="DisplayPort" title="DisplayPort">DisplayPort</a> device, instead the AUX CH should be used.
</p><p>To obtain the EDID for a device, we want to read 0x80 bytes from the I2C device index 0 of the desired device from an offset of 0x50. 
</p><p>The following execution sequence demonstrates how the first 8 bytes can be retrieved:
</p><p><br />
</p>
<pre>void igfx_gmbus_reset(igfx_dev_state_t *driver)
{
   igfx_write32(driver, driver-&gt;display_mmio_base + IGFX_GMBUS1, 0);
   igfx_gmbus_enable_writeprot(driver);
   igfx_gmbus_disable_writeprot(driver);
}

void igfx_gmbus_wait(igfx_dev_state_t *driver)
{
   while (!(igfx_read32(driver, driver-&gt;display_mmio_base + IGFX_GMBUS2) &amp; (1 &lt;&lt; 11)))
      &#160;;
}

void igfx_gmbus_stoptransaction(igfx_dev_state_t *driver)
{
   igfx_write32(driver, driver-&gt;display_mmio_base + IGFX_GMBUS1, (1 &lt;&lt; 30) | (1 &lt;&lt; 27));
}

void igfx_gmbus_read(igfx_dev_state_t *driver, uint32_t disp_idx, uint8_t offset,
                    uint16_t sz, uint8_t *buf)
{
   uint32_t gmbus0_val = 0;
   uint32_t gmbus1_val = 0;

   if (driver-&gt;device-&gt;arch == IGFX_CHERRYTRAIL)
   {
       if (disp_idx == 0)
           gmbus0_val = 3;
   }

   gmbus1_val = (1 &lt;&lt; 30) /*SW Ready*/ | (1 &lt;&lt; 25) /*WAIT*/ |
                (1 &lt;&lt; 26) /*INDEX*/ | (sz &amp; 511) &lt;&lt; 16 | ((offset &amp; 127) &lt;&lt; 1) |
                1 /*READ*/;
   igfx_gmbus_reset(driver);

   igfx_write32(driver, driver-&gt;display_mmio_base + IGFX_GMBUS0, gmbus0_val);
   igfx_write32(driver, driver-&gt;display_mmio_base + IGFX_GMBUS1, gmbus1_val);

   for (int i = 0; i &lt; sz; i += 4)
   {
       igfx_gmbus_wait(driver);

       uint32_t bytes = igfx_read32(driver, driver-&gt;display_mmio_base + IGFX_GMBUS3);

       buf[i] = bytes &amp; 0xFF;
       if (sz &gt; i + 1)
           buf[i + 1] = (bytes &gt;&gt; 8) &amp; 0xFF;
       if (sz &gt; i + 2)
           buf[i + 2] = (bytes &gt;&gt; 16) &amp; 0xFF;
       if (sz &gt; i + 3)
           buf[i + 3] = (bytes &gt;&gt; 24) &amp; 0xFF;
   }

   igfx_gmbus_stoptransaction(driver);

   print_hexdump(buf, sz);
}
</pre>
<h3><span class="mw-headline" id="Getting_the_EDID_from_a_DisplayPort_device">Getting the EDID from a <a href="DisplayPort" title="DisplayPort">DisplayPort</a> device</span></h3>
<p>To communicate with a <a href="DisplayPort" title="DisplayPort">DisplayPort</a> device you'll need to use the following registers:
</p>
<table class="wikitable">

<tbody><tr>
<th>Register
</th>
<th>Description
</th></tr>
<tr>
<td>DDI_AUX_CTL
</td>
<td rowspan="2">A register to initiate AUX CH requests
</td></tr>
<tr>
<td>DP_AUX_CTL
</td></tr>
<tr>
<td>DDI_AUX_DATA
</td>
<td rowspan="2">A set of 5 registers to send up to 20 bytes of data
</td></tr>
<tr>
<td>DP_AUX_DATA
</td></tr>
<tr>
<td>SRD_AUX_CTL
</td>
<td>A register that must be disabled if using the DDI_AUX registers
</td></tr>
</tbody></table>
<p>Refer to the Intel programming manuals for the register's addresses and potential errata.
</p><p>To send a request, first copy the AUX CH packet to the data registers starting with the high byte of the first register. Then initiate a request by setting the message length and the send_busy bit. Wait for either the done bit or any of the error bits to be set, then read the message length and the appropriate amount of data from the data registers.
</p><p>Note that all the other bits in the CTL registers should be preserved, so load the registers before toggling any bits.
</p>
<h3><span class="mw-headline" id="Display_pipeline_structure">Display pipeline structure</span></h3>
<h3><span class="mw-headline" id="Display_Pipes">Display Pipes</span></h3>
<h3><span class="mw-headline" id="Display_FDI">Display FDI</span></h3>
<h3><span class="mw-headline" id="Display_planes">Display planes</span></h3>
<p>Three types of display planes are available for each pipe, namely:
</p>
<ul><li>Display plane</li>
<li>Cursor plane</li>
<li>Video/sprite plane</li></ul>
<p>A VGA plane is also available, allowing for the use of the VGA emulation hardware present in every Intel graphics device, however it is very limiting and its use is discouraged by the author.
</p><p>None of the planes besides the cursor plane (in pop-up cursor mode) can be enabled alongside the VGA plane.
</p><p>The display plane provides the high resolution framebuffer and needs to be enabled for any of the other planes to function (besides the VGA plane). 
</p><p>As the name implies, the cursor plane provides hardware accelerated cursor drawing. Similarly, the video/sprite plane provides a second source which can be drawn on top of the display plane, its purpose is to allow for efficient use of the video decoding hardware by allowing the decoded data to be directly drawn to the window.
</p>
<h2><span class="mw-headline" id="Simple_mode_set_sequence">Simple mode set sequence</span></h2>
<p>A simple mode set sequence can be used with the default/built-in display, assuming that the boot firmware has configured the display timings correctly. If not, it is necessary to perform a full mode set operation involving a display power cycle.
</p><p>As this is going to rely on have displays already configured by the firmware, the first step is to figure out the mapping between ports and pipes and their status.
</p><p>This info is based on the intel_reg_dumper utility's output for integrated graphics for Haswell:
</p>
<pre>Ports:
There are 5 ports: A,B,C,D,E
These represent connections to displays.
The EDP port is always port A

The important registers here are:
PORT_CLK_SEL_[A-E]
DP_TP_CTL_[A-E]
DDI_BUF_CTL_A[A-E]

Pipes:
There are 3 general pipes A,B,C and 1 'specialized' EDP pipe that actually maps to Pipe A. Additionally, the EDP pipe (and DDI A) can only run in DP single stream (SST) mode.

Pipes handle display timings/resolution settings, with the following registers:
</pre>
<pre>SFUSE_STRAP&#160;: This controls overall display capability (can disable all display output - forcing the use of external graphics), VGA port capability (can disable the physical VGA port) and the physical presence of ports on the device (regardless of if the port has something plugged in).
</pre>
<pre>PIPE_DDI_FUNC_CTL_[A-C,EDP]&#160;: Used to control how the system 'talks' to the device (HDMI/DisplayPort SST/DisplayPort MST), bits per channel, VSync and HSync polarities (from EDID) 
WM_PIPE_[A-C]&#160;: These control when the controller generates memory accesses for pixels, the values depend on the timing information as obtained from the EDID, the exact calculation process is described in the Display Watermark section of the PRMs.
WM_LP{1-3]: Configures the memory access timings for low power mode, the associated WM_LINETIME_[A-C] must be programmed before enabling one of these.
WM_LINETIME_[A-C]: Configures the line timings for low power mode based on the horizontal resolution
</pre>
<pre>PIPE_SRCSZ_[A-C]: Contains the horizontal and vertical pixel width of the output.
PIPE_CONF_[A-C/EDP]: Enable/disable the pipe and some features
</pre>
<pre>These registers are all based on the desired resolution, and are fairly well documented in the PRM, they rely on the EDID information.
HTOTAL_[A-C/EDP] 
HBLANK_[A-C/EDP]
HSYNC_[A-C/EDP]
VTOTAL_[A-C/EDP]
VBLANK_[A-C/EDP]
VSYNC_[A-C/EDP]
VSYNCSHIFT_[A-C/EDP]
</pre>
<p><br />
</p>
<pre>Refresh rate timing:
The calculation for these values is described in the Display chapter, section "Pipe M/N Values":
Used for normal power mode:
PIPE_DATA_M1
PIPE_DATA_N1
PIPE_LINK_M1
PIPE_LINK_N1
</pre>
<pre>Used for low power mode:
PIPE_DATA_M2
PIPE_DATA_N2
PIPE_LINK_M2
PIPE_LINK_N2
</pre>
<pre>Once the above are configured as desired, the panels may be configured and used. For display output, the Primary panel is most interesting, followed by the cursor panel if a hardware cursor is desired.
The EDP pipe uses Pipe A's panels.
</pre>
<pre>The Primary panel has the following registers:
PRI_CTL_[A-C]: Enable/Disable the panel, gamma mode, pixel format, tiling, rotation
PRI_STRIDE_[A-C]: Configure the pixel stride when reading the framebuffer (in multiples of 64-bytes)
PRI_SURF_[A-C]: Configure the physical address of the framebuffer, this must be mapped via the global GTT
PRI_OFFSET_[A-C]: Configure the pixel offset from which to start reading
</pre>
<p>Thus, provided that the display has already been initialized, very dirty mode setting can be performed by directly updating the primary panel registers, then the horizontal and vertical TOTAL/BLANK/SYNC registers, followed by the M/N timings and then finally the WM timings. It may be possible to make the process cleaner by disabling and then re-enabling the pipe, but it is unconfirmed if that would restore the display without having to recallibrate. However, display callibration seems to be handled by the graphics chipset itself, so it may be relatively simple to just do modesetting properly (updates upcoming).
</p>
<h2><span class="mw-headline" id="Full_mode_set_sequence">Full mode set sequence</span></h2>
<p>The full mode set sequence is much longer than the simple sequence, but it is guaranteed to work with all connected displays, assuming that the EDID is valid. This sequence involves completely disabling the display, configuring the timings for the FDIs and pipes again and then powering on the display again.
</p><p>The steps are as follows:
</p>
<h3><span class="mw-headline" id="Link_Training_Notes">Link Training Notes</span></h3>
<pre>DDI_BUF_TRANS must be configured with voltage swing information, as specified in the Display chapter, "DDI Buffer" section
</pre>
<pre>- Set the number of enabled lanes via writes to AUX 0x101, and configure the lanes, 
</pre>
<pre>First step of training is to set training pattern 1 and try voltage settings from smallest to largest until clock recovery is achieved
- First set the sink device (via AUX channel/GMBUS) to start receiving training pattern 1 by performing a burst write to AUX 0x102-0x106, setting the lanes to expect training pattern 1 with the currently testing voltage level
- Set the integrated graphics (DDI_TP_CTL) to send training pattern 1
- Wait 500us
- Read offset 0x202 from the AUX channel to get the link status to determine if training was successful.
- If none of the voltage levels work, reduce the bitrate and try again
</pre>
<pre>- For eDP, the voltage settings can be precallibrated, allowing skipping the clock recovery process, this is determined by AUX address 0x3 bit 6 (see section 3.5.1.3 of the DisplayPort 1.4 spec)
</pre>
<pre>Second training step is to determine the pre-emphasis, it's very similar to the first step, but using training pattern 2. Clock recovery may be lost in this step, in which case the clock recovery training must be restarted.
Once pre-emphasis training is done, the link is ready. 

</pre>
<p>DisplayPort 1.4 spec: <a rel="nofollow" class="external autonumber" href="http://file.yizimg.com/383992/2014090921252964.pdf">[1]</a>
</p>
<h3><span class="mw-headline" id="Graphics_virtual_memory_configuration">Graphics virtual memory configuration</span></h3>
<h3><span class="mw-headline" id="The_ring_buffer">The ring buffer</span></h3>
<h3><span class="mw-headline" id="Blitter_-_Block_Litigated_Transfer_engine">Blitter - Block Litigated Transfer engine</span></h3>
<h3><span class="mw-headline" id="3D_pipeline">3D pipeline</span></h3>
<h2><span class="mw-headline" id="See_also">See also</span></h2>
<ul><li><a rel="nofollow" class="external text" href="https://www.intel.com/content/www/us/en/docs/graphics-for-linux/developer-reference/1-0/overview.html">Intel programming manuals</a> (PRMs) for Intel HD Graphics devices.</li></ul>
<!-- 
NewPP limit report
Cached time: 20250211131219
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.014 seconds
Real time usage: 0.014 seconds
Preprocessor visited node count: 69/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4023-0!canonical and timestamp 20250211131219 and revision id 28917.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Intel_HD_Graphics&amp;oldid=28917">https://wiki.osdev.org/index.php?title=Intel_HD_Graphics&amp;oldid=28917</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="./Category:Video" title="Category:Video">Video</a></li><li><a href="./Category:Hardware" title="Category:Hardware">Hardware</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Intel+HD+Graphics" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Intel_HD_Graphics#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Intel_HD_Graphics" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:Intel_HD_Graphics&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Intel_HD_Graphics"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Intel_HD_Graphics&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Intel_HD_Graphics&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Intel_HD_Graphics" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Intel_HD_Graphics" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Intel_HD_Graphics&amp;oldid=28917" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Intel_HD_Graphics&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 4 June 2024, at 13:13.</li>
	<li id="footer-info-0">This page has been accessed 3,869 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Intel_HD_Graphics&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.014","walltime":"0.014","ppvisitednodes":{"value":69,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":0,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250211131219","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":106});});</script>
</body>
</html>