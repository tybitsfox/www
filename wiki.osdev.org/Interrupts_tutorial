<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Interrupts Tutorial - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"21cd212a6506d8ca5c3d6819","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Interrupts_Tutorial","wgTitle":"Interrupts Tutorial","wgCurRevisionId":29118,"wgRevisionId":29118,"wgArticleId":4320,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using duplicate arguments in template calls","Pages using deprecated source tags","Level 1 Tutorials","Tutorials","Interrupts"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Interrupts_Tutorial","wgRelevantArticleId":4320,"wgIsProbablyEditable":false,
"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRedirectedFrom":"Interrupts_tutorial","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgInternalRedirectTargetUrl":"/Interrupts_Tutorial","wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["mediawiki.action.view.redirect","site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode",
"ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<link rel="canonical" href="Interrupts_Tutorial"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Interrupts_Tutorial rootpage-Interrupts_Tutorial skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Interrupts Tutorial</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"><span class="mw-redirectedfrom">(Redirected from <a href="https://wiki.osdev.org/index.php?title=Interrupts_tutorial&amp;redirect=no" class="mw-redirect" title="Interrupts tutorial">Interrupts tutorial</a>)</span></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Interrupts_tutorial#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Interrupts_tutorial#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear:right; border:1px solid #aaaaaa; background:#eee; text-align:center;;"><tbody><tr><th>Difficulty level</th></tr><tr><td><a href="./File:Difficulty_1.png" class="image"><img alt="Difficulty 1.png" src="images/d/d3/Difficulty_1.png" decoding="async" width="46" height="14" data-file-width="46" data-file-height="14" /></a><br />Beginner</td></tr></tbody></table>
<p>Every operating system that needs to work with the hardware (efficiently) must make use of interrupts. For example, you could use the entirety of an AP to poll the mouse, or you could use the mouse IRQs instead and save much more CPU time, and a lot of electrical load. Therefore, every reasonable operating system makes use of interrupts.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Interrupts_tutorial#Pre-requisites"><span class="tocnumber">1</span> <span class="toctext">Pre-requisites</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Interrupts_tutorial#Interrupt_Descriptor_Table"><span class="tocnumber">2</span> <span class="toctext">Interrupt Descriptor Table</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="Interrupts_tutorial#Entries"><span class="tocnumber">2.1</span> <span class="toctext">Entries</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="Interrupts_tutorial#Table"><span class="tocnumber">2.2</span> <span class="toctext">Table</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="Interrupts_tutorial#ISRs"><span class="tocnumber">2.3</span> <span class="toctext">ISRs</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="Interrupts_tutorial#Assembling"><span class="tocnumber">2.4</span> <span class="toctext">Assembling</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-7"><a href="Interrupts_tutorial#What_to_do_next"><span class="tocnumber">3</span> <span class="toctext">What to do next</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="Interrupts_tutorial#See_also"><span class="tocnumber">4</span> <span class="toctext">See also</span></a>
<ul>
<li class="toclevel-2 tocsection-9"><a href="Interrupts_tutorial#Threads"><span class="tocnumber">4.1</span> <span class="toctext">Threads</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="Interrupts_tutorial#References"><span class="tocnumber">4.2</span> <span class="toctext">References</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Pre-requisites">Pre-requisites</span></h2>
<p>Before you create an IDT, you need to create a <a href="GDT" class="mw-redirect" title="GDT">GDT</a>, load it properly, and configure the segment registers accordingly.
</p>
<h2><span class="mw-headline" id="Interrupt_Descriptor_Table"><a href="Interrupt_Descriptor_Table" title="Interrupt Descriptor Table">Interrupt Descriptor Table</a></span></h2>
<h3><span class="mw-headline" id="Entries">Entries</span></h3>
<p>In order to make use of interrupts, you need an IDT.
</p><p>When an interrupt is fired, the CPU uses the vector as an index into the IDT. The CPU reads the entry of the IDT in order to figure out what to do prior to calling the <a href="ISR" class="mw-redirect" title="ISR">ISR</a>, and what the address of the handler is.
</p><p>This is the structure of a single (32-bit) IDT entry:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">    </span><span class="n">isr_low</span><span class="p">;</span><span class="w">      </span><span class="c1">// The lower 16 bits of the ISR&#39;s address</span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">    </span><span class="n">kernel_cs</span><span class="p">;</span><span class="w">    </span><span class="c1">// The GDT segment selector that the CPU will load into CS before calling the ISR</span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">     </span><span class="n">reserved</span><span class="p">;</span><span class="w">     </span><span class="c1">// Set to zero</span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">     </span><span class="n">attributes</span><span class="p">;</span><span class="w">   </span><span class="c1">// Type and attributes; see the IDT page</span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">    </span><span class="n">isr_high</span><span class="p">;</span><span class="w">     </span><span class="c1">// The higher 16 bits of the ISR&#39;s address</span>
<span class="p">}</span><span class="w"> </span><span class="n">__attribute__</span><span class="p">((</span><span class="n">packed</span><span class="p">))</span><span class="w"> </span><span class="n">idt_entry_t</span><span class="p">;</span><span class="w"></span>
</pre></div>
<p>and this is the structure of a single (64-bit) IDT entry:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">    </span><span class="n">isr_low</span><span class="p">;</span><span class="w">      </span><span class="c1">// The lower 16 bits of the ISR&#39;s address</span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">    </span><span class="n">kernel_cs</span><span class="p">;</span><span class="w">    </span><span class="c1">// The GDT segment selector that the CPU will load into CS before calling the ISR</span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">	    </span><span class="n">ist</span><span class="p">;</span><span class="w">          </span><span class="c1">// The IST in the TSS that the CPU will load into RSP; set to zero for now</span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">     </span><span class="n">attributes</span><span class="p">;</span><span class="w">   </span><span class="c1">// Type and attributes; see the IDT page</span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">    </span><span class="n">isr_mid</span><span class="p">;</span><span class="w">      </span><span class="c1">// The higher 16 bits of the lower 32 bits of the ISR&#39;s address</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">    </span><span class="n">isr_high</span><span class="p">;</span><span class="w">     </span><span class="c1">// The higher 32 bits of the ISR&#39;s address</span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">    </span><span class="n">reserved</span><span class="p">;</span><span class="w">     </span><span class="c1">// Set to zero</span>
<span class="p">}</span><span class="w"> </span><span class="n">__attribute__</span><span class="p">((</span><span class="n">packed</span><span class="p">))</span><span class="w"> </span><span class="n">idt_entry_t</span><span class="p">;</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="Table">Table</span></h3>
<p>To create an IDT, simply create a 256-entry array of descriptors:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="n">__attribute__</span><span class="p">((</span><span class="n">aligned</span><span class="p">(</span><span class="mh">0x10</span><span class="p">)))</span><span class="w"> </span>
<span class="k">static</span><span class="w"> </span><span class="n">idt_entry_t</span><span class="w"> </span><span class="n">idt</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span><span class="w"> </span><span class="c1">// Create an array of IDT entries; aligned for performance</span>
</pre></div>
<p>You will also need a special IDTR structure, which looks like:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">limit</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w">	</span><span class="n">base</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">__attribute__</span><span class="p">((</span><span class="n">packed</span><span class="p">))</span><span class="w"> </span><span class="n">idtr_t</span><span class="p">;</span><span class="w"></span>
</pre></div>
<p>for a 32-bit IDT, or like:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w">	</span><span class="n">limit</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint64_t</span><span class="w">	</span><span class="n">base</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">__attribute__</span><span class="p">((</span><span class="n">packed</span><span class="p">))</span><span class="w"> </span><span class="n">idtr_t</span><span class="p">;</span><span class="w"></span>
</pre></div>
<p>for a 64-bit IDT.
</p><p>Don't forget to define an IDTR:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">static</span><span class="w"> </span><span class="n">idtr_t</span><span class="w"> </span><span class="n">idtr</span><span class="p">;</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="ISRs">ISRs</span></h3>
<p>In a C source file, define a general exception handler:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="n">__attribute__</span><span class="p">((</span><span class="k">noreturn</span><span class="p">))</span><span class="w"></span>
<span class="kt">void</span><span class="w"> </span><span class="n">exception_handler</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span><span class="w"></span>
<span class="kt">void</span><span class="w"> </span><span class="nf">exception_handler</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">__asm__</span><span class="w"> </span><span class="k">volatile</span><span class="w"> </span><span class="p">(</span><span class="s">&quot;cli; hlt&quot;</span><span class="p">);</span><span class="w"> </span><span class="c1">// Completely hangs the computer</span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>This will act as your main exception handler. When you receive a CPU exception, this is the handler you will call.
</p><p>Now, in an assembly file (<b>nasm</b> <b>assembler</b> specifically), define these two macros:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="err">%</span><span class="nf">macro</span><span class="w"> </span><span class="no">isr_err_stub</span><span class="w"> </span><span class="mi">1</span><span class="w"></span>
<span class="nf">isr_stub_</span><span class="err">%+%</span><span class="mi">1</span><span class="p">:</span><span class="w"></span>
<span class="w">    </span><span class="nf">call</span><span class="w"> </span><span class="no">exception_handler</span><span class="w"></span>
<span class="w">    </span><span class="nf">iret</span><span class="w"> </span>
<span class="nv">%endmacro</span><span class="w"></span>
<span class="c1">; if writing for 64-bit, use iretq instead</span>
<span class="err">%</span><span class="nf">macro</span><span class="w"> </span><span class="no">isr_no_err_stub</span><span class="w"> </span><span class="mi">1</span><span class="w"></span>
<span class="nf">isr_stub_</span><span class="err">%+%</span><span class="mi">1</span><span class="p">:</span><span class="w"></span>
<span class="w">    </span><span class="nf">call</span><span class="w"> </span><span class="no">exception_handler</span><span class="w"></span>
<span class="w">    </span><span class="nf">iret</span><span class="w"></span>
<span class="err">%</span><span class="nf">endmacro</span><span class="w"></span>
</pre></div>
<p>Then, use these macros to define your 32 exception handlers:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">extern</span><span class="w"> </span><span class="no">exception_handler</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">1</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">2</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">3</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">4</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">5</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">6</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">7</span><span class="w"></span>
<span class="nf">isr_err_stub</span><span class="w">    </span><span class="mi">8</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">9</span><span class="w"></span>
<span class="nf">isr_err_stub</span><span class="w">    </span><span class="mi">10</span><span class="w"></span>
<span class="nf">isr_err_stub</span><span class="w">    </span><span class="mi">11</span><span class="w"></span>
<span class="nf">isr_err_stub</span><span class="w">    </span><span class="mi">12</span><span class="w"></span>
<span class="nf">isr_err_stub</span><span class="w">    </span><span class="mi">13</span><span class="w"></span>
<span class="nf">isr_err_stub</span><span class="w">    </span><span class="mi">14</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">15</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">16</span><span class="w"></span>
<span class="nf">isr_err_stub</span><span class="w">    </span><span class="mi">17</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">18</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">19</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">20</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">21</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">22</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">23</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">24</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">25</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">26</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">27</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">28</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">29</span><span class="w"></span>
<span class="nf">isr_err_stub</span><span class="w">    </span><span class="mi">30</span><span class="w"></span>
<span class="nf">isr_no_err_stub</span><span class="w"> </span><span class="mi">31</span><span class="w"></span>
</pre></div>
<p>Finally, in assembly, define a "stub table". (This is used to prevent excessive code reuse, and not related to actual function.)
</p><p>Using NASM macros:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">global</span><span class="w"> </span><span class="no">isr_stub_table</span><span class="w"></span>
<span class="nl">isr_stub_table:</span><span class="w"></span>
<span class="err">%</span><span class="nf">assign</span><span class="w"> </span><span class="no">i</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span>
<span class="nv">%rep</span><span class="w">    </span><span class="mi">32</span><span class="w"> </span>
<span class="w">    </span><span class="no">dd</span><span class="w"> </span><span class="no">isr_stub_</span><span class="err">%+</span><span class="no">i</span><span class="w"> </span><span class="c1">; use DQ instead if targeting 64-bit</span>
<span class="err">%</span><span class="nf">assign</span><span class="w"> </span><span class="no">i</span><span class="w"> </span><span class="no">i</span><span class="err">+</span><span class="mi">1</span><span class="w"> </span>
<span class="nv">%endrep</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="Assembling">Assembling</span></h3>
<p>Finally, we can assemble the IDT:
We need to
</p>
<ul><li>1. Assign the IDT entries with the correct values,</li>
<li>2. Reload the IDTR register,</li>
<li>3. Set the interrupt flag.</li></ul>
<p>To define the entries, it is appropriate to make use of a helper function. That helper function would look like:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">void</span><span class="w"> </span><span class="nf">idt_set_descriptor</span><span class="p">(</span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">vector</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="o">*</span><span class="w"> </span><span class="n">isr</span><span class="p">,</span><span class="w"> </span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">flags</span><span class="p">);</span><span class="w"></span>
<span class="kt">void</span><span class="w"> </span><span class="nf">idt_set_descriptor</span><span class="p">(</span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">vector</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="o">*</span><span class="w"> </span><span class="n">isr</span><span class="p">,</span><span class="w"> </span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">flags</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">idt_entry_t</span><span class="o">*</span><span class="w"> </span><span class="n">descriptor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">idt</span><span class="p">[</span><span class="n">vector</span><span class="p">];</span><span class="w"></span>

<span class="w">    </span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">isr_low</span><span class="w">        </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint32_t</span><span class="p">)</span><span class="n">isr</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFFFF</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">kernel_cs</span><span class="w">      </span><span class="o">=</span><span class="w"> </span><span class="mh">0x08</span><span class="p">;</span><span class="w"> </span><span class="c1">// this value can be whatever offset your kernel code selector is in your GDT</span>
<span class="w">    </span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">attributes</span><span class="w">     </span><span class="o">=</span><span class="w"> </span><span class="n">flags</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">isr_high</span><span class="w">       </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint32_t</span><span class="p">)</span><span class="n">isr</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">16</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">reserved</span><span class="w">       </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>for a 32-bit IDT, or like:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">void</span><span class="w"> </span><span class="nf">idt_set_descriptor</span><span class="p">(</span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">vector</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="o">*</span><span class="w"> </span><span class="n">isr</span><span class="p">,</span><span class="w"> </span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">flags</span><span class="p">);</span><span class="w"></span>
<span class="kt">void</span><span class="w"> </span><span class="nf">idt_set_descriptor</span><span class="p">(</span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">vector</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="o">*</span><span class="w"> </span><span class="n">isr</span><span class="p">,</span><span class="w"> </span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">flags</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">idt_entry_t</span><span class="o">*</span><span class="w"> </span><span class="n">descriptor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">idt</span><span class="p">[</span><span class="n">vector</span><span class="p">];</span><span class="w"></span>

<span class="w">    </span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">isr_low</span><span class="w">        </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint64_t</span><span class="p">)</span><span class="n">isr</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFFFF</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">kernel_cs</span><span class="w">      </span><span class="o">=</span><span class="w"> </span><span class="n">GDT_OFFSET_KERNEL_CODE</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">ist</span><span class="w">            </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">attributes</span><span class="w">     </span><span class="o">=</span><span class="w"> </span><span class="n">flags</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">isr_mid</span><span class="w">        </span><span class="o">=</span><span class="w"> </span><span class="p">((</span><span class="kt">uint64_t</span><span class="p">)</span><span class="n">isr</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">16</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFFFF</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">isr_high</span><span class="w">       </span><span class="o">=</span><span class="w"> </span><span class="p">((</span><span class="kt">uint64_t</span><span class="p">)</span><span class="n">isr</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">32</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFFFFFFFF</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">reserved</span><span class="w">       </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>for a 64-bit IDT.
</p><p>Finally, to set the entries at last, this is what the function would look like:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">static</span><span class="w"> </span><span class="kt">bool</span><span class="w"> </span><span class="n">vectors</span><span class="p">[</span><span class="n">IDT_MAX_DESCRIPTORS</span><span class="p">];</span><span class="w"></span>

<span class="k">extern</span><span class="w"> </span><span class="kt">void</span><span class="o">*</span><span class="w"> </span><span class="n">isr_stub_table</span><span class="p">[];</span><span class="w"></span>

<span class="kt">void</span><span class="w"> </span><span class="nf">idt_init</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span><span class="w"></span>
<span class="kt">void</span><span class="w"> </span><span class="nf">idt_init</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">idtr</span><span class="p">.</span><span class="n">base</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="o">&amp;</span><span class="n">idt</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="w"></span>
<span class="w">    </span><span class="n">idtr</span><span class="p">.</span><span class="n">limit</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint16_t</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="n">idt_entry_t</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">IDT_MAX_DESCRIPTORS</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">vector</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">vector</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">32</span><span class="p">;</span><span class="w"> </span><span class="n">vector</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">idt_set_descriptor</span><span class="p">(</span><span class="n">vector</span><span class="p">,</span><span class="w"> </span><span class="n">isr_stub_table</span><span class="p">[</span><span class="n">vector</span><span class="p">],</span><span class="w"> </span><span class="mh">0x8E</span><span class="p">);</span><span class="w"></span>
<span class="w">        </span><span class="n">vectors</span><span class="p">[</span><span class="n">vector</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">true</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="n">__asm__</span><span class="w"> </span><span class="k">volatile</span><span class="w"> </span><span class="p">(</span><span class="s">&quot;lidt %0&quot;</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="s">&quot;m&quot;</span><span class="p">(</span><span class="n">idtr</span><span class="p">));</span><span class="w"> </span><span class="c1">// load the new IDT</span>
<span class="w">    </span><span class="n">__asm__</span><span class="w"> </span><span class="k">volatile</span><span class="w"> </span><span class="p">(</span><span class="s">&quot;sti&quot;</span><span class="p">);</span><span class="w"> </span><span class="c1">// set the interrupt flag</span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>(IDT_MAX_DESCRIPTORS being the number of entries in your IDT - or the last entry's index + 1)
</p><p>Congratulations! You have successfully defined your IDT, loaded it, and enabled interrupts.
</p>
<h2><span class="mw-headline" id="What_to_do_next">What to do next</span></h2>
<p>After completing this tutorial, there is still much left for you to do to fully harness the power of interrupts.
</p><p>You can:
</p>
<ul><li>Initialize the <a href="PIC" class="mw-redirect" title="PIC">PIC</a></li>
<li>Make use of PIC <a href="IRQ" class="mw-redirect" title="IRQ">IRQs</a></li>
<li>Understand the <a href="NMI" class="mw-redirect" title="NMI">NMI</a></li>
<li>Configure the local <a href="APIC" title="APIC">APIC</a></li>
<li>Write a driver for the <a href="IOAPIC" title="IOAPIC">IOAPIC</a></li>
<li>Make use of <a href="Message_Signaled_Interrupts" class="mw-redirect" title="Message Signaled Interrupts">Message Signaled Interrupts</a></li></ul>
<h2><span class="mw-headline" id="See_also">See also</span></h2>
<h3><span class="mw-headline" id="Threads">Threads</span></h3>
<ul><li><a rel="nofollow" class="external text" href="https://forum.osdev.org/viewtopic.php?f=1&amp;t=33160&amp;p=285871#p285871">Interrupts don't work in GRUB</a></li></ul>
<h3><span class="mw-headline" id="References">References</span></h3>
<ul><li><a rel="nofollow" class="external text" href="https://github.com/austanss/skylight/blob/trunk/kernel/src/cpu/interrupts/idt.c">The code this tutorial is based off of</a></li></ul>
<!-- 
NewPP limit report
Cached time: 20250212010936
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.078 seconds
Real time usage: 1.754 seconds
Preprocessor visited node count: 167/1000000
Post‐expand include size: 340/2097152 bytes
Template argument size: 44/2097152 bytes
Highest expansion depth: 15/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 26492/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    3.618      1 Template:Rating
100.00%    3.618      1 -total
 81.62%    2.953      2 Template:If
 67.88%    2.456      2 Template:Show1
 22.33%    0.808      2 Template:Eq
 10.67%    0.386      2 Template:Eq1
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4320-0!canonical and timestamp 20250212010934 and revision id 29118.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Interrupts_Tutorial&amp;oldid=29118">https://wiki.osdev.org/index.php?title=Interrupts_Tutorial&amp;oldid=29118</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_duplicate_arguments_in_template_calls&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using duplicate arguments in template calls (page does not exist)">Pages using duplicate arguments in template calls</a></li><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Level_1_Tutorials" title="Category:Level 1 Tutorials">Level 1 Tutorials</a></li><li><a href="./Category:Tutorials" title="Category:Tutorials">Tutorials</a></li><li><a href="./Category:Interrupts" title="Category:Interrupts">Interrupts</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Interrupts+Tutorial" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Interrupts_tutorial#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Interrupts_Tutorial" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:Interrupts_Tutorial" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Interrupts_Tutorial"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Interrupts_Tutorial&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Interrupts_Tutorial&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Interrupts_Tutorial" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Interrupts_Tutorial" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Interrupts_Tutorial&amp;oldid=29118" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Interrupts_Tutorial&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 8 June 2024, at 07:23.</li>
	<li id="footer-info-0">This page has been accessed 12,091 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Interrupts_Tutorial&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.078","walltime":"1.754","ppvisitednodes":{"value":167,"limit":1000000},"postexpandincludesize":{"value":340,"limit":2097152},"templateargumentsize":{"value":44,"limit":2097152},"expansiondepth":{"value":15,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":26492,"limit":5000000},"timingprofile":["100.00%    3.618      1 Template:Rating","100.00%    3.618      1 -total"," 81.62%    2.953      2 Template:If"," 67.88%    2.456      2 Template:Show1"," 22.33%    0.808      2 Template:Eq"," 10.67%    0.386      2 Template:Eq1"]},"cachereport":{"timestamp":"20250212010936","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":1849});});</script>
</body>
</html>