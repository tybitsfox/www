<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>User:Johnburger/Demo/Overview - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"8ecb67cab3fe58634ed3e2c6","wgCSPNonce":false,"wgCanonicalNamespace":"User","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":2,"wgPageName":"User:Johnburger/Demo/Overview","wgTitle":"Johnburger/Demo/Overview","wgCurRevisionId":21351,"wgRevisionId":21351,"wgArticleId":3477,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"User:Johnburger/Demo/Overview","wgRelevantArticleId":3477,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove"
:[],"wgRelevantUserName":"Johnburger","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="../../favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="../../opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="../../api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-2 ns-subject page-User_Johnburger_Demo_Overview rootpage-User_Johnburger skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-namespace">User</span><span class="mw-page-title-separator">:</span><span class="mw-page-title-main">Johnburger/Demo/Overview</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"><span class="subpages">&lt; <a href="https://wiki.osdev.org/User:Johnburger" title="User:Johnburger">User:Johnburger</a>&lrm; | <a href="../Demo" title="User:Johnburger/Demo">Demo</a></span></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Overview#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Overview#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>The following is an overview of all the steps I took for this demonstration. Each section has a short description, and a link to a page covering the details of that section along with the assembly code to implement it.
</p><p>To use this example, set up the Development Environment as detailed below (basically, install <a rel="nofollow" class="external text" href="http://www.nasm.us/">NASM</a>) and download the <a rel="nofollow" class="external text" href="https://github.com/JohnBurger/OSDev-Demo/archive/Wiki.zip">GitHub ZIP file</a> containing all of the source. Assemble the source as described, and enjoy!
</p><p>The ZIP file also has a fully-assembled (46 kiB) <a rel="nofollow" class="external text" href="https://github.com/JohnBurger/OSDev-Demo/raw/Wiki/Demo.iso">ISO image</a> that you should be able to record straight to CD, or use with your favourite virtualisation program. Of course, this makes it difficult to experiment...
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Overview#Development_Environment"><span class="tocnumber">1</span> <span class="toctext">Development Environment</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="Overview#Development_Host"><span class="tocnumber">1.1</span> <span class="toctext">Development Host</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="Overview#Target_Machine"><span class="tocnumber">1.2</span> <span class="toctext">Target Machine</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="Overview#Coding_Style"><span class="tocnumber">2</span> <span class="toctext">Coding Style</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="Overview#Hierarchical_Code"><span class="tocnumber">2.1</span> <span class="toctext">Hierarchical Code</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="Overview#Use_the_Assembler_as_Much_as_Possible"><span class="tocnumber">2.2</span> <span class="toctext">Use the Assembler as Much as Possible</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Overview#Define_System_Tables_at_Assembly_Time"><span class="tocnumber">2.3</span> <span class="toctext">Define System Tables at Assembly Time</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-8"><a href="Overview#The_Source_Code"><span class="tocnumber">3</span> <span class="toctext">The Source Code</span></a>
<ul>
<li class="toclevel-2 tocsection-9"><a href="Overview#Configurable_settings"><span class="tocnumber">3.1</span> <span class="toctext">Configurable settings</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="Overview#Global_Data"><span class="tocnumber">3.2</span> <span class="toctext">Global Data</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="Overview#x86_Definitions"><span class="tocnumber">4</span> <span class="toctext">x86 Definitions</span></a>
<ul>
<li class="toclevel-2 tocsection-12"><a href="Overview#EFlags"><span class="tocnumber">4.1</span> <span class="toctext">EFlags</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="Overview#Segment"><span class="tocnumber">4.2</span> <span class="toctext">Segment</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="Overview#Control_Register_0_(CR0)"><span class="tocnumber">4.3</span> <span class="toctext">Control Register 0 (CR0)</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="Overview#Descriptors"><span class="tocnumber">4.4</span> <span class="toctext">Descriptors</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="Overview#Task_State_Segment_(TSS)"><span class="tocnumber">4.5</span> <span class="toctext">Task State Segment (TSS)</span></a></li>
<li class="toclevel-2 tocsection-17"><a href="Overview#Interrupt_Vector_Table_(IVT)"><span class="tocnumber">4.6</span> <span class="toctext">Interrupt Vector Table (IVT)</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-18"><a href="Overview#BIOS_Definitions"><span class="tocnumber">5</span> <span class="toctext">BIOS Definitions</span></a>
<ul>
<li class="toclevel-2 tocsection-19"><a href="Overview#A20_Gate"><span class="tocnumber">5.1</span> <span class="toctext">A20 Gate</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="Overview#RAM_Map"><span class="tocnumber">5.2</span> <span class="toctext">RAM Map</span></a></li>
<li class="toclevel-2 tocsection-21"><a href="Overview#Keyboard"><span class="tocnumber">5.3</span> <span class="toctext">Keyboard</span></a></li>
<li class="toclevel-2 tocsection-22"><a href="Overview#Video_Graphics_Array_(VGA)"><span class="tocnumber">5.4</span> <span class="toctext">Video Graphics Array (VGA)</span></a></li>
<li class="toclevel-2 tocsection-23"><a href="Overview#Disk"><span class="tocnumber">5.5</span> <span class="toctext">Disk</span></a></li>
<li class="toclevel-2 tocsection-24"><a href="Overview#Master_Boot_Record_(MBR)"><span class="tocnumber">5.6</span> <span class="toctext">Master Boot Record (MBR)</span></a></li>
<li class="toclevel-2 tocsection-25"><a href="Overview#Memory_Map"><span class="tocnumber">5.7</span> <span class="toctext">Memory Map</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-26"><a href="Overview#Device_Definitions"><span class="tocnumber">6</span> <span class="toctext">Device Definitions</span></a>
<ul>
<li class="toclevel-2 tocsection-27"><a href="Overview#A20_Gate_2"><span class="tocnumber">6.1</span> <span class="toctext">A20 Gate</span></a></li>
<li class="toclevel-2 tocsection-28"><a href="Overview#Priority_Interrupt_Controller_(PIC)"><span class="tocnumber">6.2</span> <span class="toctext">Priority Interrupt Controller (PIC)</span></a></li>
<li class="toclevel-2 tocsection-29"><a href="Overview#Periodic_Interval_Timer_(PIT)"><span class="tocnumber">6.3</span> <span class="toctext">Periodic Interval Timer (PIT)</span></a></li>
<li class="toclevel-2 tocsection-30"><a href="Overview#Keyboard_2"><span class="tocnumber">6.4</span> <span class="toctext">Keyboard</span></a></li>
<li class="toclevel-2 tocsection-31"><a href="Overview#Video_Graphics_Array_(VGA)_2"><span class="tocnumber">6.5</span> <span class="toctext">Video Graphics Array (VGA)</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-32"><a href="Overview#Boot_Sequence"><span class="tocnumber">7</span> <span class="toctext">Boot Sequence</span></a>
<ul>
<li class="toclevel-2 tocsection-33"><a href="Overview#Real_Mode_Entry"><span class="tocnumber">7.1</span> <span class="toctext">Real Mode Entry</span></a></li>
<li class="toclevel-2 tocsection-34"><a href="Overview#Test_CPU"><span class="tocnumber">7.2</span> <span class="toctext">Test CPU</span></a></li>
<li class="toclevel-2 tocsection-35"><a href="Overview#Load_Rest_of_Code"><span class="tocnumber">7.3</span> <span class="toctext">Load Rest of Code</span></a></li>
<li class="toclevel-2 tocsection-36"><a href="Overview#Position_IDT"><span class="tocnumber">7.4</span> <span class="toctext">Position IDT</span></a></li>
<li class="toclevel-2 tocsection-37"><a href="Overview#Get_RAM_Size"><span class="tocnumber">7.5</span> <span class="toctext">Get RAM Size</span></a></li>
<li class="toclevel-2 tocsection-38"><a href="Overview#Switch_A20_Gate"><span class="tocnumber">7.6</span> <span class="toctext">Switch A20 Gate</span></a></li>
<li class="toclevel-2 tocsection-39"><a href="Overview#Set_up_Keyboard"><span class="tocnumber">7.7</span> <span class="toctext">Set up Keyboard</span></a></li>
<li class="toclevel-2 tocsection-40"><a href="Overview#Switch_Video_Mode"><span class="tocnumber">7.8</span> <span class="toctext">Switch Video Mode</span></a></li>
<li class="toclevel-2 tocsection-41"><a href="Overview#Switch_to_Protected_Mode"><span class="tocnumber">7.9</span> <span class="toctext">Switch to Protected Mode</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-42"><a href="Overview#Interrupt_Handlers"><span class="tocnumber">8</span> <span class="toctext">Interrupt Handlers</span></a>
<ul>
<li class="toclevel-2 tocsection-43"><a href="Overview#Interrupt_Descriptor_Table_(IDT)"><span class="tocnumber">8.1</span> <span class="toctext">Interrupt Descriptor Table (IDT)</span></a></li>
<li class="toclevel-2 tocsection-44"><a href="Overview#Vectors"><span class="tocnumber">8.2</span> <span class="toctext">Vectors</span></a></li>
<li class="toclevel-2 tocsection-45"><a href="Overview#Default_Fault_Handler"><span class="tocnumber">8.3</span> <span class="toctext">Default Fault Handler</span></a>
<ul>
<li class="toclevel-3 tocsection-46"><a href="Overview#Single_Step_Handler"><span class="tocnumber">8.3.1</span> <span class="toctext">Single Step Handler</span></a></li>
<li class="toclevel-3 tocsection-47"><a href="Overview#Debug_Handler"><span class="tocnumber">8.3.2</span> <span class="toctext">Debug Handler</span></a>
<ul>
<li class="toclevel-4 tocsection-48"><a href="Overview#Initialisation"><span class="tocnumber">8.3.2.1</span> <span class="toctext">Initialisation</span></a></li>
<li class="toclevel-4 tocsection-49"><a href="Overview#Show_Registers"><span class="tocnumber">8.3.2.2</span> <span class="toctext">Show Registers</span></a></li>
<li class="toclevel-4 tocsection-50"><a href="Overview#Show_Memory"><span class="tocnumber">8.3.2.3</span> <span class="toctext">Show Memory</span></a></li>
<li class="toclevel-4 tocsection-51"><a href="Overview#Keyboard_3"><span class="tocnumber">8.3.2.4</span> <span class="toctext">Keyboard</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-52"><a href="Overview#Segment_Not_Present_Handler"><span class="tocnumber">8.3.3</span> <span class="toctext">Segment Not Present Handler</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-53"><a href="Overview#User_System_Calls"><span class="tocnumber">8.4</span> <span class="toctext">User System Calls</span></a></li>
<li class="toclevel-2 tocsection-54"><a href="Overview#Default_IRQ_Handler"><span class="tocnumber">8.5</span> <span class="toctext">Default IRQ Handler</span></a>
<ul>
<li class="toclevel-3 tocsection-55"><a href="Overview#Timer_IRQ_Handler"><span class="tocnumber">8.5.1</span> <span class="toctext">Timer IRQ Handler</span></a></li>
<li class="toclevel-3 tocsection-56"><a href="Overview#Keyboard_IRQ_Handler"><span class="tocnumber">8.5.2</span> <span class="toctext">Keyboard IRQ Handler</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-57"><a href="Overview#Utility_Functions"><span class="tocnumber">8.6</span> <span class="toctext">Utility Functions</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-58"><a href="Overview#User_Task"><span class="tocnumber">9</span> <span class="toctext">User Task</span></a>
<ul>
<li class="toclevel-2 tocsection-59"><a href="Overview#User_LDT"><span class="tocnumber">9.1</span> <span class="toctext">User LDT</span></a></li>
<li class="toclevel-2 tocsection-60"><a href="Overview#User_Data"><span class="tocnumber">9.2</span> <span class="toctext">User Data</span></a></li>
<li class="toclevel-2 tocsection-61"><a href="Overview#User_Code"><span class="tocnumber">9.3</span> <span class="toctext">User Code</span></a></li>
<li class="toclevel-2 tocsection-62"><a href="Overview#Draw_Frame"><span class="tocnumber">9.4</span> <span class="toctext">Draw Frame</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-63"><a href="Overview#Executive"><span class="tocnumber">10</span> <span class="toctext">Executive</span></a>
<ul>
<li class="toclevel-2 tocsection-64"><a href="Overview#Update_Registers"><span class="tocnumber">10.1</span> <span class="toctext">Update Registers</span></a></li>
<li class="toclevel-2 tocsection-65"><a href="Overview#Install_Fault_Handlers"><span class="tocnumber">10.2</span> <span class="toctext">Install Fault Handlers</span></a>
<ul>
<li class="toclevel-3 tocsection-66"><a href="Overview#Install_Trace_Handler"><span class="tocnumber">10.2.1</span> <span class="toctext">Install Trace Handler</span></a></li>
<li class="toclevel-3 tocsection-67"><a href="Overview#Install_Debug_Handler"><span class="tocnumber">10.2.2</span> <span class="toctext">Install Debug Handler</span></a></li>
<li class="toclevel-3 tocsection-68"><a href="Overview#Install_No_Segment_Handler"><span class="tocnumber">10.2.3</span> <span class="toctext">Install No Segment Handler</span></a></li>
<li class="toclevel-3 tocsection-69"><a href="Overview#Install_Double_Fault_Handler"><span class="tocnumber">10.2.4</span> <span class="toctext">Install Double Fault Handler</span></a></li>
<li class="toclevel-3 tocsection-70"><a href="Overview#Install_Stack_Fault_Handler"><span class="tocnumber">10.2.5</span> <span class="toctext">Install Stack Fault Handler</span></a></li>
<li class="toclevel-3 tocsection-71"><a href="Overview#Install_Invalid_TSS_Handler"><span class="tocnumber">10.2.6</span> <span class="toctext">Install Invalid TSS Handler</span></a></li>
<li class="toclevel-3 tocsection-72"><a href="Overview#Generic_Fault_Handler_Task"><span class="tocnumber">10.2.7</span> <span class="toctext">Generic Fault Handler Task</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-73"><a href="Overview#Initialise_PICs"><span class="tocnumber">10.3</span> <span class="toctext">Initialise PICs</span></a></li>
<li class="toclevel-2 tocsection-74"><a href="Overview#Initialise_Timer"><span class="tocnumber">10.4</span> <span class="toctext">Initialise Timer</span></a></li>
<li class="toclevel-2 tocsection-75"><a href="Overview#Initialise_Keyboard"><span class="tocnumber">10.5</span> <span class="toctext">Initialise Keyboard</span></a></li>
<li class="toclevel-2 tocsection-76"><a href="Overview#Create_User_Tasks"><span class="tocnumber">10.6</span> <span class="toctext">Create User Tasks</span></a>
<ul>
<li class="toclevel-3 tocsection-77"><a href="Overview#Create_User&#39;s_LDT"><span class="tocnumber">10.6.1</span> <span class="toctext">Create User's LDT</span></a></li>
<li class="toclevel-3 tocsection-78"><a href="Overview#Create_User&#39;s_TSS"><span class="tocnumber">10.6.2</span> <span class="toctext">Create User's TSS</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-79"><a href="Overview#Allocator_Functions"><span class="tocnumber">10.7</span> <span class="toctext">Allocator Functions</span></a>
<ul>
<li class="toclevel-3 tocsection-80"><a href="Overview#RAM_Allocator"><span class="tocnumber">10.7.1</span> <span class="toctext">RAM Allocator</span></a></li>
<li class="toclevel-3 tocsection-81"><a href="Overview#DT_Allocator"><span class="tocnumber">10.7.2</span> <span class="toctext">DT Allocator</span></a></li>
<li class="toclevel-3 tocsection-82"><a href="Overview#IDT_Allocator"><span class="tocnumber">10.7.3</span> <span class="toctext">IDT Allocator</span></a></li>
<li class="toclevel-3 tocsection-83"><a href="Overview#GDT_Allocator"><span class="tocnumber">10.7.4</span> <span class="toctext">GDT Allocator</span></a></li>
<li class="toclevel-3 tocsection-84"><a href="Overview#LDT_Allocator"><span class="tocnumber">10.7.5</span> <span class="toctext">LDT Allocator</span></a></li>
<li class="toclevel-3 tocsection-85"><a href="Overview#TSS_Allocator"><span class="tocnumber">10.7.6</span> <span class="toctext">TSS Allocator</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-86"><a href="Overview#Executive&#39;s_LDT"><span class="tocnumber">10.8</span> <span class="toctext">Executive's LDT</span></a></li>
<li class="toclevel-2 tocsection-87"><a href="Overview#Global_Descriptor_Table"><span class="tocnumber">10.9</span> <span class="toctext">Global Descriptor Table</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-88"><a href="Overview#Padding"><span class="tocnumber">11</span> <span class="toctext">Padding</span></a>
<ul>
<li class="toclevel-2 tocsection-89"><a href="Overview#HardDisk"><span class="tocnumber">11.1</span> <span class="toctext">HardDisk</span></a></li>
<li class="toclevel-2 tocsection-90"><a href="Overview#ISO"><span class="tocnumber">11.2</span> <span class="toctext">ISO</span></a>
<ul>
<li class="toclevel-3 tocsection-91"><a href="Overview#Definitions"><span class="tocnumber">11.2.1</span> <span class="toctext">Definitions</span></a></li>
<li class="toclevel-3 tocsection-92"><a href="Overview#Primary_Volume"><span class="tocnumber">11.2.2</span> <span class="toctext">Primary Volume</span></a></li>
<li class="toclevel-3 tocsection-93"><a href="Overview#Boot_Volume"><span class="tocnumber">11.2.3</span> <span class="toctext">Boot Volume</span></a></li>
<li class="toclevel-3 tocsection-94"><a href="Overview#Terminator_Volume"><span class="tocnumber">11.2.4</span> <span class="toctext">Terminator Volume</span></a></li>
<li class="toclevel-3 tocsection-95"><a href="Overview#Catalog_Sector"><span class="tocnumber">11.2.5</span> <span class="toctext">Catalog Sector</span></a></li>
<li class="toclevel-3 tocsection-96"><a href="Overview#Path_Table(s)"><span class="tocnumber">11.2.6</span> <span class="toctext">Path Table(s)</span></a></li>
<li class="toclevel-3 tocsection-97"><a href="Overview#Root_Directory"><span class="tocnumber">11.2.7</span> <span class="toctext">Root Directory</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-98"><a href="Overview#Floppy"><span class="tocnumber">11.3</span> <span class="toctext">Floppy</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-99"><a href="Overview#Experiments"><span class="tocnumber">12</span> <span class="toctext">Experiments</span></a>
<ul>
<li class="toclevel-2 tocsection-100"><a href="Overview#HLT_vs_Yield_vs_LOOP"><span class="tocnumber">12.1</span> <span class="toctext">HLT vs Yield vs LOOP</span></a></li>
<li class="toclevel-2 tocsection-101"><a href="Overview#System.TSS"><span class="tocnumber">12.2</span> <span class="toctext">System.TSS</span></a></li>
<li class="toclevel-2 tocsection-102"><a href="Overview#Default_bit_in_Code_Descriptor"><span class="tocnumber">12.3</span> <span class="toctext">Default bit in Code Descriptor</span></a></li>
</ul>
</li>
</ul>
</div>

<h1><span class="mw-headline" id="Development_Environment">Development Environment</span></h1>
<h2><span class="mw-headline" id="Development_Host">Development Host</span></h2>
<dl><dd><i>Main article:</i> <a href="Host" title="User:Johnburger/Demo/Host">User:Johnburger/Demo/Host</a></dd></dl>
<p>I wanted this example to be available to as broad an audience as possible, so I've made very few assumptions. The development machine's OS can be Windows (tested on WinXP 32-bit and Win7 64-bit) or Linux (tested on Ubuntu 12.04), and I presume Macintosh as well.
</p><p>Of course, to assemble the source code requires an assembler. I don't particularly like NASM (<a href="../NASMCritique" title="User:Johnburger/NASMCritique">here's why</a>), but it <i>is</i> portable and it <i>does</i> produce raw binary files, which is just perfect for what I need!
</p>
<h2><span class="mw-headline" id="Target_Machine">Target Machine</span></h2>
<dl><dd><i>Main article:</i> <a href="Target" title="User:Johnburger/Demo/Target">User:Johnburger/Demo/Target</a></dd></dl>
<p>The target machine needs to satisfy all of the following criteria:
</p>
<ul><li>Is at least a '386 (tested on an Olivetti 386SX-16, and Asus Core i7);</li>
<li>Has at least 640K of RAM (Bill Gates was right!);</li>
<li>Obeys the BIOS Boot Specification 1.01 (i.e. not EFI/UEFI);</li>
<li>Can boot off a Floppy, Hard Disk, USB, CD or ISO image (Yep! MultiBoot at its best!).</li></ul>
<p>Note that I've tested this example with both VirtualPC and VMWare Player on Windows, and VirtualBox on Linux (Ubuntu 12.04), and it worked fine.
</p>
<h1><span class="mw-headline" id="Coding_Style">Coding Style</span></h1>
<h2><span class="mw-headline" id="Hierarchical_Code">Hierarchical Code</span></h2>
<p>It must be my mindset: I think in hierarchies, and I've structured the source code that way too. Not only the code, but even the <em>identifiers</em>! NASM lets me use dots to categorise (and sub-categorise, and sub-sub-...) identifiers - it sometimes makes for some long names, but I <em>hope</em> it will make it clearer for readers too. (It certainly did for me!) Besides, it also let me do some interesting macro tricks.
</p><p>The identifiers all start with a category: <code>x86</code> (definitions), <code>BIOS</code> (definitions), <code>Dev</code> (definitions), <code>Boot</code> (definitions and code), <code>Ints</code> (definitions and code), etc. These categories correspond to a top-level directory of the hierarchy. The second level is the subject within the category being defined: maybe a component of the x86; or a particular device; or a phase of the boot process. Of course, these correspond to sub-directories of the hierarchy.
</p><p>Finally, you'll note that there is only one <code>.asm</code> file in the whole system. That is because it <code>%include</code>s all the other files, that themselves won't assemble standalone. They've all got the <code>.inc</code> extension to indicate this.
</p>
<h2><span class="mw-headline" id="Use_the_Assembler_as_Much_as_Possible">Use the Assembler as Much as Possible</span></h2>
<p>Any calculations that can be performed at assembly time are CPU cycles that don't have to be performed at run-time. To that end, I've defined constants, and expressions, and tables, and even <em>checksums</em> so that as much as possible only raw numbers need to be output to the binary image. One of the advantages of NASM is that it has powerful macro facilities - hey, being able to write a checksum algorithm in macros to make our job easier has to be a good thing!
</p>
<h2><span class="mw-headline" id="Define_System_Tables_at_Assembly_Time">Define System Tables at Assembly Time</span></h2>
<p>You'll notice that many tables have been built in source code, rather than at run time. Not all: some require the environment to be running to generate the correct values. To allow building tables in source code, many symbols and labels are defined to keep track of where the assembler is up to; and these symbols are often inter-related, and build upon each other such that changing one will change others.
</p><p>To that end, I've also used macros to hide as many implementation details as possible at the time of invocation. Of course, you can look at the magic behind the scenes (<code>Demo.inc</code>, <code>x86/Desc.inc</code> and <code>Pad/ISO/Defn.inc</code> are the main files here), but it makes for concise one-liners at the point of invocation rather than convoluted NASM code to instantiate the various structures.
</p>
<h1><span class="mw-headline" id="The_Source_Code">The Source Code</span></h1>
<dl><dd><i>Main article:</i> <a href="Demo" title="User:Johnburger/Demo/Demo">User:Johnburger/Demo/Demo</a></dd></dl>
<p>The main code simply <code>%include</code>s all the other code, in a hierarchical fashion to make each aspect (hopefully) easily digestible. The different sections (and their potential sub-sections) are outlined below.
</p>
<h2><span class="mw-headline" id="Configurable_settings">Configurable settings</span></h2>
<dl><dd><i>Main article:</i> <a href="Demo.inc" title="User:Johnburger/Demo/Demo.inc">User:Johnburger/Demo/Demo.inc</a></dd></dl>
<p>The modifiable parameters that the rest of the code uses are embodied in this file. By all means experiment - but don't blame me when weird things happen! If you need help understanding what happened, however, please feel free to drop me a message.
</p>
<h2><span class="mw-headline" id="Global_Data">Global Data</span></h2>
<dl><dd><i>Main article:</i> <a href="Data.inc" title="User:Johnburger/Demo/Data.inc">User:Johnburger/Demo/Data.inc</a></dd></dl>
<p>Although this Demonstrator uses Local Descriptor Tables, some data still needs to be Global. For example, interrupt handlers that need to store data, such as the Keyboard handler, can only be guaranteed access to a Data Segment if it resides in the Global Descriptor Table.
</p>
<h1><span class="mw-headline" id="x86_Definitions">x86 Definitions</span></h1>
<dl><dd><i>Main article:</i> <a href="x86/x86" title="User:Johnburger/Demo/x86/x86">User:Johnburger/Demo/x86/x86</a></dd></dl>
<p>The designers of the '386 did more than just define opcodes to execute; they also defined a large number of system structures that define how the system will work in some pretty sophisticated scenarios. When coding for those, it pays to <i><b>NOT</b></i> use "magic numbers" - identifiers not only help comment the code, but make it less likely that you'll overlook the bug that has caused your masterpiece to triple-fault for the 1,847th time!
</p>
<h2><span class="mw-headline" id="EFlags">EFlags</span></h2>
<dl><dd><i>Main article:</i> <a href="x86/EFlags" title="User:Johnburger/Demo/x86/EFlags">User:Johnburger/Demo/x86/EFlags</a></dd></dl>
<p>It's not often that you need to access individual flags in the <code>EFlags</code> register: most of the time you can use <code>Jcc</code> to do the tests; or for the more sophisticated programmer, <code>SETcc</code>. But <code>EFlags</code> is 32 bits, and some of the flags are <em>very</em> useful - in particular, <code>TF</code> (the Trace Flag) calls the debugger after Every. Single. Instruction. Set this, and you can step through your code!
</p><p>To that end, I've defined every flag in <code>EFlags</code> as a bit-mask, using the Intel-defined name.
</p>
<h2><span class="mw-headline" id="Segment">Segment</span></h2>
<dl><dd><i>Main article:</i> <a href="x86/Seg" title="User:Johnburger/Demo/x86/Seg">User:Johnburger/Demo/x86/Seg</a></dd></dl>
<p>Once you're in Protected Mode, a Segment Register takes on a whole new personality - that deserve its own set of definitions.
</p>
<h2><span id="Control_Register_0_.28CR0.29"></span><span class="mw-headline" id="Control_Register_0_(CR0)">Control Register 0 (CR0)</span></h2>
<dl><dd><i>Main article:</i> <a href="x86/CR0" title="User:Johnburger/Demo/x86/CR0">User:Johnburger/Demo/x86/CR0</a></dd></dl>
<p>Control Register 0 covers such things as whether the CPU is in Protected Mode, or in Paging Mode, or expecting Aligned accesses, or ... In short, you can change the entire architecture of your system by changing a couple of bits. Better define them, using Intel's defined names...
</p>
<h2><span class="mw-headline" id="Descriptors">Descriptors</span></h2>
<dl><dd><i>Main article:</i> <a href="x86/Desc" title="User:Johnburger/Demo/x86/Desc">User:Johnburger/Demo/x86/Desc</a></dd></dl>
<p>Segment Descriptors reside in Descriptor Tables. There are three types: The Global Descriptor Table, the Local Descriptor Table, and the Interrupt Descriptor Table. Each have their functions and limitations, but all have eight-byte Descriptors in them with a common structure. That means that not only do they deserve definitions, but since they're going to be used a <em>lot</em> throughout the system, some macros would be useful too...
</p>
<h2><span id="Task_State_Segment_.28TSS.29"></span><span class="mw-headline" id="Task_State_Segment_(TSS)">Task State Segment (TSS)</span></h2>
<dl><dd><i>Main article:</i> <a href="x86/TSS" title="User:Johnburger/Demo/x86/TSS">User:Johnburger/Demo/x86/TSS</a></dd></dl>
<p>The largest structure defined by Intel (actually, that's not true - the current state of the Floating Point Unit, with its <strong>huge</strong> registers, is bigger...) is the Task State Segment (TSS). It is used for hardware Task Switching, but it is also used for some other mechanisms of the CPU (e.g. switching privilege levels...) For a long time the Intel documentation actually stated that TSSes weren't required for systems that didn't use hardware switching - I disaverred them of that quickly enough...
</p>
<h2><span id="Interrupt_Vector_Table_.28IVT.29"></span><span class="mw-headline" id="Interrupt_Vector_Table_(IVT)">Interrupt Vector Table (IVT)</span></h2>
<dl><dd><i>Main article:</i> <a href="x86/IVT" title="User:Johnburger/Demo/x86/IVT">User:Johnburger/Demo/x86/IVT</a></dd></dl>
<p>While the TSS is a single structure, the Interrupt Vector Table is merely a collection of 256 <code>FAR</code> pointers - larger, true, but merely a collection. In Real Mode, the IVT is <em>always</em> at 0000h:0000h, and <em>always</em> contains pointers to routines - although IBM and Microsoft subverted this <i><b>horribly</b></i> when they started using various interrupts to point to data tables... Can you imagine what would happen if code did an <code>INT 41h</code> or <code>INT 46h</code>? Executing data as code should send shudders through any programmer...
</p>
<h1><span class="mw-headline" id="BIOS_Definitions">BIOS Definitions</span></h1>
<dl><dd><i>Main article:</i> <a href="BIOS/BIOS" title="User:Johnburger/Demo/BIOS/BIOS">User:Johnburger/Demo/BIOS/BIOS</a></dd></dl>
<p>Whereas Intel defined the hardware silicon of the '386, IBM and other BIOS vendors added software extensions in the form of system calls, vectored through the <code>INT</code> instruction. Don't get me <em>started</em> on IBM not following Intel's mandate to reserve the first 32 interrupts for themselves - IBM's first interrupt (after Intel's last-defined one on the 8086) that they decided to use was to dump the current contents of the screen to a printer. Sounds like a debug function to me...
</p><p>Regardless, the fact that the BIOS defined the operation of the PC gave it gravitas, and as the industry evolved various manufacturers published standards and specifications to make it easy for programmers to use their services. In short, their efforts required knowledge and information for programmers to use. In other words: definitions!
</p>
<h2><span class="mw-headline" id="A20_Gate">A20 Gate</span></h2>
<dl><dd><i>Main article:</i> <a href="BIOS/A20" title="User:Johnburger/Demo/BIOS/A20">User:Johnburger/Demo/BIOS/A20</a></dd></dl>
<h2><span class="mw-headline" id="RAM_Map">RAM Map</span></h2>
<dl><dd><i>Main article:</i> <a href="BIOS/RAMMap" title="User:Johnburger/Demo/BIOS/RAMMap">User:Johnburger/Demo/BIOS/RAMMap</a></dd></dl>
<h2><span class="mw-headline" id="Keyboard">Keyboard</span></h2>
<dl><dd><i>Main article:</i> <a href="BIOS/Key" title="User:Johnburger/Demo/BIOS/Key">User:Johnburger/Demo/BIOS/Key</a></dd></dl>
<h2><span id="Video_Graphics_Array_.28VGA.29"></span><span class="mw-headline" id="Video_Graphics_Array_(VGA)">Video Graphics Array (VGA)</span></h2>
<dl><dd><i>Main article:</i> <a href="BIOS/VGA" title="User:Johnburger/Demo/BIOS/VGA">User:Johnburger/Demo/BIOS/VGA</a></dd></dl>
<h2><span class="mw-headline" id="Disk">Disk</span></h2>
<dl><dd><i>Main article:</i> <a href="BIOS/Disk" title="User:Johnburger/Demo/BIOS/Disk">User:Johnburger/Demo/BIOS/Disk</a></dd></dl>
<h2><span id="Master_Boot_Record_.28MBR.29"></span><span class="mw-headline" id="Master_Boot_Record_(MBR)">Master Boot Record (MBR)</span></h2>
<dl><dd><i>Main article:</i> <a href="BIOS/MBR" title="User:Johnburger/Demo/BIOS/MBR">User:Johnburger/Demo/BIOS/MBR</a></dd></dl>
<h2><span class="mw-headline" id="Memory_Map">Memory Map</span></h2>
<dl><dd><i>Main article:</i> <a href="BIOS/MemMap" title="User:Johnburger/Demo/BIOS/MemMap">User:Johnburger/Demo/BIOS/MemMap</a></dd></dl>
<h1><span class="mw-headline" id="Device_Definitions">Device Definitions</span></h1>
<dl><dd><i>Main article:</i> <a href="Dev/Dev" title="User:Johnburger/Demo/Dev/Dev">User:Johnburger/Demo/Dev/Dev</a></dd></dl>
<p>To write a device driver to control a peripheral requires detailed knowledge of the programming interface to that device. Some are straightforward. Others are highly complex. And there are different manufacturers out there that each use their own proprietary interface to get their devices to behave like others of the same type.
</p><p>One of the best things that has happened since the development of the original IBM PC was the definition of the <a href="../../Universal_Serial_Bus" title="Universal Serial Bus">Universal Serial Bus</a> (USB) standard. There was <em>one</em> programming interface that all USB controller manufacturers had to implement, which meant that there was only one USB driver that needed to be written to work with all controllers! Of course, then USB 1.1 came out, requiring changes. Then USB 2.0. Then USB 3.0...
</p><p>Regardless, even before that there were some industry-standard interfaces that all manufacturers adhered to, almost by necessity: back in the DOS days installing device drivers to handle proprietary formats wasn't very user friendly, with <code>CONFIG.SYS</code> editing and arcane IRQ, I/O and memory parameters. Far better to use the default pre-prepared interfaces that were already coded in the BIOS.
</p><p>The following files have definitions for the industry-standard implementations of the devices. Note that the code that uses these definitions might be in the <a href="Boot/Boot" title="User:Johnburger/Demo/Boot/Boot">Boot</a> section or the <a href="Exec/Exec" title="User:Johnburger/Demo/Exec/Exec">Executive</a> section, or even the <a href="Ints/Ints" title="User:Johnburger/Demo/Ints/Ints">Interrupt handlers</a>.
</p>
<h2><span class="mw-headline" id="A20_Gate_2">A20 Gate</span></h2>
<dl><dd><i>Main article:</i> <a href="Dev/A20" title="User:Johnburger/Demo/Dev/A20">User:Johnburger/Demo/Dev/A20</a></dd></dl>
<h2><span id="Priority_Interrupt_Controller_.28PIC.29"></span><span class="mw-headline" id="Priority_Interrupt_Controller_(PIC)">Priority Interrupt Controller (PIC)</span></h2>
<dl><dd><i>Main article:</i> <a href="Dev/PIC" title="User:Johnburger/Demo/Dev/PIC">User:Johnburger/Demo/Dev/PIC</a></dd></dl>
<h2><span id="Periodic_Interval_Timer_.28PIT.29"></span><span class="mw-headline" id="Periodic_Interval_Timer_(PIT)">Periodic Interval Timer (PIT)</span></h2>
<dl><dd><i>Main article:</i> <a href="Dev/Timer" title="User:Johnburger/Demo/Dev/Timer">User:Johnburger/Demo/Dev/Timer</a></dd></dl>
<h2><span class="mw-headline" id="Keyboard_2">Keyboard</span></h2>
<dl><dd><i>Main article:</i> <a href="Dev/Key" title="User:Johnburger/Demo/Dev/Key">User:Johnburger/Demo/Dev/Key</a></dd></dl>
<h2><span id="Video_Graphics_Array_.28VGA.29_2"></span><span class="mw-headline" id="Video_Graphics_Array_(VGA)_2">Video Graphics Array (VGA)</span></h2>
<dl><dd><i>Main article:</i> <a href="Dev/VGA" title="User:Johnburger/Demo/Dev/VGA">User:Johnburger/Demo/Dev/VGA</a></dd></dl>
<h1><span class="mw-headline" id="Boot_Sequence">Boot Sequence</span></h1>
<dl><dd><i>Main article:</i> <a href="Boot/Boot" title="User:Johnburger/Demo/Boot/Boot">User:Johnburger/Demo/Boot/Boot</a></dd></dl>
<p>When a PC first turns on, the familiar BIOS screen is shown while it initialises and tests various aspects of the system. It then determines which device to boot from, loads the boot sector (usually the first sector on the device, but for CDs it's the 17th - go figure, but I've used that to our advantage!), and then jumps to the loaded code.
</p><p>Note that one of the first things that this boot code needs to do is load <i>more</i> code - the 512 or 2,048 bytes that the BIOS loads isn't very much! But before it can do anything, the code first needs to understand the starting point that it is working with.
</p>
<h2><span class="mw-headline" id="Real_Mode_Entry">Real Mode Entry</span></h2>
<dl><dd><i>Main article:</i> <a href="Boot/Entry" title="User:Johnburger/Demo/Boot/Entry">User:Johnburger/Demo/Boot/Entry</a></dd></dl>
<p>When the BIOS jumps to the loaded code, the CPU is in Real Mode. Given that the ultimate destination of this demonstration is Protected Mode, this boot code obviously needs to perform the switch. But once the switch is performed, the BIOS routines are no longer available. One way to handle this is to switch back whenever the BIOS is to be called. Another is to do the calls up front. The latter is what this Demonstrator does.
</p>
<h2><span class="mw-headline" id="Test_CPU">Test CPU</span></h2>
<dl><dd><i>Main article:</i> <a href="Boot/CPU" title="User:Johnburger/Demo/Boot/CPU">User:Johnburger/Demo/Boot/CPU</a></dd></dl>
<p>The first thing to do is confirm that the CPU is indeed a '386 or better. If not, there's no point in continuing!
</p>
<h2><span class="mw-headline" id="Load_Rest_of_Code">Load Rest of Code</span></h2>
<dl><dd><i>Main article:</i> <a href="Boot/Load" title="User:Johnburger/Demo/Boot/Load">User:Johnburger/Demo/Boot/Load</a></dd></dl>
<p>The next thing is to load the rest of the code. From where, and to what address though? Luckily the BIOS Boot Specification helps us with the From question: it provides the device number, and the sector is the "next" one. Where in memory is arbitrary: just make sure you avoid anything important - including the code currently being executed! Check the <a href="Boot/Boot#Memory_Map" title="User:Johnburger/Demo/Boot/Boot">memory map</a>.
</p><p>Of course, ideally all the Real Mode stuff will fit in the first 510 bytes. (Why not 512? We need the 0xAA55 BIOS Signature at the end.) If we can manage that, then the rest of the code can be loaded anywhere we like, and this code can be abandoned - tossed away like a booster rocket on a multi-stage orbital insertion.
</p>
<h2><span class="mw-headline" id="Position_IDT">Position IDT</span></h2>
<dl><dd><i>Main article:</i> <a href="Boot/IDT" title="User:Johnburger/Demo/Boot/IDT">User:Johnburger/Demo/Boot/IDT</a></dd></dl>
<p>Part of the design of this Demonstrator is to define some startup system tables at assemble time. One particular table is the default Interrupt Descriptor Table - it costs more in assembly instructions to initialize the IDT than it does to simply (effectively) hard-code it. The problem is that hard-coding it means that it's part of the binary image just loaded - but it's not where we want it. Solution? Move it!
</p><p>Although you <i>can</i> set up the IDT once you've entered Protected Mode, I found that having it set up from the very first Protected Mode instruction made for better fault debugging. Of course it took a <b>long</b> time even then before I had the fault handlers themselves working - but as soon as I did, I could see where the problem instruction was and development proceeded <i>much</i> faster.
</p>
<h2><span class="mw-headline" id="Get_RAM_Size">Get RAM Size</span></h2>
<dl><dd><i>Main article:</i> <a href="Boot/RAM" title="User:Johnburger/Demo/Boot/RAM">User:Johnburger/Demo/Boot/RAM</a></dd></dl>
<p>We should have asked this question before loading more code - if there's not enough RAM, there's no point in continuing. But '386s were always delivered with at least 1 MB of RAM, which is more than enough for our purposes!
</p><p>But it is important to find out not only what RAM there is, but what RAM there isn't - amount of Extended Memory, where memory holes might exist, what memory the BIOS is using, and even what RAM was detected as bad during boot. To find all this out requires the help of the BIOS, so we need to save this information away for later use.
</p>
<h2><span class="mw-headline" id="Switch_A20_Gate">Switch A20 Gate</span></h2>
<dl><dd><i>Main article:</i> <a href="Boot/A20" title="User:Johnburger/Demo/Boot/A20">User:Johnburger/Demo/Boot/A20</a></dd></dl>
<p>As a legacy of the original IBM PC, this one is never going away! To protect against Real Mode Wrap, at boot time the A20 line is gated off. This needs to be gated on before Extended Memory can be used - and that requires the BIOS. There are a couple of other techniques tried if the BIOS doesn't support it.
</p>
<h2><span class="mw-headline" id="Set_up_Keyboard">Set up Keyboard</span></h2>
<dl><dd><i>Main article:</i> <a href="Boot/Key" title="User:Johnburger/Demo/Boot/Key">User:Johnburger/Demo/Boot/Key</a></dd></dl>
<p>The keyboard doesn't need much initializing - the BIOS initialization works well enough. However, any special setup can be done here.
</p>
<h2><span class="mw-headline" id="Switch_Video_Mode">Switch Video Mode</span></h2>
<dl><dd><i>Main article:</i> <a href="Boot/VGA" title="User:Johnburger/Demo/Boot/VGA">User:Johnburger/Demo/Boot/VGA</a></dd></dl>
<p>For the purposes of this Demonstrator, I didn't want to have to deal with the complexities of pixel-addressable graphics. The PC's video card has a number of different text modes, and that's sufficient for displaying stuff for the user in a quick and convenient manner.
</p><p>By default I use the 80x50 text mode, but for experimentation I've also provided the code to switch to 90x60 mode. Not every PC or Virtualisation program supports this, so if you do enable it prepare to revert if it doesn't work! Not having it also saves a large number of bytes in the initial boot sector...
</p>
<h2><span class="mw-headline" id="Switch_to_Protected_Mode">Switch to Protected Mode</span></h2>
<dl><dd><i>Main article:</i> <a href="Boot/PM" title="User:Johnburger/Demo/Boot/PM">User:Johnburger/Demo/Boot/PM</a></dd></dl>
<p>Switching to protected mode is three instructions - four if you include disabling interrupts first (a <i>very</i> smart move!) After all, all the previous code has set up all of the system structures...
</p><p>You can then <code>JMP</code> to the Protected Mode code - and considering that the first thing that needs to happen is for the Segment Registers to be updated, we might as well start with the Code Segment Register (<code>CS</code>) first: make the first <code>JMP</code> far. And since we're using LDTs for this Demonstrator, why not <code>JMP</code> into one?
</p>
<h1><span class="mw-headline" id="Interrupt_Handlers">Interrupt Handlers</span></h1>
<dl><dd><i>Main article:</i> <a href="Ints/Ints" title="User:Johnburger/Demo/Ints/Ints">User:Johnburger/Demo/Ints/Ints</a></dd></dl>
<p>While developing, any unexpected interrupt is a calamity! To that end, I decided to simply dump the current state onto the screen, overwriting whatever was there already. This required all sorts of labels and register-to-hex display routines, but the result is unambiguous: something horrible has happened, and <i>this</i> is where it happened.
</p><p>What then? All we can really do is reboot the computer, but it'd be nice to wait until you can write down the critical areas. (Screen dump? Don't make me laugh!) &lt;Ctrl&gt;&lt;Alt&gt;&lt;Del&gt; is a time-honoured tradition - let's make it that!
</p><p>Of course, it'd also be nice to find out exactly which <i>flavour</i> of interrupt actually occurred. It'd be nice to point all Fault vectors to the same handler, but a little extra sophistication allows us to display the interrupt number as well. To do that, we need separate entry points for each vector: but that's OK, there's a complicating factor anyway.
</p><p>A half-dozen of the Intel-defined exceptions don't follow the standard rules. (Typical hardware engineers. Sheesh!) As well as doing the <i>normal</i> things of pushing onto the stack <code>EFLAGS</code>, then <code>CS</code>, then <code>EIP</code>, <i>some</i> interrupts also push an Error Code. And that Error Code can be useful. That means that either those "special" interrupts need special handling - or that we can modify all the <i>other</i> interrupts to pretend that they push Error Codes too...
</p><p>I decided to do just that: provide separate entry points for each Interrupt handler, and for those that didn't have an Error Code, push a Zero onto the Stack as though it did. From there, all Interrupt handlers would push their number onto the stack, and call the default Fault handler.
</p>
<h2><span id="Interrupt_Descriptor_Table_.28IDT.29"></span><span class="mw-headline" id="Interrupt_Descriptor_Table_(IDT)">Interrupt Descriptor Table (IDT)</span></h2>
<dl><dd><i>Main article:</i> <a href="Ints/IDT" title="User:Johnburger/Demo/Ints/IDT">User:Johnburger/Demo/Ints/IDT</a></dd></dl>
<p>It was less code to embed the initial entries of the starting IDT as data than to write code to reproduce it. In fact, given that I wanted the IDT to be available from the very first Protected Mode instruction, that IDT setup code had to be in Real Mode, where there was even less room! So I deliberately put the IDT at the beginning of the block loaded by the Real Mode loader for it to relocate to its final position.
</p>
<h2><span class="mw-headline" id="Vectors">Vectors</span></h2>
<dl><dd><i>Main article:</i> <a href="Ints/Vectors" title="User:Johnburger/Demo/Ints/Vectors">User:Johnburger/Demo/Ints/Vectors</a></dd></dl>
<p>These are the entry points for each of the Intel-reserved exception handlers.
</p>
<h2><span class="mw-headline" id="Default_Fault_Handler">Default Fault Handler</span></h2>
<dl><dd><i>Main article:</i> <a href="Ints/Fault" title="User:Johnburger/Demo/Ints/Fault">User:Johnburger/Demo/Ints/Fault</a></dd></dl>
<p>The default Fault handler basically smears the screen with a <b>huge</b> amount of information: the hex representation of every register I can get my hands on - <i>with labels</i>. In a nice bright-white-on-red-background, in case anyone misses the point. Start copying...
</p><p>Needless to say, as a default handler it is <i>less</i> than subtle. Especially since it doesn't try to correct the problem - however, after displaying the registers it returns to the faulting instruction. That should immediately re-raise the exception, <a href="../Dingle" title="User:Johnburger/Dingle">Dingling(tm)</a> the interrupt location on the screen...
</p><p>Note that some of the Fault sources are not simple interrupts: they're full-blown Task switches. I still wanted to display that information too, since not doing so is <i>very</i> misleading - it would indicate the current environment, not the faulting one. For those I need to extract the information, not from the Stack, but from the relevant TSS. Luckily the Backlink field of the current TSS holds the calling TSS, so I can use that to extract the relevant fields - just as soon as I work out which Segment Descriptor to load!
</p><p>Incidentally: even though a fault has been displayed, you should still be able to invoke the <a href="Ints/Debug/Debug" title="User:Johnburger/Demo/Ints/Debug/Debug">debugger</a>...
</p>
<h3><span class="mw-headline" id="Single_Step_Handler">Single Step Handler</span></h3>
<dl><dd><i>Main article:</i> <a href="Ints/Single" title="User:Johnburger/Demo/Ints/Single">User:Johnburger/Demo/Ints/Single</a></dd></dl>
<p>To experiment with debugging, I've hooked the Single Step Interrupt (INT 1) to make it simply wait in a tight loop until either &lt;Space&gt; or &lt;Enter&gt; is pressed:
</p>
<ul><li>While waiting for a keypress, I decided to indicate that it was waiting by incrementing a screen location. That tight loop is very tight indeed...</li>
<li>If &lt;Space&gt; is pressed, the routine simply returns. After the next instruction is executed, this same Handler will be re-entered, waiting for the next keypress. Single Step!</li>
<li>If &lt;Enter&gt; is pressed, then it also returns: but before doing so, it turns off Single Stepping - for this Task at least!</li></ul>
<p>To turn on Single Stepping in the first place, simply add the <code>TRACE</code> macro to the desired place. This sets <code>TF</code>, the Trace Flag, in the <code><a href="x86/EFlags" title="User:Johnburger/Demo/x86/EFlags">EFLAGS</a></code> register.
</p><p>One cute place to add <code>TRACE</code> is just at the start of <code>User</code>'s <code>DrawFrame</code> routine. That will mean that <b>all</b> the Tasks will be in Single Step mode, and you won't see anything until you hold down the Space Bar for long enough that the borders will start to be drawn. From there you can press &lt;Enter&gt; to continue individual Tasks until only a few "targets" remain.
</p>
<h3><span class="mw-headline" id="Debug_Handler">Debug Handler</span></h3>
<dl><dd><i>Main article:</i> <a href="Ints/Debug/Debug" title="User:Johnburger/Demo/Ints/Debug/Debug">User:Johnburger/Demo/Ints/Debug/Debug</a></dd></dl>
<p>I really wanted to see the memory that I was so carefully constructing. System tables, stack depths, and even the screen - I wanted to look at them. But I also wanted to be able to interact with it: in short, I wanted a memory viewer that I could invoke at run-time. There's a key on the keyboard labeled &lt;Break&gt;. Let's see what pressing it does...
</p>
<h4><span class="mw-headline" id="Initialisation">Initialisation</span></h4>
<dl><dd><i>Main article:</i> <a href="Ints/Debug/Init" title="User:Johnburger/Demo/Ints/Debug/Init">User:Johnburger/Demo/Ints/Debug/Init</a></dd></dl>
<p>First, I need to initialise the current run-time context. Prevent the code from switching to a different Task, set up some variables, then...
</p>
<h4><span class="mw-headline" id="Show_Registers">Show Registers</span></h4>
<dl><dd><i>Main article:</i> <a href="Ints/Debug/Regs" title="User:Johnburger/Demo/Ints/Debug/Regs">User:Johnburger/Demo/Ints/Debug/Regs</a></dd></dl>
<p>Display the saved registers. Luckily, there's a table already set up to define where the registers are saved in memory during an interrupt - just need to use the funky screen location parameter...
</p>
<h4><span class="mw-headline" id="Show_Memory">Show Memory</span></h4>
<dl><dd><i>Main article:</i> <a href="Ints/Debug/Show" title="User:Johnburger/Demo/Ints/Debug/Show">User:Johnburger/Demo/Ints/Debug/Show</a></dd></dl>
<p>Then we can display the current memory contents. We wouldn't want to raise an exception trying to access inaccessible memory, so pay careful attention to the current Segment's limits. Oh, and if the Segment happens to be an <a href="../../Expand_Down" class="mw-redirect" title="Expand Down">Expand Down</a> segment, we need to totally invert the memory pointers for where we're looking at. In fact: let's take the opportunity to <a href="x86/Desc" title="User:Johnburger/Demo/x86/Desc">highlight</a> the fact that it is an <a href="../../Expand_Down" class="mw-redirect" title="Expand Down">Expand Down</a> Segment by displaying it at the bottom of the screen!
</p>
<h4><span class="mw-headline" id="Keyboard_3">Keyboard</span></h4>
<dl><dd><i>Main article:</i> <a href="Ints/Debug/Key" title="User:Johnburger/Demo/Ints/Debug/Key">User:Johnburger/Demo/Ints/Debug/Key</a></dd></dl>
<p>Finally, a debugger without controls is not very useful. Let's look at the keypresses stored in the Global Data Segment and act on various direction arrows and context changing keys.
</p><p>(Uh oh: what happens if we invoke the debugger while the debugger is running. Let's try it... Wow!)
</p>
<h3><span class="mw-headline" id="Segment_Not_Present_Handler">Segment Not Present Handler</span></h3>
<dl><dd><i>Main article:</i> <a href="Ints/NoSeg" title="User:Johnburger/Demo/Ints/NoSeg">User:Johnburger/Demo/Ints/NoSeg</a></dd></dl>
<p>Just to show what could happen in a full-blown Operating System, I decided to implement a quick-'n'-dirty Segment Not Present exception handler. Of course, it assumes that the segment referenced really <i>is</i> present, but that the Segment Present bit in the descriptor is merely off.
</p><p>This handler discovers the offending segment in the appropriate Descriptor Table, enables the Present bit, and returns. The faulting instruction will be re-executed, and (hopefully!) things will proceed as normal!
</p>
<h2><span class="mw-headline" id="User_System_Calls">User System Calls</span></h2>
<dl><dd><i>Main article:</i> <a href="Ints/User" title="User:Johnburger/Demo/Ints/User">User:Johnburger/Demo/Ints/User</a></dd></dl>
<p>IBM used the <code>INT</code> paradigm to invoke system calls on the first PC. Microsoft continued that practice with MS-DOS. As more sophisticated techniques came about - especially <code>SYSCALL</code> - using <code>INT</code> has become less common. Indeed, Intel suggests using Call Gates since they're more Protected - they can automatically copy parameters between stacks.
</p><p>But for purposes of this Demonstrator, I've added my own two <code>INT</code> calls, to change the way that the individual Tasks behave. Experiment!
</p>
<h2><span class="mw-headline" id="Default_IRQ_Handler">Default IRQ Handler</span></h2>
<dl><dd><i>Main article:</i> <a href="Ints/IRQs" title="User:Johnburger/Demo/Ints/IRQs">User:Johnburger/Demo/Ints/IRQs</a></dd></dl>
<p>An Interrupt ReQuest (IRQ) is different from an internal exception or fault. For one thing, there's an (impatient) device out there! If we're not careful, the device will continue to interrupt - if we simply returned, the unacknowledged interrupt could immediately re-interrupt the CPU, effectively locking it up forever.
</p><p>The correct procedure on an externel interrupt is to "placate" the device to stop it from raising more interrupts for the same event, and then to acknowledge the interrupt on the PIC(s) that formed part of the process (in the order Slave then Master - this is important). If you then want to continue to process the interrupt, that's your lookout.
</p><p>The problem is: what should the <i>default</i> IRQ handler do? It won't know how to "placate" every device out there - it can't. So I don't even try. I <i>could</i> acknowledge the PIC(s) and simply return, at the risk of entering an infinite interrupt loop - but at another level: <i><b>WHY is the PIC interrupting me for an unknown IRQ anyway?</b></i>
</p><p>When the PIC is initialised, all interrupts are turned off. That means that it shouldn't be generating interrupts for unknown sources. Therefore, quite simply, the default IRQ handler will simply use the default Fault handler, and put an error code of <del>C0DE</del> (I decided to use 0 again - 0C0DEh used too many unnecessary bytes in the code!)
</p>
<h3><span class="mw-headline" id="Timer_IRQ_Handler">Timer IRQ Handler</span></h3>
<dl><dd><i>Main article:</i> <a href="Ints/Timer" title="User:Johnburger/Demo/Ints/Timer">User:Johnburger/Demo/Ints/Timer</a></dd></dl>
<p>A Timer interrupt is quite expected: in fact, my default rate is 1,000 times a second. Why? I'm not doing much other than updating the screen, so you get smoother animations...
</p><p>So what does the Timer interrupt handler do? Apart from housekeeping, it simply examines the GDT looking for TSSes that are not marked Busy, starting <i>after</i> the current one (which is, of course, Busy!). If it finds one, it checks to see if it's currently Active (that complication comes about because of the Intel suggestion to use TSSes to handle certain exceptions.) If it's Active, it <code>JMP</code>s to it. If it isn't, it keeps looking, wrapping around to the beginning of the GDT after the last known one. If it comes all the way back to the current TSS, it simply returns - it's the only one runnable!
</p><p>The effect of a <code>JMP</code> to a TSS is that the CPU performs a Task Switch. It stores the current CPU state in the current TSS, marks it as not Busy, then updates TR and loads the new state from the new TSS. If the system has been running for a while, odds on the new TSS is pointing to the instruction <i>after</i> the Timer handler's <code>JMP</code> instruction, so the code will resume by returning from the Timer IRQ handler.
</p>
<h3><span class="mw-headline" id="Keyboard_IRQ_Handler">Keyboard IRQ Handler</span></h3>
<dl><dd><i>Main article:</i> <a href="Ints/Key" title="User:Johnburger/Demo/Ints/Key">User:Johnburger/Demo/Ints/Key</a></dd></dl>
<p>A keyboard interrupt is also quite expected. The handler doesn't have to do much: simply get the received byte from the keyboard (which incidentally acknowledges the interrupt) and store it away somewhere. Where?
</p>
<ul><li>With DOS, the answer is inside a 16-byte buffer in the BIOS Data Area (BDA) to be sampled by future calls to various "Get Next Key" BIOS calls. If the buffer fills up, the interrupt handler causes the Speaker to bleat - sorry, no Speaker code available in this Demonstrator (another exercise for the reader?)</li>
<li>With Windows, the key press (or key release - they both cause interrupts, thankfully!) generates yet another Event for the Event Queue: say no more.</li></ul>
<p>For this demo, I don't envisage a signficant delay between the key press and any Task waiting to handle it. After all, there <i>are</i> only two types of Tasks waiting for key presses: the SingleStep handler waiting for a &lt;Space&gt; or &lt;Enter&gt;; and any of the Fault handlers waiting for a &lt;Ctrl&gt;&lt;Alt&gt;&lt;Del&gt;. Therefore, I've decided to merely store the last keycode received.
</p><p>It's that multiple key combination that deserves a description: when a key is pressed, the keyboard controller generates an interrupt to provide a unique(ish) code for the key. The top bit (0x80) of that code is zero. If that key is released, <i>another</i> interrupt is generated for the same key - but this time that top bit is set. Also note that if a key is held down, after a delay a succession of interrupts are generated, all with the same keycode, and all with their top bit zero.
</p><p>Using that "make/break" keycode high-bit flag, it is possible to determine which keys are currently held down. As well as storing the last keycode found, the Key interrupt handler will also keep track of which of the "Shift" style of keys are currently pressed: &lt;Shift&gt;, &lt;Ctrl&gt;, or &lt;Alt&gt;. Note that since some keyboards have two copies of these keys (left and right, explaining the "(ish)" above - they generate the same keycodes, but with a prefix...), there will be multiple flags to represent the multiple keys.
</p>
<h2><span class="mw-headline" id="Utility_Functions">Utility Functions</span></h2>
<dl><dd><i>Main article:</i> <a href="Ints/Util" title="User:Johnburger/Demo/Ints/Util">User:Johnburger/Demo/Ints/Util</a></dd></dl>
<p>Different interrupt handlers need to perform similar functions, to display Hex values or switch to the next Task. This module holds those common routines.
</p>
<h1><span class="mw-headline" id="User_Task">User Task</span></h1>
<dl><dd><i>Main article:</i> <a href="User/User" title="User:Johnburger/Demo/User/User">User:Johnburger/Demo/User/User</a></dd></dl>
<p>Given that this Demonstrator will be running a number of User Tasks, and that it doesn't have a Task Loader (other than the one at <a href="Boot/Load" title="User:Johnburger/Demo/Boot/Load">Boot</a>), I need a Task to run.
</p><p>I decided to make the User Task run in User Mode instead of Supervisor Mode. This demonstrates the extra work that needs to be done to accommodate the new mode, and also provides a platform from which to test various User Mode features: protection from Privileged instructions (such as <code>HLT</code>), as well as the complexities of making a <code>CALL</code> to the Kernel (an exercise for the reader!).
</p><p>Note that it is easiest to make each User Task the same. This isn't of course necessary, but it provides a number of tasks without having to write a new one every time.
</p><p>Each User Task is simple - it has been given an area of the screen to work with, and works out what to do with the area that it has been given:
</p>
<ul><li>It draws a border in the allocated area - if one will fit;</li>
<li>If the area is only 1x1, it simply continually increments the screen location. This has the effect of showing that the Task is actually running.</li>
<li>Otherwise, it draws a "ball" using the defined character, and "bounces" it around in its allotted space. This may not cover every location in the defined area - a square area, for example, would only bounce the ball from the top left corner to the bottom right and back again.</li></ul>
<h2><span class="mw-headline" id="User_LDT">User LDT</span></h2>
<dl><dd><i>Main article:</i> <a href="User/LDT" title="User:Johnburger/Demo/User/LDT">User:Johnburger/Demo/User/LDT</a></dd></dl>
<p>Each Task will have its own context: not only its own Task State Segment (TSS), but also its own Data, Stack, and Code. No, wait... since Code in Protected Mode is always Read-only, we can share the code between the Tasks.
</p><p>Finally, they will each have their own Local Descriptor Table.
</p><p>This actually makes the shared code easier - I can use constants for the different Segments, rather than organise new Segments for every new Task.
</p>
<h2><span class="mw-headline" id="User_Data">User Data</span></h2>
<dl><dd><i>Main article:</i> <a href="User/Data" title="User:Johnburger/Demo/User/Data">User:Johnburger/Demo/User/Data</a></dd></dl>
<p>The User code as given doesn't really need data: it can keep everything in its registers. However, as a Demonstrator it makes sense to show how it's done, so this is the Data segment - every Task will have its own copy.
</p>
<h2><span class="mw-headline" id="User_Code">User Code</span></h2>
<dl><dd><i>Main article:</i> <a href="User/Code" title="User:Johnburger/Demo/User/Code">User:Johnburger/Demo/User/Code</a></dd></dl>
<p>The User Task is given its starting parameters in registers, set up by the Executive when the TSS was created. It needs to use these parameters to work out how it is going to behave:
</p>
<ul><li>Whether to draw a frame;</li>
<li>Whether it is going to be bouncing or incrementing the ball.</li></ul>
<h2><span class="mw-headline" id="Draw_Frame">Draw Frame</span></h2>
<dl><dd><i>Main article:</i> <a href="User/Frame" title="User:Johnburger/Demo/User/Frame">User:Johnburger/Demo/User/Frame</a></dd></dl>
<p>If the width is greater than 2, and the height is greater than 2, there's room for a border. This uses the high half of the ASCII character table to draw a border around the Task's allocated screen area. It then shrinks the allocated area to exclude the border from future calculations.
</p>
<h1><span class="mw-headline" id="Executive">Executive</span></h1>
<dl><dd><i>Main article:</i> <a href="Exec/Exec" title="User:Johnburger/Demo/Exec/Exec">User:Johnburger/Demo/Exec/Exec</a></dd></dl>
<p>Now that we're in Protected Mode, we have the full protection of the CPU for all of the code we write. Of course, that means that we need to be careful - but at least we get the benefit of the CPU for detecting code problems!
</p><p>Before we can start the Executive proper, which creates the User Tasks, we really need to finish setting up Protected Mode: install better Fault Handlers; set up some devices with hardware interrupts; and so on.
</p><p>Some of these routines will be calling utility functions, to allocate RAM and Descriptor Table entries. These routines are <a href="Overview#Allocator_Functions">described below</a>.
</p>
<h2><span class="mw-headline" id="Update_Registers">Update Registers</span></h2>
<dl><dd><i>Main article:</i> <a href="Exec/Init" title="User:Johnburger/Demo/Exec/Init">User:Johnburger/Demo/Exec/Init</a></dd></dl>
<p>The Flags register and all of the Segment Registers need to be initialised now that we're in Protected Mode. <code>CS</code> was initialised during the <code>JMP</code> to here, so it's just the Stack and Data segment registers to do.
</p><p>But, since we'll be using Supervisor and User modes, not to mention the CPU's Task-switching mechanism, it's also necessary to set up the Task Register - and a TSS to store stuff into.
</p>
<h2><span class="mw-headline" id="Install_Fault_Handlers">Install Fault Handlers</span></h2>
<dl><dd><i>Main article:</i> <a href="Exec/Ints/Ints" title="User:Johnburger/Demo/Exec/Ints/Ints">User:Johnburger/Demo/Exec/Ints/Ints</a></dd></dl>
<p>Intel recommends that certain Faults should be handled by a full Task Switch, rather than merely an interrupt routine. For example, the following code while in Supervisor mode <i>will</i> halt the CPU:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="w">    </span><span class="nf">MOV</span><span class="w">   </span><span class="no">ESP</span><span class="p">,</span><span class="mi">1</span><span class="w"></span>
<span class="w">    </span><span class="nf">PUSH</span><span class="w">  </span><span class="no">EAX</span><span class="w"></span>
</pre></div>
<p>This code will:
</p>
<ol><li>Cause the CPU to underflow the stack, causing a Stack Fault.</li>
<li>That will cause the CPU to push the current <code>EFLAGS</code>, <code>CS</code>, <code>EIP</code> and Error Code onto the stack... Oops! Invalid Stack! Now it's a Double Fault!</li>
<li>That will cause the CPU to push the current <code>EFLAGS</code>, <code>CS</code>, <code>EIP</code> and Error Code onto the stack... Oops! Invalid Stack! Now it's a Triple Fault!</li>
<li>That will cause the CPU to shut down.<br />The PC often has hardware to detect this condition, and will simply reboot the computer when it sees the CPU has shut down. Fun fun fun!</li></ol>
<p>At least, the above scenario will halt the CPU unless the Stack Fault handler is a separate Task - or at least the Double Fault handler is one. That will switch in a known Stack at Fault time, avoiding the above scenario.
</p><p>Therefore, we initialise a number of TSSes to take over the Intel-suggested Fault handlers in the IDT:
</p>
<ul><li>Int 8 - Double Fault</li>
<li>Int 10 - Invalid TSS</li>
<li>Int 12 - Stack Fault</li></ul>
<p>And we add some other interrupt handlers, for Debugging support and demonstration purposes.
</p>
<h3><span class="mw-headline" id="Install_Trace_Handler">Install Trace Handler</span></h3>
<dl><dd><i>Main article:</i> <a href="Exec/Ints/Trace" title="User:Johnburger/Demo/Exec/Ints/Trace">User:Johnburger/Demo/Exec/Ints/Trace</a></dd></dl>
<p>The <a href="Ints/Single" title="User:Johnburger/Demo/Ints/Single">Trace</a> handler has already been written: it's just a matter of installing it.
</p>
<h3><span class="mw-headline" id="Install_Debug_Handler">Install Debug Handler</span></h3>
<dl><dd><i>Main article:</i> <a href="Exec/Ints/Debug" title="User:Johnburger/Demo/Exec/Ints/Debug">User:Johnburger/Demo/Exec/Ints/Debug</a></dd></dl>
<p>The <a href="Ints/Debug/Debug" title="User:Johnburger/Demo/Ints/Debug/Debug">Debug</a> handler has already been written: it's just a matter of installing it.
</p>
<h3><span class="mw-headline" id="Install_No_Segment_Handler">Install No Segment Handler</span></h3>
<dl><dd><i>Main article:</i> <a href="Exec/Ints/NoSeg" title="User:Johnburger/Demo/Exec/Ints/NoSeg">User:Johnburger/Demo/Exec/Ints/NoSeg</a></dd></dl>
<p>The <a href="Ints/NoSeg" title="User:Johnburger/Demo/Ints/NoSeg">No Segment</a> handler has already been written: it's just a matter of installing it.
</p>
<h3><span class="mw-headline" id="Install_Double_Fault_Handler">Install Double Fault Handler</span></h3>
<dl><dd><i>Main article:</i> <a href="Exec/Ints/Double" title="User:Johnburger/Demo/Exec/Ints/Double">User:Johnburger/Demo/Exec/Ints/Double</a></dd></dl>
<p>The generic <a href="Ints/Fault" title="User:Johnburger/Demo/Ints/Fault">Fault</a> handler has been written, and it is currently pointed to by the Double Fault IDT entry, but that's not good enough. It really ought to have its own context - especially its own Stack - so this module will set one up for it, and fix the IDT entry.
</p><p>Given that it's not the only Fault handler that needs this special treatment, it will use Executive's more sophisticated generic <a href="Overview#Generic_Fault_Handler_Task">Fault</a> handler, which will finally <code>CALL</code> the above generic handler to give the same appearance as before, but in a safer context.
</p>
<h3><span class="mw-headline" id="Install_Stack_Fault_Handler">Install Stack Fault Handler</span></h3>
<dl><dd><i>Main article:</i> <a href="Exec/Ints/BadStack" title="User:Johnburger/Demo/Exec/Ints/BadStack">User:Johnburger/Demo/Exec/Ints/BadStack</a></dd></dl>
<p>The generic <a href="Ints/Fault" title="User:Johnburger/Demo/Ints/Fault">Fault</a> handler has been written, and it is currently pointed to by the Stack Fault IDT entry, but that's not good enough. It really ought to have its own context - especially its own Stack - so this module will set one up for it, and fix the IDT entry.
</p><p>Given that it's not the only Fault handler that needs this special treatment, it will use Executive's more sophisticated generic <a href="Overview#Generic_Fault_Handler_Task">Fault</a> handler, which will finally <code>CALL</code> the above generic handler to give the same appearance as before, but in a safer context.
</p>
<h3><span class="mw-headline" id="Install_Invalid_TSS_Handler">Install Invalid TSS Handler</span></h3>
<dl><dd><i>Main article:</i> <a href="Exec/Ints/BadTSS" title="User:Johnburger/Demo/Exec/Ints/BadTSS">User:Johnburger/Demo/Exec/Ints/BadTSS</a></dd></dl>
<p>The generic <a href="Ints/Fault" title="User:Johnburger/Demo/Ints/Fault">Fault</a> handler has been written, and it is currently pointed to by the Invalid TSS Fault IDT entry, but that's not good enough. It really ought to have its own context - especially its own Stack - so this module will set one up for it, and fix the IDT entry.
</p><p>Given that it's not the only Fault handler that needs this special treatment, it will use Executive's more sophisticated generic <a href="Overview#Generic_Fault_Handler_Task">Fault</a> handler, which will finally <code>CALL</code> the above generic handler to give the same appearance as before, but in a safer context.
</p>
<h3><span class="mw-headline" id="Generic_Fault_Handler_Task">Generic Fault Handler Task</span></h3>
<dl><dd><i>Main article:</i> <a href="Exec/Ints/Fault" title="User:Johnburger/Demo/Exec/Ints/Fault">User:Johnburger/Demo/Exec/Ints/Fault</a></dd></dl>
<p>This is the more sophisticated generic Fault handler, that runs in its own Task context. That means that it needs to point to the registers in the faulting Task (using the <a href="x86/TSS" title="User:Johnburger/Demo/x86/TSS">TSS Back link</a> field) - which means even more complex code!
</p>
<h2><span class="mw-headline" id="Initialise_PICs">Initialise PICs</span></h2>
<dl><dd><i>Main article:</i> <a href="Exec/PICs" title="User:Johnburger/Demo/Exec/PICs">User:Johnburger/Demo/Exec/PICs</a></dd></dl>
<p>Another IBM PC legacy that won't go away! IBM decided to ignore Intel's reservation of the first 32 CPU interrupts for themselves, and mapped the hardware Interrupt ReQuest (IRQ) vectors for IRQs 0 to 7 to Interrupts 8 to 15.
</p><p>When Intel used some of those interrupts in its 80286, every system from then on either had to deal with the overlaying interrupt causes, or had to reprogram the PICs to change their mapping.
</p><p>I've decided to use Interrupts 32 to 47 for IRQs 0-7 and 8-15.
</p>
<h2><span class="mw-headline" id="Initialise_Timer">Initialise Timer</span></h2>
<dl><dd><i>Main article:</i> <a href="Exec/Timer" title="User:Johnburger/Demo/Exec/Timer">User:Johnburger/Demo/Exec/Timer</a></dd></dl>
<p>At boot time, the BIOS programs the Timer to interrupt as slow as possible, which ends up being 18.2 times a second. Given that the BIOS only uses this Timer to update the current date and time (with a resolution of only one second), and to turn off the Floppy Drive motor a little while after the last access (<i>not</i> a time-critical operation!), this seems like a reasonable choice.
</p><p>Of course, if a multi-tasking system wants to give the appearance of doing lots of things at once, 18.2 times a second is rather slow. So what's better? 60 times? 100 times? 1,000 times? More? Experiment! I chose 1,000 times, just for the giggle factor.
</p><p>And of course the Timer Interrupt handler needs to be installed, which will switch between the available tasks.
</p>
<h2><span class="mw-headline" id="Initialise_Keyboard">Initialise Keyboard</span></h2>
<dl><dd><i>Main article:</i> <a href="Exec/Key" title="User:Johnburger/Demo/Exec/Key">User:Johnburger/Demo/Exec/Key</a></dd></dl>
<p>There's not a lot that you <i>need</i> to do for the keyboard. You could instruct it to use a different mapping, but the BIOS-defined default works well enough for our purposes.
</p><p>We just need to set up a Keyboard Interrupt handler to save away keypresses as they occur.
</p>
<h2><span class="mw-headline" id="Create_User_Tasks">Create User Tasks</span></h2>
<dl><dd><i>Main article:</i> <a href="Exec/User/User" title="User:Johnburger/Demo/Exec/User/User">User:Johnburger/Demo/Exec/User/User</a></dd></dl>
<p>Well, everything that we want initialised is now ready. There's nothing more for it but to let the system begin! And that's as simple as merely enabling interrupts (actually, that was done earlier...): the Timer handler will cycle through the list of active Tasks. All we need to do is create them!
</p>
<h3><span id="Create_User.27s_LDT"></span><span class="mw-headline" id="Create_User's_LDT">Create User's LDT</span></h3>
<dl><dd><i>Main article:</i> <a href="Exec/User/LDT" title="User:Johnburger/Demo/Exec/User/LDT">User:Johnburger/Demo/Exec/User/LDT</a></dd></dl>
<p>The User's LDT is defined in the <a href="User/LDT" title="User:Johnburger/Demo/User/LDT">User's code</a>, but that is so that it can access its symbols for the Selector offsets. It actually has to be populated by the Executive before use - which is this code!
</p>
<h3><span id="Create_User.27s_TSS"></span><span class="mw-headline" id="Create_User's_TSS">Create User's TSS</span></h3>
<dl><dd><i>Main article:</i> <a href="Exec/User/TSS" title="User:Johnburger/Demo/Exec/User/TSS">User:Johnburger/Demo/Exec/User/TSS</a></dd></dl>
<p>Similarly, the TSS has to be populated by the Executive before the User code can start - which is this code!
</p>
<h2><span class="mw-headline" id="Allocator_Functions">Allocator Functions</span></h2>
<dl><dd><i>Main article:</i> <a href="Exec/Alloc/Alloc" title="User:Johnburger/Demo/Exec/Alloc/Alloc">User:Johnburger/Demo/Exec/Alloc/Alloc</a></dd></dl>
<p>Some utility functions are needed by both the Initialisation code and the Main Task itself, to allocate generic system structures for tailoring by the rest of the code. These are provided here.
</p>
<h3><span class="mw-headline" id="RAM_Allocator">RAM Allocator</span></h3>
<dl><dd><i>Main article:</i> <a href="Exec/Alloc/RAM" title="User:Johnburger/Demo/Exec/Alloc/RAM">User:Johnburger/Demo/Exec/Alloc/RAM</a></dd></dl>
<p>Keeping track of what RAM has been used and what is still available is important on any dynamic system. Since this demonstration will be allocating RAM but never returning it, it certainly makes the job easy! All we have to do is avoid allocating addresses that are already in use, or actually missing!
</p><p>Of course, that's only the start of the problem. Once the RAM is allocated, it then needs to be assigned to a segment: without a segment descriptor, we can't access the RAM we've just allocated!
</p>
<h3><span class="mw-headline" id="DT_Allocator">DT Allocator</span></h3>
<dl><dd><i>Main article:</i> <a href="Exec/Alloc/DT" title="User:Johnburger/Demo/Exec/Alloc/DT">User:Johnburger/Demo/Exec/Alloc/DT</a></dd></dl>
<p>If RAM has been allocated, or a system table needs to be created, a descriptor for it needs to be added to a Descriptor Table. There are actually <i>three</i> descriptor tables that need updating: the GDT, the IDT, and the current LDT.
</p>
<h3><span class="mw-headline" id="IDT_Allocator">IDT Allocator</span></h3>
<dl><dd><i>Main article:</i> <a href="Exec/Alloc/IDT" title="User:Johnburger/Demo/Exec/Alloc/IDT">User:Johnburger/Demo/Exec/Alloc/IDT</a></dd></dl>
<h3><span class="mw-headline" id="GDT_Allocator">GDT Allocator</span></h3>
<dl><dd><i>Main article:</i> <a href="Exec/Alloc/GDT" title="User:Johnburger/Demo/Exec/Alloc/GDT">User:Johnburger/Demo/Exec/Alloc/GDT</a></dd></dl>
<h3><span class="mw-headline" id="LDT_Allocator">LDT Allocator</span></h3>
<dl><dd><i>Main article:</i> <a href="Exec/Alloc/LDT" title="User:Johnburger/Demo/Exec/Alloc/LDT">User:Johnburger/Demo/Exec/Alloc/LDT</a></dd></dl>
<h3><span class="mw-headline" id="TSS_Allocator">TSS Allocator</span></h3>
<dl><dd><i>Main article:</i> <a href="Exec/Alloc/TSS" title="User:Johnburger/Demo/Exec/Alloc/TSS">User:Johnburger/Demo/Exec/Alloc/TSS</a></dd></dl>
<h2><span id="Executive.27s_LDT"></span><span class="mw-headline" id="Executive's_LDT">Executive's LDT</span></h2>
<dl><dd><i>Main article:</i> <a href="Exec/LDT" title="User:Johnburger/Demo/Exec/LDT">User:Johnburger/Demo/Exec/LDT</a></dd></dl>
<p>The Executive's LDT can be used for a number of things other than just holding the Segments needed to run it: it is also the perfect place to put the Segments required by the Executive's more sophisticated Fault handlers. Rather than cluttering the GDT with various non-global structures, I have defined this LDT as the LDT for the Fault handlers' TSSes.
</p>
<h2><span class="mw-headline" id="Global_Descriptor_Table">Global Descriptor Table</span></h2>
<dl><dd><i>Main article:</i> <a href="Exec/GDT" title="User:Johnburger/Demo/Exec/GDT">User:Johnburger/Demo/Exec/GDT</a></dd></dl>
<p>And finally, last thing, (arguably) the most important structure in the entire system: the Global Descriptor Table.
</p><p>I've coded it last to allow it to grow, without having to reposition it at run-time first. Where it is is good enough - it's (up to) 64 kiB in size, so a healthy chunk of memory has been reserved for it, even though only the first few entries are defined at startup.
</p>
<h1><span class="mw-headline" id="Padding">Padding</span></h1>
<dl><dd><i>Main article:</i> <a href="Pad/Sizes" title="User:Johnburger/Demo/Pad/Sizes">User:Johnburger/Demo/Pad/Sizes</a></dd></dl>
<p>The binary output from the assembler is exactly as large as it needs to be - which isn't likely to be a perfect size for any storage media. For this reason we need to Pad the binary output to round it up to the next Sector size. But here's also a perfect opportunity to Pad it with the structures and tables necessary to create an ISO image - without using a post-assemble tool!
</p><p>Before we can do any Padding, though, we need a definitive size for each of the different Segments in the code. This module simply re-opens each Segment and defines a symbol for its <code>.Base</code>, <code>.Size</code> and <code>.Limit</code>.
</p>
<h2><span class="mw-headline" id="HardDisk">HardDisk</span></h2>
<dl><dd><i>Main article:</i> <a href="Pad/HardDisk" title="User:Johnburger/Demo/Pad/HardDisk">User:Johnburger/Demo/Pad/HardDisk</a></dd></dl>
<p>Padding for the Hard Disk is not difficult, since the hard part was the Boot record - and that was handled in <a href="Boot/Boot" title="User:Johnburger/Demo/Boot/Boot">Demo/Boot/Boot</a>. All we have to do here is Pad to the next Sector size.
</p>
<h2><span class="mw-headline" id="ISO">ISO</span></h2>
<dl><dd><i>Main article:</i> <a href="https://wiki.osdev.org/User:Johnburger/Demo/Pad/ISO/ISO" title="User:Johnburger/Demo/Pad/ISO/ISO">User:Johnburger/Demo/Pad/ISO/ISO</a></dd></dl>
<p><a href="../../ISO_9660" title="ISO 9660">ISO 9660</a> is the detailed specification for the format recorded on a CD-ROM. Further, <a href="../../El-Torito" title="El-Torito">El-Torito</a> is the specification for making a CD-ROM bootable. Due to a quirk in these specifications, it's possible to "Pad" a binary image and turn it into a bootable CD-ROM image! As long as the original binary obeys some restrictions, at least...
</p><p>I have tried to make these files as stand-alone as possible, so that they can be easily added to your own project. The main article describes the required definitions.
</p>
<h3><span class="mw-headline" id="Definitions">Definitions</span></h3>
<dl><dd><i>Main article:</i> <a href="Pad/ISO/Defn" title="User:Johnburger/Demo/Pad/ISO/Defn">User:Johnburger/Demo/Pad/ISO/Defn</a></dd></dl>
<p><a href="../../ISO_9660" title="ISO 9660">ISO 9660</a> defines a number of small and large structures, so I've defined most of them here, along with some helper macros to make my life easier. You will (probably) not need to modify any definitions here for your own use.
</p>
<h3><span class="mw-headline" id="Primary_Volume">Primary Volume</span></h3>
<dl><dd><i>Main article:</i> <a href="Pad/ISO/Primary" title="User:Johnburger/Demo/Pad/ISO/Primary">User:Johnburger/Demo/Pad/ISO/Primary</a></dd></dl>
<p>All CD-ROMs have a Primary Volume.
</p>
<h3><span class="mw-headline" id="Boot_Volume">Boot Volume</span></h3>
<dl><dd><i>Main article:</i> <a href="Pad/ISO/Boot" title="User:Johnburger/Demo/Pad/ISO/Boot">User:Johnburger/Demo/Pad/ISO/Boot</a></dd></dl>
<p>Only Boot CD-ROMs have a Boot Volume. This is defined by the <a href="../../El-Torito" title="El-Torito">El-Torito</a> specification.
</p>
<h3><span class="mw-headline" id="Terminator_Volume">Terminator Volume</span></h3>
<dl><dd><i>Main article:</i> <a href="Pad/ISO/Terminator" title="User:Johnburger/Demo/Pad/ISO/Terminator">User:Johnburger/Demo/Pad/ISO/Terminator</a></dd></dl>
<p>At the end of the list of volumes there needs to be a Terminator Volume.
</p>
<h3><span class="mw-headline" id="Catalog_Sector">Catalog Sector</span></h3>
<dl><dd><i>Main article:</i> <a href="Pad/ISO/Catalog" title="User:Johnburger/Demo/Pad/ISO/Catalog">User:Johnburger/Demo/Pad/ISO/Catalog</a></dd></dl>
<p>The <a href="../../El-Torito" title="El-Torito">El-Torito</a> specification requires a Catalog of Boot entries. For simplicity, I only define one.
</p>
<h3><span id="Path_Table.28s.29"></span><span class="mw-headline" id="Path_Table(s)">Path Table(s)</span></h3>
<dl><dd><i>Main article:</i> <a href="Pad/ISO/PathTable" title="User:Johnburger/Demo/Pad/ISO/PathTable">User:Johnburger/Demo/Pad/ISO/PathTable</a></dd></dl>
<p>They designed the CD File System in such a way that the same CD could be used by both little- and big-endian systems. Most of the time that is accomplished by recording the same multi-byte value twice, first in little-endian, then in big. They refer to this as "both-endian" format, and the reading software merely picks out the representation that it prefers.
</p><p>But there's one structure, the Path Table, where they decided that it was too difficult to maintain, so they defined that the entire structure be recorded twice, once in each format. Since for this Demonstrator there is practically no difference between the two versions, I have written the source code for the structure generically, and used macros where the endian-ness is important.
</p><p>Then it is simply a matter of:
</p>
<ul><li><code>%define</code>ing the macro as <code>Little</code>;</li>
<li><code>%include</code>ing this file once;</li>
<li>Re<code>%define</code>ing the macro as <code>Big</code>;</li>
<li>Re<code>%include</code>ing this file a second time.</li></ul>
<p>I love macros!
</p>
<h3><span class="mw-headline" id="Root_Directory">Root Directory</span></h3>
<dl><dd><i>Main article:</i> <a href="Pad/ISO/RootDir" title="User:Johnburger/Demo/Pad/ISO/RootDir">User:Johnburger/Demo/Pad/ISO/RootDir</a></dd></dl>
<p>This ISO image is a rarity, and could be mistaken for a coaster: it doesn't have any files on it! The important stuff is in the Boot sector and following loaded binary; there are no files <i>per se</i> required. Unfortunately, <a href="../../ISO_9660" title="ISO 9660">ISO 9660</a> requires a root directory - even if it's empty.
</p>
<h2><span class="mw-headline" id="Floppy">Floppy</span></h2>
<dl><dd><i>Main article:</i> <a href="Pad/Floppy" title="User:Johnburger/Demo/Pad/Floppy">User:Johnburger/Demo/Pad/Floppy</a></dd></dl>
<p>Old versions of VMware wouldn't allow you to use a file image instead of a physical Floppy Disk, unless the file image precisely matched a standard Floppy size. I suspect the file size was used internally by VMware to work out what drive geometry to use (sectors per track etc.) So for years I added a <i><b>huge</b></i> number of zeroes onto the end of my experiments to make them 720 kiB, 1,200 kiB or 1,440 kiB in size.
</p><p>One day, after a few VMware upgrades, I forgot - and it worked anyway. So I offer this code here in case it will be of any use. Personally, I doubt it...
</p>
<h1><span class="mw-headline" id="Experiments">Experiments</span></h1>
<p>As well as adding <code>MOV ESP,1</code> somewhere, there are a number of other experiments you can do with this code: some for the giggle factor, while others to explore the functionality of the CPU.
</p>
<h2><span class="mw-headline" id="HLT_vs_Yield_vs_LOOP"><code>HLT</code> vs <code>Yield</code> vs <code>LOOP</code></span></h2>
<p>In <a href="User/Code" title="User:Johnburger/Demo/User/Code">Demo/User/Code</a> there are four different ways of getting the User-mode code to wait between each update of the ball position:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nl">.Wait:</span><span class="w"></span>
<span class="c1">;                HLT                            &#160;; Illegal User-mode instruction!</span>

<span class="w">                  </span><span class="nf">User.Halt</span><span class="w">                       </span><span class="c1">; So, use system-provided one</span>

<span class="c1">;                User.Yield                     &#160;; This has a different effect</span>

<span class="c1">; This is an alternative to using HLT</span>
<span class="c1">;                PUSH            ECX</span>
<span class="c1">;                MOV             ECX,User.Delay &#160;; Wait for a little while</span>
<span class="c1">;                LOOP            $              &#160;; About this long...</span>
<span class="c1">;                POP             ECX</span>
</pre></div>
<p>You can uncomment each of them and see how it affects the behaviour of the individual Tasks - or comment them all out! I'm sorry I don't have a CPU usage display, but if you use a laptop and leave it running for a little while, pretty soon the CPU fan will become very noisy!
</p>
<h2><span class="mw-headline" id="System.TSS"><code>System.TSS</code></span></h2>
<p>I defined the <code>System.TSS</code> flag to both prevent switching <i>to</i> a System Task, and to prevent switching <i>from</i> one. I'm not suggesting that you do it this way in your system, but you will need something! Take a look at what happens if you don't put it in:
</p>
<ul><li>In <a href="Ints/Debug/Init" title="User:Johnburger/Demo/Ints/Debug/Init">Demo/Ints/Debug/Init</a>, comment out the <code>CALL Ints.System.Init</code> and <code>CALL Ints.System.Done</code> lines;</li>
<li>Assemble and start the system;</li>
<li>Invoke the Debugger by pressing &lt;Break&gt;;<br />Since the Debugged Task is no longer marked as special, the Task Switcher happily switches away from it and bounces balls through the display.</li>
<li>Select a different Segment with the &lt;Right&gt; arrow key;</li>
<li>Press &lt;Break&gt; again;<br />In all likelihood, you'll start Debugging a second Task, rather than Debugging the Debugger. You'll see the system try to display two different Segments, as well as bouncing balls.</li>
<li>Press &lt;Break&gt; a few more times, and press &lt;Right&gt; and &lt;Left&gt; arrow a bunch of times too;<br />Now you'll see fewer bouncing balls, but more and different Segments.</li>
<li>Keep pressing &lt;Break&gt; until you finally recurse one Task's Debugger deep enough to underflow its Stack.</li></ul>
<p>Now the system <i>is</i> inside a <code>System.TSS</code>, courtesy of the Stack Fault (<code>Int 0Ch</code>) Task, and the Task Switcher stops the madness. You can now invoke the Debugger and examine the memory without being disturbed.
</p>
<h2><span class="mw-headline" id="Default_bit_in_Code_Descriptor">Default bit in Code Descriptor</span></h2>
<p>The assembler has been told that User-mode code is USE32, so it uses the 32-bit forms for all the instructions. What happens if we get this wrong? Let's find out!
</p><p>In <a href="Exec/User/LDT" title="User:Johnburger/Demo/Exec/User/LDT">Demo/Exec/User/LDT</a>, there are some blocks of code to initialise the different User LDT entries. Go to the block that initialises the Code Segment:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="w">                </span><span class="nf">MOV</span><span class="w">             </span><span class="no">EAX</span><span class="p">,</span><span class="no">User.Base</span><span class="w">           </span><span class="c1">; Assembled User code</span>
<span class="w">                </span><span class="nf">MOV</span><span class="w">             </span><span class="no">ECX</span><span class="p">,</span><span class="no">User.Size</span><span class="w"></span>
<span class="w">                </span><span class="nf">MOV</span><span class="w">             </span><span class="no">DL</span><span class="p">,</span><span class="no">Type.Mem</span><span class="p">(</span><span class="no">Code</span><span class="p">,</span><span class="w"> </span><span class="no">DPL3</span><span class="p">,</span><span class="w"> </span><span class="no">NoRW</span><span class="p">)</span><span class="w"> </span><span class="err">&amp;</span><span class="w"> </span><span class="err">~</span><span class="no">x86.Desc.Type.Present</span><span class="w"></span>
<span class="w">                </span><span class="nf">MOV</span><span class="w">             </span><span class="no">DH</span><span class="p">,</span><span class="no">Gran.Mem</span><span class="p">(</span><span class="no">Byte</span><span class="p">,</span><span class="w"> </span><span class="no">Def32</span><span class="p">)</span><span class="w"></span>
<span class="w">                </span><span class="nf">CALL</span><span class="w">            </span><span class="no">Exec.Alloc.LDT.Mem</span><span class="w">      </span><span class="c1">; Allocate LDT Entry</span>
</pre></div>
<p>and change <code>Def32</code> to <code>Def16</code>. This now tells the CPU to execute User code as 16-bit code - but we haven't told the assembler that!
</p><p>Assemble and run the code. It should crash instantly with a GPF (<code>Int 0D</code>) in User Code (<code>CS=002F</code>), at (<code>EIP</code>) address <code>0000_0005</code>. Take a look at the first few lines of User Code in the assembly listing:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="w">                             </span><span class="err">&lt;2&gt;</span><span class="w">                 </span><span class="nf">SEGMENT</span><span class="w">         </span><span class="no">User</span><span class="w">  </span><span class="no">VSTART</span><span class="err">=</span><span class="mi">0</span><span class="w">  </span><span class="no">ALIGN</span><span class="err">=</span><span class="mi">16</span><span class="w"></span>
<span class="w">                             </span><span class="err">&lt;2&gt;</span><span class="w"> </span>
<span class="w">                             </span><span class="err">&lt;2&gt;</span><span class="w"> </span><span class="nf">User.ColouredBall</span><span class="w"> </span><span class="no">EQU</span><span class="w">           </span><span class="p">(</span><span class="no">User.BallColour</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="no">User.Ball</span><span class="w"></span>
<span class="w">                             </span><span class="err">&lt;2&gt;</span><span class="w"> </span>
<span class="w">                             </span><span class="err">&lt;2&gt;</span><span class="w"> </span><span class="nl">User.Entry:</span><span class="w"></span>
<span class="err">00000000</span><span class="w"> </span><span class="nf">FC</span><span class="w">                  </span><span class="err">&lt;</span><span class="mi">2</span><span class="err">&gt;</span><span class="w">                 </span><span class="no">CLD</span><span class="w">                             </span><span class="c1">; Work forwards</span>
<span class="err">00000001</span><span class="w"> </span><span class="err">891</span><span class="nf">D</span><span class="p">[</span><span class="mi">04000000</span><span class="p">]</span><span class="w">      </span><span class="err">&lt;</span><span class="mi">2</span><span class="err">&gt;</span><span class="w">                 </span><span class="no">MOV</span><span class="w">             </span><span class="p">[</span><span class="no">User.Data.Row</span><span class="p">],</span><span class="no">EBX</span><span class="w"></span>
<span class="err">00000007</span><span class="w"> </span><span class="err">668915[00000000]</span><span class="w">    </span><span class="err">&lt;2&gt;</span><span class="w">                 </span><span class="nf">MOV</span><span class="w">             </span><span class="p">[</span><span class="no">User.Data.Left</span><span class="p">],</span><span class="no">DX</span><span class="w">  </span><span class="c1">; Left and Top</span>
<span class="err">0000000</span><span class="nf">E</span><span class="w"> </span><span class="mi">66890</span><span class="no">D</span><span class="p">[</span><span class="mi">02000000</span><span class="p">]</span><span class="w">    </span><span class="err">&lt;</span><span class="mi">2</span><span class="err">&gt;</span><span class="w">                 </span><span class="no">MOV</span><span class="w">             </span><span class="p">[</span><span class="no">User.Data.Width</span><span class="p">],</span><span class="no">CX</span><span class="w"> </span><span class="c1">; Width and Height</span>
<span class="w">                             </span><span class="err">&lt;2&gt;</span><span class="w"></span>
</pre></div>
<p>There isn't an instruction at <code>0000_0005</code>! But if you look at the instruction at <code>0000_0001</code> you'll see the op-code <code>89 1D</code>. This means "Move the contents of <code>EBX</code> into the following memory location" - followed by a 32-bit address. Only, the CPU is actually in 16-bit mode, so it will only move <code>BX</code> and only expects a 16-bit address: then expects the next instruction to be at - you guessed it! - <code>0000_0005</code>. And what's there? The op-code <code>00 00</code>, which decodes as <code>ADD [BX+SI],AL</code> - which is <i>way</i> past <code>DS</code>'s Limit, and causes the GPF.
</p>
<!-- 
NewPP limit report
Cached time: 20250211153708
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.079 seconds
Real time usage: 0.629 seconds
Preprocessor visited node count: 914/1000000
Post‐expand include size: 5069/2097152 bytes
Template argument size: 2930/2097152 bytes
Highest expansion depth: 3/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 6842/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%  149.146      1 -total
  1.65%    2.457     93 Template:Main
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3477-0!canonical and timestamp 20250211153707 and revision id 21351.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=User:Johnburger/Demo/Overview&amp;oldid=21351">https://wiki.osdev.org/index.php?title=User:Johnburger/Demo/Overview&amp;oldid=21351</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="../../Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=User%3AJohnburger%2FDemo%2FOverview" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Overview#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-user" class="selected mw-list-item"><a href="Overview" title="View the user page [c]" accesskey="c"><span>User page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="../../User_talk:Johnburger/Demo/Overview" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Overview"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Johnburger/Demo/Overview&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Johnburger/Demo/Overview&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="../../index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="../../index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="../../Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="../../Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="../../OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="../../OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="../../OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="../../Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="../../Special:WhatLinksHere/User:Johnburger/Demo/Overview" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="../../Special:RecentChangesLinked/User:Johnburger/Demo/Overview" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-contributions" class="mw-list-item"><a href="../../Special:Contributions/Johnburger" title="A list of contributions by this user"><span>User contributions</span></a></li><li id="t-log" class="mw-list-item"><a href="../../Special:Log/Johnburger"><span>Logs</span></a></li><li id="t-userrights" class="mw-list-item"><a href="../../Special:UserRights/Johnburger"><span>View user groups</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="../../Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Johnburger/Demo/Overview&amp;oldid=21351" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Johnburger/Demo/Overview&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 28 August 2017, at 21:05.</li>
	<li id="footer-info-0">This page has been accessed 9,845 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="../../OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="../../OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="../../OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=User:Johnburger/Demo/Overview&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="../../resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="../../resources/assets/poweredby_mediawiki_132x47.png 1.5x, ../../resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.079","walltime":"0.629","ppvisitednodes":{"value":914,"limit":1000000},"postexpandincludesize":{"value":5069,"limit":2097152},"templateargumentsize":{"value":2930,"limit":2097152},"expansiondepth":{"value":3,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":6842,"limit":5000000},"timingprofile":["100.00%  149.146      1 -total","  1.65%    2.457     93 Template:Main"]},"cachereport":{"timestamp":"20250211153708","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":751});});</script>
</body>
</html>