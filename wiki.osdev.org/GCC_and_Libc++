<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>GCC and Libc++ - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"952f2f273e19e11924e20f15","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"GCC_and_Libc++","wgTitle":"GCC and Libc++","wgCurRevisionId":28088,"wgRevisionId":28088,"wgArticleId":3870,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["C++","Compilers"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"GCC_and_Libc++","wgRelevantArticleId":3870,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":
false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-GCC_and_Libc rootpage-GCC_and_Libc skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">GCC and Libc++</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="GCC_and_Libc++#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="GCC_and_Libc++#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>For the most part, the information in <a href="Libsupcxx" title="Libsupcxx">Libsupcxx</a> seems to be broken at the moment as GCC has changed a lot since this article was first written. One alternative is to use libc++ instead. libc++ is the c++ library provided by the llvm/clang compiler. Although this could be used with with clang, the following information is with respect to GCC. 
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="GCC_and_Libc++#Prerequisites"><span class="tocnumber">1</span> <span class="toctext">Prerequisites</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="GCC_and_Libc++#Donwload"><span class="tocnumber">2</span> <span class="toctext">Donwload</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="GCC_and_Libc++#Flags"><span class="tocnumber">3</span> <span class="toctext">Flags</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="GCC_and_Libc++#Patch_Libcxx"><span class="tocnumber">4</span> <span class="toctext">Patch Libcxx</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="GCC_and_Libc++#Compile_NewLib"><span class="tocnumber">5</span> <span class="toctext">Compile NewLib</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="GCC_and_Libc++#Compile_Libcxxabi"><span class="tocnumber">6</span> <span class="toctext">Compile Libcxxabi</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="GCC_and_Libc++#Compile_Libcxx"><span class="tocnumber">7</span> <span class="toctext">Compile Libcxx</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="GCC_and_Libc++#Notes"><span class="tocnumber">8</span> <span class="toctext">Notes</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Prerequisites">Prerequisites</span></h2>
<p>Before you can compile anything, your going to need a cross compiler. The following assumes that you have created a GCC cross compiler using <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC_Cross-Compiler</a> with the following:
</p>
<pre>   export PREFIX="$HOME/opt/cross"
   export TARGET=x86_64-elf
   export PATH="$PREFIX/bin:$PATH"
</pre>
<p>Note that you might also want to configure GCC to use multilib support so that you can turn off the red zone with respect to x86_64 <a href="Libgcc_without_red_zone" title="Libgcc without red zone">Libgcc_without_red_zone</a>. The code in this tutorial assumes that you have done that as it's pretty much needed if you want to run code in your kernel using x86_64. 
</p><p>Finally you will also need a libc as libc++ uses libc functions. You can create your own libc if you want, or you can use an existing one <a href="C_Library" title="C Library">C_Library</a>. This article assumes that your using newlib, so you will see some #defines that are specific to newlib which you can ignore if your using your own libc or something else. The main point here is you need to have a libc available of libc++ to use as needed. 
</p><p>To compile libc++ you will need both libcxx and libcxxabi. Libcxxabi provides all of the abi functions that are needed to make libcxx work. Note that this is similar to libsupc++. 
</p>
<h2><span class="mw-headline" id="Donwload">Donwload</span></h2>
<p>Before we can start, download all of the sources that we need, and setup our build environment
</p>
<pre>   wget <a rel="nofollow" class="external free" href="ftp://sourceware.org/pub/newlib/newlib-2.3.0.20160104.tar.gz">ftp://sourceware.org/pub/newlib/newlib-2.3.0.20160104.tar.gz</a>
   git clone <a rel="nofollow" class="external free" href="http://llvm.org/git/libcxxabi">http://llvm.org/git/libcxxabi</a>
   git clone <a rel="nofollow" class="external free" href="http://llvm.org/git/libcxx">http://llvm.org/git/libcxx</a>
</pre>
<pre>   tar xvf newlib*.tar.gz    
   mv newlib-*/ newlib/
</pre>
<pre>   mkdir build-newlib
</pre>
<h2><span class="mw-headline" id="Flags">Flags</span></h2>
<p>Your going to want to keep everything consistent. The newlib #defines setup newlib to compile for x86_64, as well as enable the portions of newlib that are needed by libc++. For example, libc++ will need functions like strtold, which on x86_64 requires you to enable long double support in newlib (likely you will never use this in a kernel, but it's needed to compile). Libc++ also needs a timer of some sort, and it's likely that you will be providing your own malloc/free. In addition, we disable threading support (also not usually needed in a kernel), and we tell libc++ to use posix timers and enable support for them in newlib.  
</p>
<pre>   export NEWLIB_DEFINES="-D_HAVE_LONG_DOUBLE -D_LDBL_EQ_DBL -D_POSIX_TIMERS -U__STRICT_ANSI__ -DMALLOC_PROVIDED"
   export LIBCXXABI_DEFINES="-DLIBCXXABI_HAS_NO_THREADS"
   export LIBCXX_DEFINES="-D_LIBCPPABI_VERSION=1002 -D_NEWLIB_VERSION -D_LIBCPP_HAS_NO_THREADS -D_LIBCPP_HAS_NO_MONOTONIC_CLOCK"
</pre>
<p>With respect to cflags, since we are on x86_64 we need -fpic, and since this is a kernel, we need -mno-red-zone. Since this is a custom GCC cross compiler, we use -ffreestanding to enable GCC's built-in includes like stdint.h etc... And then finally we disable thread statics which prevents GCC from creating calls to thread guards, and disable cxa-atexit in favor of newlib's version (which could be removed if you have your own global constructor / destructor logic that is more c++ friendly). 
</p>
<pre>   export CFLAGS="-ffreestanding -fpic -mno-red-zone $NEWLIB_DEFINES"
   export CXXFLAGS="-std=c++14 -fno-use-cxa-atexit -fno-threadsafe-statics $CFLAGS"
</pre>
<h2><span class="mw-headline" id="Patch_Libcxx">Patch Libcxx</span></h2>
<p>At the time of writing, there are two issues with libcxx that need to be addressed. The first is libcxx assumes that some cmath functions are actually functions and not macros, while newlib uses macros, so we need to remove the use of "using" for these functions. Finally, libcxx has some c++17 functions that don't have a clean way to #define them out, and GCC currently doesn't have support for these (specifically uncaught exceptions). The following patch cleans these issues up:
</p>
<pre>   diff -Naur libcxx/include/cmath libcxx_patched/include/cmath
   --- libcxx/include/cmath	2016-01-13 09:54:11.630532663 -0800
   +++ libcxx_patched/include/cmath	2016-01-13 09:53:42.351909907 -0800
   @@ -306,6 +306,7 @@
    
    _LIBCPP_BEGIN_NAMESPACE_STD
    
   +#ifndef _NEWLIB_VERSION
    using&#160;::signbit;
    using&#160;::fpclassify;
    using&#160;::isfinite;
   @@ -326,6 +327,7 @@
    #ifndef _AIX
    using&#160;::abs;
    #endif
   +#endif
    
    #ifndef __sun__
    using&#160;::acos;
   diff -Naur libcxx/src/exception.cpp libcxx_patched/src/exception.cpp
   --- libcxx/src/exception.cpp	2016-01-13 09:54:11.658531346 -0800
   +++ libcxx_patched/src/exception.cpp	2016-01-13 09:52:59.885914438 -0800
   @@ -106,22 +106,22 @@
    
    int uncaught_exceptions() _NOEXCEPT
    {
   -#if defined(__APPLE__) || defined(_LIBCPPABI_VERSION)
   -   // on Darwin, there is a helper function so __cxa_get_globals is private
   -# if _LIBCPPABI_VERSION &gt; 1101
   -    return __cxa_uncaught_exceptions();
   -# else
   -    return __cxa_uncaught_exception()&#160;? 1&#160;: 0;
   -# endif
   -#else  // __APPLE__
   -#   if defined(_MSC_VER) &amp;&amp;&#160;! defined(__clang__)
   -        _LIBCPP_WARNING("uncaught_exceptions not yet implemented")
   -#   else
   -#       warning uncaught_exception not yet implemented
   -#   endif
   +// #if defined(__APPLE__) || defined(_LIBCPPABI_VERSION)
   +//    // on Darwin, there is a helper function so __cxa_get_globals is private
   +// # if _LIBCPPABI_VERSION &gt; 1101
   +//     return __cxa_uncaught_exceptions();
   +// # else
   +//     return __cxa_uncaught_exception()&#160;? 1&#160;: 0;
   +// # endif
   +// #else  // __APPLE__
   +// #   if defined(_MSC_VER) &amp;&amp;&#160;! defined(__clang__)
   +//         _LIBCPP_WARNING("uncaught_exceptions not yet implemented")
   +// #   else
   +// #       warning uncaught_exception not yet implemented
   +// #   endif
        fprintf(stderr, "uncaught_exceptions not yet implemented\n");
       &#160;::abort();
   -#endif  // __APPLE__
   +// #endif  // __APPLE__
    }
    
</pre>
<h2><span class="mw-headline" id="Compile_NewLib">Compile NewLib</span></h2>
<pre>   pushd build-newlib
   ../newlib/configure --target=$TARGET --prefix=$PREFIX
   make all
   popd
</pre>
<h2><span class="mw-headline" id="Compile_Libcxxabi">Compile Libcxxabi</span></h2>
<pre>   pushd libcxxabi/src
   ~/opt/cross/bin/x86_64-elf-g++ -I../../libcxx/include/ -I../../newlib/newlib/libc/include/ -I../include/ $LIBCXXABI_DEFINES $CXXFLAGS -c *.cpp
   ~/opt/cross/bin/x86_64-elf-ar rcs libcxxabi.a *.o
   popd
</pre>
<h2><span class="mw-headline" id="Compile_Libcxx">Compile Libcxx</span></h2>
<pre>   pushd libcxx/src
   ~/opt/cross/bin/x86_64-elf-g++ -I../../libcxxabi/include/ -I../../newlib/newlib/libc/include/ -I../include/ $LIBCXX_DEFINES $CXXFLAGS -c *.cpp
   ~/opt/cross/bin/x86_64-elf-ld -shared *.o -o libcxx.so -L../../libcxxabi/src/ -lcxxabi -L/home/user/sandbox/build-newlib/x86_64-elf/no-red-zone/newlib -lc -L/home/user/opt/cross/lib/gcc/x86_64-elf/5.2.0/no-red-zone/ -lgcc
   popd
</pre>
<h2><span class="mw-headline" id="Notes">Notes</span></h2>
<p>From here you have a lot of options. The above code compiles libc++ as a shared library, but you could compile it as a static library if thats what you need (the command would be similar to how we compiled libcxxabi). Likely these includes / libraries should be copied to your systroot, and then recompile GCC to see your new sysroot using "--with-sysroot=". Keep in mind that the majority of libc++ is a set of headers, and a lot of these headers can be used without compiling any code at all. For example, if all you need is the stdlib containers, you probably could use libc++ without any compilation at all (libcxxabi does this). Also note that, even though we use newlib here, there are still some functions that you will have to implement yourself. An easy way to see what symbols have left to be defined would be to:
</p>
<pre>   readelf libcxx.so -aW | grep UND
</pre>
<!-- 
NewPP limit report
Cached time: 20250212012006
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.007 seconds
Real time usage: 0.009 seconds
Preprocessor visited node count: 28/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3870-0!canonical and timestamp 20250212012006 and revision id 28088.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=GCC_and_Libc%2B%2B&amp;oldid=28088">https://wiki.osdev.org/index.php?title=GCC_and_Libc%2B%2B&amp;oldid=28088</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="./Category:C++" title="Category:C++">C++</a></li><li><a href="./Category:Compilers" title="Category:Compilers">Compilers</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=GCC+and+Libc%2B%2B" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="GCC_and_Libc++#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="GCC_and_Libc++" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:GCC_and_Libc%2B%2B&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="GCC_and_Libc++"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=GCC_and_Libc%2B%2B&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=GCC_and_Libc%2B%2B&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/GCC_and_Libc++" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/GCC_and_Libc%2B%2B" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=GCC_and_Libc%2B%2B&amp;oldid=28088" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=GCC_and_Libc%2B%2B&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 9 July 2023, at 21:21.</li>
	<li id="footer-info-0">This page has been accessed 1,627 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=GCC_and_Libc%2B%2B&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.007","walltime":"0.009","ppvisitednodes":{"value":28,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":0,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250212012006","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":102});});</script>
</body>
</html>