<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>User:Eekee - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"c1207b279c324da545b7ff00","wgCSPNonce":false,"wgCanonicalNamespace":"User","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":2,"wgPageName":"User:Eekee","wgTitle":"Eekee","wgCurRevisionId":29202,"wgRevisionId":29202,"wgArticleId":4356,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":[],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"User:Eekee","wgRelevantArticleId":4356,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRelevantUserName":"Eekee","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":
false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-2 ns-subject page-User_Eekee rootpage-User_Eekee skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-namespace">User</span><span class="mw-page-title-separator">:</span><span class="mw-page-title-main">Eekee</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="./User:Eekee#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="./User:Eekee#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>Update: I've been slowly improving at Forth, but now I'm finding <a href="Plain_English_Programming" title="Plain English Programming">Plain English Programming</a> a huge leap forward. It completely sidesteps my problems reading code, and so I have a much larger set of examples to learn from than with any other practical systems language. It helps that most definitions are very small, a point encouraged by the absence of nested loops or conditions. Forth was also rather good for me, but required other skills which were only coming to me very slowly. Even in the simplest definitions, tracking stack order is still sometimes a challenge. Organizing data in memory is something I'm not as good at as I thought I was. Plain English has high-level types. It has conventional local variables too, but gives them generic names based on their type. I like that. Lisp was my second choice, but Plain English is actually a little closer to the machine. I like that too.
</p><p>I'm not sure I'll do any OS development in Plain English, but some OS dev concepts are applicable to the plans I have for it. The IDE (which doubles as a sample program) rather resembles an operating system in use, being permanently full-screen with its own way of working, but that's more a point of curiosity than anything technical. 
</p><p>I still might make a Forth interpreter as a BIOS or UEFI application. Plain English would need a bit more work, being 32-bit only at present.
</p>
<hr />
<p>Hello! I'm the offspring of <a href="James_T._Klik" title="James T. Klik">James T. Klik</a> and <a href="Lino_Commando" title="Lino Commando">Lino Commando</a>! I'm joking, but I am slowly developing a system with mixed REPL and mouse input. It's not necessarily going to run on real hardware or even Qemu, but I do rather dream of it doing so. Similarly, I like to flirt with <a href="Alta_Lang" title="Alta Lang">Alta Lang</a> but in practice I'm 'just' developing on Forth, with plans to build an extensive library. My dream is for it to run under operating systems and directly on hardware, a possibility achieved by <a rel="nofollow" class="external text" href="https://duckduckgo.com/?q=inferno+os">Inferno</a> and <a rel="nofollow" class="external text" href="http://www.ocp.inf.ethz.ch/wiki/OCP/Home">Oberon</a>. Also like Inferno and its parent OS, Plan 9, I plan to make heavy use of IPC. Unlike Inferno and Plan 9, it will not be "just plain text", structured data will be the norm. I'm not entirely sure why I'm targetting hardware, but there's a certain freedom in it and it does rather satisfy a very long-standing ambition.
</p><p>This system is Kaph. It <i>was</i> a huge project, a whole panoply of high-level goals, which rather put me off for a while, so I came up with some other projects and listed them below. Now I see I can begin by implementing a Forth, build a partial version of Kaph on top of that, and see what changes and additions need to be made.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="./User:Eekee#More_about_me"><span class="tocnumber">1</span> <span class="toctext">More about me</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="./User:Eekee#Kaph_Project_and_Concepts"><span class="tocnumber">2</span> <span class="toctext">Kaph Project and Concepts</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="./User:Eekee#UI_and_window_system"><span class="tocnumber">2.1</span> <span class="toctext">UI and window system</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="./User:Eekee#Language"><span class="tocnumber">2.2</span> <span class="toctext">Language</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="./User:Eekee#Data_interchange_structures"><span class="tocnumber">2.3</span> <span class="toctext">Data interchange structures</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-6"><a href="./User:Eekee#Minor_Projects"><span class="tocnumber">3</span> <span class="toctext">Minor Projects</span></a>
<ul>
<li class="toclevel-2 tocsection-7"><a href="./User:Eekee#Various_Native_Forths"><span class="tocnumber">3.1</span> <span class="toctext">Various Native Forths</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="./User:Eekee#A8.86"><span class="tocnumber">3.2</span> <span class="toctext">A8.86</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-9"><a href="./User:Eekee#Suggestions"><span class="tocnumber">4</span> <span class="toctext">Suggestions</span></a>
<ul>
<li class="toclevel-2 tocsection-10"><a href="./User:Eekee#Remote_Shinies"><span class="tocnumber">4.1</span> <span class="toctext">Remote Shinies</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="./User:Eekee#Reviews"><span class="tocnumber">5</span> <span class="toctext">Reviews</span></a>
<ul>
<li class="toclevel-2 tocsection-12"><a href="./User:Eekee#FreeDOS"><span class="tocnumber">5.1</span> <span class="toctext">FreeDOS</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="./User:Eekee#Nano-reviews"><span class="tocnumber">5.2</span> <span class="toctext">Nano-reviews</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="More_about_me">More about me</span></h2>
<p>My levels of experience are quite atypical due to my health holding me back from accomplishing much but not always holding me back from observation. I've had decades to absorb concepts and see what does and doesn't work, but little practice. My health is not a fun subject, so let's leave it at that. I'm getting a bit done now, and I'm finding the process of development to be a lot of fun in itself. 
</p><p>I have had <i>some</i> practice. For instance, some time ago, I tried to be a <a rel="nofollow" class="external text" href="What_order_should_I_make_things_in#Ideas_for_new_Archetypes">Real Man</a>, but then I learned to relax. I am definitely not Barry Pi, I'll take a consistent architecture, thank you. The existence of Andy Microbaum is tangential to my universe, much like it is to Plan 9. I don't need to say "I love these archetypes," do I?&#160;:)
</p>
<dl><dd><dl><dd>One day, Uriel met a man who argued convincingly that Plan 9 is a microkernel.</dd>
<dd>On another day, Uriel met a man who argued convincingly that Plan 9 is a macrokernel.</dd>
<dd>Uriel was enlightened.</dd></dl></dd></dl>
<p>I have dabbled in CPU design a little. I'm obviously tempted to pursue this further, but I seem to have even more to learn about this than OS design, and that's just for a "simple" CPU; no MMU. Trying to design 8-bit CPUs alerted me to some surprising complexities. Still, when I look at Dawn, reviewed below, I start thinking of it again. If you want to design CPUs complete with their own instruction sets, I recommend starting with a larger word size than 8 bits.
</p><p>Ultimately, I'm sure it would be much more fun to develop for a made-up architecture, even if only in emulation, than for any hardware containing such horrors as ACPI. I'm told USB is very unfriendly to operating system development too (although I'm starting to think it depends on your ideas about how things should be structured). Another possibility is developing for emulated older hardware, which in turn can and in some cases has been reimplemented in FPGA. The more time goes by, the more possibilities open up in hardware and the more lines blur. I should remember to look into RISC-V. This all reminds me, I wonder if the GNU universal peripheral bus is anywhere near ready, or indeed if it's sensibly designed. 
</p>
<h2><span class="mw-headline" id="Kaph_Project_and_Concepts">Kaph Project and Concepts</span></h2>
<p>My plans for Kaph include several distinct concepts which are unusual in themselves or unusual at the OS level. 
</p>
<ul><li>An unusual (but not entirely unique) UI design with REPL and modifiable GUI in close association -- Inspired by colorForth and the Sam text editor</li>
<li>Execute or "plumb" any text, where the "plumber" is a very powerful spin on file association -- Inspired by Oberon via the Acme text editor on Plan 9</li>
<li>Text-heavy GUI where any text is selectable and much or all text is editable -- To empower the plumber, assist the REPL, increase the power of the GUI (see previous point), and because forcing the user to copy-type is very poor</li>
<li>A single language embracing domain-specific languages -- Inspired by my difficulties with Plan 9's maze of twisty little languages, none quite alike</li>
<li>Universal data interchange structures and mechanisms intended to make pipe filtering quicker and easier, and to ease the process of manipulating data with different DSLs</li>
<li>Modification of in-memory data by transient programs -- Using Acme with Unix-like Plan 9 commands showed me how practical this way of working is. Wanting to use it for images too was a seed idea for Kaph. Some Forth block editors are essentially this; the text's existence in memory is independent of the lifetime of the commands which modify it.</li>
<li>Unified device interface; perhaps not "everything is a file", but reducing "everything" to a very small number of categories with the help of the universal data interchange structures -- Inspired first by Atari 8-bit home computers, then Unix and Plan 9, but I see a need to avoid oversimplification</li>
<li>Scalable UI is not quite so uncommon in this decade, but there are still areas where improvement is clearly possible</li>
<li>Increased availability of undo, especially undoing file changes at the OS level -- Sam &amp; Acme taught me that undo solves the problem of running extremely powerful text processing commands without thinking about them first. I don't think I can make this as system-wide as a certain mainframe OS, but I would at least like it in the filesystem.</li></ul>
<h3><span class="mw-headline" id="UI_and_window_system">UI and window system</span></h3>
<p>Acme's facility of executing or plumbing any text anywhere while almost all the text is editable adds up to an extremely powerful system. I would like to capture this power without requiring a 3-button mouse. If I can make it work on touchscreens, I'll be very happy indeed.
</p><p>On the other hand, I don't want to imitate Acme's dynamic window tiling. Nor do I want to allow programs excessive control over their windows. I've been happy with simple, static window tiling, and this is what I want to implement for Kaph. I intend to have a single REPL window serving whichever window is current, but I have yet to work out exactly how it will integrate.
</p><p>Under the surface, a big part of Acme's power comes from scripting it. The ability to execute anything means anything can be a script, whether global, specific to the editor, a script in a directory (very powerful), or a line or two in a plain-text file. Such scripts can communicate with Acme, either by being run under Acme's Edit command or by using the virtual files Acme serves.
</p><p>The plumber too is programmable. In Plan 9, it is designed to send messages to ports, but I plan to simply have it execute scripts. The scripts can send messages to programs if desired. This implies many programs will be able to receive relatively arbitrary messages, much like Amiga programs with their AREXX ports. (I just thought, this offers a means of implementing async i/o: start a command which will send a message when the i/o is ready. If the commands and message-passing are as lightweight as I hope, this may be reasonable.)
</p>
<h3><span class="mw-headline" id="Language">Language</span></h3>
<p>[discuss forth; mention lisp; mention making forth safer; start to consider pep]
</p>
<h3><span class="mw-headline" id="Data_interchange_structures">Data interchange structures</span></h3>
<p>In Plan 9 and Unix, I got very tired of addressing fields by number or trying to make regexps to match the right part. For example, try picking dates out of ls -l output. It's slightly easier in Plan 9 because the output is fixed; it's not internationalized and doesn't change depending on whether the output is a terminal or pipe, (the latter is sometimes disgusting!) but 'slightly easier' is still far from easy. The fields have names, why can't I address them by name? In Kaph, lists of files, processes, or other things will be represented as data structures with named and typed fields. [to do: more detail]
</p><p>~~page update WIP~~
</p><p>old:
</p><p>A more "meta" thing I learned from Sam Acme and Plan 9 is the power of having a few simple but powerful interfaces with a powerful command language behind them, rather than many discrete applications. Plan 9 isn't actually the best in this regard, having many disparate languages which take a bit of thought to interface together, and the easy way is often the fragile way. This is why Kaph will have the one language, but this is not to say it will exclude DSLs. (DSL = Domain Specific Language, a small language for a specific task.) 
</p><p>Forth is perhaps <i>the</i> ideal language for integrating DSLs into itself. In Charles Moore's wording, it was a 'compiler' before it was a language. He came up with this compiler system and used it to implement "problem oriented languages" before developing a full language with it. See <a rel="nofollow" class="external text" href="https://colorforth.github.io/POL.htm">Programming a Problem-Oriented Language</a>. 
</p><p>Lisp is also good for DSLs. Both Forth and Lisp are especially good because they mean you don't have to write a parser for each DSL. You just use the existing parser, only spreading out the syntax of your DSL a little bit. I even prefer this spreading; I find printf and regexps too terse to read, and I hate having DSLs stuffed into strings where normal code formatting practice breaks down.
</p><p>I have been tempted to use some variety of Lisp instead of Forth, but I'm not keen on its basic principles. I would rather use a language closer to the hardware and find a safe way of working with it.
</p>
<h2><span class="mw-headline" id="Minor_Projects">Minor Projects</span></h2>
<h3><span class="mw-headline" id="Various_Native_Forths">Various Native Forths</span></h3>
<p>Because Forths are relatively easy to make and the results are quite satisfying. Also, it's a form of practice for some aspects of OS development. I may write some up as barebones tutorials. 
</p><p>Progress and plans:
</p>
<ul><li>I have a direct-threaded real-mode x86 Forth in development. It might be working already, but I felt it important to concentrate on personal development instead.</li>
<li>I have some embedded ARM hardware; the obvious next target.</li></ul>
<p>'Threaded' here is Forth interpreter design jargon, not a word for one form of multitasking. It's because the execution flow jumps between routines in the manner of a literal thread in a complex weave or seam. I initially intended to immitate the double-indirect threaded Jonesforth, but all that indirection was too much for my brain. Besides, double-indirect threading was invented to save memory and was apparently faster on some hardware, but stores addresses as data. These days, I think I'd rather save the data cache for actual data. Direct-threaded Forths are simpler, and <a rel="nofollow" class="external text" href="http://pygmy.utoh.org/pygmyforth.html">Pygmy Forth for DOS</a> shows they are perfectly capable of being fast and tiny even on an 8088.
</p><p>There are many public domain Forths; plenty of code to use if desired. This of course raises the possibility of just porting one instead of developing from scratch. However, developing Forth programs is greatly improving my programming skills.
</p>
<h3><span class="mw-headline" id="A8.86">A8.86</span></h3>
<p>When I was 13 or 14 years old, the <i>Atari 8-bit Home Computer Operating System Manual</i> showed how many peripherals of very different types and needs could be operated through a unified, consistent interface. It blew my mind! When I first got a MS-DOS reference book some years later, I was repulsed by how ad-hoc and junky the interfaces were by comparison. Naturally, I wanted to make an OS imitating Atari's design, but I didn't have the programming or organizational skills in the 90s. When I got Linux years later I found some clean Unix interfaces, but many obstructively non-uniform interfaces too. I was also astonished to find how primitive and generally rough Unix terminal interfaces are. Atari provided a full-screen text editor for all-purpose input starting in 1978! Plan 9 went some way toward fixing all this, but was still disappointing in some ways as outlined under Kaph above. <i>So,</i> if I had time, I'd still like to produce an OS imitating Atari's.&#160;:) However, most of the features I want have ended up as part of Kaph.
</p><p>I might still do something along these lines as a sort of Kaph-lite. It would have to have some interesting graphics hackery because I'm imitating Atari. For you Amiga fans, Amiga Inc. was working with Atari before they approached Commodore. I don't know how closely they worked together, but the graphics features some find so amazing in the Amiga are entirely typical of <i>Atari's</i> way of thinking.&#160;;) They're obvious next steps from the graphics systems of the 8-bit Ataris. I don't blame Amiga Inc for ditching Atari; Atari's boss at the time was a horrible person to work with and Commodore offered them literally 5 times more money.
</p><p>You know, "interesting graphics hackery" suggests a hardware project... I'm thinking "A8.ARM" <i>hardware</i> running Kaph. That would be great, if not too much of a challenge! :D But speaking of challenges and hardware, I've had thoughts of designing my own CPU...
</p>
<h2><span class="mw-headline" id="Suggestions">Suggestions</span></h2>
<h3><span class="mw-headline" id="Remote_Shinies">Remote Shinies</span></h3>
<p>If you want to be <a href="James_T._Klik" title="James T. Klik">James T. Klik</a>, may I recommend becoming <a href="Nick_Stacky" title="Nick Stacky">Nick Stacky</a> first? Using other operating systems' graphics drivers is great! Of course, you will have to design a networked window system or interface to X. <i>Don't</i> try to use Wayland over X, basic input breaks down over the network! VNC is also a bit rubbish in the input stakes. X may be tough, but it gets it right. Plan 9 also gets it right, but doesn't have drivers so it's more of an example you may wish to imitate. Plan 9's windowing is much simpler than X, but note that you'll have to understand its filesystem semantics to understand how its window system is exported correctly. In places, it takes a genius to understand Plan 9's simplicity!&#160;;)
</p>
<h2><span class="mw-headline" id="Reviews">Reviews</span></h2>
<p>Note to self: try more OSs! I had plans for this section, but I always seem to be doing something else. Occasionally, the "something else" is even OS coding. &gt;.&gt;
</p>
<h3><span class="mw-headline" id="FreeDOS">FreeDOS</span></h3>
<p>I dip into FreeDOS every now and then, especially to code in 16-bit assembly language, but almost everything is unstable. It's just-about usable on my Thinkpad x61 (2007), was hardly usable on Qemu years ago, and seems even worse on a more recent version of Qemu. Even on the Thinkpad, many editors will crash or develop unpredictable bugs if you touch the thumbstick while pressing a key.
</p><p>I use software from the 3 released FreeDOS ISOs. The best text editors have severe interrupt/keyboard issues under Qemu, although they're not so bad on real hardware. They're all very different from each other, most having as little relation to each other as Vim has to Notepad. They also tend to have peculiar design choices -- I have a file with notes on each editor which makes me alternately laugh, cry, and yell WHY?&#160;;) I use SetEdit (despite instability) because it saves its session when I quit to run Nasm, and I use very simple batch scripts to run Nasm. I prefer quitting the editor to starting a subshell because the subshells of many editors don't work in FreeDOS, (especially not in Qemu,) and they are often cumbersome to invoke anyway.
</p><p>There are several GUIs for DOS. 2 or 3 of them appear to be virtually OS projects in the way Windows 1-3 were OSs built on DOS. They're unstable. OpenGEM is stable, but preserves some of the the worst clunkiness of 80s GUI, including clearing the selection when you scroll. (Atari fixed that, but the fix never reached OpenGEM.) 
</p><p>I stuck with the shell, using COMMAND.COM-compatible FreeCOM until I found it difficult to grep for a regexp containing a single double-quote character. I had to add a double-quote to the file list and put up with the "file not found" error, otherwise FreeCOM would ignore the redirection character on the same line. Now I use 4DOS which has a proper means of quoting arguments.
</p><p>4DOS also allows setting the default text colours, reducing the problem I have with bright-for-bold displays. However, the problem returns as soon as I pipe text into a pager, or run some unconfigurable programs or run an editor whose configuration doesn't work.
</p><p>I've had a little fun with assembly-language coding and some Forth and BASIC interpreters, but I don't really enjoy FreeDOS, or any DOS. There are some nice games, but I'd rather game on my tablet. And the one Forth interpreter I want to keep using, I run under DOSBox.
</p>
<h3><span class="mw-headline" id="Nano-reviews">Nano-reviews</span></h3>
<ul><li><b>9front</b> I used full-time for about 10 years! In a sense, it was my primary OS. I only used Linux for web browsing, 3D virtual worlds, and occasionally OpenTTD or some other game. Everything else I did on 9front. However, there were some frustrations. I didn't have enough free creative energy to overcome the lack of configurability. Many of the little languages were uncomfortable, and so were the differences between them. If you're comfortable with such languages and with deeply sophisticated C, it's a very special system! So is its parent, Plan 9 from Bell Labs.</li>
<li><b>KolibriOS</b> is a bit of a favourite because it was an early find which is impressively complete and capable, and because it has simple APIs. However, its GUI is locked in the past with tiny fonts I can no longer comfortably read. I have <i>endured</i> many traditional GUIs since the 1980s so I can say KolibriOS's GUIs are better than average (apart from the size); stable and less clunky than some, but it's not up to the UI standards of the present era.</li>
<li><b>MenuetOS</b> gets a mention because it's KolibriOS's parent. I believe the APIs are also simple even for assembly-language programming, as are Kolibri's. It's certainly capable of rendering larger, smoother text. However, it has very few user programs by comparison, perhaps it because it switched to closed-source almost at the height of open-source enthusiasm.</li></ul>
<!-- 
NewPP limit report
Cached time: 20250212013335
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.011 seconds
Real time usage: 0.011 seconds
Preprocessor visited node count: 45/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4356-0!canonical and timestamp 20250212013335 and revision id 29202.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=User:Eekee&amp;oldid=29202">https://wiki.osdev.org/index.php?title=User:Eekee&amp;oldid=29202</a>"</div></div>
		<div id="catlinks" class="catlinks catlinks-allhidden" data-mw="interface"></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=User%3AEekee" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="./User:Eekee#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-user" class="selected mw-list-item"><a href="./User:Eekee" title="View the user page [c]" accesskey="c"><span>User page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User_talk:Eekee&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="./User:Eekee"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Eekee&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Eekee&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/User:Eekee" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/User:Eekee" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-contributions" class="mw-list-item"><a href="./Special:Contributions/Eekee" title="A list of contributions by this user"><span>User contributions</span></a></li><li id="t-log" class="mw-list-item"><a href="./Special:Log/Eekee"><span>Logs</span></a></li><li id="t-userrights" class="mw-list-item"><a href="./Special:UserRights/Eekee"><span>View user groups</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Eekee&amp;oldid=29202" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Eekee&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 30 July 2024, at 15:00.</li>
	<li id="footer-info-0">This page has been accessed 3,200 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=User:Eekee&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.011","walltime":"0.011","ppvisitednodes":{"value":45,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":0,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250212013335","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":120});});</script>
</body>
</html>