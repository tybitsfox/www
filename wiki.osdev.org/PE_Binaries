<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>PE - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"cee82f8f583edb7867485cd5","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"PE","wgTitle":"PE","wgCurRevisionId":29376,"wgRevisionId":29376,"wgArticleId":1892,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using duplicate arguments in template calls","Pages using deprecated source tags","Executable Formats","Object Files","UEFI","Windows"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"PE","wgRelevantArticleId":1892,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,
"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRedirectedFrom":"PE_Binaries","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgInternalRedirectTargetUrl":"/PE","wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["mediawiki.action.view.redirect","site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve",
"ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<link rel="canonical" href="PE"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-PE rootpage-PE skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">PE</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"><span class="mw-redirectedfrom">(Redirected from <a href="https://wiki.osdev.org/index.php?title=PE_Binaries&amp;redirect=no" class="mw-redirect" title="PE Binaries">PE Binaries</a>)</span></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="PE_Binaries#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="PE_Binaries#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear: right; border:1px solid #aaaaaa; background:#eee; text-align:center; width:200px; ;"><tbody><tr><th style="background:#ffce7b; padding:0.3em; font-size:1.1em;"><a href="Executable_Formats" title="Executable Formats">Executable Formats</a></th></tr><tr><th>Microsoft</th></tr><tr><td><div>
<p><b>16 bit:</b><br />
<a href="COM" title="COM">COM</a><br />
<a href="MZ" title="MZ">MZ</a><br />
<a href="NE" title="NE">NE</a><br />
<b>Mixed (16/32 bit):</b><br />
<a href="LE" title="LE">LE</a><br />
<b>32/64 bit:</b><br />
<a class="mw-selflink selflink">PE</a><br />
<a href="COFF" title="COFF">COFF</a><br />
</p>
</div></td></tr><tr><th>*nix</th></tr><tr><td><div>
<p><a href="A.out" title="A.out">a.out</a><br />
<a href="ELF" title="ELF">ELF</a><br />
</p>
</div></td></tr><tr><th>Apple</th></tr><tr><td><div>
<p><a href="Mach-O" title="Mach-O">Mach-O</a><br />
</p>
</div></td></tr></tbody></table>
<p>With Windows 9x/<a href="https://wiki.osdev.org/index.php?title=Windows_NT&amp;action=edit&amp;redlink=1" class="new" title="Windows NT (page does not exist)">NT</a>, a new executable file type was required. Thus was born the "PE" Portable Executable, which is still in use. Unlike its predecessors, WIN-PE is a true 32bit file format, supporting relocatable code. It does distinguish between TEXT, DATA, and BSS. It is, in fact, a bastardized version of the <a href="COFF" title="COFF">COFF</a> format.
</p><p>If you did set up a <a href="Cygwin" title="Cygwin">Cygwin</a> environment on your Windows machine, "PE" is the target format for your Cygwin GCC toolchain, which causes the unaware some headache when trying to link parts build under Cygwin with parts build under Linux or BSD (which use the ELF target by default). (Hint: You have to build a <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a>)
</p><p>The PE format is used by Windows 95 and higher, Windows NT 3.1 and higher, the Mobius, ReactOS and <a href="UEFI" title="UEFI">UEFI</a>. The PE format is also used as a container for .NET assemblies by both the Microsoft .Net CLI and Mono, in which case it doesn't actually store executable data but .Net metadata with IL attached to it.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="PE_Binaries#Inside_the_PE_file"><span class="tocnumber">1</span> <span class="toctext">Inside the PE file</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="PE_Binaries#Overview"><span class="tocnumber">1.1</span> <span class="toctext">Overview</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="PE_Binaries#DOS_Stub"><span class="tocnumber">1.2</span> <span class="toctext">DOS Stub</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="PE_Binaries#PE_header"><span class="tocnumber">1.3</span> <span class="toctext">PE header</span></a>
<ul>
<li class="toclevel-3 tocsection-5"><a href="PE_Binaries#Optional_header"><span class="tocnumber">1.3.1</span> <span class="toctext">Optional header</span></a></li>
<li class="toclevel-3 tocsection-6"><a href="PE_Binaries#Data_Directories"><span class="tocnumber">1.3.2</span> <span class="toctext">Data Directories</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-7"><a href="PE_Binaries#Sections"><span class="tocnumber">1.4</span> <span class="toctext">Sections</span></a>
<ul>
<li class="toclevel-3 tocsection-8"><a href="PE_Binaries#Section_header"><span class="tocnumber">1.4.1</span> <span class="toctext">Section header</span></a></li>
<li class="toclevel-3 tocsection-9"><a href="PE_Binaries#In_asm_linkage"><span class="tocnumber">1.4.2</span> <span class="toctext">In asm linkage</span></a></li>
<li class="toclevel-3 tocsection-10"><a href="PE_Binaries#Position_Independent_Code"><span class="tocnumber">1.4.3</span> <span class="toctext">Position Independent Code</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-11"><a href="PE_Binaries#Signed_PE_with_Attribute_Certificate_Table"><span class="tocnumber">1.5</span> <span class="toctext">Signed PE with Attribute Certificate Table</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="PE_Binaries#CLI_/_.Net"><span class="tocnumber">1.6</span> <span class="toctext">CLI / .Net</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-13"><a href="PE_Binaries#Loading_a_PE_file"><span class="tocnumber">2</span> <span class="toctext">Loading a PE file</span></a></li>
<li class="toclevel-1 tocsection-14"><a href="PE_Binaries#64_bit_PE"><span class="tocnumber">3</span> <span class="toctext">64 bit PE</span></a></li>
<li class="toclevel-1 tocsection-15"><a href="PE_Binaries#See_Also"><span class="tocnumber">4</span> <span class="toctext">See Also</span></a></li>
</ul>
</div>

<h1><span class="mw-headline" id="Inside_the_PE_file">Inside the PE file</span></h1>
<p>Below will attempt to explain the various concepts and parts that make up a PE file rather than the exact data structures inside of them since that would certainly take up too much space. The reasoning is that most resources on PE files tend to just dump a bunch of data structures in your face without fully explaining what they are for. So by reading the following and knowing what a PE file consists of you will have a better understanding of what to expect and how to utilize PE file resources.
</p>
<h2><span class="mw-headline" id="Overview">Overview</span></h2>
<p>The PE file consists of several parts. They are briefly sumarized below, then more detail is entered on each part.
Here are the definitions for the field types. PE files are stored in little-endian order, the same byte order as an x86.
</p>
<div class="thumb tleft"><div class="thumbinner" style="width:310px;"><a href="./File:PEFigure1.jpg" class="image"><img alt="" src="images/d/dd/PEFigure1.jpg" decoding="async" width="308" height="566" class="thumbimage" data-file-width="308" data-file-height="566" /></a>  <div class="thumbcaption">An overview of the format</div></div></div>
<h2><span class="mw-headline" id="DOS_Stub">DOS Stub</span></h2>
<p>The PE format begins with a MS-DOS stub (a header plus executable code) which makes it a valid MS-DOS executable. The MS-DOS header begins with the magic code 0x5A4D and is 64 bytes long, followed by real-mode executable code. The standard stub used almost universally is 128-bytes long (including header and executable code) and simply outputs "This program cannot be run in DOS mode." Despite many utilities that with PE files are hard coded to expect the PE header to start at exactly 128 bytes in, this is incorrect since in some linkers, including Microsoft's own <a href="Link" title="Link">Link</a>, it is possible to replace the MS-DOS stub with one of your own choosing, and many older programs did this to allow the developer to bundle a MS-DOS and Windows version into a single file. The correct way is to read a formerly reserved 4-byte address inside the MS-DOS header located at 0x3C (field commonly known as e_lfanew) which contains the address at which PE file signature is found, and PE file header follows immediately. Usually this is a pretty standard value (most of the time this field is set to 0xE8 by the default link.exe stub). Microsoft seemingly recommends aligning the PE header on an 8 byte boundary (<a rel="nofollow" class="external free" href="https://web.archive.org/web/20160609191558/http://msdn.microsoft.com/en-us/gg463119.aspx">https://web.archive.org/web/20160609191558/http://msdn.microsoft.com/en-us/gg463119.aspx</a>, page 10, figure 1).
</p>
<h2><span class="mw-headline" id="PE_header">PE header</span></h2>
<p>The PE header contains information that concerns the entire file rather than individual pieces that will be coming up later. The bare minimum header contains a 4-byte signature (0x00004550), the machine type/architecture of the executable code inside, a time stamp, a pointer to symbols, as well as various flags (is the file an executable, DLL, can the application handle addresses above 2GB, does the file needed be copy to the swap file if ran from a removable device, etc). Unless you're using a really stripped down statically linked PE file to save memory with a hard coded entry point and no resources, then the PE header alone isn't enough.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">// 1 byte aligned</span>
<span class="k">struct</span><span class="w"> </span><span class="nc">PeHeader</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mMagic</span><span class="p">;</span><span class="w"> </span><span class="c1">// PE\0\0 or 0x00004550</span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mMachine</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mNumberOfSections</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mTimeDateStamp</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mPointerToSymbolTable</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mNumberOfSymbols</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mSizeOfOptionalHeader</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mCharacteristics</span><span class="p">;</span><span class="w"></span>
<span class="p">};</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="Optional_header">Optional header</span></h3>
<p>The optional PE header follows directly after the standard PE header. It's size is specified in the PE header which you can also use to tell if the optional header exists. The optional PE header begins with a 2-byte magic code representing the architecture (0x010B for PE32, 0x020B for PE64, 0x0107 ROM). This can be used in conjunction with the machine type to see in the PE header to detect if the PE file is running on a compatible system. There are a few other useful memory-related variables including the size and virtual base of the code and data, as well as the application's version number  (completely user specified, some update utilities use this to detect if a newer version is available), entry point, and how many directories there are (see below).
</p><p>Part of the optional header is NT-specific. This include the subsystem (console, driver, or GUI application), how much stack and heap space to reserve, and the minimum required Operating System, subsystem and Windows version. You can use your own values for all of these depending on the needs of your OS.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">// 1 byte aligned, 96 bytes</span>
<span class="k">struct</span><span class="w"> </span><span class="nc">Pe32OptionalHeader</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mMagic</span><span class="p">;</span><span class="w"> </span><span class="c1">// 0x010b - PE32</span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">  </span><span class="n">mMajorLinkerVersion</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">  </span><span class="n">mMinorLinkerVersion</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mSizeOfCode</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mSizeOfInitializedData</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mSizeOfUninitializedData</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mAddressOfEntryPoint</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mBaseOfCode</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mBaseOfData</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mImageBase</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mSectionAlignment</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mFileAlignment</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mMajorOperatingSystemVersion</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mMinorOperatingSystemVersion</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mMajorImageVersion</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mMinorImageVersion</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mMajorSubsystemVersion</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mMinorSubsystemVersion</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mWin32VersionValue</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mSizeOfImage</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mSizeOfHeaders</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mCheckSum</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mSubsystem</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mDllCharacteristics</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mSizeOfStackReserve</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mSizeOfStackCommit</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mSizeOfHeapReserve</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mSizeOfHeapCommit</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mLoaderFlags</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mNumberOfRvaAndSizes</span><span class="p">;</span><span class="w"></span>
<span class="p">};</span><span class="w"></span>
</pre></div>
<p>The PE32+ optional header is similar but slightly different: there is no <code>mBaseOfData</code> and <code>mImageBase</code> and <code>mSizeOf{Stack,Heap}{Reserve,Commit}</code> is 64 instead of 32 bits. 
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">// 1 byte aligned, 112 bytes</span>
<span class="k">struct</span><span class="w"> </span><span class="nc">Pe32PlusOptionalHeader</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mMagic</span><span class="p">;</span><span class="w"> </span><span class="c1">// 0x020b - PE32+ (64 bit)</span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">  </span><span class="n">mMajorLinkerVersion</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint8_t</span><span class="w">  </span><span class="n">mMinorLinkerVersion</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mSizeOfCode</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mSizeOfInitializedData</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mSizeOfUninitializedData</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mAddressOfEntryPoint</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mBaseOfCode</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint64_t</span><span class="w"> </span><span class="n">mImageBase</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mSectionAlignment</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mFileAlignment</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mMajorOperatingSystemVersion</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mMinorOperatingSystemVersion</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mMajorImageVersion</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mMinorImageVersion</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mMajorSubsystemVersion</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mMinorSubsystemVersion</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mWin32VersionValue</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mSizeOfImage</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mSizeOfHeaders</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mCheckSum</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mSubsystem</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mDllCharacteristics</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint64_t</span><span class="w"> </span><span class="n">mSizeOfStackReserve</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint64_t</span><span class="w"> </span><span class="n">mSizeOfStackCommit</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint64_t</span><span class="w"> </span><span class="n">mSizeOfHeapReserve</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint64_t</span><span class="w"> </span><span class="n">mSizeOfHeapCommit</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mLoaderFlags</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mNumberOfRvaAndSizes</span><span class="p">;</span><span class="w"></span>
<span class="p">};</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="Data_Directories">Data Directories</span></h3>
<p>While technically part of the optional header and follows directly after it is a list of entries pointing to data directories (only in executable images and DLLs). Because the optional header can vary in size, you only need to pay attention to the directories that exist and you expect, since it is likely that new data directories will be added to the PE specification in the future (.Net is an example of one that was recently added). Each data directory is referenced as an 8-byte entry in the optional header. The first 4 bytes is the Relative Virtual Address, or RVA (see Sections below), of the directory, and the last 4 bytes is the size of the directory.
</p><p>Each data directory that the entries point to have their own format. Data directories are used to describe import tables for dynamic linking, a table of resources that are embedded inside of the PE file, debug information (line numbers and break points), the CLI .Net header.
</p>
<table class="wikitable">
<tbody><tr>
<th>Position (PE/PE32+)
</th>
<th>Section
</th></tr>
<tr>
<td>96/112</td>
<td>The export table address and size. Same format as .edata
</td></tr>
<tr>
<td>104/120</td>
<td>The import table address and size. Same format as .idata
</td></tr>
<tr>
<td>112/128</td>
<td>The resource table address and size. Same format as .rsc
</td></tr>
<tr>
<td>120/136</td>
<td>The exception table address and size. Same format as .pdata
</td></tr>
<tr>
<td>128/144</td>
<td>The attribute certificate table offset (not RVA) and size. See <a rel="nofollow" class="external text" href="PE#Signed_PE_with_Attribute_Certificate_Table">Signed PE</a> below
</td></tr>
<tr>
<td>136/152</td>
<td>The base relocation table address and size. Same format as .reloc
</td></tr>
<tr>
<td>144/160</td>
<td>The debug data starting address and size. Same format as .debug
</td></tr>
<tr>
<td>152/168</td>
<td>Architecture, reserved MBZ
</td></tr>
<tr>
<td>160/176</td>
<td>Global Ptr, the RVA of the value to be stored in the global pointer register. The size member of this structure must be set to zero.
</td></tr>
<tr>
<td>168/184</td>
<td>The thread local storage (TLS) table address and size. Same format as .tls
</td></tr></tbody></table>
<h2><span class="mw-headline" id="Sections">Sections</span></h2>
<p>A PE file is made up of sections which consist of a name, offset within the file, virtual address to copy to, as well as the size of the section in the file and in virtual memory (which may differ, in which case the difference should be cleared 0s), and associated flags. The sections usually follow universal naming (".text", ".rsrc", etc), but this can also vary between linker and in some cases can be user-defined, so it is better to depend on the flags to tell if a section is executable or writable. However in saying that, if you have custom data that you wish to embed inside of the executable, then placing it inside of a section and identifying it by the section's name can be a good idea since you won't be changing the PE format and your executable will remain compatible with PE tools.
</p><p>The Relative Virtual Base is a phrase that comes up a lot in PE documentation. The RVA is the address at where something exists once it's loaded into memory, rather than an offset into the file. To calculate the file's address from an RVA without actually loading the sections into memory, you can use the table of section entries. By using the virtual address and size of each section you can find which section the RVA belongs to, then subtract the difference between the section's virtual address and file offset.
</p>
<h3><span class="mw-headline" id="Section_header">Section header</span></h3>
<p>Each section has an entry in section header table.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">struct</span><span class="w"> </span><span class="nc">IMAGE_SECTION_HEADER</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// size 40 bytes</span>
<span class="w">	</span><span class="kt">char</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="w">  </span><span class="n">mName</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mVirtualSize</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mVirtualAddress</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mSizeOfRawData</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mPointerToRawData</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mPointerToRelocations</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mPointerToLinenumbers</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mNumberOfRelocations</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">mNumberOfLinenumbers</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">mCharacteristics</span><span class="p">;</span><span class="w"></span>
<span class="p">};</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="In_asm_linkage">In asm linkage</span></h3>
<p>if in nasm you declare a block of code like this:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">segment</span><span class="w"> </span><span class="no">.code</span><span class="w"></span>
<span class="nl">aAsmFunction:</span><span class="w"></span>
<span class="c1">;Do whatever</span>
<span class="nf">mov</span><span class="w"> </span><span class="no">BYTE</span><span class="p">[</span><span class="no">aData</span><span class="p">],</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="nf">ret</span><span class="w"></span>
<span class="nf">segment</span><span class="w"> </span><span class="no">.data</span><span class="w"></span>
<span class="nl">aData:</span><span class="w"> </span><span class="nf">db</span><span class="w"> </span><span class="mi">0xFF</span><span class="w"></span>
</pre></div>
<p>The <i>segments</i> will apear as <i>sections</i>. Using this it is possible to keep C and Asm seperate, as a linker will not automatically merge <i>.code</i> and <i>.text</i>, which is the normal output by C compilers.
</p>
<h3><span class="mw-headline" id="Position_Independent_Code">Position Independent Code</span></h3>
<p>If each section specifies which virtual address to load it in to, you may be wondering how multiple DLLs can exist in one virtual address space without conflict. It is true that most code you'll find in a PE file (DLL or otherwise) is position dependent and linked to a specific address. However to resolve this issue there exist a structure called a Relocation Table that is attached to each section entry. The table is basically a HUGE long list of every address stored in that section so you can offset it to the location where you loaded the section.
</p><p>Because addresses can point across section borders, relocations should be done after each section is loaded into memory. Then reiterate over each section, iterate through each address in the Relocation Table, find out what section that RVA exists in and add/subtract the offset between that section's linked virtual address and the section's virtual address you loaded it into.
</p>
<h2><span class="mw-headline" id="Signed_PE_with_Attribute_Certificate_Table">Signed PE with Attribute Certificate Table</span></h2>
<p>Many PE executable (most notably all Microsoft updates) are signed with a certificate. These information is stored in the Attribute Certificate Table, pointed by the Data Directory's 5th entry. It is important that for the Attribute Certificate Table no RVA is stored, rather a simple file offset. The format is concatenated signatures, each with the following structure:
</p>
<table class="wikitable">
<tbody><tr>
<th>Offset
</th>
<th>Size
</th>
<th>Field
</th>
<th>Description
</th></tr>
<tr>
<td>0</td>
<td>4</td>
<td>dwLength</td>
<td>Specifies the length of the attribute certificate entry.
</td></tr>
<tr>
<td>4</td>
<td>2</td>
<td>wRevision</td>
<td>Contains the certificate version number, magic 0x0200 (WIN_CERT_REVISION_2_0)
</td></tr>
<tr>
<td>6</td>
<td>2</td>
<td>wCertificateType</td>
<td>Specifies the type of content in bCertificate, magic 0x0002 (WIN_CERT_TYPE_PKCS_SIGNED_DATA)
</td></tr>
<tr>
<td>8</td>
<td>x</td>
<td>bCertificate</td>
<td>Contains a PKCS#7 SignedData structure
</td></tr></tbody></table>
<p>For <a rel="nofollow" class="external text" href="EFI#Secure_Boot">Secure Boot</a> under <a href="EFI" class="mw-redirect" title="EFI">EFI</a> such a signature is a must. It worth nothing that the PE format allows multiple certificates to be embedded in a single PE file, but UEFI firmware implementations usually only <b>allow one</b>, which must be signed by the Microsoft KEK. If the firmware allows installing more KEK (not typical), then you can use other certificates as well.
</p><p>The bCertificate data is a PKCS#7 signature with certificate, encoded in ASN.1 format. Microsoft uses signtool.exe to create these signature entries, but an Open Source solution exists, called <a rel="nofollow" class="external text" href="git://kernel.ubuntu.com/jk/sbsigntool.git">sbsigntool</a> (also available on <a rel="nofollow" class="external text" href="https://github.com/imedias/sbsigntool">github</a> with debian packaging).
</p>
<h2><span id="CLI_.2F_.Net"></span><span class="mw-headline" id="CLI_/_.Net">CLI / .Net</span></h2>
<p>CLI works alongside the PE format. Rather than being an extension to the format, it really exists as its own format inside of a format with a completely different way of storing tables and values. All the .Net data and headers exist inside of sections that are loaded into memory (they are loaded into memory since CLI involves heavy language reflection requiring the metadata without thrashing the disk). The second reason that the .Net metadata exists inside of the sections rather than the PE headers is because the PE loader actually has no concept of .Net at all. (Exception: There is a data directory entry pointing to the RVA of the CLI header so tools can easily access the .Net data without loading it into virtual memory.) In fact, I highly doubt the Windows kernel has any sort of concept of .Net at all. The way .Net works is by dynamically linking against the .Net runtime (mscoree.dll), and setting the entry point to a symbol (_CorExeMain) that resolves to a location inside of mscoree.dll instead of the local executable. This means that Windows CE, WINE, and ReactOS can all load .Net assemblies once the .Net framework can be installed without any specific code.
</p>
<h1><span class="mw-headline" id="Loading_a_PE_file">Loading a PE file</span></h1>
<p>To load a PE file is quite simple;
</p><p>1. Extract from the header the entry point, heap and stack sizes.
</p><p>2. Iterate through each section and copy it from the file into virtual memory (although not required, it is good to clear the difference between the section size in memory and in the file to 0).
</p><p>3. Find the address of the entry point by finding the correct entry in the symbol table.
</p><p>4. Create a new thread at that address and begin executing!
</p><p>To load a PE file that requires a dynamic DLL you can do the same, but check the Import Table (referred to by the data directory) to find what symbols and PE files are required, the Export Table (also referred to by the data directory) inside of that PE file to see where those symbols are and match them up once you've loaded that PE's sections into memory (and relocated them!) And lastly, beware that you'll have to recursively resolve each DLL's Import Tables as well, and some DLLs can use tricks to reference a symbol in the DLL loading it so make sure you don't get your loader stuck in a loop! Registering symbols loaded and making them global might be a good solution.
</p><p>It may also be a good idea to check the <i>Machine</i> and <i>Magic</i> fields for validity, not just the PE signature. This way your loader won't try loading a 64 bit binary into 32 bit mode (this would be certain to cause an exception).
</p>
<h1><span class="mw-headline" id="64_bit_PE">64 bit PE</span></h1>
<p>64 bit PE's are extremely similar to normal PE's, but the machine type, if AMD64, is 0x8664, not 0x14c. This field is directly after the PE signature. The magic number also changes from 0x10b to 0x20b. The magic field is at the beginning of the optional header. Plus, the BaseOfData member of the optional header is non existent. This is because the ImageBase member is expanded to 64 bits. The BaseOfData is removed to make room for it
</p>
<h1><span class="mw-headline" id="See_Also">See Also</span></h1>
<ul><li><a rel="nofollow" class="external text" href="https://learn.microsoft.com/en-us/windows/win32/debug/pe-format">Microsoft Learn PE Format Reference</a></li>
<li>MSDN Magazine: <a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-us/magazine/cc301805.aspx">Inside Windows: An In-Depth Look into the Win32 Portable Executable File Format</a></li>
<li>PE Specification: <a rel="nofollow" class="external text" href="http://www.microsoft.com/whdc/system/platform/firmware/PECOFF.mspx">latest edition, OOXML format</a>, <a rel="nofollow" class="external text" href="http://download.microsoft.com/download/e/b/a/eba1050f-a31d-436b-9281-92cdfeae4b45/pecoff.doc">1999 edition, DOC format</a></li>
<li><a rel="nofollow" class="external free" href="http://perso.wanadoo.fr/pierrelib/exec_formats/PE_v1.0.html">http://perso.wanadoo.fr/pierrelib/exec_formats/PE_v1.0.html</a></li>
<li><a rel="nofollow" class="external free" href="http://perso.wanadoo.fr/pierrelib/exec_formats/OMF_v1.1.html">http://perso.wanadoo.fr/pierrelib/exec_formats/OMF_v1.1.html</a></li>
<li>Someone's Perspective On PE32 Vs ELF32. - <a rel="nofollow" class="external free" href="http://forum.osdev.org/viewtopic.php?f=1&amp;t=17686&amp;p=133835#p133835">http://forum.osdev.org/viewtopic.php?f=1&amp;t=17686&amp;p=133835#p133835</a></li>
<li><a rel="nofollow" class="external free" href="http://www.ntcore.com/exsuite.php">http://www.ntcore.com/exsuite.php</a> - Great tool for Windows that lets you explore inside of a PE file (and .Net metadata) to understand how it's laid out.</li>
<li><a rel="nofollow" class="external text" href="http://www.brokenthorn.com/Resources/OSDevPE.html">BrokenThorn on the topic</a></li>
<li><a rel="nofollow" class="external text" href="https://www.openrce.org/reference_library/files/reference/PE%20Format.pdf">Graphical layout of relevant structures</a></li>
<li><a rel="nofollow" class="external text" href="https://code.google.com/p/corkami/wiki/PE101">Illustrative walkthrough of simple PE executable</a></li>
<li><a rel="nofollow" class="external text" href="https://github.com/erocarrera/pefile">pefile</a> - handy python module for inspecting &amp; manipulating PE files</li>
<li><a rel="nofollow" class="external text" href="https://github.com/cubiclesoft/php-winpefile">php-winpefile</a> - Powerful PHP command-line tool and several PHP classes for inspecting, manipulating, and even creating PE files and finding PE file artifacts.</li>
<li><a rel="nofollow" class="external text" href="https://github.com/cubiclesoft/windows-pe-artifact-library">Windows PE Artifact Library</a> - Over 375 carefully curated PE file artifacts that extensively cover the PE32 and PE32+ formats (plus some DOS and Win16 NE) for multiple architectures.  Useful for seeing examples of what a bound imports table looks like, if a specific flag is ever used, or pretty much any option of the PE format.</li></ul>
<!-- 
NewPP limit report
Cached time: 20250212011954
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.056 seconds
Real time usage: 0.701 seconds
Preprocessor visited node count: 380/1000000
Post‐expand include size: 1654/2097152 bytes
Template argument size: 922/2097152 bytes
Highest expansion depth: 8/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 15664/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    6.290      1 Template:File_formats
100.00%    6.290      1 -total
 84.60%    5.321      1 Template:SmallNavBox
 63.74%    4.009     20 Template:If
 42.95%    2.701     20 Template:Show1
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1892-0!canonical and timestamp 20250212011953 and revision id 29376.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=PE&amp;oldid=29376">https://wiki.osdev.org/index.php?title=PE&amp;oldid=29376</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_duplicate_arguments_in_template_calls&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using duplicate arguments in template calls (page does not exist)">Pages using duplicate arguments in template calls</a></li><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Executable_Formats" title="Category:Executable Formats">Executable Formats</a></li><li><a href="./Category:Object_Files" title="Category:Object Files">Object Files</a></li><li><a href="./Category:UEFI" title="Category:UEFI">UEFI</a></li><li><a href="./Category:Windows" title="Category:Windows">Windows</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=PE" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="PE_Binaries#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="PE" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:PE" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="PE"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=PE&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=PE&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/PE" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/PE" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=PE&amp;oldid=29376" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=PE&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-lang" class="vector-menu mw-portlet mw-portlet-lang vector-menu-portal portal" aria-labelledby="p-lang-label" role="navigation"  >
	<h3
		id="p-lang-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">In other languages</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li class="interlanguage-link interwiki-de mw-list-item"><a href="http://www.lowlevel.eu/wiki/Microsoft_Portable_Executable_and_Common_Object_File_Format" title="Microsoft Portable Executable and Common Object File Format – Deutsch" lang="de" hreflang="de" class="interlanguage-link-target"><span>Deutsch</span></a></li></ul>
		
	</div>
</nav>

</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 7 February 2025, at 13:18.</li>
	<li id="footer-info-0">This page has been accessed 19,516 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=PE&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.056","walltime":"0.701","ppvisitednodes":{"value":380,"limit":1000000},"postexpandincludesize":{"value":1654,"limit":2097152},"templateargumentsize":{"value":922,"limit":2097152},"expansiondepth":{"value":8,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":15664,"limit":5000000},"timingprofile":["100.00%    6.290      1 Template:File_formats","100.00%    6.290      1 -total"," 84.60%    5.321      1 Template:SmallNavBox"," 63.74%    4.009     20 Template:If"," 42.95%    2.701     20 Template:Show1"]},"cachereport":{"timestamp":"20250212011954","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":798});});</script>
</body>
</html>