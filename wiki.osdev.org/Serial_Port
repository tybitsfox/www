<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Serial Port - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"d36c214668c481093b28d25e","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Serial_Port","wgTitle":"Serial Port","wgCurRevisionId":29101,"wgRevisionId":29101,"wgArticleId":2844,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Hardware Interfaces"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Serial_Port","wgRelevantArticleId":2844,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false
,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Serial_Port rootpage-Serial_Port skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Serial Port</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Serial_Port#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Serial_Port#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Serial_Port#Introduction"><span class="tocnumber">1</span> <span class="toctext">Introduction</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Serial_Port#Physical_Port"><span class="tocnumber">2</span> <span class="toctext">Physical Port</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="Serial_Port#DB-25"><span class="tocnumber">2.1</span> <span class="toctext">DB-25</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="Serial_Port#DE-9"><span class="tocnumber">2.2</span> <span class="toctext">DE-9</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="Serial_Port#Signals"><span class="tocnumber">3</span> <span class="toctext">Signals</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="Serial_Port#Electrical"><span class="tocnumber">3.1</span> <span class="toctext">Electrical</span></a>
<ul>
<li class="toclevel-3 tocsection-7"><a href="Serial_Port#TTL"><span class="tocnumber">3.1.1</span> <span class="toctext">TTL</span></a></li>
<li class="toclevel-3 tocsection-8"><a href="Serial_Port#RS-232"><span class="tocnumber">3.1.2</span> <span class="toctext">RS-232</span></a></li>
<li class="toclevel-3 tocsection-9"><a href="Serial_Port#RS-422"><span class="tocnumber">3.1.3</span> <span class="toctext">RS-422</span></a></li>
<li class="toclevel-3 tocsection-10"><a href="Serial_Port#RS-485"><span class="tocnumber">3.1.4</span> <span class="toctext">RS-485</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-11"><a href="Serial_Port#Pinout"><span class="tocnumber">3.2</span> <span class="toctext">Pinout</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="Serial_Port#Usage"><span class="tocnumber">3.3</span> <span class="toctext">Usage</span></a>
<ul>
<li class="toclevel-3 tocsection-13"><a href="Serial_Port#Original"><span class="tocnumber">3.3.1</span> <span class="toctext">Original</span></a>
<ul>
<li class="toclevel-4 tocsection-14"><a href="Serial_Port#Original_Null_Modem"><span class="tocnumber">3.3.1.1</span> <span class="toctext">Original Null Modem</span></a></li>
</ul>
</li>
<li class="toclevel-3 tocsection-15"><a href="Serial_Port#Local_link"><span class="tocnumber">3.3.2</span> <span class="toctext">Local link</span></a>
<ul>
<li class="toclevel-4 tocsection-16"><a href="Serial_Port#Today&#39;s_Null_Modem"><span class="tocnumber">3.3.2.1</span> <span class="toctext">Today's Null Modem</span></a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-17"><a href="Serial_Port#Protocol"><span class="tocnumber">4</span> <span class="toctext">Protocol</span></a>
<ul>
<li class="toclevel-2 tocsection-18"><a href="Serial_Port#Terms"><span class="tocnumber">4.1</span> <span class="toctext">Terms</span></a>
<ul>
<li class="toclevel-3 tocsection-19"><a href="Serial_Port#Baud_Rate"><span class="tocnumber">4.1.1</span> <span class="toctext">Baud Rate</span></a></li>
<li class="toclevel-3 tocsection-20"><a href="Serial_Port#Start_Bit"><span class="tocnumber">4.1.2</span> <span class="toctext">Start Bit</span></a></li>
<li class="toclevel-3 tocsection-21"><a href="Serial_Port#Data_Length"><span class="tocnumber">4.1.3</span> <span class="toctext">Data Length</span></a></li>
<li class="toclevel-3 tocsection-22"><a href="Serial_Port#Parity"><span class="tocnumber">4.1.4</span> <span class="toctext">Parity</span></a></li>
<li class="toclevel-3 tocsection-23"><a href="Serial_Port#Stop_Bits"><span class="tocnumber">4.1.5</span> <span class="toctext">Stop Bits</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-24"><a href="Serial_Port#Data_Signalling"><span class="tocnumber">4.2</span> <span class="toctext">Data Signalling</span></a></li>
<li class="toclevel-2 tocsection-25"><a href="Serial_Port#Example"><span class="tocnumber">4.3</span> <span class="toctext">Example</span></a>
<ul>
<li class="toclevel-3 tocsection-26"><a href="Serial_Port#Transmission"><span class="tocnumber">4.3.1</span> <span class="toctext">Transmission</span></a></li>
<li class="toclevel-3 tocsection-27"><a href="Serial_Port#Reception"><span class="tocnumber">4.3.2</span> <span class="toctext">Reception</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-28"><a href="Serial_Port#The_BREAK_Signal"><span class="tocnumber">4.4</span> <span class="toctext">The BREAK Signal</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Introduction">Introduction</span></h2>
<p>A Serial Port is the generic term for a port on a computer that can be connected to other devices. This may be a proprietary connector with a few wires in it; an AppleBus/AppleTalk connector to connect a printer, modem or another computer; or even an Ethernet port. But by far the most common usage is for an RS-232 port with a 9-pin D-connector (DE-9) for asynchronous communications (see <a href="Communications" title="Communications">Communications</a>). All these ports have one thing in common: the data is sent over a small number of wires (usually one in each direction) in serial fashion, rather than all at once in parallel.
</p><p>But since "Serial Port" is usually used to refer to the COM Port that is found on the PC (to distinguish it from the rarely-seen-nowadays "Parallel Port"), this page will concentrate on that. Refer to the specific pages for other port types. This page will cover the physical port itself, its signals and how they're commonly used, and the most common protocol used on this port.
</p>
<h2><span class="mw-headline" id="Physical_Port">Physical Port</span></h2>
<p>The original IBM PC computer came with two communication ports: a parallel port for connection to a printer, and a serial port to connect to a modem for external communications. Of course, over time those ports were used for other purposes, but that was their original intended usage.
</p><p>Confusingly, both ports used the then already established standard connector called the DB-25.
</p>
<ul><li>The D-series range has (usually) two columns of pins offset from each other to provide both ease of construction, and a definite polarity to the plug to prevent it from being plugged in upside down. Anecdotally, it was so-named because the metal shielding shroud protecting the pins looked like the letter 'D'.</li>
<li>The letter after the 'D' indicates the layout of the pins; and often the number of them, making the suffix number redundant. For example, the first in the series is the DA-15, followed by the DB-25 and DC-37. The later DE-9 was adopted for COM ports on the IBM PC-AT, since only 9 of the 25 defined serial port pins were used.</li></ul>
<p>To prevent plugging a device into the wrong port, the DB-25s used were different genders: the parallel port was female, needing a male printer cable, while the serial port was male, needing a female modem cable.
</p>
<h3><span class="mw-headline" id="DB-25">DB-25</span></h3>
<p>IBM used the DB-25 connector to match other computing products that it was selling. The existing layout allowed for multiple serial ports within the one connector - the so-called Primary and Secondary ports. It also had clock pins for high-speed Synchronous ports as well. But for the IBM PC, only the Asynchronous Primary port pins were used, which meant only 9 of the 25 pins were needed.
</p>
<h3><span class="mw-headline" id="DE-9">DE-9</span></h3>
<p>In the later IBM PC "Advanced Technology" (AT), they used the smaller DE-9 connector for more flexible port layout on the rear of the PC.
</p>
<h2><span class="mw-headline" id="Signals">Signals</span></h2>
<p>The standard signals on the Serial Port were designed to talk to an external serial communications device called a MoDem (Modulator/Demodulator), to allow the computer to be connected over long-distance wires - telephone, ISDN or other long haul methods. The signalling conventions for modems had been well established, and required multiple control signals as well as the simple data in and data out wires.
</p><p>The naming conventions identified the two endpoints of the cable as Data Terminal Equipment (DTE) and Data Communications Equipment (DCE) for computer and modem respectively. The signal names don't usually refer to these, but their definitions do: for example, Transmit Data (TX or TD) is defined to be "Data sent from the DTE to the DCE" - which means the TX pin on the modem is an input pin!
</p>
<h3><span class="mw-headline" id="Electrical">Electrical</span></h3>
<p>The signals used for the normal IBM PC COM port are defined by the RS-232 standard - but there are other standards such as RS-422 and RS-485. These are better for longer cables, or in (electrically) noisier environments; places that electrical interference can change the signal being communicated.
</p><p>Each standard defines the voltage levels required to receive a HIGH ('1') or LOW ('0') signal. Obviously, the transmitter needs to produce at least this much - but voltage drop over the cable means that it should probably produce more. So the standards also define a maximum voltage too.
</p>
<h4><span class="mw-headline" id="TTL">TTL</span></h4>
<p>This term is often used to indicate the signal levels coming straight out of the chip, whether that's the PC's 8250 or 16450 UART, or a microcontroller. It stands for Transistor/Transistor Logic, and historically means 0V and 5V for LOW and HIGH respectively. These days, the chips usually have different Logic standards with different voltage levels, so "TTL" is a misnomer. But the concept is the same: Minimum for LOW, Maximum for HIGH. Only, these signals aren't "driven" very hard, so can't be transmitted over much distance - well under a metre. But that's fine for two chips or boards that are next to each other.
</p>
<h4><span class="mw-headline" id="RS-232">RS-232</span></h4>
<p>RS-232 defines all of the signals used for serial communications, as well as specifying the voltages that the receiver needs to detect to interpret the values of HIGH and LOW. It also demands that the signals be "driven" hard enough to cover tens of metres, which means that both sides can be at opposite ends of a room.
</p><p>Each of the signals use the same scheme: a LOW is signalled with a voltage between +3V and +25V, while a HIGH is between -3V and -25V, relative to the Signal Ground (GND). Note that a disconnected cable would produce 0V, which is neither HIGH nor LOW. This "dead band" is deliberate, to reduce the effect of electrical noise.
</p>
<h4><span class="mw-headline" id="RS-422">RS-422</span></h4>
<p>RS-422 defines the same set of signals as RS-232, but defines that each signal be sent over a <i>pair</i> of wires, known as a "balanced" circuit. Rather than each signal being referenced to a common ground, each signal is referenced between its two wires. The signal names are modified to suffix 'A' or 'B", or occasionally '+' and '-', to each of the signals' wires. LOW is indicated by 'B' being at least 0.2V lower than 'A', while HIGH is indicated by 'B' being at least 0.2V higher than 'A'. The maximum difference between the two must be no more than 12V.
</p><p>This "common mode rejection" system takes advantage of the phenomenon that external electrical interference on the cable raises or lowers the voltage on both wires by similar amounts, which doesn't alter their relative voltage difference. That means that cables can be hundreds of metres long for even high data rates, without the signal deteriorating.
</p>
<h4><span class="mw-headline" id="RS-485">RS-485</span></h4>
<p>RS-485 defines the same set of signals as RS-422 and RS-232, and also defines the same voltages and balanced wiring as RS-422. But it also defines that the transmitter must be able to be turned off. This means that multiple transmitters, and all the receivers, can be connected to the same cable, and only the one currently transmitting is actually driving the signal.
</p><p>This has the benefits of the cable length of RS-422, but allows a single cable run rather than individual runs for each pair of equipment. The drawback is that only one transmitter can be using the cable at any one time.
</p>
<h3><span class="mw-headline" id="Pinout">Pinout</span></h3>
<p>These pinouts are identical for both the computer (DTE) and modem (DCE), thus only a straight-through cable is required - but remember that the names are computer-centric.
</p>
<table class="wikitable">

<tbody><tr>
<th>Pin name
</th>
<th>Abbreviation
</th>
<th>DB-25 pin
</th>
<th>DE-9 pin
</th>
<th>Original function
</th></tr>
<tr>
<td>Shield
</td>
<td>
</td>
<td>1
</td>
<td>-
</td>
<td>Tied to the cable shield on ONE end, to shield the whole cable
</td></tr>
<tr>
<td>Ground
</td>
<td>GND
</td>
<td>7
</td>
<td>5
</td>
<td>Signal ground reference
</td></tr>
<tr>
<td>Transmit Data
</td>
<td>TD
</td>
<td>2
</td>
<td>3
</td>
<td>Data from the DTE to the DCE
</td></tr>
<tr>
<td>Receive Data
</td>
<td>RD
</td>
<td>3
</td>
<td>2
</td>
<td>Data from the DCE to the DTE
</td></tr>
<tr>
<td>Data Set Ready
</td>
<td>DSR
</td>
<td>6
</td>
<td>6
</td>
<td>Set HIGH by the DCE to indicate it has power
</td></tr>
<tr>
<td>Ring Indicator
</td>
<td>RI
</td>
<td>22
</td>
<td>9
</td>
<td>Pulsed by the DCE to indicate an incoming call
</td></tr>
<tr>
<td>Data Terminal Ready
</td>
<td>DTR
</td>
<td>20
</td>
<td>4
</td>
<td>Set HIGH by the DTE to request link establishment
</td></tr>
<tr>
<td>Data Carrier Detect
</td>
<td>DCD
</td>
<td>8
</td>
<td>1
</td>
<td>Set HIGH by the DCE to indicate it has a connection to the remote modem
</td></tr>
<tr>
<td>Request To Send
</td>
<td>RTS
</td>
<td>4
</td>
<td>7
</td>
<td>Set HIGH by the DTE to indicate it has data to send
</td></tr>
<tr>
<td>Clear To Send
</td>
<td>CTS
</td>
<td>5
</td>
<td>8
</td>
<td>Set HIGH by the DCE to allow the DTE to send
</td></tr></tbody></table>
<h3><span class="mw-headline" id="Usage">Usage</span></h3>
<p>The original usage of these signals were for very simple electrical "slave" DCEs to be connected to the barely more intelligent "master" DTEs, so to establish a communications link required a sequence of steps. As modems became more sophisticated, a lot of the functions became commands over the data link versus dedicated signals - and yet the signals remained. Still later, the Serial Port was used for communicating with local devices rather than modems, and the line between DTE and DCE blurred so that no true "master" was obvious - and yet the signals remained. Indeed, their functions were redefined to better suit the requirements of the local environment, so that the signals became flow controllers rather than requesters/granters.
</p>
<h4><span class="mw-headline" id="Original">Original</span></h4>
<p>The original sequence of steps to communicate with a modem were as follows:
</p>
<ol>
<li>The DCE raises DSR to tell the DTE that it is able to be used.</li>
<li>Link establishment:</li>
<i><b>EITHER</b></i>
<ol type="a">
<li>The DTE raises DTR to tell the DCE to establish a link;</li>
</ol>
<p><i><b>OR</b></i>
</p>
<ol type="a">
<li>The DCE pulses RI to indicate an incoming call;</li>
<li>The DTE raises DTR to tell the DCE to accept the incoming call.</li>
</ol>
<p>At this point, a link has been established, but no data can be transmitted or received.
</p><p>Before data can be transmitted:
</p>
<li>The DTE raises RTS to request transmission</li>
<li>The <i>local</i> DCE starts transmitting a carrier to the <i>remote</i> DCE</li>
<li>The <i>remote</i> DCE raises DCD to <i>its</i> DTE, to indicate the carrier has been detected
</li><li>The <i>local</i> DCE raises CTS to indicate that the link is ready for transmission.
</li></ol>
<p>Note that, depending on whether the modem is half-duplex or full-duplex, the RTS/CTS/DCD signalling may not be able to be performed in both directions simultaneously. For example, if the modems were connected to a radio transmitter/receiver pair that were operating on the same frequency, the fact that DCD was raised meant that the frequency was already in use, and raising RTS would have no effect.
</p>
<h5><span class="mw-headline" id="Original_Null_Modem">Original Null Modem</span></h5>
<p>To remove the modem from between two computers, a full "null modem" cable was required to be wired, to emulate what an instant-response modem would look like: for example, raising RTS would <i>instantly</i> raise CTS in response, while simultaneously telling the other computer that data was about to come.
</p>
<pre> GND -------------- GND
 
 DTR ------\/------ DTR
 DSR ------/\------ DSR
 
 TX  ------\/------  TX
 RX  ------/\------  RX
 
           /------- DCD
          /
 RTS ----/     /--- RTS
 CTS ---/     /---- CTS
             /
 DCD -------/
</pre>
<p>This is most definitely a full-duplex cable - but is NOT suitable for today's "null modem" cable, detailed below.
</p>
<h4><span class="mw-headline" id="Local_link">Local link</span></h4>
<p>Where the two computers that need to communicate are so close that no modem is required, a direct cable can be used instead. Here, there is no "prepare channel for transmission" requirement: the link is assumed available all the time. So, at minimum, the two grounds need to be connected, and each Transmit Data pin is connected to the other's Receive Data pin.
</p><p>However, the remote computer is a limiting factor: <i>it</i> may not be ready to receive. Thus the above signal definitions are modified so that the local computer raises RTS to indicate that it is ready to <i><b>receive</b></i> rather than send, and that the cable connects RTS to the remote computer's CTS - which still means "Clear To Send".
</p>
<h5><span id="Today.27s_Null_Modem"></span><span class="mw-headline" id="Today's_Null_Modem">Today's Null Modem</span></h5>
<p>This, then, is the current definition of a "null modem" cable. It swaps the relevant pins, and one computer can tell the other to pause transmitting while it catches up:
</p>
<pre> GND -------------- GND
 
 TX  ------\/------  TX
 RX  ------/\------  RX
 
 RTS ------\/------ RTS
 CTS ------/\------ CTS
</pre>
<h2><span class="mw-headline" id="Protocol">Protocol</span></h2>
<p>Serial Communications breaks the data to be transmitted into smaller pieces, which are sent sequentially over the data line(s). For standard Asynchronous Serial Communications, the pieces are each individual bit of the data. Each bit is converted to a voltage level and held on the line for a fixed time period, before the next bit is transmitted. All the bits are sent sequentially (least significant bit first).
</p>
<h3><span class="mw-headline" id="Terms">Terms</span></h3>
<p>Standard Asynchronous Serial Communications has four main parameters that need to be configured. These completely define how a single character is sent - future characters are then sent in the identical manner:
</p>
<ul><li>Baud Rate</li>
<li>Data Length</li>
<li>Parity</li>
<li>Stop Bits</li></ul>
<h4><span class="mw-headline" id="Baud_Rate">Baud Rate</span></h4>
<p>Before any data can be sent, a pre-arranged rate of transitions needs to be defined. To transmit four 0 consecutive bits, there would be no transition between bits, so it is unclear on the receiving side whether that's a fast 16 bits of zero, or a slow single bit of 0. The "baud rate" or "bit rate" is how long a bit is transmitted for before the next bit is started. Thus both sides know the period of time for one bit.
</p>
<h4><span class="mw-headline" id="Start_Bit">Start Bit</span></h4>
<p>This is the bit that is transmitted before the first data bit is sent, to take the Transmit Data line off Idle and warn the receiver that data is about to arrive. This is <i>not</i> a configurable parameter - only one Start Bit is ever sent.
</p>
<h4><span class="mw-headline" id="Data_Length">Data Length</span></h4>
<p>Both sides need to know how many bits are in each character - the data length. If the link is being used to send binary data, then each "character" would be an eight-bit byte. If it's just (English) text data, then seven-bit ASCII would be sufficient. Old-fashioned teletypes didn't use ASCII, they used an older encoding known as "Baudot" - a five-bit-per-character protocol.
</p>
<h4><span class="mw-headline" id="Parity">Parity</span></h4>
<p>To help detect transmission errors, after transmitting the agreed number of data characters, the transmitter <i>may</i> send an extra bit called a parity bit. If it does, it would be agreed whether this bit indicated an Even Parity or an Odd parity. The transmitter's parity bit would be a '0' or a '1' to make Even or Odd the number of '1' bits already sent in the data. The receiver would look at the received parity bit, and if it <i>didn't</i> match the expected value, it would know that there was a corruption in transit.
</p><p>This technique is not perfect: a lot of interference with multiple corruptions per character could coincidentally give the same parity result.
</p>
<h4><span class="mw-headline" id="Stop_Bits">Stop Bits</span></h4>
<p>After the Data and any Parity bits, the transmitter needs to let the line state go back to Idle for a defined time before starting the next character. This time period allows the receiver to re-synchronise its clock to the transmitter's clock every character. In older equipment, it also gave time to for the receiver to actually print the received character! This is why some equipment required two Stop Bits between characters: to give the print head time to print the character. As equipment improved, two bits wasn't needed any more - but one bit was still too quick. So "modern" equipment allowed one-and-a-half Stop Bits to be specified, improving the number of characters per second that the equipment could print. (Remember: in serial communications, a bit is a unit of time. Otherwise "half a bit" would be a nonsense term...)
</p>
<h3><span class="mw-headline" id="Data_Signalling">Data Signalling</span></h3>
<p>The standard Asynchronous Serial Protocol has to cover a multitude of considerations:
</p>
<ul><li>Not be continually transmitting data;</li>
<li>Signal that data is about to be sent;</li>
<li>Signal the end of data;</li>
<li>Account for the fact that the clocks in different devices are not synchronised;</li>
<li>Aid in electrical noise reduction or detection.</li></ul>
<p>With the above in mind, actually transmitting the 1s and 0s of the data is done by setting the line HIGH or LOW in whatever electrical standard is being used (RS-232 has HIGH as negative voltages, and LOW as positive voltages).
</p><p>Thus the default Idle state of the line is HIGH. This indicates that something is connected, but no data is being sent.
</p>
<h3><span class="mw-headline" id="Example">Example</span></h3>
<p>For the following example, assume the link has been configured for the following:
</p>
<ul><li>9,600 bits per second baud rate;</li>
<li>Eight data bits per character;</li>
<li>Even parity;</li>
<li>Two stop bits</li></ul>
<p>And that the Transmitter wants to send an ASCII capital 'S'. In ASCII binary, that's 0b01010011. Because there's an even number of '1' bits in this character, an Even Parity bit would be '0'.
</p>
<h4><span class="mw-headline" id="Transmission">Transmission</span></h4>
<ol><li>The TD signal is already at Idle HIGH ('1').</li>
<li>The 'S' is loaded into the Transmit register.</li>
<li>The COM port needs to send a single Start bit to alert the Receiver that data is coming.</li>
<li>A Start ('0') bit is sent for one bit time.</li>
<li>By convention, the Least Significant bit ('1') is sent first, for one bit time.</li>
<li>For seven more bit times, the successive bits are sent: '1', '0', '0', '1', '0', '1', '0'.</li>
<li>Now the transmitter <i>may</i> send a parity bit. Since 'Even parity' is defined, the '0' is sent for one bit time.</li>
<li>Finally, the transmitter needs to put the line back to Idle HIGH ('1') for two stop bit times.</li></ol>
<h4><span class="mw-headline" id="Reception">Reception</span></h4>
<ol><li>The receiver is receiving an Idle HIGH.</li>
<li>Suddenly, it notes that the line goes LOW. It immediately starts a <i><b>half</b></i> bit time delay.</li>
<li>At the end of that, it re-samples the line:
<ol><li>If it was no longer LOW, it was a noise spike, so the receiver goes back to Idle.</li>
<li>Because it is still LOW, the receiver now waits a <i><b>full</b></i> bit time.</li></ol></li>
<li>It samples the least significant bit as a '1', on the (hopefully) middle of the first data bit's time.</li>
<li>It then waits seven further full bit times, sampling the data line each time for the remaining data bits.</li>
<li>It then waits another bit time to sample the parity bit as '0'.</li>
<li>It then waits a final bit time to sample the stop bit as a '1'.</li>
<li>Because the stop bit is correct, and the parity matches the expected value, a "valid" character has been received.</li>
<li>The receiver immediately starts waiting for another start bit.</li></ol>
<p>Remember, at this point the receiver is still only halfway through receiving the first stop bit. But this mechanism allows minor differences between the transmitter's and receiver's clocks to be accommodated, since the receiver resynchronises its clock on the next Start bit.
</p><p>More sophisticated COM chips may oversample each bit multiple times, choosing the most common state as the bit's state.
</p>
<h3><span class="mw-headline" id="The_BREAK_Signal">The BREAK Signal</span></h3>
<p>If the transmitter obeys the above protocol, and the receiver has the same settings, then the only communications possible between the transmitter and receiver is data. If the transmitter wants to indicate anything extra to the receiver, outside of the data - for example a Terminal Reset or other signal - it would have to break protocol.
</p><p>The transmitter could break protocol by sending a bad Parity character - if Parity was being sent. But the only sure flag that the receiver is looking for is the Stop Bit. If the transmitter wants to indicate something extra, it can send a BREAK signal. This is marked as a '0' stop bit - the receiver would detect this as a Frame Error in the received character. If the received character was also all '0's, then this would indicate that a BREAK signal had been sent, and the receiver could do the indicated action: clear the screen; go back to communication defaults; whatever.
</p>
<!-- 
NewPP limit report
Cached time: 20250212024137
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.016 seconds
Real time usage: 0.019 seconds
Preprocessor visited node count: 86/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 0/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:2844-0!canonical and timestamp 20250212024137 and revision id 29101.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Serial_Port&amp;oldid=29101">https://wiki.osdev.org/index.php?title=Serial_Port&amp;oldid=29101</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="./Category:Hardware_Interfaces" title="Category:Hardware Interfaces">Hardware Interfaces</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Serial+Port" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Serial_Port#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Serial_Port" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:Serial_Port" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Serial_Port"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Serial_Port&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Serial_Port&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Serial_Port" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Serial_Port" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Serial_Port&amp;oldid=29101" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Serial_Port&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 7 June 2024, at 13:39.</li>
	<li id="footer-info-0">This page has been accessed 4,374 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Serial_Port&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.016","walltime":"0.019","ppvisitednodes":{"value":86,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":0,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250212024137","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":125});});</script>
</body>
</html>