<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>TCC - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"c46bbcfa17099f5bfbfcfb93","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"TCC","wgTitle":"TCC","wgCurRevisionId":28133,"wgRevisionId":28133,"wgArticleId":2690,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","In Progress","C","Compilers"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"TCC","wgRelevantArticleId":2690,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search"
:false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-TCC rootpage-TCC skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">TCC</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="TCC#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="TCC#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p><a href="./File:Under_Construction.png" class="image" title="This page is under construction!"><img alt="This page is under construction!" src="images/1/14/Under_Construction.png" decoding="async" width="50" height="50" data-file-width="50" data-file-height="50" /></a>
This page or section is a work in progress and may thus be incomplete. Its content may be changed in the near future.
</p>
</td>
<td>
</td></tr></tbody></table>
</center>
<p>This article describes how to make a sample ELF kernel with <a href="FASM" title="FASM">FASM</a> and <a class="mw-selflink selflink">Tiny C Compiler</a> (aka TCC).
It is also possible to use <a href="NASM" title="NASM">NASM</a> (<a href="Bare_Bones_with_NASM" title="Bare Bones with NASM">Bare_Bones_with_NASM</a>).
TCC is a small and fast C compiler, which produces x86, x86_64 or ARM code, and generates PE or ELF executables. 
TCC is heading toward full ISOC99 compliance, and can compile itself, like FASM.
</p><p>TCC includes also a linker and an assembler (only x86). But this assembler is limited: no
16/64-bit support, instructions up to MMX are supported.
</p><p>Note: The Windows version of TCC doesn't produce ELF executables, but only object files. You
need to recompile TCC without PE support, if you want to use this tutorial on Windows. You can
skip this step if you aren't using Windows.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="TCC#Building_TCC_with_ELF_support"><span class="tocnumber">1</span> <span class="toctext">Building TCC with ELF support</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="TCC#Windows"><span class="tocnumber">1.1</span> <span class="toctext">Windows</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="TCC#Linux"><span class="tocnumber">1.2</span> <span class="toctext">Linux</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="TCC#A_small_kernel_example"><span class="tocnumber">2</span> <span class="toctext">A small kernel example</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="TCC#start32.asm"><span class="tocnumber">2.1</span> <span class="toctext">start32.asm</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="TCC#kernel.c"><span class="tocnumber">2.2</span> <span class="toctext">kernel.c</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-7"><a href="TCC#Compiling_and_linking"><span class="tocnumber">3</span> <span class="toctext">Compiling and linking</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="TCC#Inline_Assembly"><span class="tocnumber">4</span> <span class="toctext">Inline Assembly</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="TCC#GDT_and_struct_warning"><span class="tocnumber">5</span> <span class="toctext">GDT and struct warning</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="TCC#Inline_Function_Warning"><span class="tocnumber">6</span> <span class="toctext">Inline Function Warning</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="TCC#stdint.h"><span class="tocnumber">7</span> <span class="toctext">stdint.h</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Building_TCC_with_ELF_support">Building TCC with ELF support</span></h2>
<h3><span class="mw-headline" id="Windows">Windows</span></h3>
<p>1. Download <a rel="nofollow" class="external text" href="http://download.savannah.gnu.org/releases/tinycc/tcc-0.9.26.tar.bz2">TCC sources</a> and <a rel="nofollow" class="external text" href="http://download.savannah.gnu.org/releases/tinycc/tcc-0.9.26-win32-bin.zip">32-bit TCC</a> and (if you have a 64-bit OS) <a rel="nofollow" class="external text" href="http://download.savannah.gnu.org/releases/tinycc/tcc-0.9.26-win64-bin.zip">64-bit TCC</a>.
</p><p>2. Extract the source folder tcc-0.9.26.
</p><p>3. Save the 32-bit tcc files to a folder called "win32" in the location containing tcc-0.9.26. If you have a 64-bit OS, also create a win64 folder, and save the 64-bit files to a folder called "win64" in the same location.
</p><p>4. Open Notepad or another text editor, and enter this:
</p>
<div class="mw-highlight mw-highlight-lang-winbatch mw-content-ltr" dir="ltr"><pre><span></span><span class="p">@</span><span class="k">echo</span> off

<span class="k">set</span> <span class="nv">\p VERSION </span><span class="p">=</span> <span class="p">&lt;</span> .VERSION
<span class="k">echo</span> <span class="p">&gt;</span> config.h #define TCC_VERSION <span class="s2">&quot;</span><span class="nv">%VERSION%</span><span class="s2">&quot;</span>

<span class="k">set</span> <span class="nv">targetP</span><span class="p">=</span>I386
<span class="k">set</span> <span class="nv">B</span><span class="p">=</span>32
<span class="k">goto</span> <span class="nl">begin</span>

<span class="p">:</span><span class="nl">x86_64</span>
<span class="k">set</span> <span class="nv">targetP</span><span class="p">=</span>X86_64
<span class="k">set</span> <span class="nv">B</span><span class="p">=</span>64
<span class="k">goto</span> <span class="nl">begin</span>

<span class="p">:</span><span class="nl">begin</span>
<span class="k">set</span> <span class="nv">targetF</span><span class="p">=</span>PE
<span class="k">set</span> <span class="nv">CC</span><span class="p">=</span>..\win<span class="nv">%B%</span>\tcc.exe -O0 -s -fno-strict-aliasing
<span class="k">set</span> <span class="nv">P</span><span class="p">=</span><span class="nv">%B%</span>

<span class="p">:</span><span class="nl">start</span>
<span class="k">if</span> <span class="nv">%targetF%</span><span class="o">==</span>ELF <span class="k">set</span> <span class="nv">P</span><span class="p">=</span><span class="nv">%B%</span>-elf
<span class="k">set</span> <span class="nv">target</span><span class="p">=</span>-DTCC_TARGET_<span class="nv">%targetF%</span> -DTCC_TARGET_<span class="nv">%targetP%</span>

<span class="p">:</span><span class="nl">tools</span>
<span class="nv">%CC%</span> <span class="nv">%target%</span> win<span class="nv">%P%</span>\tools\tiny_impdef.c -o win<span class="nv">%P%</span>\tiny_impdef.exe
<span class="nv">%CC%</span> <span class="nv">%target%</span> win<span class="nv">%P%</span>\tools\tiny_libmaker.c -o win<span class="nv">%P%</span>\tiny_libmaker.exe

<span class="p">:</span><span class="nl">libtcc</span>
<span class="k">if</span> <span class="k">not</span> <span class="k">exist</span> win<span class="nv">%P%</span>\libtcc\nul <span class="k">mkdir</span> win<span class="nv">%P%</span>\libtcc
<span class="k">copy</span> libtcc.h win<span class="nv">%P%</span>\libtcc\libtcc.h
<span class="nv">%CC%</span> <span class="nv">%target%</span> -shared -DLIBTCC_AS_DLL -DONE_SOURCE libtcc.c -o win<span class="nv">%P%</span>\libtcc.dll
win<span class="nv">%P%</span>\tiny_impdef win<span class="nv">%P%</span>\libtcc.dll -o win<span class="nv">%P%</span>\libtcc\libtcc.def

<span class="p">:</span><span class="nl">tcc</span>
<span class="nv">%CC%</span> <span class="nv">%target%</span> tcc.c -o win<span class="nv">%P%</span>\tcc.exe -ltcc -Lwin<span class="nv">%P%</span>\libtcc

<span class="p">:</span><span class="nl">copy_std_includes</span>
<span class="k">copy</span> include\*.h win<span class="nv">%P%</span>\include

<span class="p">:</span><span class="nl">libtcc1.a</span>
win<span class="nv">%B%</span>\tcc <span class="nv">%target%</span> -c lib\libtcc1.c -o win<span class="nv">%P%</span>\libtcc1.o
win<span class="nv">%B%</span>\tcc <span class="nv">%target%</span> -c win<span class="nv">%P%</span>\lib\crt1.c -o win<span class="nv">%P%</span>\crt1.o
win<span class="nv">%B%</span>\tcc <span class="nv">%target%</span> -c win<span class="nv">%P%</span>\lib\wincrt1.c -o win<span class="nv">%P%</span>\wincrt1.o
win<span class="nv">%B%</span>\tcc <span class="nv">%target%</span> -c win<span class="nv">%P%</span>\lib\dllcrt1.c -o win<span class="nv">%P%</span>\dllcrt1.o
win<span class="nv">%B%</span>\tcc <span class="nv">%target%</span> -c win<span class="nv">%P%</span>\lib\dllmain.c -o win<span class="nv">%P%</span>\dllmain.o
win<span class="nv">%B%</span>\tcc <span class="nv">%target%</span> -c win<span class="nv">%P%</span>\lib\chkstk.S -o win<span class="nv">%P%</span>\chkstk.o
<span class="k">goto</span> <span class="nl">lib%B%</span>

<span class="p">:</span><span class="nl">lib32</span>
win<span class="nv">%B%</span>\tcc <span class="nv">%target%</span> -c lib\alloca86.S -o win<span class="nv">%P%</span>\alloca86.o
win<span class="nv">%B%</span>\tcc <span class="nv">%target%</span> -c lib\alloca86-bt.S -o win<span class="nv">%P%</span>\alloca86-bt.o
win<span class="nv">%B%</span>\tcc <span class="nv">%target%</span> -c lib\bcheck.c -o win<span class="nv">%P%</span>\bcheck.o
win<span class="nv">%P%</span>\tiny_libmaker win<span class="nv">%P%</span>\lib\libtcc1.a win<span class="nv">%P%</span>\libtcc1.o win<span class="nv">%P%</span>\alloca86.o win<span class="nv">%P%</span>\alloca86-bt.o win<span class="nv">%P%</span>\crt1.o win<span class="nv">%P%</span>\wincrt1.o win<span class="nv">%P%</span>\dllcrt1.o win<span class="nv">%P%</span>\dllmain.o win<span class="nv">%P%</span>\chkstk.o win<span class="nv">%P%</span>\bcheck.o
<span class="p">@</span><span class="k">goto</span> <span class="nl">the_end</span>

<span class="p">:</span><span class="nl">lib64</span>
win<span class="nv">%P%</span>\tcc <span class="nv">%target%</span> -c lib\alloca86_64.S -o win<span class="nv">%P%</span>\alloca86_64.o
win<span class="nv">%P%</span>\tiny_libmaker win<span class="nv">%P%</span>\lib\libtcc1.a win<span class="nv">%P%</span>\libtcc1.o win<span class="nv">%P%</span>\alloca86_64.o win<span class="nv">%P%</span>\crt1.o win<span class="nv">%P%</span>\wincrt1.o win<span class="nv">%P%</span>\dllcrt1.o win<span class="nv">%P%</span>\dllmain.o win<span class="nv">%P%</span>\chkstk.o

<span class="p">:</span><span class="nl">the_end</span>
<span class="k">del</span> win<span class="nv">%P%</span>\*.o

<span class="p">@</span><span class="k">if</span> <span class="nv">%targetF%</span><span class="o">==</span>PE <span class="p">(</span>
	<span class="p">@</span><span class="k">set</span> <span class="nv">targetF</span><span class="p">=</span>ELF
	<span class="p">@</span><span class="k">goto</span> <span class="nl">start</span>
<span class="p">)</span>

<span class="p">@</span><span class="k">if</span> <span class="nv">%B%</span><span class="o">==</span>64 <span class="k">goto</span> <span class="nl">finished</span>
<span class="p">@</span><span class="k">if</span> _<span class="nv">%PROCESSOR_ARCHITEW6432%</span>_<span class="o">==</span>_AMD64_ <span class="k">goto</span> <span class="nl">x86_64</span>
<span class="p">@</span><span class="k">if</span> _<span class="nv">%PROCESSOR_ARCHITECTURE%</span>_<span class="o">==</span>_AMD64_ <span class="k">goto</span> <span class="nl">x86_64</span>

<span class="p">:</span><span class="nl">finished</span>
</pre></div>
<p>5. Save to tcc-0.9.26 with any name you want, but the extension MUST be .bat. If you use notepad, you will have to change the type from "Text Documents" to "All Files".
</p><p>6. Run the script, make sure everything compiled correctly (note that there may be warnings about assignments from incompatible pointer types and bound checking not supporting malloc in a certain environment, but these are okay), and inside win32-elf you should have a working ELF compiler. You should also have win32 and win64 for 32-bit and 64-bit PE compilers, and a 64-bit ELF compiler in win64-elf. Note: The 64-bit compilers won't be compiled on a non-64 bit OS.
If there are errors compiling TCC, just change the "@echo off" to "@echo on" and run the script again to see where things went wrong.
</p>
<h3><span class="mw-headline" id="Linux">Linux</span></h3>
<p>Your distribution may already provide a package for tcc. If not, download the sources from <a rel="nofollow" class="external free" href="https://download.savannah.gnu.org/releases/tinycc/">https://download.savannah.gnu.org/releases/tinycc/</a> and go on from there. You know how to build a program from scratch, right?
</p>
<h2><span class="mw-headline" id="A_small_kernel_example">A small kernel example</span></h2>
<p>This little example builds a small kernel in ELF format, which can be booted by Grub.
</p>
<h3><span class="mw-headline" id="start32.asm">start32.asm</span></h3>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">;  Tutorial: A small kernel with Fasm &amp; TCC</span>
<span class="c1">;  By Tommy.</span>
<span class="w"> </span>
<span class="w">        </span><span class="nf">format</span><span class="w"> </span><span class="no">elf</span><span class="w"></span>
<span class="w">        </span><span class="nf">use32</span><span class="w"></span>

<span class="c1">;</span>
<span class="c1">; Equates</span>
<span class="c1">;</span>
<span class="nf">MULTIBOOT_PAGE_ALIGN</span><span class="w">	    </span><span class="no">equ</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="no">shl</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"></span>
<span class="nf">MULTIBOOT_MEMORY_INFO</span><span class="w">	    </span><span class="no">equ</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="no">shl</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"></span>
<span class="nf">MULTIBOOT_AOUT_KLUDGE</span><span class="w">	    </span><span class="no">equ</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="no">shl</span><span class="w"> </span><span class="mi">16</span><span class="p">)</span><span class="w"></span>
<span class="nf">MULTIBOOT_HEADER_MAGIC</span><span class="w">	    </span><span class="no">equ</span><span class="w"> </span><span class="mi">0x1BADB002</span><span class="w"></span>
<span class="nf">MULTIBOOT_HEADER_FLAGS</span><span class="w">	    </span><span class="no">equ</span><span class="w"> </span><span class="no">MULTIBOOT_PAGE_ALIGN</span><span class="w"> </span><span class="no">or</span><span class="w"> </span><span class="no">MULTIBOOT_MEMORY_INFO</span><span class="w"></span>
<span class="nf">MULTIBOOT_CHECKSUM</span><span class="w">          </span><span class="no">equ</span><span class="w"> </span><span class="p">-(</span><span class="no">MULTIBOOT_HEADER_MAGIC</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="no">MULTIBOOT_HEADER_FLAGS</span><span class="p">)</span><span class="w"></span>

<span class="w">        </span><span class="nf">section</span><span class="w"> </span><span class="err">&#39;</span><span class="no">.text</span><span class="err">&#39;</span><span class="w"> </span><span class="no">executable</span><span class="w"></span>
<span class="c1">;</span>
<span class="c1">; Multiboot header</span>
<span class="c1">;</span>
<span class="nf">dd</span><span class="w"> </span><span class="no">MULTIBOOT_HEADER_MAGIC</span><span class="w"></span>
<span class="nf">dd</span><span class="w"> </span><span class="no">MULTIBOOT_HEADER_FLAGS</span><span class="w"></span>
<span class="nf">dd</span><span class="w"> </span><span class="no">MULTIBOOT_CHECKSUM</span><span class="w"></span>


<span class="c1">;</span>
<span class="c1">; Kernel entry point.</span>
<span class="c1">;</span>
<span class="w">        </span><span class="nf">public</span><span class="w">  </span><span class="no">_start</span><span class="w"></span>
<span class="w">        </span><span class="nf">extrn</span><span class="w">   </span><span class="no">kmain</span><span class="w"></span>
<span class="nl">_start:</span><span class="w"></span>
<span class="w">        </span><span class="c1">; Call the main kernel function.</span>
<span class="w">        </span><span class="nf">call</span><span class="w">    </span><span class="no">kmain</span><span class="w"></span>
<span class="w"> </span>
<span class="err">@@:</span><span class="w"></span>
<span class="w">        </span><span class="nf">jmp</span><span class="w">     </span><span class="err">@</span><span class="no">b</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="kernel.c">kernel.c</span></h3>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cm">/*  Tutorial: A small kernel with Fasm &amp; TCC</span>
<span class="cm"> *  By Tommy.</span>
<span class="cm"> */</span><span class="w"></span>

<span class="cm">/*</span>
<span class="cm"> * Main kernel function.</span>
<span class="cm"> */</span><span class="w"></span>
<span class="kt">void</span><span class="w"></span>
<span class="nf">kmain</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="mh">0xB8000</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sc">&#39;H&#39;</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="mh">0xB8001</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x1F</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="mh">0xB8002</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sc">&#39;E&#39;</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="mh">0xB8003</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x1F</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="mh">0xB8004</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sc">&#39;L&#39;</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="mh">0xB8005</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x1F</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="mh">0xB8006</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sc">&#39;L&#39;</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="mh">0xB8007</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x1F</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="mh">0xB8008</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sc">&#39;O&#39;</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">((</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="mh">0xB8009</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x1F</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="Compiling_and_linking">Compiling and linking</span></h2>
<p>Assemble start32.asm with:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>fasm start32.asm
</pre></div>
<p>Compile kernel.c with:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>tcc -c kernel.c
</pre></div>
<p>Then link the whole thing with:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>tcc -nostdlib -Wl,-Ttext,0x100000 start32.o kernel.o -o kernel-i386.elf
</pre></div>
<p>If you would prefer it in binary form, for example, if you're using your own bootloader that doesn't support ELF, link it with this:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>tcc -nostdlib -Wl,-Ttext,0x100000 -Wl,--oformat,binary -static start32.o kernel.o -o kernel-i386.bin
</pre></div>
<p>That's all!
</p>
<h2><span class="mw-headline" id="Inline_Assembly">Inline Assembly</span></h2>
<p>TCC supports inline GAS syntax assembly like GCC:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="n">__asm__</span><span class="w"> </span><span class="nf">__volatile__</span><span class="p">(</span><span class="s">&quot;hlt&quot;</span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>You can use this to your benefit for many things, such as debugging in Bochs:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define breakpoint() __asm__ __volatile__(&quot;xchg %bx, %bx&quot;);</span>

<span class="kt">void</span><span class="w"> </span><span class="nf">bochs_print</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">string</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">c</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">string</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="n">c</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="sc">&#39;\0&#39;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">outb</span><span class="p">(</span><span class="mh">0xE9</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="n">c</span><span class="p">);</span><span class="w"> </span><span class="c1">// may be outportb</span>
<span class="w">		</span><span class="n">c</span><span class="o">++</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>Then adding this to your bochsrc.bxrc file in a text editor:
</p>
<div class="mw-highlight mw-highlight-lang-text mw-content-ltr" dir="ltr"><pre><span></span>port_e9_hack: enabled=1
magic_break: enabled=1
</pre></div>
<p>And from boch's install location, executing bochsdbg.exe instead of bochs.exe.
</p>
<h2><span class="mw-headline" id="GDT_and_struct_warning">GDT and struct warning</span></h2>
<p>According to Fabrice Bellard, the creator of TCC, and (painfully) tested to be true: "In TCC 'packed' is supported only for structure fields or variable declarations, not for a whole structure. So a solution for you is to add it to each field of the packed structure."
So if you use structs to store your GDT entries or GDTR, beware, you will encounter issues loading your GDT if you don't specify the packing of structures correctly.
When creating structures, use something like this:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">// We use the attribute &#39;packed&#39; to tell TCC not to change any of the alignment in the structure.</span>
<span class="k">struct</span><span class="w"> </span><span class="nc">some_struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">   </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="nf">__attribute__</span><span class="p">((</span><span class="n">packed</span><span class="p">));</span><span class="w"></span>
<span class="w">   </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="nf">__attribute__</span><span class="p">((</span><span class="n">packed</span><span class="p">));</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">__attribute__</span><span class="p">((</span><span class="n">packed</span><span class="p">));</span><span class="w"></span>
<span class="c1">// This last attribute can be kept, it won&#39;t interfere with the compilation or output, so it may be</span>
<span class="c1">// useful to retain compatilbity with GCC, as long as the above attributes don&#39;t interfere with GCC.</span>
</pre></div>
<p>Instead of this:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">// We use the attribute &#39;packed&#39; to tell GCC not to change any of the alignment in the structure.</span>
<span class="k">struct</span><span class="w"> </span><span class="nc">some_struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">   </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">a</span><span class="p">;</span><span class="w"></span>
<span class="w">   </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">b</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"> </span><span class="n">__attribute__</span><span class="p">((</span><span class="n">packed</span><span class="p">));</span><span class="w"></span>
</pre></div>
<p><br />
</p>
<h2><span class="mw-headline" id="Inline_Function_Warning">Inline Function Warning</span></h2>
<p>TCC doesn't support function inlining, because the 'inline' keyword is ignored, so if a function needs to be inlined, you must use defines instead.
</p>
<h2><span class="mw-headline" id="stdint.h">stdint.h</span></h2>
<p>TCC doesn't include stdint.h, but all typedefs required are provided in stddef.h.
To use stdint.h place the following code in your kernels include path as stdint.h. This will make your code compatible with both gcc and tcc.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cm">/* stdint.h */</span><span class="w"></span>

<span class="cp">#ifdef __TINYC__</span>
<span class="cm">/* tcc */</span><span class="w"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stddef.h&gt;</span><span class="cp"></span>
<span class="cp">#else</span>
<span class="cm">/* assume gcc */</span><span class="w"></span>
<span class="cp">#include_next &lt;stdint.h&gt;</span>
<span class="cp">#endif</span>
</pre></div>
<!-- 
NewPP limit report
Cached time: 20250211122056
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.076 seconds
Real time usage: 1.810 seconds
Preprocessor visited node count: 103/1000000
Post‐expand include size: 358/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 22558/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.564      1 Template:In_Progress
100.00%    0.564      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:2690-0!canonical and timestamp 20250211122054 and revision id 28133.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=TCC&amp;oldid=28133">https://wiki.osdev.org/index.php?title=TCC&amp;oldid=28133</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:In_Progress" title="Category:In Progress">In Progress</a></li><li><a href="./Category:C" title="Category:C">C</a></li><li><a href="./Category:Compilers" title="Category:Compilers">Compilers</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=TCC" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="TCC#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="TCC" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:TCC" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="TCC"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=TCC&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=TCC&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/TCC" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/TCC" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=TCC&amp;oldid=28133" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=TCC&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 10 July 2023, at 02:48.</li>
	<li id="footer-info-0">This page has been accessed 6,372 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=TCC&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.076","walltime":"1.810","ppvisitednodes":{"value":103,"limit":1000000},"postexpandincludesize":{"value":358,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":22558,"limit":5000000},"timingprofile":["100.00%    0.564      1 Template:In_Progress","100.00%    0.564      1 -total"]},"cachereport":{"timestamp":"20250211122056","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":1912});});</script>
</body>
</html>