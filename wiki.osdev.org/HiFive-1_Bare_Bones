<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>HiFive-1 Bare Bones - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"b971ae9038358aad3910b5a7","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"HiFive-1_Bare_Bones","wgTitle":"HiFive-1 Bare Bones","wgCurRevisionId":23490,"wgRevisionId":23490,"wgArticleId":4291,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using duplicate arguments in template calls","Pages using deprecated source tags","Articles Written in First Person","Level 2 Tutorials","RISC-V","Bare bones tutorials"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"HiFive-1_Bare_Bones","wgRelevantArticleId":4291,
"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook",
"ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-HiFive-1_Bare_Bones rootpage-HiFive-1_Bare_Bones skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">HiFive-1 Bare Bones</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="HiFive-1_Bare_Bones#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="HiFive-1_Bare_Bones#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p><big><b>WAIT! Have you read <a href="Getting_Started" title="Getting Started">Getting Started</a>, <a href="Beginner_Mistakes" title="Beginner Mistakes">Beginner Mistakes</a>, and some of the related <a href="./Category:OS_theory" title="Category:OS theory">OS theory</a>?</b></big>
</p>
</td></tr></tbody></table>
</center>
<center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p>This page or section refers to its readers or editors using <i>I</i>, <i>my</i>, <i>we</i> or <i>us</i>. It should be <a rel="nofollow" class="external text" href="https://wiki.osdev.org/index.php?title=HiFive-1_Bare_Bones&amp;action=edit">edited</a> to be in an encyclopedic tone.
</p>
</td></tr></tbody></table>
</center>
<center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p>This tutorial needs to explain what the code does as tutorials are not just copy paste. You can help out by <a rel="nofollow" class="external text" href="https://wiki.osdev.org/index.php?title=HiFive-1_Bare_Bones&amp;action=edit">editing</a> this page to include more context to what the code does.
</p>
</td></tr></tbody></table>
</center><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear:right; border:1px solid #aaaaaa; background:#eee; text-align:center;;"><tbody><tr><th>Difficulty level</th></tr><tr><td><a href="./File:Difficulty_2.png" class="image"><img alt="Difficulty 2.png" src="images/a/a1/Difficulty_2.png" decoding="async" width="46" height="14" data-file-width="46" data-file-height="14" /></a><br />Medium</td></tr></tbody></table>
<p>If you are looking to get a <a href="RISC-V" title="RISC-V">RISC-V</a> board, the HiFive1 is a relatively easy (albeit slightly expensive at US$69) way to get a RISC-V board. This Bare Bones tutorial is an attempt at bringing up the HiFive-1 board and getting ready to start some OS development as you would on most other platforms.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="HiFive-1_Bare_Bones#Prerequisites"><span class="tocnumber">1</span> <span class="toctext">Prerequisites</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="HiFive-1_Bare_Bones#Acquiring_the_SDK"><span class="tocnumber">2</span> <span class="toctext">Acquiring the SDK</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="HiFive-1_Bare_Bones#The_Bare_Bones"><span class="tocnumber">3</span> <span class="toctext">The Bare Bones</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="HiFive-1_Bare_Bones#The_kernel_source_code"><span class="tocnumber">4</span> <span class="toctext">The kernel source code</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="HiFive-1_Bare_Bones#Testing_on_real_hardware"><span class="tocnumber">5</span> <span class="toctext">Testing on real hardware</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Prerequisites">Prerequisites</span></h2>
<p>You'll need a few pieces of software:
</p>
<ul><li><a rel="nofollow" class="external text" href="http://www.git-scm.com/">Git</a> for acquiring the SDK</li>
<li>build-essential, bison, flex for building the SDK</li>
<li>minicom (or screen) for checking on the serial of the HiFive-1 board</li></ul>
<h2><span class="mw-headline" id="Acquiring_the_SDK">Acquiring the SDK</span></h2>
<p>First, in order to compile for the HiFive-1 Board, you need to download and build the SDK:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>$ git clone --recursive https://github.com/sifive/freedom-e-sdk.git
$ <span class="nb">cd</span> freedom-e-sdk
$ make tools
</pre></div>
<p>The SDK builds a bunch of stuff we do not really need (including a <a href="C_Library" title="C Library">Newlib</a> port that lets the developer write basic C programs and run it bare-metal). Unfortunately, I did not yet invest the time to turn off those unneeded features, so for now we will need to wait for a full build which does take some time. Grab a tea or coffee.
</p>
<h2><span class="mw-headline" id="The_Bare_Bones">The Bare Bones</span></h2>
<p>This Bare Bones tutorial will setup the 16Mhz Crystal for UART timing, then initialize the UART and finally print a nice message to the serial port.
</p>
<h2><span class="mw-headline" id="The_kernel_source_code">The kernel source code</span></h2>
<p>First, create a file named main.c which will serve as both the entry point from the firmware and the starting point for the kernel you will be writing.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdint.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stddef.h&gt;</span><span class="cp"></span>

<span class="cm">/* GPIO */</span><span class="w"></span>
<span class="cp">#define GPIO_CTRL_ADDR 0x10012000UL</span>
<span class="cp">#define GPIO_IOF_EN    0x38</span>
<span class="cp">#define GPIO_IOF_SEL   0x3C</span>
<span class="cp">#define IOF0_UART0_MASK         0x00030000UL</span>

<span class="cm">/* UART */</span><span class="w"></span>
<span class="cp">#define UART0_CTRL_ADDR 0x10013000UL</span>
<span class="cp">#define UART_REG_TXFIFO         0x00</span>
<span class="cp">#define UART_REG_RXFIFO         0x04</span>
<span class="cp">#define UART_REG_TXCTRL         0x08</span>
<span class="cp">#define UART_REG_RXCTRL         0x0c</span>
<span class="cp">#define UART_REG_IE             0x10</span>
<span class="cp">#define UART_REG_IP             0x14</span>
<span class="cp">#define UART_REG_DIV            0x18</span>
<span class="cp">#define UART_TXEN               0x1</span>

<span class="cm">/* PRCI */</span><span class="w"></span>
<span class="cp">#define PRCI_CTRL_ADDR 0x10008000UL</span>
<span class="cp">#define PRCI_HFROSCCFG (0x0000)</span>
<span class="cp">#define PRCI_PLLCFG (0x0008)</span>
<span class="cp">#define ROSC_EN(x) (((x) &amp; 0x1) &lt;&lt; 30)</span>
<span class="cp">#define PLL_REFSEL(x) (((x) &amp; 0x1) &lt;&lt; 17)</span>
<span class="cp">#define PLL_BYPASS(x) (((x) &amp; 0x1) &lt;&lt; 18)</span>
<span class="cp">#define PLL_SEL(x) (((x) &amp; 0x1) &lt;&lt; 16)</span>


<span class="cm">/* This function will read a 32-bit value from an MMIO register */</span><span class="w"></span>
<span class="k">static</span><span class="w"> </span><span class="kr">inline</span><span class="w"> </span><span class="kt">uint32_t</span><span class="w"></span>
<span class="nf">mmio_read_u32</span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">reg</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">offset</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="k">volatile</span><span class="w"> </span><span class="kt">uint32_t</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="p">((</span><span class="n">reg</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">offset</span><span class="p">)));</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="cm">/* This function will write a byte to an MMIO register */</span><span class="w"></span>
<span class="k">static</span><span class="w"> </span><span class="kr">inline</span><span class="w"> </span><span class="kt">void</span><span class="w"></span>
<span class="nf">mmio_write_u8</span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">reg</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">offset</span><span class="p">,</span><span class="w"> </span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">val</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="k">volatile</span><span class="w"> </span><span class="kt">uint32_t</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="p">((</span><span class="n">reg</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">offset</span><span class="p">)))</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">val</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="cm">/*This function will write a 32-bit value to an MMIO register */</span><span class="w"></span>
<span class="k">static</span><span class="w"> </span><span class="kr">inline</span><span class="w"> </span><span class="kt">void</span><span class="w"></span>
<span class="nf">mmio_write_u32</span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">reg</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">offset</span><span class="p">,</span><span class="w"> </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">val</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="k">volatile</span><span class="w"> </span><span class="kt">uint32_t</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="p">((</span><span class="n">reg</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">offset</span><span class="p">)))</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">val</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="cm">/* Initialize the UART */</span><span class="w"></span>
<span class="k">static</span><span class="w"> </span><span class="kt">void</span><span class="w"></span>
<span class="nf">uart_init</span><span class="p">()</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* These two writes enable the UART via the GPIO */</span><span class="w"></span>
<span class="w">	</span><span class="n">mmio_write_u32</span><span class="p">(</span><span class="n">GPIO_CTRL_ADDR</span><span class="p">,</span><span class="w"></span>
<span class="w">		</span><span class="n">GPIO_IOF_SEL</span><span class="p">,</span><span class="w"></span>
<span class="w">		</span><span class="n">mmio_read_u32</span><span class="p">(</span><span class="n">GPIO_CTRL_ADDR</span><span class="p">,</span><span class="w"> </span><span class="n">GPIO_IOF_SEL</span><span class="p">)</span><span class="w"></span>
<span class="w">			</span><span class="o">&amp;</span><span class="w"> </span><span class="o">~</span><span class="n">IOF0_UART0_MASK</span><span class="p">);</span><span class="w"></span>

<span class="w">	</span><span class="n">mmio_write_u32</span><span class="p">(</span><span class="n">GPIO_CTRL_ADDR</span><span class="p">,</span><span class="w"></span>
<span class="w">		</span><span class="n">GPIO_IOF_EN</span><span class="p">,</span><span class="w"></span>
<span class="w">		</span><span class="n">mmio_read_u32</span><span class="p">(</span><span class="n">GPIO_CTRL_ADDR</span><span class="p">,</span><span class="w"> </span><span class="n">GPIO_IOF_EN</span><span class="p">)</span><span class="w"></span>
<span class="w">			</span><span class="o">|</span><span class="w"> </span><span class="n">IOF0_UART0_MASK</span><span class="p">);</span><span class="w"></span>

<span class="w">	</span><span class="cm">/*</span>
<span class="cm">	 * Assuming a 16Mhz Crystal (which is Y1 on the HiFive1), the divisor</span>
<span class="cm">	 * for a 115200 baud rate is 138</span>
<span class="cm">	 */</span><span class="w"></span>
<span class="w">	</span><span class="n">mmio_write_u32</span><span class="p">(</span><span class="n">UART0_CTRL_ADDR</span><span class="p">,</span><span class="w"> </span><span class="n">UART_REG_DIV</span><span class="p">,</span><span class="w"> </span><span class="mi">138</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="n">mmio_write_u32</span><span class="p">(</span><span class="n">UART0_CTRL_ADDR</span><span class="p">,</span><span class="w"></span>
<span class="w">		</span><span class="n">UART_REG_TXCTRL</span><span class="p">,</span><span class="w"></span>
<span class="w">		</span><span class="n">mmio_read_u32</span><span class="p">(</span><span class="n">UART0_CTRL_ADDR</span><span class="p">,</span><span class="w"> </span><span class="n">UART_REG_TXCTRL</span><span class="p">)</span><span class="w"></span>
<span class="w">			</span><span class="o">|</span><span class="w"> </span><span class="n">UART_TXEN</span><span class="p">);</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* busy loop until the line is asserted... */</span><span class="w"></span>
<span class="w">	</span><span class="k">volatile</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">++</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">1000000</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="cm">/* Transmit a single byte over the UART */</span><span class="w"></span>
<span class="k">static</span><span class="w"> </span><span class="kt">void</span><span class="w"></span>
<span class="nf">__uart_write</span><span class="p">(</span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">byte</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* wait for the UART to become ready */</span><span class="w"></span>
<span class="w">	</span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">mmio_read_u32</span><span class="p">(</span><span class="n">UART0_CTRL_ADDR</span><span class="p">,</span><span class="w"> </span><span class="n">UART_REG_TXFIFO</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x80000000</span><span class="p">)</span><span class="w"></span>
<span class="w">		</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* write to the UART transmit FIFO */</span><span class="w"></span>
<span class="w">	</span><span class="n">mmio_write_u8</span><span class="p">(</span><span class="n">UART0_CTRL_ADDR</span><span class="p">,</span><span class="w"> </span><span class="n">UART_REG_TXFIFO</span><span class="p">,</span><span class="w"> </span><span class="n">byte</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>


<span class="cm">/* Transmit a buffer of length &quot;len&quot; over the UART */</span><span class="w"></span>
<span class="k">static</span><span class="w"> </span><span class="kt">void</span><span class="w"></span>
<span class="nf">uart_write</span><span class="p">(</span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="kt">size_t</span><span class="w"> </span><span class="n">len</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">len</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">__uart_write</span><span class="p">(</span><span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span><span class="w"></span>
<span class="w">		</span><span class="cm">/* If an LF was written, also write a CR */</span><span class="w"></span>
<span class="w">		</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="sc">&#39;\n&#39;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">			</span><span class="n">__uart_write</span><span class="p">(</span><span class="sc">&#39;\r&#39;</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="cm">/* People, the simplest ever strlen function */</span><span class="w"></span>
<span class="k">static</span><span class="w"> </span><span class="kt">size_t</span><span class="w"></span>
<span class="nf">strlen</span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">str</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">++</span><span class="p">)</span><span class="w"></span>
<span class="w">        </span><span class="n">len</span><span class="w"> </span><span class="o">++</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">len</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="cm">/* Write a null-terminated string to the UART, transmitting it */</span><span class="w"></span>
<span class="k">static</span><span class="w"> </span><span class="kt">void</span><span class="w"></span>
<span class="nf">uart_write_string</span><span class="p">(</span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="n">buf</span><span class="p">)</span><span class="w"> </span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">uart_write</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="n">strlen</span><span class="p">((</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="n">buf</span><span class="p">));</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="cm">/* Initialize the clock source for the UART, in this case the 16MHz crystal */</span><span class="w"></span>
<span class="k">static</span><span class="w"> </span><span class="kt">void</span><span class="w"></span>
<span class="nf">prci_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* Make sure the HFROSC is on */</span><span class="w"></span>
<span class="w">	</span><span class="n">mmio_write_u32</span><span class="p">(</span><span class="n">PRCI_CTRL_ADDR</span><span class="p">,</span><span class="w"> </span><span class="n">PRCI_HFROSCCFG</span><span class="p">,</span><span class="w"></span>
<span class="w">			</span><span class="n">mmio_read_u32</span><span class="p">(</span><span class="n">PRCI_CTRL_ADDR</span><span class="p">,</span><span class="w"> </span><span class="n">PRCI_HFROSCCFG</span><span class="p">)</span><span class="w"></span>
<span class="w">			 </span><span class="o">|</span><span class="w"> </span><span class="n">ROSC_EN</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* Run off 16 MHz Crystal for accuracy */</span><span class="w"></span>
<span class="w">	</span><span class="n">mmio_write_u32</span><span class="p">(</span><span class="n">PRCI_CTRL_ADDR</span><span class="p">,</span><span class="w"> </span><span class="n">PRCI_PLLCFG</span><span class="p">,</span><span class="w"></span>
<span class="w">			</span><span class="n">mmio_read_u32</span><span class="p">(</span><span class="n">PRCI_CTRL_ADDR</span><span class="p">,</span><span class="w"> </span><span class="n">PRCI_PLLCFG</span><span class="p">)</span><span class="w"></span>
<span class="w">			 </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">PLL_REFSEL</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">PLL_BYPASS</span><span class="p">(</span><span class="mi">1</span><span class="p">)));</span><span class="w"></span>
<span class="w">	</span><span class="n">mmio_write_u32</span><span class="p">(</span><span class="n">PRCI_CTRL_ADDR</span><span class="p">,</span><span class="w"> </span><span class="n">PRCI_PLLCFG</span><span class="p">,</span><span class="w"></span>
<span class="w">			</span><span class="n">mmio_read_u32</span><span class="p">(</span><span class="n">PRCI_CTRL_ADDR</span><span class="p">,</span><span class="w"> </span><span class="n">PRCI_PLLCFG</span><span class="p">)</span><span class="w"></span>
<span class="w">			 </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">PLL_SEL</span><span class="p">(</span><span class="mi">1</span><span class="p">)));</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* Turn off HFROSC to save power */</span><span class="w"></span>
<span class="w">	</span><span class="n">mmio_write_u32</span><span class="p">(</span><span class="n">PRCI_CTRL_ADDR</span><span class="p">,</span><span class="w"> </span><span class="n">PRCI_HFROSCCFG</span><span class="p">,</span><span class="w"></span>
<span class="w">			</span><span class="n">mmio_read_u32</span><span class="p">(</span><span class="n">PRCI_CTRL_ADDR</span><span class="p">,</span><span class="w"> </span><span class="n">PRCI_HFROSCCFG</span><span class="p">)</span><span class="w"></span>
<span class="w">			 </span><span class="o">&amp;</span><span class="w"> </span><span class="o">~</span><span class="p">(</span><span class="n">ROSC_EN</span><span class="p">(</span><span class="mi">1</span><span class="p">)));</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="cm">/* The entry point */</span><span class="w"></span>
<span class="kt">void</span><span class="w"></span>
<span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">prci_init</span><span class="p">();</span><span class="w"></span>
<span class="w">	</span><span class="n">uart_init</span><span class="p">();</span><span class="w"></span>

<span class="w">	</span><span class="n">uart_write_string</span><span class="p">(</span><span class="s">&quot;Hello, world!</span><span class="se">\n</span><span class="s">This is myOS on the HiFive-1 Board!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span><span class="w"></span>

<span class="w">	</span><span class="cm">/* For now, just halt */</span><span class="w"></span>
<span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(;;);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="cm">/* The _actual_ entry point, this is then fixated to 0x20400000 via the linker script */</span><span class="w"></span>
<span class="w"> </span><span class="n">__attribute__</span><span class="p">((</span><span class="n">section</span><span class="p">(</span><span class="s">&quot;.init&quot;</span><span class="p">)))</span><span class="w"></span>
<span class="kt">void</span><span class="w"></span>
<span class="n">_start</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">main</span><span class="p">();</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>Next, we need to do some linker script magic to make sure that our code is positioned where it should be. It's worth noting that the firmware seems to perform an unconditional jump to 0x204000000 and expects the application to continue from there. Thus, in the above code we place the _start() function into a special section (aptly named, ".init") which we will move to the correct address via the linker script:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="n">OUTPUT_ARCH</span><span class="p">(</span><span class="s">&quot;riscv&quot;</span><span class="p">)</span><span class="w"></span>

<span class="n">ENTRY</span><span class="p">(</span><span class="n">_start</span><span class="p">)</span><span class="w"></span>

<span class="n">MEMORY</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">  </span><span class="n">flash</span><span class="w"> </span><span class="p">(</span><span class="n">rxai</span><span class="o">!</span><span class="n">w</span><span class="p">)</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="n">ORIGIN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x20400000</span><span class="p">,</span><span class="w"> </span><span class="n">LENGTH</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">512</span><span class="n">M</span><span class="w"></span>
<span class="w">  </span><span class="n">ram</span><span class="w"> </span><span class="p">(</span><span class="n">wxa</span><span class="o">!</span><span class="n">ri</span><span class="p">)</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="n">ORIGIN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x80000000</span><span class="p">,</span><span class="w"> </span><span class="n">LENGTH</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">16</span><span class="n">K</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="n">PHDRS</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">  </span><span class="n">flash</span><span class="w"> </span><span class="n">PT_LOAD</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="n">ram_init</span><span class="w"> </span><span class="n">PT_LOAD</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="n">ram</span><span class="w"> </span><span class="n">PT_NULL</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="n">SECTIONS</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">  </span><span class="n">__stack_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">DEFINED</span><span class="p">(</span><span class="n">__stack_size</span><span class="p">)</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">__stack_size</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">2</span><span class="n">K</span><span class="p">;</span><span class="w"></span>

<span class="w">  </span><span class="p">.</span><span class="n">init</span><span class="w">           </span><span class="o">:</span><span class="w"></span>
<span class="w">  </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">KEEP</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">SORT_NONE</span><span class="p">(.</span><span class="n">init</span><span class="p">)))</span><span class="w"></span>
<span class="w">  </span><span class="p">}</span><span class="w"> </span><span class="o">&gt;</span><span class="n">flash</span><span class="w"> </span><span class="n">AT</span><span class="o">&gt;</span><span class="n">flash</span><span class="w"> </span><span class="o">:</span><span class="n">flash</span><span class="w"></span>

<span class="w">  </span><span class="p">.</span><span class="n">text</span><span class="w">           </span><span class="o">:</span><span class="w"></span>
<span class="w">  </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">(.</span><span class="n">text</span><span class="w"> </span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">  </span><span class="p">}</span><span class="w"> </span><span class="o">&gt;</span><span class="n">flash</span><span class="w"> </span><span class="n">AT</span><span class="o">&gt;</span><span class="n">flash</span><span class="w"> </span><span class="o">:</span><span class="n">flash</span><span class="w"></span>

<span class="w">  </span><span class="p">.</span><span class="n">fini</span><span class="w">           </span><span class="o">:</span><span class="w"></span>
<span class="w">  </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">KEEP</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">SORT_NONE</span><span class="p">(.</span><span class="n">fini</span><span class="p">)))</span><span class="w"></span>
<span class="w">  </span><span class="p">}</span><span class="w"> </span><span class="o">&gt;</span><span class="n">flash</span><span class="w"> </span><span class="n">AT</span><span class="o">&gt;</span><span class="n">flash</span><span class="w"> </span><span class="o">:</span><span class="n">flash</span><span class="w"></span>

<span class="w">  </span><span class="p">.</span><span class="n">rodata</span><span class="w">         </span><span class="o">:</span><span class="w"></span>
<span class="w">  </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">(.</span><span class="n">rdata</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">(.</span><span class="n">rodata</span><span class="w"> </span><span class="p">.</span><span class="n">rodata</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">  </span><span class="p">}</span><span class="w"> </span><span class="o">&gt;</span><span class="n">flash</span><span class="w"> </span><span class="n">AT</span><span class="o">&gt;</span><span class="n">flash</span><span class="w"> </span><span class="o">:</span><span class="n">flash</span><span class="w"></span>

<span class="w">  </span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span><span class="w"></span>

<span class="w">  </span><span class="p">.</span><span class="n">data</span><span class="w">          </span><span class="o">:</span><span class="w"></span>
<span class="w">  </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">(.</span><span class="n">data</span><span class="w"> </span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">PROVIDE</span><span class="p">(</span><span class="w"> </span><span class="n">__global_pointer$</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mh">0x800</span><span class="w"> </span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">(.</span><span class="n">sdata</span><span class="w"> </span><span class="p">.</span><span class="n">sdata</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">(.</span><span class="n">gnu</span><span class="p">.</span><span class="n">linkonce</span><span class="p">.</span><span class="n">s</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">(.</span><span class="n">srodata</span><span class="p">.</span><span class="n">cst16</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">(.</span><span class="n">srodata</span><span class="p">.</span><span class="n">cst8</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">(.</span><span class="n">srodata</span><span class="p">.</span><span class="n">cst4</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">(.</span><span class="n">srodata</span><span class="p">.</span><span class="n">cst2</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">(.</span><span class="n">srodata</span><span class="w"> </span><span class="p">.</span><span class="n">srodata</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">  </span><span class="p">}</span><span class="w"> </span><span class="o">&gt;</span><span class="n">ram</span><span class="w"> </span><span class="n">AT</span><span class="o">&gt;</span><span class="n">flash</span><span class="w"> </span><span class="o">:</span><span class="n">ram_init</span><span class="w"></span>

<span class="w">  </span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span><span class="w"></span>
<span class="w">  </span><span class="n">PROVIDE</span><span class="p">(</span><span class="w"> </span><span class="n">_edata</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.</span><span class="w"> </span><span class="p">);</span><span class="w"></span>
<span class="w">  </span><span class="n">PROVIDE</span><span class="p">(</span><span class="w"> </span><span class="n">edata</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.</span><span class="w"> </span><span class="p">);</span><span class="w"></span>

<span class="w">  </span><span class="n">PROVIDE</span><span class="p">(</span><span class="w"> </span><span class="n">_fbss</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.</span><span class="w"> </span><span class="p">);</span><span class="w"></span>
<span class="w">  </span><span class="n">PROVIDE</span><span class="p">(</span><span class="w"> </span><span class="n">__bss_start</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.</span><span class="w"> </span><span class="p">);</span><span class="w"></span>
<span class="w">  </span><span class="p">.</span><span class="n">bss</span><span class="w">            </span><span class="o">:</span><span class="w"></span>
<span class="w">  </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">(.</span><span class="n">bss</span><span class="w"> </span><span class="p">.</span><span class="n">bss</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="o">*</span><span class="p">(</span><span class="n">COMMON</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span><span class="w"></span>
<span class="w">  </span><span class="p">}</span><span class="w"> </span><span class="o">&gt;</span><span class="n">ram</span><span class="w"> </span><span class="n">AT</span><span class="o">&gt;</span><span class="n">ram</span><span class="w"> </span><span class="o">:</span><span class="n">ram</span><span class="w"></span>

<span class="w">  </span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span><span class="w"></span>
<span class="w">  </span><span class="n">PROVIDE</span><span class="p">(</span><span class="w"> </span><span class="n">_end</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.</span><span class="w"> </span><span class="p">);</span><span class="w"></span>
<span class="w">  </span><span class="n">PROVIDE</span><span class="p">(</span><span class="w"> </span><span class="n">end</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.</span><span class="w"> </span><span class="p">);</span><span class="w"></span>

<span class="w">  </span><span class="p">.</span><span class="n">stack</span><span class="w"> </span><span class="n">ORIGIN</span><span class="p">(</span><span class="n">ram</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">LENGTH</span><span class="p">(</span><span class="n">ram</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">__stack_size</span><span class="w"> </span><span class="o">:</span><span class="w"></span>
<span class="w">  </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">PROVIDE</span><span class="p">(</span><span class="w"> </span><span class="n">_heap_end</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.</span><span class="w"> </span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">__stack_size</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">PROVIDE</span><span class="p">(</span><span class="w"> </span><span class="n">_sp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.</span><span class="w"> </span><span class="p">);</span><span class="w"></span>
<span class="w">  </span><span class="p">}</span><span class="w"> </span><span class="o">&gt;</span><span class="n">ram</span><span class="w"> </span><span class="n">AT</span><span class="o">&gt;</span><span class="n">ram</span><span class="w"> </span><span class="o">:</span><span class="n">ram</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>Now this linker script also provides a few extra symbols that can come handy when developing your OS. In particular, it gives your OS a stack location!
</p><p>Now that we have the kernel source code and we have a linker script, what remains is building our image. First, however, let's setup a few environment variables:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>$ <span class="nb">export</span> <span class="nv">SDK</span><span class="o">=</span>/the/location/where/your/freedom/sdk/lies
$ <span class="nb">export</span> <span class="nv">SDK_PREFIX</span><span class="o">=</span><span class="k">$(</span>SDK<span class="k">)</span>/work/build/riscv-gnu-toolchain/riscv64-unknown-elf/prefix/bin
$ <span class="nb">export</span> <span class="nv">CROSS</span><span class="o">=</span><span class="k">$(</span>SDK_PREFIX<span class="k">)</span>/riscv64-unknown-elf-
$ <span class="nb">export</span> <span class="nv">OPENOCD</span><span class="o">=</span><span class="k">$(</span>SDK<span class="k">)</span>/work/build/openocd/prefix/bin/openocd
</pre></div>
<p>Modify the $SDK variable to where your SDK is cloned to.
</p><p>Finally, we can now proceed to build our image, simply:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>$ <span class="si">${</span><span class="nv">CROSS</span><span class="si">}</span>gcc main.c <span class="se">\</span>
  -g <span class="se">\</span>
  -march<span class="o">=</span>rv32imac <span class="se">\</span>
  -mabi<span class="o">=</span>ilp32 <span class="se">\</span>
  -mcmodel<span class="o">=</span>medany <span class="se">\</span>
  -o main.img <span class="se">\</span>
  -T linker.lds <span class="se">\</span>
  -nostartfiles
</pre></div>
<p>Before you execute that command, you might be wondering what those options are.
</p>
<ul><li>"-g" turns on debug symbols and additional debugging information. This can be useful for your kernel and (I believe) you can also the on-chip debugger to jump to functions, inspect variables, as you would in GDB.</li>
<li>"-march=rv32imac" specifies the available instructions for the board. The HiFive-1 is a 32-bit RISC-V board, with the IMAC extensions.
<ul><li>"I" refers to Integer Base Instructions</li>
<li>"M" refers to Integer Multiplication and Division Instructions</li>
<li>"A" refers to atomic instructions</li>
<li>"C" refers to compressed instructions (think Thumb mode on ARM)</li></ul></li>
<li>"-mabi=ilp32" specifies the ABI of the platform. "ilp32" means that Integers, Longs, Pointers are 32-bit wide.</li>
<li>"-mcmodel=medany" tells GCC to compile for a Medium/Anywhere code model.</li></ul>
<p>The rest of the arguments should be familiar from other programming activities.
</p><p>At this point, you should have a main.img in your directory and that is kernel that we have just compiled!
</p>
<h2><span class="mw-headline" id="Testing_on_real_hardware">Testing on real hardware</span></h2>
<p>To test on real hardware, you will need to first plug your HiFive-1 board to your computer of choice (preferably the one with the freshly compiled main.img from the previous steps.&#160;:-) ).
</p><p>Before you can flash the kernel to the board, however, you will need an OpenOCD specification for the said board. You can find one for the HiFive-1 board <a rel="nofollow" class="external text" href="https://github.com/sifive/freedom-e-sdk/blob/e582766d596dcaa303634c121638b8f614ffd4c7/bsp/sifive-hifive1/openocd.cfg">here</a>. (I am unable to directly include it, because its license is not CC0-compatible, thus you'll need to grab it yourself).
</p><p>Once you have this, the process of flashing an image to the board is relatively quick:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>$ <span class="si">${</span><span class="nv">OPENOCD</span><span class="si">}</span> <span class="se">\</span>
  -f openocd.cfg <span class="se">\</span>
  -c <span class="s2">&quot;flash protect 0 64 last off; \</span>
<span class="s2">      program main.img verify;\</span>
<span class="s2">      resume 0x20400000;\</span>
<span class="s2">      exit&quot;</span>
</pre></div>
<p>In this command, we first turn off the board's flash protection, program the board with the kernel and verify that the hashes match, and resume from the starting point. Finally, we exit the on-chip debugger.
</p><p>If all went well, you are done and the UART (which you can observe via minicom) will now output the following:
</p>
<pre>Hello, world!
This is myOS on the HiFive-1 Board!
</pre>
<!-- 
NewPP limit report
Cached time: 20250212011235
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.099 seconds
Real time usage: 0.875 seconds
Preprocessor visited node count: 171/1000000
Post‐expand include size: 2731/2097152 bytes
Template argument size: 660/2097152 bytes
Highest expansion depth: 19/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 40756/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    7.408      1 -total
 52.63%    3.899      3 Template:If
 51.45%    3.811      1 Template:Rating
 45.37%    3.361      3 Template:Show1
 17.72%    1.313      3 Template:NoteBox
 17.69%    1.311      1 Template:BeginnersWarning
 16.63%    1.232      1 Template:TutorialExplain
 12.30%    0.911      3 Template:Eq
 12.05%    0.893      1 Template:FirstPerson
  5.99%    0.444      3 Template:Eq1
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4291-0!canonical and timestamp 20250212011234 and revision id 23490.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=HiFive-1_Bare_Bones&amp;oldid=23490">https://wiki.osdev.org/index.php?title=HiFive-1_Bare_Bones&amp;oldid=23490</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_duplicate_arguments_in_template_calls&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using duplicate arguments in template calls (page does not exist)">Pages using duplicate arguments in template calls</a></li><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Articles_Written_in_First_Person" title="Category:Articles Written in First Person">Articles Written in First Person</a></li><li><a href="./Category:Level_2_Tutorials" title="Category:Level 2 Tutorials">Level 2 Tutorials</a></li><li><a href="./Category:RISC-V" title="Category:RISC-V">RISC-V</a></li><li><a href="./Category:Bare_bones_tutorials" title="Category:Bare bones tutorials">Bare bones tutorials</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=HiFive-1+Bare+Bones" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="HiFive-1_Bare_Bones#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="HiFive-1_Bare_Bones" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:HiFive-1_Bare_Bones&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="HiFive-1_Bare_Bones"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=HiFive-1_Bare_Bones&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=HiFive-1_Bare_Bones&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/HiFive-1_Bare_Bones" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/HiFive-1_Bare_Bones" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=HiFive-1_Bare_Bones&amp;oldid=23490" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=HiFive-1_Bare_Bones&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 29 March 2019, at 14:34.</li>
	<li id="footer-info-0">This page has been accessed 3,170 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=HiFive-1_Bare_Bones&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.099","walltime":"0.875","ppvisitednodes":{"value":171,"limit":1000000},"postexpandincludesize":{"value":2731,"limit":2097152},"templateargumentsize":{"value":660,"limit":2097152},"expansiondepth":{"value":19,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":40756,"limit":5000000},"timingprofile":["100.00%    7.408      1 -total"," 52.63%    3.899      3 Template:If"," 51.45%    3.811      1 Template:Rating"," 45.37%    3.361      3 Template:Show1"," 17.72%    1.313      3 Template:NoteBox"," 17.69%    1.311      1 Template:BeginnersWarning"," 16.63%    1.232      1 Template:TutorialExplain"," 12.30%    0.911      3 Template:Eq"," 12.05%    0.893      1 Template:FirstPerson","  5.99%    0.444      3 Template:Eq1"]},"cachereport":{"timestamp":"20250212011235","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":988});});</script>
</body>
</html>