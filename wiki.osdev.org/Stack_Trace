<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Stack Trace - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"412ab54cb893729dc3544009","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Stack_Trace","wgTitle":"Stack Trace","wgCurRevisionId":27933,"wgRevisionId":27933,"wgArticleId":2513,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Debugging","X86"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Stack_Trace","wgRelevantArticleId":2513,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],
"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Stack_Trace rootpage-Stack_Trace skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Stack Trace</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Stack_Trace#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Stack_Trace#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>A stack trace is debugging output, normally sent to a log file or a debug window that shows the hierarchy of callers that called the current function. A stack trace is generated by analysing the stack to find each stack frame. The addresses of the functions called can be retrieved from each stack frame and the names of the functions displayed.
</p><p>To implement a stack trace you have to know the structure of the stack frames, which is shown in the article <a href="Stack" title="Stack">Stack</a> for X86 CDECL.
</p>
<h3><span class="mw-headline" id="Walking_the_stack">Walking the stack</span></h3>
<p>Often a stack trace is written in assembly as it involves finding the current value of the EBP register. 
To write a stack trace routine in a higher-level language you will need to find EBP. 
This can be done by using a small assembly function or inline assembly, or by using  __builtin_frame_address(0) if you use the GCC compiler. 
On some platform (e.g. x86), the compiler does not necessary save the EBP on the stack. For example, for gcc, use the -fno-omit-frame-pointer to make sure that the EBP is saved. Note that omission of the frame pointer merely causes functions to be missed from the backtrace.
</p><p>The following C++ code shows how (given the existence of a Trace function) this can be used to walk up the stack:
</p>
<div class="mw-highlight mw-highlight-lang-cpp mw-content-ltr" dir="ltr"><pre><span></span><span class="cm">/* Assume, as is often the case, that EBP is the first thing pushed. If not, we are in trouble. */</span><span class="w"></span>
<span class="k">struct</span><span class="w"> </span><span class="nc">stackframe</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">  </span><span class="k">struct</span><span class="w"> </span><span class="nc">stackframe</span><span class="o">*</span><span class="w"> </span><span class="n">ebp</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="kt">uint32_t</span><span class="w"> </span><span class="n">eip</span><span class="p">;</span><span class="w"></span>
<span class="p">};</span><span class="w"></span>
<span class="kt">void</span><span class="w"> </span><span class="nf">Debug::TraceStackTrace</span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">MaxFrames</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">struct</span><span class="w"> </span><span class="nc">stackframe</span><span class="w"> </span><span class="o">*</span><span class="n">stk</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="k">asm</span><span class="w"> </span><span class="p">(</span><span class="s">&quot;movl&#160;%%ebp,%0&quot;</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="s">&quot;=r&quot;</span><span class="p">(</span><span class="n">stk</span><span class="p">)</span><span class="w"> </span><span class="o">::</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">Trace</span><span class="p">(</span><span class="s">&quot;Stack trace:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="k">for</span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">frame</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">stk</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">frame</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">MaxFrames</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">frame</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="c1">// Unwind to previous stack frame</span>
<span class="w">        </span><span class="n">Trace</span><span class="p">(</span><span class="s">&quot;  0x{0:16}     </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">stk</span><span class="o">-&gt;</span><span class="n">eip</span><span class="p">);</span><span class="w"></span>
<span class="w">        </span><span class="n">stk</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">stk</span><span class="o">-&gt;</span><span class="n">ebp</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>Note that the above code and GDB backtracing require a NULL %ebp, to know when to stop. Otherwise the traces will run off into garbage. To account for this, set up a NULL stack frame before you jump to your C entry point:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">mov</span><span class="w"> </span><span class="no">$stack_end</span><span class="p">,</span><span class="w"> </span><span class="nv">%esp</span><span class="w"> </span><span class="c1">; Initialize %esp</span>
<span class="na">...</span><span class="w"></span>
<span class="nf">xor</span><span class="w"> </span><span class="nv">%ebp</span><span class="p">,</span><span class="w"> </span><span class="nv">%ebp</span><span class="w">       </span><span class="c1">; Set %ebp to NULL</span>
<span class="nf">call</span><span class="w"> </span><span class="no">kmain</span><span class="w">           </span><span class="c1">; According to calling convention, kmain will save %ebp (=NULL) to the stack</span>
</pre></div>
<p>With this, stack tracers will see the NULL %ebp as the end of the trace.
</p>
<h3><span class="mw-headline" id="Assembly_Implementation">Assembly Implementation</span></h3>
<p>This assembly implementation for x86 uses the same algorithm as above and similarly relies on a NULL base pointer to be placed near the top of the stack. Rather than print the contents of the stack, however, it builds an array of addresses which can then be resolved into symbol names.
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">; Walks backwards through the call stack and builds a list of return addresses.</span>
<span class="c1">; Args:</span>
<span class="c1">;  * Array of 32-bit addresses.</span>
<span class="c1">;  * Maximum number of elements in array.</span>
<span class="c1">; Return value: The number of addresses stored in the array.</span>
<span class="c1">; Calling convention: cdecl</span>
<span class="err">[</span><span class="nf">global</span><span class="w"> </span><span class="no">walk_stack</span><span class="p">]</span><span class="w"></span>
<span class="nl">walk_stack:</span><span class="w"></span>
<span class="w">    </span><span class="c1">; Create stack frame &amp; save caller&#39;s EDI and EBX.</span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">ebp</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w">  </span><span class="no">ebp</span><span class="p">,</span><span class="w">       </span><span class="no">esp</span><span class="w"></span>
<span class="w">    </span><span class="nf">sub</span><span class="w">  </span><span class="no">esp</span><span class="p">,</span><span class="w">       </span><span class="mi">8</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w">  </span><span class="p">[</span><span class="no">ebp</span><span class="w"> </span><span class="p">-</span><span class="w"> </span><span class="mi">4</span><span class="p">],</span><span class="w"> </span><span class="no">edi</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w">  </span><span class="p">[</span><span class="no">ebp</span><span class="w"> </span><span class="p">-</span><span class="w"> </span><span class="mi">8</span><span class="p">],</span><span class="w"> </span><span class="no">ebx</span><span class="w"></span>
<span class="w">    </span><span class="c1">; Set up local registers.</span>
<span class="w">    </span><span class="nf">xor</span><span class="w">  </span><span class="no">eax</span><span class="p">,</span><span class="w">       </span><span class="no">eax</span><span class="w">         </span><span class="c1">; EAX = return value (number of stack frames found).</span>
<span class="w">    </span><span class="nf">mov</span><span class="w">  </span><span class="no">ebx</span><span class="p">,</span><span class="w">       </span><span class="p">[</span><span class="no">esp</span><span class="w"> </span><span class="err">+</span><span class="w">  </span><span class="mi">8</span><span class="p">]</span><span class="w">  </span><span class="c1">; EBX = old EBP.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w">  </span><span class="no">edi</span><span class="p">,</span><span class="w">       </span><span class="p">[</span><span class="no">esp</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="mi">16</span><span class="p">]</span><span class="w">  </span><span class="c1">; Destination array pointer in EDI.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w">  </span><span class="no">ecx</span><span class="p">,</span><span class="w">       </span><span class="p">[</span><span class="no">esp</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="mi">20</span><span class="p">]</span><span class="w">  </span><span class="c1">; Maximum array size in ECX.</span>
<span class="nl">.walk:</span><span class="w"></span>
<span class="w">    </span><span class="c1">; Walk backwards through EBP linked list, storing return addresses in EDI array.</span>
<span class="w">    </span><span class="nf">test</span><span class="w"> </span><span class="no">ebx</span><span class="p">,</span><span class="w">       </span><span class="no">ebx</span><span class="w"></span>
<span class="w">    </span><span class="nf">jz</span><span class="w">   </span><span class="no">.done</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w">  </span><span class="no">edx</span><span class="p">,</span><span class="w">       </span><span class="p">[</span><span class="no">ebx</span><span class="w"> </span><span class="err">+</span><span class="w">  </span><span class="mi">4</span><span class="p">]</span><span class="w">  </span><span class="c1">; EDX = previous stack frame&#39;s IP.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w">  </span><span class="no">ebx</span><span class="p">,</span><span class="w">       </span><span class="p">[</span><span class="no">ebx</span><span class="w"> </span><span class="err">+</span><span class="w">  </span><span class="mi">0</span><span class="p">]</span><span class="w">  </span><span class="c1">; EBX = previous stack frame&#39;s BP.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w">  </span><span class="p">[</span><span class="no">edi</span><span class="p">],</span><span class="w">     </span><span class="no">edx</span><span class="w">         </span><span class="c1">; Copy IP.</span>
<span class="w">    </span><span class="nf">add</span><span class="w">  </span><span class="no">edi</span><span class="p">,</span><span class="w">       </span><span class="mi">4</span><span class="w"></span>
<span class="w">    </span><span class="nf">inc</span><span class="w">  </span><span class="no">eax</span><span class="w"></span>
<span class="w">    </span><span class="nf">loop</span><span class="w"> </span><span class="no">.walk</span><span class="w"></span>
<span class="nl">.done:</span><span class="w"></span>
<span class="w">    </span><span class="c1">; Restore caller&#39;s EDI and EBX, leave stack frame &amp; return EAX.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w">  </span><span class="no">edi</span><span class="p">,</span><span class="w">       </span><span class="p">[</span><span class="no">ebp</span><span class="w"> </span><span class="p">-</span><span class="w"> </span><span class="mi">4</span><span class="p">]</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w">  </span><span class="no">ebx</span><span class="p">,</span><span class="w">       </span><span class="p">[</span><span class="no">ebp</span><span class="w"> </span><span class="p">-</span><span class="w"> </span><span class="mi">8</span><span class="p">]</span><span class="w"></span>
<span class="w">    </span><span class="nf">leave</span><span class="w"></span>
<span class="w">    </span><span class="nf">ret</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="Resolving_Function_Names">Resolving Function Names</span></h3>
<p>The next step in producing meaningful output from a stack trace is to find the names of the functions containing the addresses found during the stack walk.
</p><p>When looking up the name of a function you have to find the biggest address smaller than the value you are looking for. This is because the return address saved by the call is the address of the jsr instruction, which will be offset within the function that is making the call.
</p><p>To get the information you need to lookup function names you will need to either include debugging symbols in your kernel or load the map file created by your linker into the kernel's memory space. The map file shows the addresses of each of your functions. While you could include the entire map file, it is often quite large and inefficiently stored. Not only this but often functions are not listed in the order that they appear in the object file and the format is not amenable to tracing through to find a specific function.
</p><p>One possible solution is to pre-process your map file to produce a smaller, more useful format for it. You could do this in a way that allows either binary or linear searching for a particular address. See NobleTech's Web site<a rel="nofollow" class="external autonumber" href="http://www.nobletech.co.uk/Products/PenPot/Design/Kernel/Debug/FnNameLookup.aspx">[1]</a> for C# code showing a way of reading the map file produced by GNU ld and outputting a binary file that allows more efficient linear searching for symbols. A binary Win32 console application to do the pre-processing is also available for free from that site. C++ code that can be used in your kernel to look up function names in the pre-processed file format is also shown.
</p>
<!-- 
NewPP limit report
Cached time: 20250211143537
Cache expiry: 86400
Reduced expiry: false
Complications: []
CPU time usage: 0.032 seconds
Real time usage: 0.435 seconds
Preprocessor visited node count: 25/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 11522/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:2513-0!canonical and timestamp 20250211143537 and revision id 27933.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Stack_Trace&amp;oldid=27933">https://wiki.osdev.org/index.php?title=Stack_Trace&amp;oldid=27933</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Debugging" title="Category:Debugging">Debugging</a></li><li><a href="./Category:X86" title="Category:X86">X86</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Stack+Trace" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Stack_Trace#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Stack_Trace" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:Stack_Trace" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Stack_Trace"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Stack_Trace&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Stack_Trace&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Stack_Trace" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Stack_Trace" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Stack_Trace&amp;oldid=27933" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Stack_Trace&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 9 July 2023, at 15:04.</li>
	<li id="footer-info-0">This page has been accessed 4,679 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Stack_Trace&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.032","walltime":"0.435","ppvisitednodes":{"value":25,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":11522,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250211143537","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":536});});</script>
</body>
</html>