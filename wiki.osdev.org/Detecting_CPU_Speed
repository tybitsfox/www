<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Detecting CPU Speed - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"76c7143d188d02a9fd45294f","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Detecting_CPU_Speed","wgTitle":"Detecting CPU Speed","wgCurRevisionId":28186,"wgRevisionId":28186,"wgArticleId":1446,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Tone","X86 CPU","Hardware Detection"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Detecting_CPU_Speed","wgRelevantArticleId":1446,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],
"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Detecting_CPU_Speed rootpage-Detecting_CPU_Speed skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Detecting CPU Speed</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Detecting_CPU_Speed#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Detecting_CPU_Speed#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Detecting_CPU_Speed#What_is_CPU_Speed"><span class="tocnumber">1</span> <span class="toctext">What is CPU Speed</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Detecting_CPU_Speed#General_Method"><span class="tocnumber">2</span> <span class="toctext">General Method</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="Detecting_CPU_Speed#Waiting_for_a_given_amount_of_time"><span class="tocnumber">2.1</span> <span class="toctext">Waiting for a given amount of time</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="Detecting_CPU_Speed#Knowing_how_many_cycles_your_loop_takes"><span class="tocnumber">2.2</span> <span class="toctext">Knowing how many cycles your loop takes</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="Detecting_CPU_Speed#RDTSC_Instruction_Access"><span class="tocnumber">2.3</span> <span class="toctext">RDTSC Instruction Access</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="Detecting_CPU_Speed#Working_Example_Code"><span class="tocnumber">2.4</span> <span class="toctext">Working Example Code</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Detecting_CPU_Speed#Without_Interrupts"><span class="tocnumber">2.5</span> <span class="toctext">Without Interrupts</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-8"><a href="Detecting_CPU_Speed#Asking_the_SMBios_for_CPU_speed"><span class="tocnumber">3</span> <span class="toctext">Asking the SMBios for CPU speed</span></a>
<ul>
<li class="toclevel-2 tocsection-9"><a href="Detecting_CPU_Speed#SMBios_Processor_Information"><span class="tocnumber">3.1</span> <span class="toctext">SMBios Processor Information</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="Detecting_CPU_Speed#Getting_the_SMBIOS_Structure"><span class="tocnumber">3.2</span> <span class="toctext">Getting the SMBIOS Structure</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="Detecting_CPU_Speed#Links"><span class="tocnumber">4</span> <span class="toctext">Links</span></a>
<ul>
<li class="toclevel-2 tocsection-12"><a href="Detecting_CPU_Speed#Related_threads_in_the_forum"><span class="tocnumber">4.1</span> <span class="toctext">Related threads in the forum</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="Detecting_CPU_Speed#Other_resources"><span class="tocnumber">4.2</span> <span class="toctext">Other resources</span></a>
<ul>
<li class="toclevel-3 tocsection-14"><a href="Detecting_CPU_Speed#Regarding_SMBIOS"><span class="tocnumber">4.2.1</span> <span class="toctext">Regarding SMBIOS</span></a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="What_is_CPU_Speed">What is CPU Speed</span></h2>
<p>"CPU speed" has several different definitions:
</p>
<ol><li>How quickly the processor can execute code (e.g. instructions per second)</li>
<li>How fast the processor's clock is running (e.g. cycles per second)</li></ol>
<p>How quickly a CPU can execute code is important for determining the CPU's performance. How fast a CPU's clock is running is only useful for specific cases (e.g. calibrating the CPU's TSC to use for measuring time).
</p><p>There are also several different measurements for these different "CPU speeds":
</p>
<ol><li>Best case</li>
<li>Nominal case</li>
<li>Average case</li>
<li>Current case</li>
<li>Worst case</li></ol>
<p>For example, look at a modern Intel Core i7 CPU (with turbo-boost, power management and hyper-threading). The best case instructions per second would occur when:
</p>
<ol><li>There is no throttling/power saving at all.</li>
<li>Only one logical CPU is running (turbo-boost activated and hyper-threading not being used)</li>
<li>Simple instructions with no dependencies in a loop that fits in the CPU's "loop buffer" are being executed</li>
<li>There are no branch mispredictions</li>
<li>There are no accesses to memory (no data being transferred to/from caches or RAM)</li></ol>
<p>The worst case instructions per second would be the exact opposite and may be several orders of magnitude worse (e.g. a best case of 4 billion instructions per second and a worst case of 100 million instructions per second). The nominal instructions per second (commonly referred to as "nominal cycles per second") is an estimation of the normal average instructions per second a developer would expect. All of these things are fixed values - a specific CPU always has the same best case, worst case and nominal case, and these values don't change depending on CPU load, which instructions are/were executed, etc.
</p><p>The current instructions per second is the instructions per second at a specific instant in time and must be somewhere between the best and worst cases. It can't be measured exactly, but can be estimated by finding the average instructions per second for a very short period of time. The average case is something that has to be measured. Both the current instructions per second and the average instructions per second depend heavily on the code that was running. For example, the average instructions per second for a series of NOP instructions may be much higher that the average instructions per second for a series of DIV instructions.
</p><p><br />
</p>
<h2><span class="mw-headline" id="General_Method">General Method</span></h2>
<p>In order to tell what the CPU speed is, we need two things:
</p>
<ol><li>Being able to tell that a given (precise) amount of time has elapsed.</li>
<li>Being able to know how many 'clock cycles' a portion of code took.</li></ol>
<p>Once these two sub-problems are solved, one can easily tell the CPU speed
using the following&#160;:
</p>
<pre>prepare_a_timer(X milliseconds ahead);
while (timer has not fired) {
   inc iterations_counter;
}
cpuspeed_mhz = (iteration_counter * clock_cycles_per_iteration)/1000;
</pre>
<p>Note that except for very special cases, using a busy-loop (even calibrated) to introduce delays is a bad idea and that it should be kept for very small delays
(nano or micro seconds) that must be complied with when programming hardware only.
</p><p>Also note that PC emulators (like BOCHS, for instance) are rarely realtime, resulting in the clock appearing to run faster
than expected.
</p>
<h3><span class="mw-headline" id="Waiting_for_a_given_amount_of_time">Waiting for a given amount of time</span></h3>
<p>There are two circuits in a PC to deal with time: the <a href="PIT" class="mw-redirect" title="PIT">PIT</a> (Programmable Interval Timer - Intel 8253 and 8254 are common PITs) and the RTC (Real Time Clock). The PIT is probably the better of the two for this task.
</p><p>The PIT has two operating modes that can be useful for telling the CPU speed:
</p>
<ol><li>the <i>periodic interrupt</i> mode (0x36), in which a signal is emitted to the interrupt controller at a fixed frequency. This is especially interesting on PIT channel 0 which is bound to IRQ0 on a PC.</li>
<li>the <i>one shot</i> mode (0x34), in which the PIT will decrease a counter at its top speed (1.19318 MHz) until the counter reaches zero.</li></ol>
<p>Whether or not an IRQ is fired by channel0 in 0x34 mode should be checked.
</p><p>Note that theoretically, <i>one shot</i> mode could be used with a <i>polling</i> approach, reading the current count on the channel's data port, but I/O bus cycles have unpredictable latency and it is up to the programmer to make sure the timestamp counter is not affected by this approach.
</p>
<h3><span class="mw-headline" id="Knowing_how_many_cycles_your_loop_takes">Knowing how many cycles your loop takes</span></h3>
<p>This step depends on the CPU. On 286, 386 and 486, each instruction takes
a well-known and deterministic amount of clock cycles to execute. This allows
the programmer to tell exactly how many cycles a loop iteration took by looking
up the timing of each instruction and then summing them up.
</p><p>Since the multi-pipelined architecture of the Pentium; however, such numbers are
no longer communicated (for a major part because the same instruction could have
variable timings depending on its surrounding, which makes the timing almost useless).
</p><p>It is possible to create code which is exceptionally pipeline hostile such as:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">xor</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="no">edx</span><span class="w"></span>
<span class="nf">xor</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="no">eax</span><span class="w"></span>
<span class="nf">xor</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="no">edx</span><span class="w"></span>
<span class="nf">xor</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="no">eax</span><span class="w"></span>
<span class="na">...</span><span class="w"></span>
</pre></div>
<p>A simple xor instruction takes one cycle, which guarantees that the processor cannot pipeline this code as the current instructions operands depend on the results from the last calculation. One can check that, for a small count (tested from 16 to 64), RDTSC will show the instruction count is almost exactly (sometimes off by one) the cycles count. Unfortunately, when making the chain longer, code cache misses will occur, ruining the whole process.
</p><p>E.g. <a rel="nofollow" class="external text" href="http://www.sylvain-ulg.be.tf/resources/speed.c">looping on a chain of 1550 XORs</a> may require a hundred of iterations before it stabilizes around 1575 clock cycles on a AMDx86-64 and will take an exceedingly long time to stabilize on a Pentium3.
</p><p>Despite this inaccuracy, it gives relatively good results across the whole processor generation given a reasonably accurate timer. If very accurate measurements are needed the next method should prove more useful.
</p><p>A Pentium developer has a much better tool to tell timings: the <i>Time Stamp Counter</i>: an internal counter that can be read using RDTSC special instruction
</p><p><a rel="nofollow" class="external text" href="http://www.math.uwaterloo.ca/~~jamuir/rdtscpm1.pdf">rdtscpm1.pdf</a> explains how that feature can be used for performance monitoring and should provide the necessary information on how to access the TSC on a Pentium.
</p>
<h3><span class="mw-headline" id="RDTSC_Instruction_Access">RDTSC Instruction Access</span></h3>
<p>The presence of the Time Stamp Counter (and thus the availability of RDTSC instruction) can be detected through the [CPUID] instruction. Calling CPUID with eax=1, will put feature flags in edx. TSC is bit four of that field.
</p><p>Note that prior to using the CPUID instruction, make sure the processor supports it by testing the 'ID' bit in eflags. (This is 0x200000 and is modifiable only when CPUID instruction is supported. For systems that doesn't support CPUID, writing a '1' at that place will have no effect.)
</p><p>In the case of a processor that does not support CPUID, you'll have to use more eflags-based tests to tell if a 486, 386, etc. is running and then pick up one of the 'calibrated loops' for that architecture (8086 through 80486 may have variable instruction timings).
</p><p><br />
</p>
<h3><span class="mw-headline" id="Working_Example_Code">Working Example Code</span></h3>
<p>A Real Mode Intel-copyrighted example is present in the above-mentioned application note.
Another code snippet submitted by user DennisCGC that will give the total measured frequency of a Pentium processor follows.
</p><p>Some notes:
</p>
<ul><li><i>irq0_count</i> is a variable, which increases each time when the timer interrupt is called.</li>
<li>In this code it's assumed that the [PIT] is programmed to 100 Hz (The formula to calculate a desired Hz is provided in the snippet.)</li>
<li>The code assumes that the command CPUID is supported.</li></ul>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">;__get_speed__:</span>
<span class="w">   </span><span class="c1">;first do a cpuid command, with eax=1</span>
<span class="w">   </span><span class="nf">mov</span><span class="w">  </span><span class="no">eax</span><span class="p">,</span><span class="mi">1</span><span class="w"></span>
<span class="w">   </span><span class="nf">cpuid</span><span class="w"></span>
<span class="w">   </span><span class="nf">test</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="no">byte</span><span class="w"> </span><span class="mi">0x10</span><span class="w">      </span><span class="c1">; test bit #4. Do we have TSC&#160;?</span>
<span class="w">   </span><span class="nf">jz</span><span class="w">   </span><span class="no">detect_end</span><span class="w">         </span><span class="c1">; no&#160;?, go to detect_end</span>
<span class="w">   </span><span class="c1">;wait until the timer interrupt has been called.</span>
<span class="w">   </span><span class="nf">mov</span><span class="w">  </span><span class="no">ebx</span><span class="p">,</span><span class="w"> </span><span class="err">~</span><span class="p">[</span><span class="no">irq0_count</span><span class="p">]</span><span class="w"></span>

<span class="c1">;__wait_irq0__:</span>

<span class="w">   </span><span class="nf">cmp</span><span class="w">  </span><span class="no">ebx</span><span class="p">,</span><span class="w"> </span><span class="err">~</span><span class="p">[</span><span class="no">irq0_count</span><span class="p">]</span><span class="w"></span>
<span class="w">   </span><span class="nf">jz</span><span class="w">   </span><span class="no">wait_irq0</span><span class="w"></span>
<span class="w">   </span><span class="nf">rdtsc</span><span class="w">                   </span><span class="c1">; read time stamp counter</span>
<span class="w">   </span><span class="nf">mov</span><span class="w">  </span><span class="err">~</span><span class="p">[</span><span class="no">tscLoDword</span><span class="p">],</span><span class="w"> </span><span class="no">eax</span><span class="w"></span>
<span class="w">   </span><span class="nf">mov</span><span class="w">  </span><span class="err">~</span><span class="p">[</span><span class="no">tscHiDword</span><span class="p">],</span><span class="w"> </span><span class="no">edx</span><span class="w"></span>
<span class="w">   </span><span class="nf">add</span><span class="w">  </span><span class="no">ebx</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w">             </span><span class="c1">; Set time delay value ticks.</span>
<span class="w">   </span><span class="c1">; remember: so far ebx = ~[irq0]-1, so the next tick is</span>
<span class="w">   </span><span class="c1">; two steps ahead of the current ebx&#160;;)</span>

<span class="c1">;__wait_for_elapsed_ticks__:</span>

<span class="w">   </span><span class="nf">cmp</span><span class="w">  </span><span class="no">ebx</span><span class="p">,</span><span class="w"> </span><span class="err">~</span><span class="p">[</span><span class="no">irq0_count</span><span class="p">]</span><span class="w"> </span><span class="c1">; Have we hit the delay?</span>
<span class="w">   </span><span class="nf">jnz</span><span class="w">  </span><span class="no">wait_for_elapsed_ticks</span><span class="w"></span>
<span class="w">   </span><span class="nf">rdtsc</span><span class="w"></span>
<span class="w">   </span><span class="nf">sub</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="err">~</span><span class="p">[</span><span class="no">tscLoDword</span><span class="p">]</span><span class="w">  </span><span class="c1">; Calculate TSC</span>
<span class="w">   </span><span class="nf">sbb</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="w"> </span><span class="err">~</span><span class="p">[</span><span class="no">tscHiDword</span><span class="p">]</span><span class="w"></span>
<span class="w">   </span><span class="c1">; f(total_ticks_per_Second) =  (1 / total_ticks_per_Second) * 1,000,000</span>
<span class="w">   </span><span class="c1">; This adjusts for MHz.</span>
<span class="w">   </span><span class="c1">; so for this: f(100) = (1/100) * 1,000,000 = 10000</span>
<span class="w">   </span><span class="nf">mov</span><span class="w"> </span><span class="no">ebx</span><span class="p">,</span><span class="w"> </span><span class="mi">10000</span><span class="w"></span>
<span class="w">   </span><span class="nf">div</span><span class="w"> </span><span class="no">ebx</span><span class="w"></span>
<span class="w">   </span><span class="c1">; ax contains measured speed in MHz</span>
<span class="w">   </span><span class="nf">mov</span><span class="w"> </span><span class="err">~</span><span class="p">[</span><span class="no">mhz</span><span class="p">],</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
</pre></div>
<p>See the Intel manual (see links) for more information.
</p>
<dl><dd>- bugs report are welcome. IM to <a rel="nofollow" class="external text" href="http://www.mega-tokyo.com/forum/index.php?action=viewprofile;user=DennisCGc">DennisCGC</a></dd></dl>
<h3><span class="mw-headline" id="Without_Interrupts">Without Interrupts</span></h3>
<center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p>This article's <b>tone or style</b> may not reflect the encyclopedic tone used throughout the wiki. See <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Wikipedia:Writing_better_articles#Tone">Wikipedia's article on tone</a> for suggestions.
</p>
</td></tr></tbody></table>
</center>
<p>I'd be tempted to say 'yes', though I haven't gave it a test nor heard of it elsewhere so far. Here is the trick:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="n">disable</span><span class="p">()</span><span class="w">     </span><span class="c1">// disable interrupts (if still not done)</span>
<span class="n">outb</span><span class="p">(</span><span class="mh">0x43</span><span class="p">,</span><span class="mh">0x34</span><span class="p">);</span><span class="w">   </span><span class="c1">// set PIT channel 0 to single-shot mode</span>
<span class="n">outb</span><span class="p">(</span><span class="mh">0x40</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="w"></span>
<span class="n">outb</span><span class="p">(</span><span class="mh">0x40</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="w">      </span><span class="c1">// program the counter will be 0x10000 - n after n ticks</span>
<span class="kt">long</span><span class="w"> </span><span class="n">stsc</span><span class="o">=</span><span class="n">CPU</span><span class="o">::</span><span class="n">readTimeStamp</span><span class="p">();</span><span class="w"></span>
<span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="o">=</span><span class="mh">0x1000</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">);</span><span class="w"></span>
<span class="kt">long</span><span class="w"> </span><span class="n">etsc</span><span class="o">=</span><span class="n">CPU</span><span class="o">::</span><span class="n">readTimeStamp</span><span class="p">();</span><span class="w"></span>
<span class="n">outb</span><span class="p">(</span><span class="mh">0x43</span><span class="p">,</span><span class="mh">0x04</span><span class="p">);</span><span class="w">   </span><span class="c1">// read PIT counter command&#160;??</span>
<span class="n">byte</span><span class="w"> </span><span class="n">lo</span><span class="o">=</span><span class="n">inb</span><span class="p">(</span><span class="mh">0x40</span><span class="p">);</span><span class="w"></span>
<span class="n">byte</span><span class="w"> </span><span class="n">hi</span><span class="o">=</span><span class="n">inb</span><span class="p">(</span><span class="mh">0x40</span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>Now, we know that
</p>
<ul><li>ticks=(0x10000 - (hi*256+lo)) periods of 1/1193180 seconds have elapsed at least and no more than ticks+1.</li>
<li>etsc-stsc clock cycles have elapsed during the same time.</li></ul>
<p>Thus (etsc-stsc)*1193180 / ticks should be your CPU speed in Hz ...
</p><p>As far as i can say, 0x1000 iterations lead to 10 PIT ticks on a 1GHz CPU and a bit less than 0x8000 ticks on the same CPU running BOCHS. This certainly means that on very high speed systems, the discovered speed may not be accurate at all, or worse, less than 1 tick could occur ...
</p><p>This technique is currently under evaluation in [the forum|Forum:5849]
</p>
<dl><dd>- hope you like my technique /PypeClicker</dd></dl>
<h2><span class="mw-headline" id="Asking_the_SMBios_for_CPU_speed">Asking the SMBios for CPU speed</span></h2>
<dl><dd><i>Main article:</i> <a href="SMBIOS" class="mw-redirect" title="SMBIOS">SMBIOS</a></dd></dl>
<p>The <a href="SMBIOS" class="mw-redirect" title="SMBIOS">SMBIOS</a> (System Management BIOS) Specification addresses how motherboard and system vendors present management information about their products in a standard format by extending the BIOS interface on Intel architecture systems. The information is intended to allow generic instrumentation to deliver this information to management applications that use DMI, CIM or direct access, eliminating the need for error prone operations like probing system hardware for presence detection.
</p><p>Do note that SMBIOS was never intended for initialization purposes. It was intended to provide information for asset management systems to quickly determine what computers contained what hardware. Unfortunately this means that it might be quite unreliable, especially on cheap/home systems. So ultimately it may not be the best way to determine CPU speed.
</p>
<h3><span class="mw-headline" id="SMBios_Processor_Information">SMBios Processor Information</span></h3>
<p>A Processor information (type 4) structure describes features of the CPU as detected by the SMBios. The exact structure is depicted in section 3.3.5 (p 39) of the <a rel="nofollow" class="external text" href="http://www.dmtf.org/standards/documents/SMBIOS/DSP0134.pdf">standard</a>. Within that information you will find the processor type, family, manufacturer etc. and also:
</p>
<ul><li>the External Clock (bus) frequency, which is a word at offset 0x12,</li>
<li>the Maximum CPU speed in MHz, which is a word at offset 0x14 (e.g. 0xe9 is a 233MHz processor),</li>
<li>the Current CPU speed in MHz, (word at offset 0x16).</li></ul>
<h3><span class="mw-headline" id="Getting_the_SMBIOS_Structure">Getting the SMBIOS Structure</span></h3>
<p>SMBios provide a _Get SMBIOS Information_ function that tells you how many structures exists. You can then use _Get SMBIOS Structure_ function to read processor information.
</p><p>As an alternative, you can locate the _SMBIOS Entry Point_ and then traverse manually the SMBIOS structure table, looking for type 4.
</p><p>All this is depicted in 'Accessing SMBIOS Information' structure of the standard (p 11).
</p>
<h2><span class="mw-headline" id="Links">Links</span></h2>
<h3><span class="mw-headline" id="Related_threads_in_the_forum">Related threads in the forum</span></h3>
<ul><li>Forum:5849</li>
<li>Forum:767</li>
<li>Forum:922</li>
<li>Forum:8949 featuring info on bogomips, how linux does it and durand's code.</li>
<li><a rel="nofollow" class="external free" href="https://forum.osdev.org/viewtopic.php?f=1&amp;t=32808">https://forum.osdev.org/viewtopic.php?f=1&amp;t=32808</a></li></ul>
<p><br />
</p>
<h3><span class="mw-headline" id="Other_resources">Other resources</span></h3>
<ul><li><a rel="nofollow" class="external free" href="http://cs.usfca.edu/~cruse/cs630s04/lesson23.ppt‎">http://cs.usfca.edu/~cruse/cs630s04/lesson23.ppt‎</a>, a crash course on PIT, and how to use it to compute CPU speed.</li>
<li><a rel="nofollow" class="external free" href="http://www.sandpile.org/post/msgs/20004561.htm">http://www.sandpile.org/post/msgs/20004561.htm</a></li>
<li><a rel="nofollow" class="external free" href="http://www.midnightbeach.com/jon/pubs/rdtsc.htm">http://www.midnightbeach.com/jon/pubs/rdtsc.htm</a></li></ul>
<ul><li><a rel="nofollow" class="external free" href="ftp://download.intel.com/support/processors/procid/">ftp://download.intel.com/support/processors/procid/</a></li></ul>
<dl><dd>especially section 12: "Operating Frequency" on page 29 of <a rel="nofollow" class="external text" href="ftp://download.intel.com/support/processors/procid/24161815.pdf">24161815.pdf</a></dd></dl>
<h4><span class="mw-headline" id="Regarding_SMBIOS">Regarding SMBIOS</span></h4>
<ul><li><a rel="nofollow" class="external free" href="http://www.dmtf.org/standards/smbios">http://www.dmtf.org/standards/smbios</a></li>
<li><a rel="nofollow" class="external free" href="http://www.dmtf.org/standards/documents/SMBIOS/DSP0134.pdf">http://www.dmtf.org/standards/documents/SMBIOS/DSP0134.pdf</a></li>
<li><a rel="nofollow" class="external free" href="http://www.pcpitstop.com/faq/smbios.asp">http://www.pcpitstop.com/faq/smbios.asp</a></li></ul>
<!-- 
NewPP limit report
Cached time: 20250211122255
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.040 seconds
Real time usage: 0.453 seconds
Preprocessor visited node count: 78/1000000
Post‐expand include size: 778/2097152 bytes
Template argument size: 224/2097152 bytes
Highest expansion depth: 4/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 8774/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%  138.468      1 -total
  1.26%    1.746      1 Template:Tone
  0.48%    0.659      1 Template:Main
  0.31%    0.426      1 Template:NoteBox
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1446-0!canonical and timestamp 20250211122255 and revision id 28186.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Detecting_CPU_Speed&amp;oldid=28186">https://wiki.osdev.org/index.php?title=Detecting_CPU_Speed&amp;oldid=28186</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Tone" title="Category:Tone">Tone</a></li><li><a href="./Category:X86_CPU" title="Category:X86 CPU">X86 CPU</a></li><li><a href="./Category:Hardware_Detection" title="Category:Hardware Detection">Hardware Detection</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Detecting+CPU+Speed" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Detecting_CPU_Speed#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Detecting_CPU_Speed" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:Detecting_CPU_Speed" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Detecting_CPU_Speed"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Detecting_CPU_Speed&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Detecting_CPU_Speed&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Detecting_CPU_Speed" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Detecting_CPU_Speed" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Detecting_CPU_Speed&amp;oldid=28186" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Detecting_CPU_Speed&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 10 July 2023, at 17:33.</li>
	<li id="footer-info-0">This page has been accessed 5,650 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Detecting_CPU_Speed&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.040","walltime":"0.453","ppvisitednodes":{"value":78,"limit":1000000},"postexpandincludesize":{"value":778,"limit":2097152},"templateargumentsize":{"value":224,"limit":2097152},"expansiondepth":{"value":4,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":8774,"limit":5000000},"timingprofile":["100.00%  138.468      1 -total","  1.26%    1.746      1 Template:Tone","  0.48%    0.659      1 Template:Main","  0.31%    0.426      1 Template:NoteBox"]},"cachereport":{"timestamp":"20250211122255","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":615});});</script>
</body>
</html>