<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>User:Combuster/Recovered MBR - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"09d4bb59f54d94ce5c511923","wgCSPNonce":false,"wgCanonicalNamespace":"User","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":2,"wgPageName":"User:Combuster/Recovered_MBR","wgTitle":"Combuster/Recovered MBR","wgCurRevisionId":13225,"wgRevisionId":13225,"wgArticleId":3173,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Bootloaders"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"User:Combuster/Recovered_MBR","wgRelevantArticleId":3173,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],
"wgRestrictionMove":[],"wgRelevantUserName":"Combuster","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="../favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="../opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="../api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-2 ns-subject page-User_Combuster_Recovered_MBR rootpage-User_Combuster skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-namespace">User</span><span class="mw-page-title-separator">:</span><span class="mw-page-title-main">Combuster/Recovered MBR</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"><span class="subpages">&lt; <a href="https://wiki.osdev.org/User:Combuster" title="User:Combuster">User:Combuster</a></span></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Recovered_MBR#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Recovered_MBR#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>Copy of the MBR stuff for archival purposes and backup of the original after the author ragequit on it. Once the world has calmed down, I ought to reconstitute the better parts and improve the theoretical wiki parts on bootloaders.
</p><p>Stuff looks safe for MBR use. All other purposes are a lot of extended truths from the original author. Discussion included for  reference; <b>use sourcecode with caution</b>.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Recovered_MBR#Goal?"><span class="tocnumber">1</span> <span class="toctext">Goal?</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Recovered_MBR#Corrections_Explained"><span class="tocnumber">2</span> <span class="toctext">Corrections Explained</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Recovered_MBR#History"><span class="tocnumber">3</span> <span class="toctext">History</span></a>
<ul>
<li class="toclevel-2 tocsection-4"><a href="Recovered_MBR#Boot_Sector"><span class="tocnumber">3.1</span> <span class="toctext">Boot Sector</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="Recovered_MBR#Chainloading"><span class="tocnumber">3.2</span> <span class="toctext">Chainloading</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="Recovered_MBR#Boot_Managers"><span class="tocnumber">3.3</span> <span class="toctext">Boot Managers</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Recovered_MBR#Two-Stage_Bootloader"><span class="tocnumber">3.4</span> <span class="toctext">Two-Stage Bootloader</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="Recovered_MBR#Multiboot"><span class="tocnumber">3.5</span> <span class="toctext">Multiboot</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Recovered_MBR#ROM_expansion"><span class="tocnumber">3.6</span> <span class="toctext">ROM expansion</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="Recovered_MBR#GPT"><span class="tocnumber">3.7</span> <span class="toctext">GPT</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="Recovered_MBR#BIOS_Boot_Partition"><span class="tocnumber">3.8</span> <span class="toctext">BIOS Boot Partition</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-12"><a href="Recovered_MBR#The_goal"><span class="tocnumber">4</span> <span class="toctext">The goal</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="Recovered_MBR#Finally,_the_code"><span class="tocnumber">5</span> <span class="toctext">Finally, the code</span></a>
<ul>
<li class="toclevel-2 tocsection-14"><a href="Recovered_MBR#1st_stage"><span class="tocnumber">5.1</span> <span class="toctext">1st stage</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="Recovered_MBR#2nd_stage"><span class="tocnumber">5.2</span> <span class="toctext">2nd stage</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-16"><a href="Recovered_MBR#Testing"><span class="tocnumber">6</span> <span class="toctext">Testing</span></a>
<ul>
<li class="toclevel-2 tocsection-17"><a href="Recovered_MBR#UBRL_in_MBR"><span class="tocnumber">6.1</span> <span class="toctext">UBRL in MBR</span></a></li>
<li class="toclevel-2 tocsection-18"><a href="Recovered_MBR#UBRL_in_VBR"><span class="tocnumber">6.2</span> <span class="toctext">UBRL in VBR</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="Recovered_MBR#GRUB_Multiboot"><span class="tocnumber">6.3</span> <span class="toctext">GRUB Multiboot</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="Recovered_MBR#BIOS_ROM"><span class="tocnumber">6.4</span> <span class="toctext">BIOS ROM</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span id="Goal.3F"></span><span class="mw-headline" id="Goal?">Goal?</span></h2>
<p>I'm not sure I understand the purpose of this page, as it isn't <i>really</i> an article---it just seems to be the source code for a simplistic boot loader; while it may be useful to the community, I'm not sure source code listings are the best use of a wiki. Perhaps it would make more sense to provide a link to this boot loader somewhere? --<a href="../User:Love4boobies" title="User:Love4boobies">Love4boobies</a> 04:19, 30 March 2012 (CDT)
</p>
<dl><dd>That would probably be for the best, overall. Look at it this way: If you provide source, you should also provide maintenance and support. That's easy to do on a private project page, but somewhat difficult with a Wiki article. Plus, most of the use cases of this bootloader could be just as well covered by writing a GRUB extension, unless I'm seriously mistaken. -- <a href="../User:Solar" title="User:Solar">Solar</a> 04:29, 30 March 2012 (CDT)</dd></dl>
<h2><span class="mw-headline" id="Corrections_Explained">Corrections Explained</span></h2>
<p>I made some corrections, Turdus "un-corrected" them (possibly because he couldn't have known why they were made), and then I rolled back his "un-corrections" and wrote this to explain the reasons for the original corrections.
</p><p>From the old preface: "<i>If you're happy with fat32, extfs and pe, elf or even aout, they are supported by multi-boot, so leave now and use <a href="../GRUB" title="GRUB">GRUB</a>.</i>". This is wrong because the multiboot specification says nothing about any file system or any executable file format. It could say "<i>If you're happy with fat32, extfs and pe, elf or even aout, they are supported by GRUB</i>" but then it'd still be a little wrong because GRUB legacy (one implementation of multiboot) has no support for PE or aout (unlike ELF). To avoid confusion it's just simpler to not say so much, especially as it's unnecessary (as this page isn't about multiboot or GRUB anyway).
</p><p>From the old chainloading section: "<i>For drive optimization, the first </i>partition<i> usually started on the </i>second<i> cylinder, leaving the remainder of the first track (a 63-sector gap) between the MBR and the first VBR.</i>". For modern/large drives there are 63 sectors per track (due to old BIOS limits). However, for old/small drives there can be less than 63 sectors per track. For example, a 512 MiB USB flash drive could be presented as 32 sectors per track (with 128 heads and 256 cylinders). Assuming there's always 63 sectors per track is a bad idea. <i>Note: I didn't realise this before, but if there are 63 sectors per track (the maximum) then the gap would be 62 sectors and not 63 sectors (as one of the 63 sectors is consumed by the MBR and therefore isn't part of the gap).</i>
</p><p>From the GPT section: "<i>Intel engineers and others decided to create a new partitioning scheme in the gap after the MBR, called <a href="../GPT" title="GPT">GPT</a>. This however made non IBM PC compatible boot managers (occupying the same sectors) incompatible.</i>". For GPT there's 2 partition tables for redundancy (one near the start of the disk an one near the end), and the entire partitioning scheme (including the second partition table) is not in the gap. I had also removed the "<i>(occupying the same sectors)</i>" part. Mostly (at the time) I was tempted to replace the majority of the history section with links to the relevant wiki pages, and compromised (by reducing unnecessary detail) instead.
</p><p>--<a href="https://wiki.osdev.org/index.php?title=User:Brendan&amp;action=edit&amp;redlink=1" class="new" title="User:Brendan (page does not exist)">Brendan</a> 15:37, 20 March 2012 (CDT)
</p><p><br />
One correction:
</p>
<pre>This is wrong because the multiboot specification says nothing about 
any file system or any executable file format.
</pre>
<p>Multiboot requires reading ELF headers for load addresses, and provides the not-so-aptly named "a.out" kludge (while nobody uses a.out) for any other format to provide similar information. I plan on doing a thorough read of the article later and fix things where necessary -- <a href="https://wiki.osdev.org/User:Combuster" title="User:Combuster">Combuster</a> 01:05, 21 March 2012 (CDT)
</p><p><br />
I made some corrections, Turdus "un-corrected" them #2. I therefore added the disputed tag as a warning to all.
</p><p>Point is, the bootloader is in essence designed with non-portability in mind. The claim is that it can be used as a VBR, but it fails that claim for any filesystem that embeds information on sector 0 - which include FAT*, HPFS, NTFS, SFS and XFS and only excludes Ext2/3 for as far as I can check. It also promotes using hardcoded continuous blocks for booting which fails when the second stage is a file that might be touched by the filesystem as well as being a good way of causing the typical starter bugs by not loading enough sectors.
</p><p>I also explicitly added the floppy exclusion because it is considered a VBR by the world (apaprently minus Turdus as per the forums), and because many BIOSes don't support LBA for those devices making any attempt to use this code a shortcut for screwing up that way.
</p><p>And that the device must support LBA should be obvious, especially to the writer. -- <a href="https://wiki.osdev.org/User:Combuster" title="User:Combuster">Combuster</a> 18:14, 28 March 2012 (CDT)
</p><p>Corrections:
</p><p>It is not designed for FAT, HPFS, NTFS,... it would be obvious if you kept "If you're happy with fat32, extfs and pe, elf or even aout, they are supported by GRUB". Maybe pe and aout should have been left out, but the rest applies.
</p>
<dl><dd><i>"Point is, the bootloader is in essence designed with non-portability in mind."</i></dd></dl>
<p>How do you know that? It was not designed for existsing filesystems, yes, but it's portable. Tested scenarios:
</p>
<ul><li>MBR (UBRL), VBR (LILO) -&gt; Works,</li>
<li>MBR (UBRL), VBR (MSDOS FAT32) -&gt; Works,</li>
<li>MBR (LILO), VBR (UBRL) -&gt; Works.</li></ul>
<dl><dd><i>"It also promotes using hardcoded continuous blocks for booting which fails when the second stage is a file"</i></dd></dl>
<p>You are wrong (as usual), and you really should learn to READ. I wrote in section "2nd stage":
</p>
<dl><dd>"Even better, store it in a defragmented, continuous file on your filesystem"</dd></dl>
<p>Do you know what "defragmented, continous" means, don't you?
</p>
<dl><dd><i>"I therefore added the disputed tag as a warning to all."</i></dd></dl>
<p>Show me the details of your testing before you do that.
</p>
<dl><dd><i>"I had also removed the "</i>(occupying the same sectors)<i>" part." and "with links to the relevant wiki pages"</i></dd></dl>
<p>You should really read those wiki pages and specifications: <a rel="nofollow" class="external free" href="https://en.wikipedia.org/wiki/GUID_Partition_Table">http://en.wikipedia.org/wiki/GUID_Partition_Table</a>
</p><p>It's very clear that first GPT starts right after the MBR: "Partition table header (LBA 1)" Don't see any option on LBA 1 here. Also, it reads: "Partition entries starting LBA (<b>always 2</b> in primary copy)"
</p><p>Doesn't matter if first partition starts at 63 or 32 or whatever, the point is, you cannot use the gap after the MBR because it's for the GPT now. Rephrase the sentences if you like. And on modern disks it's not 63 (that's the past), in the last 5 years all disks we bought had partitions megabyte aligned.
</p>
<dl><dd><i>"I made some corrections, Turdus "un-corrected" them (possibly because he couldn't have known why they were made)"</i></dd></dl>
<p>Because they do not mean the same, or you've removed important information. For example:
</p>
<dl><dd><i>"If you are happy with multiboot"</i></dd></dl>
<p>How would a reader know if it's multiboot he/she is looking for? I wrote some examples on purpose.
</p><p>Now it reads: "If you're happy with ELF, FAT or ext (fileformat and filesystems supported by version of multi-boot)"
</p><p>Hope it's good for you. -- <a href="https://wiki.osdev.org/index.php?title=User:Turdus&amp;action=edit&amp;redlink=1" class="new" title="User:Turdus (page does not exist)">Turdus</a> 12:15, 29 March 2012 (CDT)
</p>
<hr />
<p>The Wiki format does not cater well for such point-by-point replies. If you have an argument, take it to the forum. And <b>please</b> keep it civil. Calling each other names serves no purpose. What might be marginal on the forum is <i>definitely</i> out of place on a Wiki discussion page.
</p><p>Advertising own code has <i>always</i> been met with criticism here (as I can <a href="../Makefile" title="Makefile"> attest</a>); take it with style and address it instead of trying to shoot it down. Perhaps it would be better to keep the code and prose in a separate place (your project website), and merely provide a link to it in the relevant context; it's not really tutorial style, it <i>does</i> contain statements that are disputed. -- <a href="../User:Solar" title="User:Solar">Solar</a> 09:04, 29 March 2012 (CDT)
</p>
<hr />
<p>Wiki format rules understood.
</p><p>About the rewrite: it's much more readble indeed, and it reflects what I originally meant, so thank you very much. I wrote only a few words explaining why BIOS Boot partition is useful.
</p><p>I did not want to advertise my code on the wiki. I wanted to show how to write a 2nd stage that capable of booting via different methods, and for that I needed a working 1st stage. Never wanted to say it's the only way to do it, or anything, it's nothing more than a working example. This is now made clear in <i>Preface</i>, thanks.
</p><p>About dispute: the usability of the code as VBR was questioned by someone who didn't even bothered to test it, or even clearly reasoning why. His argument was invalid (does not support floppies), since floppies does not have VBRs. But I accept your opinion it's disputed, so my question is, how to make this clear? All I can say is test it, and see it working (I spent endless nights to test it in different scenarios, so I know it's okay. I wouldn't have posted it here if I wasn't 100% sure).
--<a href="https://wiki.osdev.org/index.php?title=User:Turdus&amp;action=edit&amp;redlink=1" class="new" title="User:Turdus (page does not exist)">Turdus</a> 0926, 30 March 2012 (CST)
</p>
<dl><dd>Not really my bowl of fish here (and I don't feel like testing it ATM), but what about your code requiring LBA addressing? Does that work on floppies, too? Combuster says it doesn't. -- <a href="../User:Solar" title="User:Solar">Solar</a> 03:15, 30 March 2012 (CDT)</dd></dl>
<p><br />
</p><p><br />
</p>
<h2><span class="mw-headline" id="History">History</span></h2>
<h3><span class="mw-headline" id="Boot_Sector">Boot Sector</span></h3>
<p>When the system powers up, it determines the boot device, loads the first sector from that device (usually the first sector on the device), and executes it. On early systems, like <a href="../Floppy_disk" class="mw-redirect" title="Floppy disk"> floppy</a>-based ones, the boot sector then proceeded to load the OS kernel directly.
</p>
<h3><span class="mw-headline" id="Chainloading">Chainloading</span></h3>
<p>With the advent of hard disks, drive partitioning became the rule. The <i>partition table</i> also resided in the boot sector, and the available space for the boot code was reduced to 440 bytes.
</p><p>The code in the boot sector (now called <i>Master Boot Record</i> -- MBR) would parse the partition table, select one of the partitions to boot from (usually through an "active" flag), load the first sector <i>of that partition</i> (the <i>Volume Boot Record</i> -- VBR), and execute it. The VBR code would then proceed to load the OS kernel.
</p><p>Since the VBR code expected to be executed from the exact same memory address as the MBR -- as if it were just loaded by the BIOS -- the MBR code had to relocate itself to a different memory location before loading the VBR code to its previous location. This was called <i>chainloading</i>.
</p><p><a href="../LILO" title="LILO">LILO</a> was an example of this approach.
</p>
<h3><span class="mw-headline" id="Boot_Managers">Boot Managers</span></h3>
<p>If you wanted a sophisticated selection menu (a "boot manager"), the 440 bytes size limit of the MBR was crippling.
</p><p>Hard drive addressing at that time followed the Cylinder-Head-Sector (CHS) scheme. The MBR resided in the first sector, first head, first cylinder. For access optimization, the rest of the first cylinder was usually left unassigned, and the first <i>partition</i> started on the <i>second</i> cylinder, leaving a gap of unassigned sectors. Many boot managers took advantage of this and stored additional code in this gap. That was convenient, but risky - sometimes other software used those sectors too, potentially destroying the boot manager.
</p>
<h3><span class="mw-headline" id="Two-Stage_Bootloader">Two-Stage Bootloader</span></h3>
<p>One solution to that problem was to split up the boot manager into two "stages": A first stage (residing in the MBR) loads the second stage from a partition's file system. The second stage then provides traditional "boot manager" services (a pretty selection menu, decent error handling etc.).
</p><p><a href="../GRUB" title="GRUB">GRUB</a> is an example of this approach.
</p>
<h3><span class="mw-headline" id="Multiboot">Multiboot</span></h3>
<p><a href="../GRUB" title="GRUB">GRUB</a> is capable of traditional chainloading of VBR's as well as booting Linux kernels directly. But the GRUB developers additionally specified the <a rel="nofollow" class="external text" href="http://www.gnu.org/software/grub/manual/multiboot/multiboot.html">Multiboot</a> standard: A Multiboot-compliant kernel could be booted with <a href="../Protected_mode" class="mw-redirect" title="Protected mode">protected mode</a> already set up, kernel modules loaded to memory, a memory map provided, and several other niceties. The idea was to provide a standard where any Multiboot-loader could load any Multiboot-kernel.
</p>
<h3><span class="mw-headline" id="ROM_expansion">ROM expansion</span></h3>
<p>Another way of booting was invented for diskless systems. In this case bootloader code resides in ROM, most commonly on a network card. Instead of booting from disk, it loads the OS over the network.
</p><p>It is possible to hack such a ROM, and make the BIOS load your bootloader code, which in turn loads your OS. Details can be found in the <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/BIOS#BIOS_boot_specification">BIOS boot specification</a>.
</p>
<h3><span class="mw-headline" id="GPT">GPT</span></h3>
<p>As disks became larger, the limits of the MBR partitioning scheme became an issue. Together with a new boot mechanism (<a href="../EFI" class="mw-redirect" title="EFI">EFI</a>), a new partitioning scheme called <a href="../GPT" title="GPT">GPT</a> was devised, using the sectors in the gap after the MBR for its data.
</p><p>Old MBR-based tools - like the aforementioned boot managers - could accidentially overwrite the GPT data structures. As a signal that a given device is using GPT for its partitioning, its MBR partition table marks the whole device as being one single partition of the new type 0xEE. Within the scope of GPT, the so-marked MBR is called <i>Protective Master Boot Record</i>.
</p>
<h3><span class="mw-headline" id="BIOS_Boot_Partition">BIOS Boot Partition</span></h3>
<p>Some people find EFI overcomplicated, and wanted the ability to use a GPT-partitioned device but still boot via the old BIOS / two-stage bootloader mechanism. They introduced a special GPT partition type, the <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/BIOS_Boot_partition">BIOS Boot Partition</a>, which does not hold any filesystem, but is a place to store the second stage of the bootmanager.
</p>
<h2><span class="mw-headline" id="The_goal">The goal</span></h2>
<p>The goal is to load a code and provide consistent environment for it in different scenarios, such as:
</p>
<ul><li>MBR(UBRL) -&gt; 2nd stage</li>
<li>MBR -&gt; VBR(UBRL) -&gt; 2nd stage</li>
<li>PMBR -&gt; BBP -&gt; 2nd stage</li>
<li>GRUB(chainload) -&gt; VBR -&gt; 2nd stage</li>
<li>GRUB(fs, as kernel) -&gt; 2nd stage</li>
<li>VBR(partitionless disk) -&gt; 2nd stage</li>
<li>BIOS -&gt; expansion ROM -&gt; 2nd stage</li></ul>
<p>The boot code is responsible for finding a dedicated filesystem (marked by an active flag for example), locate standard file(s) on it (the kernel and optionally an initrd or modules), load them into memory and pass control over. To achieve this, first you have to get your boot code loaded.
</p><p>I'll show you how to write a code that can be loaded by standard BIOS boot method, via Multiboot and from ROM as well.
</p><p>If you use one of the standard filesystems (ext, fat etc.) I advise to read no further, simply use <a href="../GRUB" title="GRUB">GRUB</a> or other MultiBoot compliant boot loader. You can take advantage of a loader of your own only if you want to go down through the rabbit hole, and use your own file system or executable format.
</p>
<h2><span id="Finally.2C_the_code"></span><span class="mw-headline" id="Finally,_the_code">Finally, the code</span></h2>
<h3><span class="mw-headline" id="1st_stage">1st stage</span></h3>
<p>This is a minimal code (440 bytes at most) that can be placed in a <a href="../MBR" class="mw-redirect" title="MBR">Master Boot Record</a> or GPT's Protective MBR. It's loaded by the BIOS or a boot record via chainload.
</p><p>The 1st stage code shown here is:
</p>
<ul><li>100% compatible with the original IBM PC master boot record code</li>
<li>Same binary can be installed as MBR, PMBR or VBR as well</li>
<li>Forward GPT compatible on non-EFI machines</li>
<li>Loads a 2nd stage loader from any partition</li>
<li>Works with harddisks and USB keys (pendrives). Floppies not supported.</li>
<li>Requires LBA support, no CHS (could be a problem for BIOSes older than 10 years).</li>
<li>Tested on several virtual and real machines.</li></ul>
<p>stage1.asm:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">;*********************************************************************</span>
<span class="c1">;*                                                                   *</span>
<span class="c1">;*     OS/3D - written by Zoltan Baldaszti (aka Turdus) in 2008      *</span>
<span class="c1">;*        Compilation: fasm -d EFISIZE=1 stage1.asm ubrl.bin         *</span>
<span class="c1">;*                                                                   *</span>
<span class="c1">;*  Universal Boot Record Loader.                                    *</span>
<span class="c1">;*                                                                   *</span>
<span class="c1">;*  memory occupied: 0500-800                                        *</span>
<span class="c1">;*                                                                   *</span>
<span class="c1">;*********************************************************************</span>

<span class="c1">;get default EFISIZE, PARTSIZE</span>
<span class="c1">;EFISIZE=EFI System partition size in kilobytes</span>
<span class="c1">;PARTSIZE=size of your filesystem&#39;s partition in kilobytes</span>
<span class="nf">include</span><span class="w"> </span><span class="err">&quot;</span><span class="no">config.inc</span><span class="err">&quot;</span><span class="w"></span>
<span class="c1">;--------------------------Macros----------------------------</span>
<span class="c1">;the writestr mnemonic. Writes a message on screen.</span>
<span class="nf">macro</span><span class="w"> </span><span class="no">writestr</span><span class="w"> </span><span class="no">msg</span><span class="w"></span>
<span class="err">{</span><span class="w"></span>
<span class="nf">if</span><span class="w"> </span><span class="err">~</span><span class="w"> </span><span class="no">msg</span><span class="w"> </span><span class="no">eq</span><span class="w"> </span><span class="no">si</span><span class="w"></span>
<span class="w">	</span><span class="nf">push</span><span class="w">	</span><span class="no">si</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w">	</span><span class="no">si</span><span class="p">,</span><span class="w"> </span><span class="no">msg</span><span class="w"></span>
<span class="nf">end</span><span class="w"> </span><span class="no">if</span><span class="w"></span>
<span class="w">	</span><span class="nf">call</span><span class="w">	</span><span class="no">writestrfunc</span><span class="w"></span>
<span class="nf">if</span><span class="w"> </span><span class="err">~</span><span class="w"> </span><span class="no">msg</span><span class="w"> </span><span class="no">eq</span><span class="w"> </span><span class="no">si</span><span class="w"></span>
<span class="w">	</span><span class="nf">pop</span><span class="w">	</span><span class="no">si</span><span class="w"></span>
<span class="nf">end</span><span class="w"> </span><span class="no">if</span><span class="w"></span>
<span class="err">}</span><span class="w"></span>

<span class="c1">;the die mnemonic. Writes a reason and reboots.</span>
<span class="nf">macro</span><span class="w"> </span><span class="no">die</span><span class="w"> </span><span class="no">msg</span><span class="w"></span>
<span class="err">{</span><span class="w"></span>
<span class="nf">if</span><span class="w"> </span><span class="err">~</span><span class="w"> </span><span class="no">msg</span><span class="w"> </span><span class="no">eq</span><span class="w"> </span><span class="no">si</span><span class="w"></span>
<span class="w">	</span><span class="nf">mov</span><span class="w">	</span><span class="no">si</span><span class="p">,</span><span class="w"> </span><span class="no">msg</span><span class="w"></span>
<span class="nf">end</span><span class="w"> </span><span class="no">if</span><span class="w"></span>
<span class="w">	</span><span class="nf">jmp</span><span class="w">	</span><span class="no">diefunc</span><span class="w"></span>
<span class="err">}</span><span class="w"></span>

<span class="c1">;2nd stage header format (64 bytes):</span>
<span class="c1">;offset length  desc</span>
<span class="c1">; 0      2      expansion ROM magic (AA55h)</span>
<span class="c1">; 2      1      size in blocks (40h)</span>
<span class="c1">; 3      1      magic E9h</span>
<span class="c1">; 4      2      real mode entry point (relative)</span>
<span class="c1">; 6      2      checksum</span>
<span class="c1">; 7      1      revision, must be zero</span>
<span class="c1">; 8     18      architecture (default &quot;x86_bios&quot;)</span>
<span class="c1">;26      2      pnp ptr, must be zero</span>
<span class="c1">;28      4      flags, must be zero</span>
<span class="c1">;32     32      Multiboot header (for GRUB compatibility, must contain a</span>
<span class="c1">;               protected mode entry point)</span>
<span class="c1">;any format can follow.</span>

<span class="nf">ldr.id</span><span class="w">		</span><span class="no">equ</span><span class="w">		</span><span class="mi">800</span><span class="no">h</span><span class="w">		</span><span class="c1">;position of 2nd stage loader</span>
<span class="nf">ldr.firstbyte</span><span class="w">	</span><span class="no">equ</span><span class="w">		</span><span class="mi">840</span><span class="no">h</span><span class="w">		</span><span class="c1">;first non-header byte</span>
<span class="nf">ldr.executor</span><span class="w">	</span><span class="no">equ</span><span class="w">		</span><span class="mi">803</span><span class="no">h</span><span class="w">		</span><span class="c1">;ptr to init code</span>
<span class="nf">ldr.loader</span><span class="w">	</span><span class="no">equ</span><span class="w">		</span><span class="mi">500</span><span class="no">h</span><span class="w">		</span><span class="c1">;loader and partition type</span>
<span class="nf">ldr.drive</span><span class="w">	</span><span class="no">equ</span><span class="w">		</span><span class="mi">501</span><span class="no">h</span><span class="w">		</span><span class="c1">;bios drive of loader</span>
<span class="nf">ldr.begin</span><span class="w">	</span><span class="no">equ</span><span class="w">		</span><span class="mi">506</span><span class="no">h</span><span class="w">		</span><span class="c1">;lba of loader</span>
<span class="nf">ldr.bootdiskid</span><span class="w">	</span><span class="no">equ</span><span class="w">		</span><span class="mi">50</span><span class="no">Eh</span><span class="w">		</span><span class="c1">;boot disk unique winnt id</span>
<span class="nf">ldr.bootbegin</span><span class="w">	</span><span class="no">equ</span><span class="w">		</span><span class="mi">522</span><span class="no">h</span><span class="w">		</span><span class="c1">;lba of boot partition</span>
<span class="nf">ldr.bootsize</span><span class="w">	</span><span class="no">equ</span><span class="w">		</span><span class="mi">52</span><span class="no">Ah</span><span class="w">		</span><span class="c1">;size of boot partition</span>
<span class="nf">lba_packet</span><span class="w">	</span><span class="no">equ</span><span class="w">		</span><span class="mi">532</span><span class="no">h</span><span class="w"></span>
<span class="nf">virtual</span><span class="w"> </span><span class="no">at</span><span class="w"> </span><span class="no">lba_packet</span><span class="w"></span>
<span class="nl">lbapacket.size:</span><span class="w">	</span><span class="nf">dw</span><span class="w">		</span><span class="err">?</span><span class="w"></span>
<span class="nl">lbapacket.count:</span><span class="nf">dw</span><span class="w">		</span><span class="err">?</span><span class="w"></span>
<span class="nl">lbapacket.addr0:</span><span class="nf">dw</span><span class="w">		</span><span class="err">?</span><span class="w"></span>
<span class="nl">lbapacket.addr1:</span><span class="nf">dw</span><span class="w">		</span><span class="err">?</span><span class="w"></span>
<span class="nl">lbapacket.sect0:</span><span class="nf">dw</span><span class="w">		</span><span class="err">?</span><span class="w"></span>
<span class="nl">lbapacket.sect1:</span><span class="nf">dw</span><span class="w">		</span><span class="err">?</span><span class="w"></span>
<span class="nl">lbapacket.sect2:</span><span class="nf">dw</span><span class="w">		</span><span class="err">?</span><span class="w"></span>
<span class="nl">lbapacket.sect3:</span><span class="nf">dw</span><span class="w">		</span><span class="err">?</span><span class="w"></span>
<span class="nf">end</span><span class="w"> </span><span class="no">virtual</span><span class="w"></span>

<span class="c1">;*********************************************************************</span>
<span class="c1">;*                             code                                  *</span>
<span class="c1">;*********************************************************************</span>

<span class="c1">;-----------------BIOS called ENTRY POINT--------------------</span>
<span class="w">		</span><span class="nf">ORG</span><span class="w">		</span><span class="mi">0600</span><span class="no">h</span><span class="w"></span>
<span class="w">		</span><span class="nf">USE16</span><span class="w"></span>
<span class="nl">universal_boot_record:</span><span class="w"></span>
<span class="w">		</span><span class="nf">cli</span><span class="w"></span>
<span class="w">		</span><span class="nf">jmp</span><span class="w">		</span><span class="no">short</span><span class="w"> </span><span class="no">.skipid</span><span class="w"></span>
<span class="nl">.system:</span><span class="w">	</span><span class="nf">db</span><span class="w">		</span><span class="err">&quot;</span><span class="no">UBRL</span><span class="err">&quot;</span><span class="w">		</span><span class="c1">;Universal Boot Record Loader</span>
<span class="nl">.version:</span><span class="w">	</span><span class="nf">db</span><span class="w">		</span><span class="mi">0</span><span class="w">		</span><span class="c1">;version 0.0.1beta</span>

<span class="nl">.skipid:</span><span class="w">	</span><span class="c1">;NOTE: not sure about 32 bit processor yet, so we have to</span>
<span class="w">		</span><span class="c1">;use only 16 bit operands</span>
<span class="w">		</span><span class="c1">;relocate our code to offset 600h</span>
<span class="w">		</span><span class="nf">xor</span><span class="w">		</span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">ss</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">sp</span><span class="p">,</span><span class="w"> </span><span class="mi">600</span><span class="no">h</span><span class="w"></span>
<span class="w">		</span><span class="nf">push</span><span class="w">		</span><span class="no">ax</span><span class="w"></span>
<span class="w">		</span><span class="nf">pop</span><span class="w">		</span><span class="no">es</span><span class="w"></span>
<span class="w">		</span><span class="nf">push</span><span class="w">		</span><span class="no">cs</span><span class="w"></span>
<span class="w">		</span><span class="nf">pop</span><span class="w">		</span><span class="no">ds</span><span class="w"></span>
<span class="w">		</span><span class="c1">;find our position in memory.</span>
<span class="w">		</span><span class="nf">call</span><span class="w">		</span><span class="no">.getaddress</span><span class="w"></span>
<span class="nl">.getaddress:</span><span class="w">	</span><span class="nf">pop</span><span class="w">		</span><span class="no">bx</span><span class="w"></span>
<span class="w">		</span><span class="nf">sub</span><span class="w">		</span><span class="no">bx</span><span class="p">,</span><span class="w"> </span><span class="no">.getaddress-universal_boot_record</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">si</span><span class="p">,</span><span class="w"> </span><span class="no">bx</span><span class="w"></span>
<span class="w">		</span><span class="nf">cld</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">di</span><span class="p">,</span><span class="w"> </span><span class="no">sp</span><span class="w"></span>
<span class="w">		</span><span class="c1">;clear data area 500h-600h</span>
<span class="w">		</span><span class="nf">sub</span><span class="w">		</span><span class="no">di</span><span class="p">,</span><span class="w"> </span><span class="mi">100</span><span class="no">h</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">cx</span><span class="p">,</span><span class="w"> </span><span class="mi">80</span><span class="no">h</span><span class="w"></span>
<span class="w">		</span><span class="na">repnz</span><span class="w">		</span><span class="nf">stosw</span><span class="w"></span>
<span class="w">		</span><span class="c1">;and copy ourselves to 600h</span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">cx</span><span class="p">,</span><span class="w"> </span><span class="mi">100</span><span class="no">h</span><span class="w"></span>
<span class="w">		</span><span class="na">repnz</span><span class="w">		</span><span class="nf">movsw</span><span class="w"></span>
<span class="w">		</span><span class="nf">jmp</span><span class="w">		</span><span class="mi">0</span><span class="p">:.</span><span class="no">start</span><span class="w"></span>

<span class="nl">.start:</span><span class="w">		</span><span class="c1">;get boot drive code - original MBR and BIOS passes it in dl,</span>
<span class="w">		</span><span class="c1">;so all bootmanagers should do.</span>

<span class="w">		</span><span class="c1">;save drive code</span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">ldr.drive</span><span class="p">],</span><span class="w"> </span><span class="no">dl</span><span class="w"></span>
<span class="w">		</span><span class="c1">;initialize lba packet</span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">lbapacket.size</span><span class="p">],</span><span class="w"> </span><span class="mi">16</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">lbapacket.count</span><span class="p">],</span><span class="w"> </span><span class="mi">58</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">lbapacket.addr0</span><span class="err">+</span><span class="mi">1</span><span class="p">],</span><span class="w"> </span><span class="mi">08</span><span class="no">h</span><span class="w"></span>
<span class="w">		</span><span class="nf">push</span><span class="w">		</span><span class="no">dx</span><span class="w"></span>
<span class="w">		</span><span class="nf">writestr</span><span class="w">		</span><span class="no">.system</span><span class="w"></span>
<span class="w">		</span><span class="nf">pop</span><span class="w">		</span><span class="no">dx</span><span class="w"></span>
<span class="w">		</span><span class="c1">;check for lba presistance - floppy not supported any more</span>
<span class="w">		</span><span class="c1">;we use pendrive as removable media for a long time</span>
<span class="w">		</span><span class="nf">cmp</span><span class="w">		</span><span class="no">dl</span><span class="p">,</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="mi">80</span><span class="no">h</span><span class="w"></span>
<span class="w">		</span><span class="nf">jl</span><span class="w">		</span><span class="no">.nolba</span><span class="w"></span>
<span class="nl">.notfloppy:</span><span class="w">	</span><span class="nf">mov</span><span class="w">		</span><span class="no">ah</span><span class="p">,</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="mi">41</span><span class="no">h</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">bx</span><span class="p">,</span><span class="w"> </span><span class="no">word</span><span class="w"> </span><span class="mi">55</span><span class="no">AAh</span><span class="w"></span>
<span class="w">		</span><span class="nf">int</span><span class="w">		</span><span class="mi">13</span><span class="no">h</span><span class="w"></span>
<span class="w">		</span><span class="nf">jc</span><span class="w">		</span><span class="no">.nolba</span><span class="w"></span>
<span class="w">		</span><span class="nf">cmp</span><span class="w">		</span><span class="no">bx</span><span class="p">,</span><span class="w"> </span><span class="no">word</span><span class="w"> </span><span class="mi">0</span><span class="no">AA55h</span><span class="w"></span>
<span class="w">		</span><span class="nf">jne</span><span class="w">		</span><span class="no">.nolba</span><span class="w"></span>
<span class="w">		</span><span class="nf">test</span><span class="w">		</span><span class="no">cl</span><span class="p">,</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="mi">1</span><span class="w"></span>
<span class="w">		</span><span class="nf">jnz</span><span class="w">		</span><span class="no">.lbaok</span><span class="w"></span>
<span class="nl">.nolba:</span><span class="w">		</span><span class="nf">die</span><span class="w">		</span><span class="no">lbanotf</span><span class="w"></span>
<span class="nl">.lbaok:</span><span class="w">		</span><span class="c1">;try to load stage2 - it&#39;s a continous area on disk</span>
<span class="w">		</span><span class="c1">;started at given sector with maximum size of 7400h bytes</span>
<span class="w">		</span><span class="c1">;doesn&#39;t matter if we can load it or not,</span>
<span class="w">		</span><span class="c1">;we still want to search for partitions</span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">si</span><span class="p">,</span><span class="w"> </span><span class="no">stage2_addr</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">di</span><span class="p">,</span><span class="w"> </span><span class="no">lbapacket.sect0</span><span class="w"></span>
<span class="w">		</span><span class="nf">push</span><span class="w">		</span><span class="no">di</span><span class="w"></span>
<span class="w">		</span><span class="nf">movsw</span><span class="w"></span>
<span class="w">		</span><span class="nf">movsw</span><span class="w"></span>
<span class="w">		</span><span class="nf">movsw</span><span class="w"></span>
<span class="w">		</span><span class="nf">movsw</span><span class="w"></span>
<span class="w">		</span><span class="nf">call</span><span class="w">		</span><span class="no">loadsectorfunc</span><span class="w"></span>

<span class="w">		</span><span class="c1">;we have to load the MBR beacuse we may be loaded</span>
<span class="w">		</span><span class="c1">;as a volume boot record</span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">lbapacket.addr0</span><span class="err">+</span><span class="mi">1</span><span class="p">],</span><span class="w"> </span><span class="mi">07</span><span class="no">Ch</span><span class="w"></span>
<span class="w">		</span><span class="nf">pop</span><span class="w">		</span><span class="no">di</span><span class="w"></span>
<span class="w">		</span><span class="nf">xor</span><span class="w">		</span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">		</span><span class="nf">stosw</span><span class="w"></span>
<span class="w">		</span><span class="nf">stosw</span><span class="w"></span>
<span class="w">		</span><span class="nf">stosw</span><span class="w"></span>
<span class="w">		</span><span class="nf">stosw</span><span class="w"></span>
<span class="w">		</span><span class="c1">;actually we load more than 2 sectors, but it&#39;s fast and</span>
<span class="w">		</span><span class="c1">;does not bother anybody. The code is smaller this way,</span>
<span class="w">		</span><span class="c1">;and nevertheless pre-caching fasten up overall boot time.</span>
<span class="w">		</span><span class="nf">call</span><span class="w">		</span><span class="no">loadsectorfunc</span><span class="w"></span>
<span class="w">		</span><span class="nf">jc</span><span class="w">		</span><span class="no">.nombr</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">bp</span><span class="p">,</span><span class="w"> </span><span class="mi">07</span><span class="no">DFEh</span><span class="w"></span>
<span class="w">		</span><span class="nf">cmp</span><span class="w">		</span><span class="no">word</span><span class="w"> </span><span class="p">[</span><span class="no">bp</span><span class="p">],</span><span class="w"> </span><span class="no">bx</span><span class="w"></span>
<span class="w">		</span><span class="nf">je</span><span class="w">		</span><span class="no">.mbrok</span><span class="w"></span>
<span class="nl">.nombr:</span><span class="w">		</span><span class="nf">die</span><span class="w">		</span><span class="no">mbrnotf</span><span class="w"></span>
<span class="nl">.mbrok:</span><span class="w">		</span><span class="nf">inc</span><span class="w">		</span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">bp</span><span class="p">]</span><span class="w">	</span><span class="c1">;mess up id</span>
<span class="w">		</span><span class="c1">;copy disk id from MBR</span>
<span class="w">		</span><span class="c1">;NOTE: si now points to 7DB8h</span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">di</span><span class="p">,</span><span class="w"> </span><span class="no">diskid</span><span class="w"></span>
<span class="w">		</span><span class="nf">movsw</span><span class="w"></span>
<span class="w">		</span><span class="nf">movsw</span><span class="w"></span>

<span class="w">		</span><span class="c1">;searching for active partition (skip over 2 more zero bytes)</span>
<span class="w">		</span><span class="nf">inc</span><span class="w">		</span><span class="no">si</span><span class="w"></span>
<span class="w">		</span><span class="nf">inc</span><span class="w">		</span><span class="no">si</span><span class="w"></span>
<span class="w">		</span><span class="c1">;check for EFI partitioning scheme (so we will not depend on</span>
<span class="w">		</span><span class="c1">;special partition record EEh and such)</span>
<span class="w">		</span><span class="c1">;NOTE: bp+2 is 7E00h</span>
<span class="w">		</span><span class="nf">cmp</span><span class="w">		</span><span class="no">word</span><span class="w"> </span><span class="p">[</span><span class="no">bp</span><span class="err">+</span><span class="mi">2</span><span class="p">],</span><span class="w"> </span><span class="err">&#39;</span><span class="no">EF</span><span class="err">&#39;</span><span class="w"></span>
<span class="w">		</span><span class="nf">jne</span><span class="w">		</span><span class="no">.nextpartition</span><span class="w"></span>
<span class="w">		</span><span class="nf">cmp</span><span class="w">		</span><span class="no">word</span><span class="w"> </span><span class="p">[</span><span class="no">bp</span><span class="err">+</span><span class="mi">4</span><span class="p">],</span><span class="w"> </span><span class="err">&#39;</span><span class="no">I</span><span class="w"> </span><span class="err">&#39;</span><span class="w"></span>
<span class="w">		</span><span class="nf">jne</span><span class="w">		</span><span class="no">.nextpartition</span><span class="w"></span>
<span class="w">		</span><span class="c1">;generate fake MBR partition entry for it</span>
<span class="w">		</span><span class="nf">xor</span><span class="w">		</span><span class="no">dx</span><span class="p">,</span><span class="w"> </span><span class="no">dx</span><span class="w"></span>
<span class="w">		</span><span class="nf">xor</span><span class="w">		</span><span class="no">cx</span><span class="p">,</span><span class="w"> </span><span class="no">cx</span><span class="w"></span>
<span class="w">		</span><span class="nf">inc</span><span class="w">		</span><span class="no">cx</span><span class="w"></span>
<span class="w">		</span><span class="nf">jmp</span><span class="w">		</span><span class="no">near</span><span class="w"> </span><span class="no">.partitionok</span><span class="w"></span>

<span class="nl">.nextpartition:</span><span class="w">	</span><span class="nf">cmp</span><span class="w">		</span><span class="no">si</span><span class="p">,</span><span class="w"> </span><span class="no">bp</span><span class="w"></span>
<span class="w">		</span><span class="nf">jb</span><span class="w">		</span><span class="no">.ok</span><span class="w"></span>
<span class="w">		</span><span class="c1">;indicate no boot partition found</span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">ldr.loader</span><span class="p">],</span><span class="w"> </span><span class="mi">16</span><span class="w"></span>
<span class="w">		</span><span class="nf">jmp</span><span class="w">		</span><span class="no">near</span><span class="w"> </span><span class="no">.chk</span><span class="w"></span>
<span class="nl">.ok:</span><span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="no">word</span><span class="w"> </span><span class="p">[</span><span class="no">si</span><span class="err">+</span><span class="mi">12</span><span class="p">]</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">word</span><span class="w"> </span><span class="p">[</span><span class="no">ldr.bootsize</span><span class="p">],</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">si</span><span class="p">]</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">cx</span><span class="p">,</span><span class="w"> </span><span class="no">word</span><span class="w"> </span><span class="p">[</span><span class="no">si</span><span class="err">+</span><span class="mi">8</span><span class="p">]</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">dx</span><span class="p">,</span><span class="w"> </span><span class="no">word</span><span class="w"> </span><span class="p">[</span><span class="no">si</span><span class="err">+</span><span class="mi">10</span><span class="p">]</span><span class="w"></span>
<span class="w">		</span><span class="nf">add</span><span class="w">		</span><span class="no">si</span><span class="p">,</span><span class="w"> </span><span class="no">word</span><span class="w"> </span><span class="mi">16</span><span class="w"></span>
<span class="w">		</span><span class="nf">cmp</span><span class="w">		</span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="mi">80</span><span class="no">h</span><span class="w">		</span><span class="c1">;check for active partition</span>
<span class="w">		</span><span class="nf">jb</span><span class="w">		</span><span class="no">.nextpartition</span><span class="w"></span>
<span class="w">		</span><span class="c1">;this is a dirty hack. It allows to boot from a different disk.</span>
<span class="w">		</span><span class="c1">;this should not be used, but we must keep compatibility with</span>
<span class="w">		</span><span class="c1">;the M$ boot record shit. Anyway, if you use 80h, we won&#39;t</span>
<span class="w">		</span><span class="c1">;change the device code that the BIOS gave us.</span>
<span class="w">		</span><span class="nf">je</span><span class="w">		</span><span class="no">.partitionok</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">ldr.drive</span><span class="p">],</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
<span class="w">		</span><span class="c1">;save the partition info</span>
<span class="nl">.partitionok:</span><span class="w">	</span><span class="nf">mov</span><span class="w">		</span><span class="no">word</span><span class="w"> </span><span class="p">[</span><span class="no">ldr.bootbegin</span><span class="p">],</span><span class="w"> </span><span class="no">cx</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">word</span><span class="w"> </span><span class="p">[</span><span class="no">ldr.bootbegin</span><span class="err">+</span><span class="mi">2</span><span class="p">],</span><span class="w"> </span><span class="no">dx</span><span class="w"></span>
<span class="w">		</span><span class="c1">;load partition&#39;s (or GPT table&#39;s) first 58 sector</span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">word</span><span class="w"> </span><span class="p">[</span><span class="no">lbapacket.sect0</span><span class="p">],</span><span class="w"> </span><span class="no">cx</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">word</span><span class="w"> </span><span class="p">[</span><span class="no">lbapacket.sect1</span><span class="p">],</span><span class="w"> </span><span class="no">dx</span><span class="w"></span>
<span class="w">		</span><span class="nf">call</span><span class="w">		</span><span class="no">loadsectorfunc</span><span class="w"></span>
<span class="w">		</span><span class="c1">;do we have a 2nd stage loader?</span>
<span class="nl">.chk:</span><span class="w">		</span><span class="nf">cmp</span><span class="w">		</span><span class="no">word</span><span class="w"> </span><span class="p">[</span><span class="no">ldr.id</span><span class="p">],</span><span class="w"> </span><span class="no">bx</span><span class="w"></span>
<span class="w">		</span><span class="nf">jne</span><span class="w">		</span><span class="no">.nostage2</span><span class="w"></span>
<span class="w">		</span><span class="nf">cmp</span><span class="w">		</span><span class="no">bzte</span><span class="w"> </span><span class="p">[</span><span class="no">ldr.id</span><span class="err">+</span><span class="mi">3</span><span class="p">],</span><span class="w"> </span><span class="mi">0</span><span class="no">E9h</span><span class="w"></span>
<span class="w">		</span><span class="nf">jne</span><span class="w">		</span><span class="no">.nostage2</span><span class="w"></span>
<span class="w">		</span><span class="c1">;invoke stage2 real mode code</span>
<span class="w">		</span><span class="nf">writestr</span><span class="w">		</span><span class="no">okay</span><span class="w"></span>
<span class="w">		</span><span class="nf">jmp</span><span class="w">		</span><span class="no">ldr.executor</span><span class="w"></span>

<span class="nl">.nostage2:</span><span class="w">	</span><span class="c1">;if no 2nd stage loader, continue with standard boot mechanism</span>
<span class="w">		</span><span class="c1">;check if it&#39;s a valid boot record</span>
<span class="w">		</span><span class="nf">cmp</span><span class="w">		</span><span class="no">word</span><span class="w"> </span><span class="p">[</span><span class="no">bp</span><span class="p">],</span><span class="w"> </span><span class="no">bx</span><span class="w"></span>
<span class="w">		</span><span class="nf">jne</span><span class="w">		</span><span class="no">.noos</span><span class="w"></span>
<span class="w">		</span><span class="c1">;do not load ourself again, that would be a loop forever</span>
<span class="w">		</span><span class="nf">cmp</span><span class="w">		</span><span class="no">word</span><span class="w"> </span><span class="p">[</span><span class="no">bp</span><span class="err">+</span><span class="mi">2</span><span class="err">+</span><span class="no">.system-universal_boot_record</span><span class="p">],</span><span class="w"> </span><span class="err">&#39;</span><span class="no">UB</span><span class="err">&#39;</span><span class="w"></span>
<span class="w">		</span><span class="nf">je</span><span class="w">		</span><span class="no">.noos</span><span class="w"></span>
<span class="w">		</span><span class="nf">writestr</span><span class="w">		</span><span class="no">okay</span><span class="w"></span>
<span class="w">		</span><span class="c1">;dl must contain bootdrive</span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">dl</span><span class="p">,</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">ldr.drive</span><span class="p">]</span><span class="w"></span>
<span class="w">		</span><span class="nf">jmp</span><span class="w">		</span><span class="mi">07</span><span class="no">C00h</span><span class="w"></span>
<span class="nl">.noos:</span><span class="w">		</span><span class="nf">die</span><span class="w">		</span><span class="no">osnotfound</span><span class="w"></span>

<span class="c1">;*********************************************************************</span>
<span class="c1">;*                          functions                                *</span>
<span class="c1">;*********************************************************************</span>

<span class="c1">;loads an LBA sector</span>
<span class="nl">loadmbr:</span><span class="w"></span>
<span class="nl">loadsectorfunc:</span><span class="w"></span>
<span class="w">		</span><span class="nf">push</span><span class="w">		</span><span class="no">bx</span><span class="w"></span>
<span class="w">		</span><span class="nf">push</span><span class="w">		</span><span class="no">si</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">ah</span><span class="p">,</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="mi">42</span><span class="no">h</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">dl</span><span class="p">,</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">[</span><span class="no">ldr.drive</span><span class="p">]</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">si</span><span class="p">,</span><span class="w"> </span><span class="no">lba_packet</span><span class="w"></span>
<span class="w">		</span><span class="nf">int</span><span class="w">		</span><span class="mi">13</span><span class="no">h</span><span class="w"></span>
<span class="w">		</span><span class="nf">pop</span><span class="w">		</span><span class="no">si</span><span class="w"></span>
<span class="w">		</span><span class="nf">pop</span><span class="w">		</span><span class="no">bx</span><span class="w"></span>
<span class="w">		</span><span class="nf">ret</span><span class="w"></span>

<span class="c1">;ds:si zero terminated string to write</span>
<span class="nl">writestrfunc:</span><span class="w"></span>
<span class="w">		</span><span class="nf">lodsb</span><span class="w"></span>
<span class="w">		</span><span class="nf">or</span><span class="w">		</span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
<span class="w">		</span><span class="nf">jz</span><span class="w">		</span><span class="no">.end</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">ah</span><span class="p">,</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="mi">0</span><span class="no">Eh</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">bx</span><span class="p">,</span><span class="w"> </span><span class="no">word</span><span class="w"> </span><span class="mi">11</span><span class="w"></span>
<span class="w">		</span><span class="nf">int</span><span class="w">		</span><span class="mi">10</span><span class="no">h</span><span class="w"></span>
<span class="w">		</span><span class="nf">jmp</span><span class="w">		</span><span class="no">writestrfunc</span><span class="w"></span>
<span class="nl">.end:</span><span class="w">		</span><span class="nf">ret</span><span class="w"></span>

<span class="c1">;writes the reason, waits for a key and reboots.</span>
<span class="nl">diefunc:</span><span class="w"></span>
<span class="w">		</span><span class="nf">writestr</span><span class="w">		</span><span class="no">panic</span><span class="w"></span>
<span class="w">		</span><span class="nf">call</span><span class="w"> 		</span><span class="no">writestrfunc</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">si</span><span class="p">,</span><span class="w"> </span><span class="no">found</span><span class="w"></span>
<span class="w">		</span><span class="nf">call</span><span class="w">		</span><span class="no">writestrfunc</span><span class="w"></span>
<span class="w">		</span><span class="nf">xor</span><span class="w">		</span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">		</span><span class="nf">int</span><span class="w">		</span><span class="mi">16</span><span class="no">h</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">		</span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="no">FEh</span><span class="w"></span>
<span class="w">		</span><span class="nf">out</span><span class="w">		</span><span class="mi">64</span><span class="no">h</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
<span class="c1">;		hlt</span>
<span class="w">		</span><span class="nf">jmp</span><span class="w">		</span><span class="no">far</span><span class="w"> </span><span class="mi">0</span><span class="no">FFFFh</span><span class="p">:</span><span class="mi">0</span><span class="w">		</span><span class="c1">;invoke BIOS POST</span>

<span class="c1">;*********************************************************************</span>
<span class="c1">;*                          data area                                *</span>
<span class="c1">;*********************************************************************</span>

<span class="nl">panic:</span><span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="err">&quot;</span><span class="p">-</span><span class="no">PANIC</span><span class="p">:</span><span class="w"> </span><span class="no">no</span><span class="w"> </span><span class="err">&quot;</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="nl">lbanotf:</span><span class="w">	</span><span class="nf">db</span><span class="w">		</span><span class="err">&quot;</span><span class="no">LBA</span><span class="w"> </span><span class="no">support</span><span class="err">&quot;</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="nl">mbrnotf:</span><span class="w">	</span><span class="nf">db</span><span class="w">		</span><span class="err">&quot;</span><span class="no">PMBR</span><span class="err">&quot;</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="nl">osnotfound:</span><span class="w">	</span><span class="nf">db</span><span class="w">		</span><span class="err">&quot;</span><span class="no">operating</span><span class="w"> </span><span class="no">system</span><span class="err">&quot;</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="nl">found:</span><span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="err">&quot;</span><span class="w"> </span><span class="no">found</span><span class="err">&quot;</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="nl">okay:</span><span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="err">&quot;</span><span class="p">.</span><span class="err">&quot;</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="mi">01</span><span class="no">B0h-</span><span class="p">(</span><span class="no">$-$$</span><span class="p">)</span><span class="w"> </span><span class="no">dup</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>

<span class="c1">;right before the partition table some data</span>
<span class="nl">stage2_addr:</span><span class="w">	</span><span class="nf">dd</span><span class="w">		</span><span class="mi">0</span><span class="no">FFFFFFFFh</span><span class="p">,</span><span class="mi">0</span><span class="w">	</span><span class="c1">;1B0h 2nd stage loader address</span>
<span class="nl">diskid:</span><span class="w">		</span><span class="nf">dd</span><span class="w">		</span><span class="mi">012345678</span><span class="no">h</span><span class="w">	</span><span class="c1">;1B8h WinNT expects it here</span>
<span class="w">		</span><span class="nf">dw</span><span class="w">		</span><span class="mi">0</span><span class="w"></span>

<span class="w">		</span><span class="c1">;fake partition tables</span>
<span class="w">		</span><span class="c1">;EFI Partition</span>
<span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="mi">0</span><span class="no">h</span><span class="w">		</span><span class="c1">;bootable</span>
<span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="mi">0</span><span class="no">FEh</span><span class="p">,</span><span class="mi">0</span><span class="no">FFh</span><span class="p">,</span><span class="mi">0</span><span class="no">FFh</span><span class="w">	</span><span class="c1">;CHS not used</span>
<span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="mi">0</span><span class="no">EEh</span><span class="w">		</span><span class="c1">;fs type</span>
<span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="mi">0</span><span class="no">FEh</span><span class="p">,</span><span class="mi">0</span><span class="no">FFh</span><span class="p">,</span><span class="mi">0</span><span class="no">FFh</span><span class="w">	</span><span class="c1">;CHS not used</span>
<span class="w">		</span><span class="nf">dd</span><span class="w">		</span><span class="mi">1</span><span class="w">		</span><span class="c1">;start LBA</span>
<span class="w">		</span><span class="nf">dd</span><span class="w">		</span><span class="mi">0</span><span class="no">ffffffffh</span><span class="w">	</span><span class="c1">;end LBA</span>
<span class="w">		</span><span class="c1">;OS/3D root, modify to your needs</span>
<span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="mi">80</span><span class="no">h</span><span class="w">		</span><span class="c1">;bootable</span>
<span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="mi">0</span><span class="no">FEh</span><span class="p">,</span><span class="mi">0</span><span class="no">FFh</span><span class="p">,</span><span class="mi">0</span><span class="no">FFh</span><span class="w">	</span><span class="c1">;CHS not used</span>
<span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="mi">03</span><span class="no">dh</span><span class="w">		</span><span class="c1">;fs type</span>
<span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="mi">0</span><span class="no">FEh</span><span class="p">,</span><span class="mi">0</span><span class="no">FFh</span><span class="p">,</span><span class="mi">0</span><span class="no">FFh</span><span class="w">	</span><span class="c1">;CHS not used</span>
<span class="w">		</span><span class="nf">dd</span><span class="w">		</span><span class="p">(</span><span class="no">EFISIZE</span><span class="p">*</span><span class="mi">2</span><span class="p">)</span><span class="err">+</span><span class="mi">8</span><span class="w">	</span><span class="c1">;start LBA</span>
<span class="w">		</span><span class="nf">dd</span><span class="w">		</span><span class="mi">0</span><span class="no">ffffffffh</span><span class="w">	</span><span class="c1">;end LBA</span>

<span class="w">		</span><span class="nf">db</span><span class="w">              </span><span class="mi">01</span><span class="no">FEh-</span><span class="p">(</span><span class="no">$-$$</span><span class="p">)</span><span class="w"> </span><span class="no">dup</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="mi">55</span><span class="no">h</span><span class="p">,</span><span class="mi">0</span><span class="no">AAh</span><span class="w"></span>

<span class="c1">;*********************************************************************</span>
<span class="c1">;*                   end of Universal Boot Record                    *</span>
<span class="c1">;*********************************************************************</span>

<span class="c1">;*********************************************************************</span>
<span class="c1">;*                      GUID Partition Table                         *</span>
<span class="c1">;*********************************************************************</span>
<span class="c1">;NOTE: the image creator must calculate correct checksums.</span>
<span class="nl">gpt_header:</span><span class="w"></span>
<span class="w">		</span><span class="c1">;gpt header</span>
<span class="nl">.signature:</span><span class="w">	</span><span class="nf">db</span><span class="w">		</span><span class="err">&quot;</span><span class="no">EFI</span><span class="w"> </span><span class="no">PART</span><span class="err">&quot;</span><span class="w"></span>
<span class="nl">.revision:</span><span class="w">	</span><span class="nf">dw</span><span class="w">		</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="w"></span>
<span class="nl">.size:</span><span class="w">		</span><span class="nf">dd</span><span class="w">		</span><span class="mi">92</span><span class="w"></span>
<span class="nl">.crc:</span><span class="w">		</span><span class="nf">dd</span><span class="w">		</span><span class="mi">0</span><span class="no">DEADCC32h</span><span class="w">	</span><span class="c1">;not used, but should be valid</span>
<span class="nl">.reserved:</span><span class="w">	</span><span class="nf">dd</span><span class="w">		</span><span class="mi">0</span><span class="w"></span>
<span class="nl">.primarylba:</span><span class="w">	</span><span class="nf">dd</span><span class="w">		</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="nl">.backuplba:</span><span class="w">	</span><span class="nf">dd</span><span class="w">		</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="w">		</span><span class="c1">;not used, but should be valid</span>
<span class="nl">.firstusable:</span><span class="w">	</span><span class="nf">dd</span><span class="w">		</span><span class="mi">64</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="nl">.lastusable:</span><span class="w">	</span><span class="nf">dd</span><span class="w">		</span><span class="mi">0</span><span class="no">FFFFFFFFh</span><span class="p">,</span><span class="mi">0</span><span class="w">	</span><span class="c1">;not used, but should be valid</span>
<span class="nl">.diskuuid:</span><span class="w">	</span><span class="nf">dd</span><span class="w">		</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="w"></span>
<span class="nl">.partitionlba:</span><span class="w">	</span><span class="nf">dd</span><span class="w">		</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="nl">.numentries:</span><span class="w">	</span><span class="nf">dd</span><span class="w">		</span><span class="mi">2</span><span class="w"></span>
<span class="nl">.sizeentry:</span><span class="w">	</span><span class="nf">dd</span><span class="w">		</span><span class="mi">128</span><span class="w"></span>
<span class="nl">.partitioncrc:</span><span class="w">	</span><span class="nf">dd</span><span class="w">		</span><span class="mi">0</span><span class="no">DEADCC32h</span><span class="w">	</span><span class="c1">;not used, but should be valid</span>
<span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="mi">0200</span><span class="no">h-</span><span class="p">(</span><span class="no">$-gpt_header</span><span class="p">)</span><span class="w"> </span><span class="no">dup</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>

<span class="nl">gpt_partitions:</span><span class="w"></span>
<span class="nl">.entry0_type:</span><span class="w">	</span><span class="nf">db</span><span class="w">		</span><span class="mi">028</span><span class="no">h</span><span class="p">,</span><span class="mi">073</span><span class="no">h</span><span class="p">,</span><span class="mi">02</span><span class="no">Ah</span><span class="p">,</span><span class="mi">0</span><span class="no">C1h</span><span class="p">,</span><span class="mi">01</span><span class="no">Fh</span><span class="p">,</span><span class="mi">0</span><span class="no">F8h</span><span class="p">,</span><span class="mi">0</span><span class="no">D2h</span><span class="p">,</span><span class="mi">011</span><span class="no">h</span><span class="w"></span>
<span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="mi">0</span><span class="no">BAh</span><span class="p">,</span><span class="mi">04</span><span class="no">Bh</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="no">A0h</span><span class="p">,</span><span class="mi">0</span><span class="no">C9h</span><span class="p">,</span><span class="mi">03</span><span class="no">Eh</span><span class="p">,</span><span class="mi">0</span><span class="no">C9h</span><span class="p">,</span><span class="mi">03</span><span class="no">Bh</span><span class="w"></span>
<span class="nl">.entry0_uuid:</span><span class="w">	</span><span class="nf">db</span><span class="w">		</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="w"></span>
<span class="nl">.entry0_start:</span><span class="w">	</span><span class="nf">dd</span><span class="w">		</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="nl">.entry0_ends:</span><span class="w">	</span><span class="nf">dd</span><span class="w">		</span><span class="p">(</span><span class="no">EFISIZE</span><span class="p">*</span><span class="mi">2</span><span class="p">)</span><span class="err">+</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="nl">.entry0_attrib:</span><span class="w">	</span><span class="nf">dd</span><span class="w">		</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="nl">.entry0_name:</span><span class="w">	</span><span class="nf">db</span><span class="w">		</span><span class="err">&#39;</span><span class="no">E</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">F</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">I</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="w"> </span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">s</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">y</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">s</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="err">&#39;</span><span class="no">t</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">e</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">m</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="w"> </span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">p</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">a</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">r</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="err">&#39;</span><span class="no">t</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">i</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">t</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">i</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">o</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">n</span><span class="err">&#39;</span><span class="w"></span>
<span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="mi">128</span><span class="p">-(</span><span class="no">$-.entry0_type</span><span class="p">)</span><span class="w"> </span><span class="no">dup</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>

<span class="c1">;our test OS/3D system partition</span>
<span class="c1">;my stage2 code will look for BOOTDISK first, but if none found, it will use the</span>
<span class="c1">;first partition labeled ROOTDISK.</span>
<span class="c1">;modify this entry to your needs.</span>
<span class="nl">.entry1_type:</span><span class="w">	</span><span class="nf">db</span><span class="w">		</span><span class="err">&#39;</span><span class="no">FS3D</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">ROOTDISK</span><span class="err">&#39;</span><span class="w"></span>
<span class="nl">.entry1_uuid:</span><span class="w">	</span><span class="nf">db</span><span class="w">		</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="w"></span>
<span class="nl">.entry1_start:</span><span class="w">	</span><span class="nf">dd</span><span class="w">		</span><span class="p">(</span><span class="no">EFISIZE</span><span class="p">*</span><span class="mi">2</span><span class="p">)</span><span class="err">+</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="nl">.entry1_ends:</span><span class="w">	</span><span class="nf">dd</span><span class="w">		</span><span class="p">(</span><span class="no">EFISIZE</span><span class="p">*</span><span class="mi">2</span><span class="p">)</span><span class="err">+</span><span class="p">(</span><span class="no">PARTSIZE</span><span class="p">*</span><span class="mi">2</span><span class="p">)</span><span class="err">+</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="nl">.entry1_attrib:</span><span class="w">	</span><span class="nf">dd</span><span class="w">		</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="w"></span>
<span class="nl">.entry1_name:</span><span class="w">	</span><span class="nf">db</span><span class="w">		</span><span class="err">&#39;</span><span class="no">B</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">e</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">n</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">d</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&#39;</span><span class="no">e</span><span class="err">&#39;</span><span class="w"></span>
<span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="mi">128</span><span class="p">-(</span><span class="no">$-.entry1_type</span><span class="p">)</span><span class="w"> </span><span class="no">dup</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>

<span class="c1">;-----------make it logical sector (4k) long----------</span>
<span class="w">		</span><span class="nf">db</span><span class="w">		</span><span class="mi">4096</span><span class="p">-(</span><span class="no">$-universal_boot_record</span><span class="p">)</span><span class="w"> </span><span class="no">dup</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="2nd_stage">2nd stage</span></h3>
<p>The rest of the code can be right after the 1st stage, although it's discouraged due to compatibility issues (see section GPT). It's better to put it on a separate mbr or gpt partition (to protect it from overwriting by accident). Even better, store it in a defragmented, continuous file on your filesystem (note that being continous is essential since 1st stage cannot parse your fs). Do not forget to record the starting LBA address in 1st stage before using. This gives you the ability to use different 2nd stage code each time you reboot.
</p><p>This is just a skeleton to aid you. It will not parse your filesystem, or set up the environment for your kernel. You have to do these on your own. But everything else is done so you can focus on these important matters.
</p><p>stage2.asm:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">;*********************************************************************</span>
<span class="c1">;*                                                                   *</span>
<span class="c1">;*     OS/3D - written by Zoltan Baldaszti (aka Turdus) in 2008      *</span>
<span class="c1">;*              Compilation: fasm stage2.asm stage2.bin              *</span>
<span class="c1">;*                                                                   *</span>
<span class="c1">;*  Example 2nd stage loader for UBRL, compatible with GRUB and      *</span>
<span class="c1">;*  BIOS boot specification 1.0.1 (expansion ROM) too.               *</span>
<span class="c1">;*                                                                   *</span>
<span class="c1">;*  memory occupied: 800-7C00                                        *</span>
<span class="c1">;*                                                                   *</span>
<span class="c1">;*********************************************************************</span>

<span class="c1">;-----------header section-------------</span>
<span class="c1">;UBR header</span>
<span class="w">                </span><span class="nf">USE16</span><span class="w"></span>
<span class="w">                </span><span class="nf">ORG</span><span class="w">                     </span><span class="mi">800</span><span class="no">h</span><span class="w"></span>
<span class="nl">loader:</span><span class="w">         </span><span class="nf">db</span><span class="w">                      </span><span class="mi">55</span><span class="no">h</span><span class="p">,</span><span class="mi">0</span><span class="no">AAh</span><span class="w">                </span><span class="c1">;ROM magic</span>
<span class="w">                </span><span class="nf">db</span><span class="w">                      </span><span class="p">(</span><span class="no">loader_end-loader</span><span class="p">)</span><span class="err">/</span><span class="mi">512</span><span class="w"> </span><span class="c1">;size in 512 blocks</span>
<span class="nl">.executor:</span><span class="w">      </span><span class="nf">jmp</span><span class="w">                     </span><span class="no">near</span><span class="w"> </span><span class="no">realmode_start</span><span class="w">     </span><span class="c1">;entry point</span>
<span class="nl">.checksum:</span><span class="w">      </span><span class="nf">dw</span><span class="w">                      </span><span class="mi">0</span><span class="w">                       </span><span class="c1">;checksum</span>
<span class="err">@@:</span><span class="w">             </span><span class="nf">db</span><span class="w">                      </span><span class="err">&quot;</span><span class="no">Your</span><span class="w"> </span><span class="no">OS</span><span class="w"> </span><span class="no">name</span><span class="w"> </span><span class="no">here</span><span class="err">&quot;</span><span class="w"></span>
<span class="w">                </span><span class="nf">db</span><span class="w">                      </span><span class="mi">18</span><span class="p">-(</span><span class="no">$-@b</span><span class="p">)</span><span class="w"> </span><span class="no">dup</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="nl">.pnpptr:</span><span class="w">        </span><span class="nf">dw</span><span class="w">                      </span><span class="mi">0</span><span class="w"></span>
<span class="nl">.flags:</span><span class="w">         </span><span class="nf">dd</span><span class="w">                      </span><span class="mi">0</span><span class="w"></span>
<span class="c1">;GRUB header</span>
<span class="nf">MB_MAGIC</span><span class="w">	</span><span class="no">equ</span><span class="w">			</span><span class="mi">01</span><span class="no">BADB002h</span><span class="w"></span>
<span class="nf">MB_FLAGS</span><span class="w">	</span><span class="no">equ</span><span class="w">			</span><span class="mi">01000</span><span class="no">h</span><span class="w"></span>
<span class="w">		</span><span class="nf">align</span><span class="w">			</span><span class="mi">8</span><span class="w"></span>
<span class="nl">.mb_header:</span><span class="w">	</span><span class="nf">dd</span><span class="w">			</span><span class="no">MB_MAGIC</span><span class="w">		</span><span class="c1">;magic</span>
<span class="w">		</span><span class="nf">dd</span><span class="w">			</span><span class="no">MB_FLAGS</span><span class="w">		</span><span class="c1">;flags</span>
<span class="w">		</span><span class="nf">dd</span><span class="w">			</span><span class="p">-(</span><span class="no">MB_MAGIC</span><span class="err">+</span><span class="no">MB_FLAGS</span><span class="p">)</span><span class="w">	</span><span class="c1">;checksum (0-magic-flags)</span>
<span class="w">		</span><span class="nf">dd</span><span class="w">			</span><span class="no">.mb_header</span><span class="w">		</span><span class="c1">;our location (GRUB should load us here)</span>
<span class="w">		</span><span class="nf">dd</span><span class="w">			</span><span class="mi">0800</span><span class="no">h</span><span class="w">			</span><span class="c1">;the same... load start</span>
<span class="w">		</span><span class="nf">dd</span><span class="w">			</span><span class="mi">07</span><span class="no">C00h</span><span class="w">			</span><span class="c1">;load end</span>
<span class="w">		</span><span class="nf">dd</span><span class="w">			</span><span class="mi">0</span><span class="no">h</span><span class="w">			</span><span class="c1">;no bss</span>
<span class="w">		</span><span class="nf">dd</span><span class="w">			</span><span class="no">multiboot_start</span><span class="w">		</span><span class="c1">;entry point</span>

<span class="c1">;-----------realmode-protmode stub-------------</span>
<span class="c1">;MEMORY LAYOUT ON EXECUTION:</span>
<span class="c1">;500h		loader and partition type</span>
<span class="c1">;501h		bios drive code of loader</span>
<span class="c1">;506h		starting lba of this stage on disk</span>
<span class="c1">;50Eh		boot disk unique winnt id</span>
<span class="c1">;522h		starting lba of MBR boot partition/GPT table</span>
<span class="c1">;52Ah		size of MBR boot partition/GPT table</span>
<span class="c1">;800h		LDRF header</span>
<span class="c1">;7C00h		MBR boot partition/GPT table preloaded (first 16 sectors)</span>
<span class="c1">;		appropriate for chainloading</span>

<span class="nl">realmode_start:</span><span class="w"> </span><span class="nf">cld</span><span class="w"></span>
<span class="w">                </span><span class="nf">cli</span><span class="w"></span>
<span class="w">                </span><span class="nf">mov</span><span class="w">                     </span><span class="no">sp</span><span class="p">,</span><span class="w"> </span><span class="mi">800</span><span class="no">h</span><span class="w"></span>
<span class="w">                </span><span class="c1">;relocate ourself from ROM to RAM if necessary</span>
<span class="w">                </span><span class="nf">call</span><span class="w">                    </span><span class="no">.getaddress</span><span class="w"></span>
<span class="nl">.getaddress:</span><span class="w">    </span><span class="nf">pop</span><span class="w">                     </span><span class="no">si</span><span class="w"></span>
<span class="w">                </span><span class="nf">mov</span><span class="w">                     </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="no">cs</span><span class="w"></span>
<span class="w">                </span><span class="nf">or</span><span class="w">                      </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">                </span><span class="nf">jnz</span><span class="w">                     </span><span class="no">.reloc</span><span class="w"></span>
<span class="w">                </span><span class="nf">cmp</span><span class="w">                     </span><span class="no">si</span><span class="p">,</span><span class="w"> </span><span class="no">.getaddress</span><span class="w"></span>
<span class="w">                </span><span class="nf">je</span><span class="w">                      </span><span class="no">.noreloc</span><span class="w"></span>
<span class="nl">.reloc:</span><span class="w">         </span><span class="nf">mov</span><span class="w">                     </span><span class="no">ds</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">                </span><span class="nf">xor</span><span class="w">                     </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">                </span><span class="nf">mov</span><span class="w">                     </span><span class="no">es</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">                </span><span class="nf">mov</span><span class="w">                     </span><span class="no">di</span><span class="p">,</span><span class="w"> </span><span class="no">loader</span><span class="w"></span>
<span class="w">                </span><span class="nf">sub</span><span class="w">                     </span><span class="no">si</span><span class="p">,</span><span class="w"> </span><span class="no">.getaddress-loader</span><span class="w"></span>
<span class="w">                </span><span class="nf">mov</span><span class="w">                     </span><span class="no">cx</span><span class="p">,</span><span class="w"> </span><span class="p">((</span><span class="no">loader_last</span><span class="err">+</span><span class="mi">8</span><span class="p">)-</span><span class="no">loader</span><span class="p">)</span><span class="err">/</span><span class="mi">2</span><span class="w"></span>
<span class="w">                </span><span class="na">repnz</span><span class="w">                   </span><span class="nf">movsw</span><span class="w"></span>
<span class="w">                </span><span class="nf">xor</span><span class="w">                     </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">                </span><span class="nf">mov</span><span class="w">                     </span><span class="no">ds</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">                </span><span class="nf">jmp</span><span class="w">                     </span><span class="mi">0</span><span class="p">:.</span><span class="no">relocated</span><span class="w"></span>
<span class="nl">.relocated:</span><span class="w">	</span><span class="c1">;you&#39;ll need to locate boot partition</span>
<span class="w">		</span><span class="c1">;and load it to 7C00h, because neither</span>
<span class="w">		</span><span class="c1">;BIOS nor UBRL have done this for you</span>
<span class="w">		</span><span class="c1">;in this case (loaded from ROM)</span>
<span class="nl">.noreloc:</span><span class="w"></span>
<span class="w">		</span><span class="c1">;do any real mode initialization here</span>
<span class="w">		</span><span class="c1">;(e820, A20 gate etc.)</span>

<span class="w">		</span><span class="nf">lgdt</span><span class="w">			</span><span class="p">[</span><span class="no">GDT_value</span><span class="p">]</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">			</span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="no">cr0</span><span class="w">		</span><span class="c1">;enable protected mode</span>
<span class="w">		</span><span class="nf">or</span><span class="w">			</span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">			</span><span class="no">cr0</span><span class="p">,</span><span class="w"> </span><span class="no">eax</span><span class="w"></span>
<span class="w">		</span><span class="nf">jmp</span><span class="w">			</span><span class="mi">16</span><span class="p">:</span><span class="no">protmode_start</span><span class="w"></span>

<span class="w">		</span><span class="c1">;global descriptor table</span>
<span class="w">		</span><span class="nf">align</span><span class="w">			</span><span class="mi">8</span><span class="w"></span>
<span class="nl">GDT_table:</span><span class="w">	</span><span class="nf">dd</span><span class="w">			</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="w">			</span><span class="c1">;null descriptor</span>
<span class="w">		</span><span class="nf">dd</span><span class="w">			</span><span class="mi">0000</span><span class="no">FFFFh</span><span class="p">,</span><span class="mi">008</span><span class="no">F9200h</span><span class="w">	</span><span class="c1">;flat ds</span>
<span class="w">		</span><span class="nf">dd</span><span class="w">			</span><span class="mi">0000</span><span class="no">FFFFh</span><span class="p">,</span><span class="mi">00</span><span class="no">CF9A00h</span><span class="w">	</span><span class="c1">;32-bit ring0 cs</span>
<span class="nl">GDT_value:</span><span class="w">	</span><span class="nf">dw</span><span class="w">			</span><span class="no">$-GDT_table</span><span class="w"></span>
<span class="w">		</span><span class="nf">dd</span><span class="w">			</span><span class="no">GDT_table</span><span class="w"></span>

<span class="c1">;----------------Multiboot stub-----------------</span>
<span class="c1">;MEMORY LAYOUT ON EXECUTION: see Multiboot spec</span>
<span class="w">		</span><span class="nf">USE32</span><span class="w"></span>
<span class="nl">multiboot_start:</span><span class="w"></span>
<span class="w">		</span><span class="nf">cld</span><span class="w"></span>
<span class="w">		</span><span class="nf">cli</span><span class="w"></span>
<span class="w">		</span><span class="c1">;you&#39;ll need to locate boot partition</span>
<span class="w">		</span><span class="c1">;and load it to 7C00h, because GRUB</span>
<span class="w">		</span><span class="c1">;hasn&#39;t done this for you</span>
<span class="w">		</span><span class="nf">lgdt</span><span class="w">			</span><span class="p">[</span><span class="no">GDT_value</span><span class="p">]</span><span class="w"></span>
<span class="w">		</span><span class="nf">cmp</span><span class="w">			</span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="no">BADB002h</span><span class="w"></span>
<span class="w">		</span><span class="nf">je</span><span class="w">			</span><span class="no">protmode_start</span><span class="w"></span>
<span class="w">		</span><span class="c1">;no GRUB environment available?</span>
<span class="w">		</span><span class="c1">;something really nasty happened, restart computer</span>
<span class="w">		</span><span class="nf">mov</span><span class="w">			</span><span class="no">al</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="no">FEh</span><span class="w"></span>
<span class="w">		</span><span class="nf">out</span><span class="w">			</span><span class="mi">64</span><span class="no">h</span><span class="p">,</span><span class="w"> </span><span class="no">al</span><span class="w"></span>
<span class="w">		</span><span class="nf">hlt</span><span class="w"></span>

<span class="nl">protmode_start:</span><span class="w">	</span><span class="nf">mov</span><span class="w">			</span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">			</span><span class="no">ds</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">			</span><span class="no">es</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">			</span><span class="no">fs</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">			</span><span class="no">gs</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">			</span><span class="no">ss</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w"></span>
<span class="w">		</span><span class="nf">mov</span><span class="w">			</span><span class="no">esp</span><span class="p">,</span><span class="w"> </span><span class="mi">800</span><span class="no">h</span><span class="w"></span>

<span class="w">		</span><span class="c1">;do any prot mode initialization here</span>
<span class="w">		</span><span class="c1">;(irq remap, paging etc.)</span>

<span class="c1">;-----------longmode stub if you want-------------</span>
<span class="w">		</span><span class="c1">;enable long mode</span>

<span class="c1">;*********************************************************************</span>
<span class="c1">;*                        your loader code                           *</span>
<span class="c1">;*********************************************************************</span>
<span class="w">		</span><span class="c1">;put your own kernel loader code here.</span>
<span class="w">		</span><span class="c1">;parse your executable format here.</span>
<span class="w">		</span><span class="c1">;call your kernel&#39;s main here.</span>

<span class="c1">;-----------padding to be multiple of 512----------</span>
<span class="w">                </span><span class="nf">db</span><span class="w">                      </span><span class="p">(</span><span class="mi">511</span><span class="p">-(</span><span class="no">$-loader</span><span class="err">+</span><span class="mi">511</span><span class="p">)</span><span class="w"> </span><span class="no">mod</span><span class="w"> </span><span class="mi">512</span><span class="p">)</span><span class="w"> </span><span class="no">dup</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="nl">loader_end:</span><span class="w"></span>
<span class="c1">;-----------BIOS checksum------------</span>
<span class="nf">chksum</span><span class="w"> </span><span class="err">=</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="na">rep</span><span class="nf">eat</span><span class="w"> </span><span class="no">$-loader</span><span class="w"></span>
<span class="w">                </span><span class="nf">load</span><span class="w"> </span><span class="no">b</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="no">from</span><span class="w"> </span><span class="p">(</span><span class="no">loader</span><span class="err">+%</span><span class="mi">-1</span><span class="p">)</span><span class="w"></span>
<span class="w">                </span><span class="nf">chksum</span><span class="w"> </span><span class="err">=</span><span class="w"> </span><span class="p">(</span><span class="no">chksum</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="no">b</span><span class="p">)</span><span class="w"> </span><span class="no">mod</span><span class="w"> </span><span class="mi">100</span><span class="no">h</span><span class="w"></span>
<span class="nf">end</span><span class="w"> </span><span class="no">repeat</span><span class="w"></span>
<span class="w">                </span><span class="nf">store</span><span class="w"> </span><span class="no">byte</span><span class="w"> </span><span class="p">(</span><span class="mi">100</span><span class="no">h-chksum</span><span class="p">)</span><span class="w"> </span><span class="no">at</span><span class="w"> </span><span class="p">(</span><span class="no">loader.checksum</span><span class="p">)</span><span class="w"></span>

<span class="c1">;-----------bound check-------------</span>
<span class="w">		</span><span class="c1">;fasm will generate an error if your code</span>
<span class="w">		</span><span class="c1">;is bigger than it should be</span>
<span class="w">		</span><span class="nf">db</span><span class="w">			</span><span class="mi">07400</span><span class="no">h-</span><span class="p">(</span><span class="no">$-loader</span><span class="p">)</span><span class="w"> </span><span class="no">dup</span><span class="w"> </span><span class="err">?</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="Testing">Testing</span></h2>
<h3><span class="mw-headline" id="UBRL_in_MBR">UBRL in MBR</span></h3>
<p>Quite straightforward, create a disk image with UBRL in MBR, and record stage2.bin's position at 1B0h.
</p>
<h3><span class="mw-headline" id="UBRL_in_VBR">UBRL in VBR</span></h3>
<p>Create a disk image with your favourite MBR, and put UBRL in the 1st sector of a partition. You still have to record stage2.bin's position at 1B0h in MBR.
</p>
<h3><span class="mw-headline" id="GRUB_Multiboot">GRUB Multiboot</span></h3>
<p>Specify stage2.bin as "kernel" in menu.lst.
</p>
<h3><span class="mw-headline" id="BIOS_ROM">BIOS ROM</span></h3>
<p>Use bochs. Configure optional ROM, specify stage2.bin as ROM's name, and 0xC0000+(vga_bios_size rounded to 2k) as address (as of writing, bochs vga bios is 40960 bytes long, so the address will be 0xCA000). Also modify boot options to boot from "network". Ready to go!
</p>
<!-- 
NewPP limit report
Cached time: 20250211131109
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.073 seconds
Real time usage: 0.353 seconds
Preprocessor visited node count: 91/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 84383/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3173-0!canonical and timestamp 20250211131109 and revision id 13225.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=User:Combuster/Recovered_MBR&amp;oldid=13225">https://wiki.osdev.org/index.php?title=User:Combuster/Recovered_MBR&amp;oldid=13225</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="../Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="../Category:Bootloaders" title="Category:Bootloaders">Bootloaders</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=User%3ACombuster%2FRecovered+MBR" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Recovered_MBR#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-user" class="selected mw-list-item"><a href="Recovered_MBR" title="View the user page [c]" accesskey="c"><span>User page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User_talk:Combuster/Recovered_MBR&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Recovered_MBR"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Combuster/Recovered_MBR&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Combuster/Recovered_MBR&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="../index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="../index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="../Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="../Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="../OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="../OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="../OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="../Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="https://wiki.osdev.org/Special:WhatLinksHere/User:Combuster/Recovered_MBR" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/User:Combuster/Recovered_MBR" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-contributions" class="mw-list-item"><a href="../Special:Contributions/Combuster" title="A list of contributions by this user"><span>User contributions</span></a></li><li id="t-log" class="mw-list-item"><a href="../Special:Log/Combuster"><span>Logs</span></a></li><li id="t-userrights" class="mw-list-item"><a href="../Special:UserRights/Combuster"><span>View user groups</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="../Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Combuster/Recovered_MBR&amp;oldid=13225" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:Combuster/Recovered_MBR&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 2 April 2012, at 17:07.</li>
	<li id="footer-info-0">This page has been accessed 618 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="../OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="../OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="../OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=User:Combuster/Recovered_MBR&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="../resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="../resources/assets/poweredby_mediawiki_132x47.png 1.5x, ../resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.073","walltime":"0.353","ppvisitednodes":{"value":91,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":84383,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250211131109","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":480});});</script>
</body>
</html>