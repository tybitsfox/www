<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Cross-Porting Software - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"50f8a3e60e647292e6f25037","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Cross-Porting_Software","wgTitle":"Cross-Porting Software","wgCurRevisionId":28165,"wgRevisionId":28165,"wgArticleId":3628,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using duplicate arguments in template calls","Pages using deprecated source tags","Level 3 Tutorials","Porting"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Cross-Porting_Software","wgRelevantArticleId":3628,"wgIsProbablyEditable":false,
"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Cross-Porting_Software rootpage-Cross-Porting_Software skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Cross-Porting Software</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Cross-Porting_Software#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Cross-Porting_Software#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear:right; border:1px solid #aaaaaa; background:#eee; text-align:center;;"><tbody><tr><th>Difficulty level</th></tr><tr><td><a href="./File:Difficulty_3.png" class="image"><img alt="Difficulty 3.png" src="images/c/c1/Difficulty_3.png" decoding="async" width="46" height="14" data-file-width="46" data-file-height="14" /></a><br />Advanced</td></tr></tbody></table>
<p>This page is notes on how to port software to your operating system by cross-compiling it. Many core packages use autoconf-generated ./configure script that provide a convenient interface for our purposes. This assumes your operating is somewhat Unix-like. There is a lot of subtle semantics that first-time porters often get wrong and particular packages occasionally misbehave. This tutorial assumes you are porting a package using a conventional configure script (generated with autoconf), but the principles can be adapted to other build systems.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Cross-Porting_Software#Prerequisites"><span class="tocnumber">1</span> <span class="toctext">Prerequisites</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Cross-Porting_Software#System_Root"><span class="tocnumber">2</span> <span class="toctext">System Root</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Cross-Porting_Software#Prefixes"><span class="tocnumber">3</span> <span class="toctext">Prefixes</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="Cross-Porting_Software#Dependencies"><span class="tocnumber">4</span> <span class="toctext">Dependencies</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="Cross-Porting_Software#Patches"><span class="tocnumber">5</span> <span class="toctext">Patches</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="Cross-Porting_Software#Source_Code"><span class="tocnumber">6</span> <span class="toctext">Source Code</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="Cross-Porting_Software#pkg-config"><span class="tocnumber">7</span> <span class="toctext">pkg-config</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="Cross-Porting_Software#Build"><span class="tocnumber">8</span> <span class="toctext">Build</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="Cross-Porting_Software#Porting"><span class="tocnumber">9</span> <span class="toctext">Porting</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="Cross-Porting_Software#Runtime"><span class="tocnumber">10</span> <span class="toctext">Runtime</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="Cross-Porting_Software#Problems"><span class="tocnumber">11</span> <span class="toctext">Problems</span></a>
<ul>
<li class="toclevel-2 tocsection-12"><a href="Cross-Porting_Software#libtool_.la_files"><span class="tocnumber">11.1</span> <span class="toctext">libtool .la files</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="Cross-Porting_Software#Dumb_pkg-config_use"><span class="tocnumber">11.2</span> <span class="toctext">Dumb pkg-config use</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="Cross-Porting_Software#foo-config"><span class="tocnumber">11.3</span> <span class="toctext">foo-config</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="Cross-Porting_Software#Running_Cross-Compiled_Programs"><span class="tocnumber">11.4</span> <span class="toctext">Running Cross-Compiled Programs</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="Cross-Porting_Software#Assuming_the_Worst"><span class="tocnumber">11.5</span> <span class="toctext">Assuming the Worst</span></a></li>
<li class="toclevel-2 tocsection-17"><a href="Cross-Porting_Software#Gnulib"><span class="tocnumber">11.6</span> <span class="toctext">Gnulib</span></a></li>
<li class="toclevel-2 tocsection-18"><a href="Cross-Porting_Software#Custom_Configure_Script"><span class="tocnumber">11.7</span> <span class="toctext">Custom Configure Script</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="Cross-Porting_Software#No_DESTDIR"><span class="tocnumber">11.8</span> <span class="toctext">No DESTDIR</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="Cross-Porting_Software#Packages_Containing_Dependencies"><span class="tocnumber">11.9</span> <span class="toctext">Packages Containing Dependencies</span></a></li>
<li class="toclevel-2 tocsection-21"><a href="Cross-Porting_Software#Exotic_problems"><span class="tocnumber">11.10</span> <span class="toctext">Exotic problems</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-22"><a href="Cross-Porting_Software#Upstreaming_Local_Patches"><span class="tocnumber">12</span> <span class="toctext">Upstreaming Local Patches</span></a></li>
<li class="toclevel-1 tocsection-23"><a href="Cross-Porting_Software#Patch_Collections"><span class="tocnumber">13</span> <span class="toctext">Patch Collections</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Prerequisites">Prerequisites</span></h2>
<p>This is an advanced matter and your operating system needs to have an established user-space and a dedicated toolchain:
</p>
<ul><li>You need a <a href="OS_Specific_Toolchain" title="OS Specific Toolchain">OS Specific Toolchain</a> like <tt>x86_64-myos</tt>.</li>
<li>You need a <a href="C_Library" title="C Library">standard library</a> implementation that provides what the third party software needs.</li></ul>
<h2><span class="mw-headline" id="System_Root">System Root</span></h2>
<dl><dd>Please read this <a href="Meaty_Skeleton#System_Root" title="Meaty Skeleton">article's section on sysroots</a>.</dd></dl>
<p>Your build process needs to involve a system root, a fake root directory for your operating system. Your cross-compiler must be set up to search this directory tree for libraries and headers. I recommend for your build system to look through each of your subprojects and <i>make install</i> them into this system root, then do the same for ports, and finally your build system extracts the desired files from the system root and makes a boot-able image. We will be installing ports into this directory tree. Futher ports may depend on previous ones and it's crucial the system root is searched.
</p>
<h2><span class="mw-headline" id="Prefixes">Prefixes</span></h2>
<p>The build systems of the software installs the software somewhere. This is normally in <tt>${PREFIX}/bin</tt>, <tt>${PREFIX}/lib</tt> and so on. The packages often defaults to <tt>/usr/local</tt>, but this is generally used for site-specific files rather than vendor-provided files (you are a vendor now). Note how if you want to install packages into <tt>/bin</tt> and <tt>/lib</tt>, you set the prefix to the empty string, not a single slash. A prefix is not a directory path in its own right, but something that is added in front of a real directory path.
</p>
<h2><span class="mw-headline" id="Dependencies">Dependencies</span></h2>
<p>Before porting a package, you need to port its dependencies first (and transitively their dependencies as well). You can often find a list of dependencies in the documentation (perhaps look for README or INSTALL files). Try also to run <tt>./configure --help</tt>, this will often list <tt>--with-foo</tt> options if the package depends on libfoo, it will also list which dependencies are optional. See also guides like <a rel="nofollow" class="external text" href="http://www.linuxfromscratch.org/blfs/">Beyond Linux from Scratch</a> as it contains useful dependency information.
</p><p>You should be able to construct a nice directed acylic graph of packages and their dependencies (some edges being optional) and use it to decide the order packages are built. If you are not interested in optional dependencies, you can skip them, but beware: Later package may hard-depend on the package you skipped, and may assume a library was built with support for the packager you skipped.
</p>
<h2><span class="mw-headline" id="Patches">Patches</span></h2>
<p>It is very likely that you will need to patch the packages you port. You need to set yourself up such that you can easily patch the packages with no to low cost in effort. You can help other people by hosting your patch collection somewhere public. It is often nicer to actually fix misbehaving packages than working around the problem in your build system in complex manners.
</p>
<h2><span class="mw-headline" id="Source_Code">Source Code</span></h2>
<p>You need to find the source code for the package you wish to port. This is rather obvious. Generally, it's best to find the latest stable tarball of the package use that. This is preferable to using a git checkout of the package. It's a good idea to save a copy of the original tarball.
</p><p>It's advisable to check whether this is a real release or whether it has been maliciously modified. Many projects provide hash values of their releases or otherwise sign their releases. Configure scripts are highly convenient places to hide malware (if you have the autoconf skills, you can regenerate the configure script and other files and see if they match). Man-in-the-middle attacking in insecure http/ftp download of a tarball is trivial, you can mitigate this danger by downloading from multiple networks and verifying what other people have.
</p><p>You also definitely wish to to read the license for the software and whether it even permits the efforts we are taking here.
</p><p>You extract the source code somewhere appropriate:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span><span class="c1"># Use --extract --file if you have a hard time surviving xkcd 1168.</span>
tar -xf libfoo-4.2.tar.xz
</pre></div>
<h2><span class="mw-headline" id="pkg-config">pkg-config</span></h2>
<p>Libraries increasingly provide pkg-config files that describe where the headers are installed and how to link against the library (and private library dependencies if statically linked). Working with pkg-config is preferable to fighting it (see below on packages rolling their own foo-config program) and it nicely supports system roots and is cross-compile aware. It's possible to compile a custom cross-pkg-config, or you can simply wrap your system one. Make a <tt>x86_64-myos-pkg-config</tt> executable shell script and put it somewhere in your path for the duration of the cross-compilation:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span><span class="ch">#!/bin/sh</span>
<span class="c1"># Fill these in appropriately:</span>
<span class="nb">export</span> <span class="nv">PKG_CONFIG_SYSROOT_DIR</span><span class="o">=</span><span class="nv">$MYOS_SYSROOT</span>
<span class="nb">export</span> <span class="nv">PKG_CONFIG_LIBDIR</span><span class="o">=</span><span class="nv">$MYOS_SYSROOT</span>/usr/lib/pkgconfig
<span class="c1"># TODO: If it works this should probably just be set to the empty string.</span>
<span class="nb">export</span> <span class="nv">PKG_CONFIG_PATH</span><span class="o">=</span><span class="nv">$PKG_CONFIG_LIBDIR</span>
<span class="c1"># Use --static here if your OS only has static linking.</span>
<span class="c1"># TODO: Perhaps it&#39;s a bug in the libraries if their pkg-config files doesn&#39;t</span>
<span class="c1">#       record that only static libraries were built.</span>
<span class="nb">exec</span> pkg-config --static <span class="s2">&quot;</span><span class="nv">$@</span><span class="s2">&quot;</span>
</pre></div>
<p>You then set <tt>PKG_CONFIG=x86_64-myos-pkg-config</tt> to packages use your custom pkg-config instead, and <tt>PKG_CONFIG_FOR_BUILD=pkg-config</tt> so packages that wish to compile local programs use the system pkg-config.
</p>
<h2><span class="mw-headline" id="Build">Build</span></h2>
<p>This section lists the steps that are sufficient for an ideal port, but see below.
</p><p>First you wish to find the <tt>config.sub</tt> file. The GNU coding conventions usually place it at <tt>build-aux/config.sub</tt> to avoid clutter in the main directory. You wish to add your operating system's target name to it, as you did in the <a href="OS_Specific_Toolchain" title="OS Specific Toolchain">OS Specific Toolchain</a> article. This change is required, or otherwise the <tt>--host</tt> value will be rejected. This simple fact means that you likely have to have a small patch for every single port.
</p><p>Secondly, you cross-build the package in this manner:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span><span class="c1"># Potentially unset CC and such here (see configure --help) to prevent local</span>
<span class="c1"># tools from being mistakenly used as cross-tools. Alternatively, set them to</span>
<span class="c1"># your cross-tools unconditionally. Note also the existence of CC_FOR_BUILD in</span>
<span class="c1"># the case of packages that needs to build local tools to build themselves.</span>

./configure --host<span class="o">=</span>x86_64-myos --prefix<span class="o">=</span>/usr
make
make <span class="nv">DESTDIR</span><span class="o">=</span><span class="nv">$SYSROOT</span> install
</pre></div>
<p>This will cross-compile the software and install it under <tt>/usr</tt> on your system, inside your system root as the temporary installation location. Note how many packages remember <tt>--prefix</tt> and use it at runtime to locate their data files. You must not do <tt>--prefix=$SYSROOT/usr</tt> as that means libfoo would look files in <tt>/home/myuser/myos/sysroot/usr/share/libfoo</tt> while running on your operating system instead of <tt>/usr/share/libfoo</tt>. The <tt>DESTDIR</tt> acts as a second prefix for the purpose of installation, it's not revealed to the package before the install step, so it won't mistakenly remember it.
</p><p>Alternatively, instead of setting <tt>DESTDIR</tt> to the system root, you can set it to a temporary location and create an installable binary package from it, and then install the binary package into the system root.
</p>
<h2><span class="mw-headline" id="Porting">Porting</span></h2>
<p>The <tt>make</tt> command likely didn't succeed. You'll need to investigate the build errors and improve your standard library, or improve the package if it is unreasonable.
</p>
<h2><span class="mw-headline" id="Runtime">Runtime</span></h2>
<p>After you cross-compiled the package and installed it onto your operating system, it's time to try it out. If you implemented your operating system and standard library well, it should now work. Likely, especially if you made your own custom standard library, your first real ports won't. You now need to learn to debug programs you know nothing about on your new operating system. Have fun! Suddenly it'll work and you have something to talk about in the 'Aww, Yeah!' forum thread.
</p>
<h2><span class="mw-headline" id="Problems">Problems</span></h2>
<p>Unfortunately, this is the real world and some packages misbehave in manners that breaks our naive cross-compilation. This is a bug in such packages; the practice described so far should be sufficient for well-made packages. Fortunately, community members likely know of such issues and generally work to upstream fixes, see the patch collections below. This section lists common problems and solutions.
</p><p>In case it's a bug in these packages, it's advisable to patch the packages to fix the bug and upstream the bugfix (or report the issue), rather than poorly working around the issues in your build system (in ways that tend to get more and more complex). Generally, the best approach is to make the packages implement the interface we rely on above.
</p>
<h3><span class="mw-headline" id="libtool_.la_files">libtool .la files</span></h3>
<p>Many libraries use libtool and install .la files into the system library directory. These work somewhat like pkg-config files, except often semantically wrong as they are not sysroot aware (but research the <tt>--with-sysroot</tt> option that libtool-aware configure scripts provide, it might save the system root path in the .la files which is wrong). The files can cause the build system to add library directories to the link command that weren't prefixed with the system root, causing the command link with the <tt>/usr/lib</tt> files from your local operating system.
</p><p>It's entirely safe to delete these files, so set up your post-install build steps to delete any .la files on sight. The libraries generally install pkg-config files as well and the programs generally use pkg-config to locate libraries anyways (if not, it's perhaps a bug).
</p>
<h3><span class="mw-headline" id="Dumb_pkg-config_use">Dumb pkg-config use</span></h3>
<p>Some packages simply invoke pkg-config with the raw <tt>pkg-config</tt> command, rather than using the <tt>PKG_CONFIG</tt> and <tt>PKG_CONFIG_FOR_BUILD</tt> variables. That is a bug. The correct logic is to use the variables if they exist and fall back on the raw command otherwise. The shell expression <tt>${PKG_CONFIG:=pkg-config}</tt> is useful as if it is set and non-empty, then it is used, otherwise pkg-config us used.
</p>
<h3><span class="mw-headline" id="foo-config">foo-config</span></h3>
<p>Some packages (like libfreetype, libpng, libsdl, libxml2, and more) install a custom program like <tt>freetype-config</tt> into the bin directory. The idea is packages depending on libfreetype can run <tt>freetype-config --cflags --libs</tt> and it gets the compiler options needed to use the library. This scheme fails horribly in practice, as the bin directory of your operating system is not in your PATH (neither should it be!) and instead the <tt>freetype-config</tt> program of your distribution is used instead. The programs are not even sysroot-aware so it's not added in front of the compiler options. Suddenly your otherwise-nicely cross-compiled programs got linked with a Linux libfreetype with the Linux version of the headers.
</p><p>The solution is to nuke these programs on sight. They're broken and should never be used or installed on your operating system. Tell the upstream developers to stop providing them and provide pkg-config files, and projects using them to use pkg-config instead. This is supposedly why pkg-config was created, to do this once and for all in a proper way. If you see programs using the foo-config programs, patch the configure script so they use pkg-config instead.
</p>
<h3><span class="mw-headline" id="Running_Cross-Compiled_Programs">Running Cross-Compiled Programs</span></h3>
<p>Some packages are not cross-compile aware and use the standard compiler (your cross-compiler) to build a local program that generates parts of the program and then runs the program. This doesn't work, it runs a cross-compiled executable and it won't run on your local operating system. The results vary from execve returning an error, infinite loops, or mysterious crashes. The bug is that the package should have used a variable like <tt>CC_FOR_BUILD</tt> to compile programs for the local system.
</p><p>This occasionally also takes the form of configure tests that are mistakenly run (not just compiled and linked) when cross-compiling. A while ago, a lot of packages checked for Japanese locales by unconditionally running such tests when cross-compiling leading to fun results. The correct behavior is to attempt running this test, and if we are cross-compiling, then assume something reasonable (or delaying the test until the program is actually run).
</p>
<h3><span class="mw-headline" id="Assuming_the_Worst">Assuming the Worst</span></h3>
<p>Some packages take portability to the levels where they want to support broken operating systems and do compatibility magic in these cases. This is often to work around a bug in a particular release of a particular operating system. This compatibility occasionally takes the form of a configure test that needs to be executed. In the event of cross-compilation, these tests needs to assume something. The developers made the error of assuming unknown systems are terribly broken, instead of just using a heuristic that FooBSD (before release 5) is broken and assuming the best about all other systems.
</p><p>The correct solution is for packages to assume the best about unknown operating systems. This shifts the punishment from the good systems to the bad systems (so they break and they have the opportunity to fix bugs). This is not a problem for existing systems, because if the developers care about FooBSD, that's not an unknown system.
</p>
<h3><span class="mw-headline" id="Gnulib">Gnulib</span></h3>
<p>The GNU portability layer takes the form of a collection of files that everyone copies into their packages and then neglect to update often. These files are often deeply integrated into the package (i.e. hard to disable properly). The principle of replacing standard library functions if broken or missing is not too terribly bad - but Gnulib mixes it with a huge paranoia that the host system is terribly broken and assumes the very worst when cross-compiling. The result is that when you cross-compile these ports, huge amounts of compatibility code gets compiled in, and much of this compatibility code does not even work on unknown platforms. Of particular fun is code that needs to integrate deeply into stdio internals or when it replaces your printf. The result is that as you port packages, you often find yourself fixing the same gnulib code over and over (each time subtly different depending on when it was forked). When you improve your stdio implementation to be more standards-compliant, you find yourself needing to fix all those gnulib stdio-internals-aware files all over again, because some silly internal changed.
</p><p>The solution is to scream in horror at how troublesome and unnecessary this scheme is as obviously you are capable of implementing a correct operating system. This racketeering scheme has <tt>#error</tt> statements that tell you to upstream preprocessor conditionals for your operating system, so they can relish in even more complexity that didn't need to exist in the first place.
</p><p><a href="./User:Sortie" title="User:Sortie">Sortie</a> has developed a <a rel="nofollow" class="external text" href="https://gitlab.com/sortix/sortix/wikis/Gnulib">gnulib policy for his OS</a> that describes how to handle gnulib and it has a long list of secret autoconf variables that makes gnulib assume everything is perfect.
</p>
<h3><span class="mw-headline" id="Custom_Configure_Script">Custom Configure Script</span></h3>
<p>Some packages considers autoconf to be hellish and refuses to use it. They occasionally replace an autoconf-generated configure script with a hand-written one. This is well, but they unfortunately often fail to completely implement the same interface and don't support cross-compilation. You can attempt to patch the configure script to it implements the same interface, or do whatever else gets the job done. You probably want to yell at the developers.
</p>
<h3><span class="mw-headline" id="No_DESTDIR">No DESTDIR</span></h3>
<p>The package might not support the <tt>DESTDIR</tt> variable. You should patch the <tt>Makefile</tt> (perhaps <tt>Makefile.in</tt>) to support it and tell the upstream developers. Perhaps it's called something else like <tt>INSTALLROOT</tt>, you can rename it in the Makefile or add <tt>INSTALLROOT&#160;?= $(DESTDIR)</tt>.
</p>
<h3><span class="mw-headline" id="Packages_Containing_Dependencies">Packages Containing Dependencies</span></h3>
<p>Sometimes packages contain copies of their dependencies as subdirectories. If you are really unlucky, they get used instead of the real deal. That means you have to port a two year old version all over again. If you are more unlucky, you get something that actually compiles on your operating system, but contains unfixed bugs and has security issues and this gets silently used. Extra fun is if they fixed bugs or enhanced the library and this is not in the upstream version. Tell upstream projects to get their act together if you see it, it's your responsibility to provide dependencies for a good reason.
</p>
<h3><span class="mw-headline" id="Exotic_problems">Exotic problems</span></h3>
<p>As you start porting packages that rarely get ported or cross-compiled, you'll likely start finding some seriously messed up packages. For instance, I once found a library that stores the path to the compiler and the compiler options in a header, so other libraries/programs depending on it could locate the compiler that way (and they did) - despite the fact they also had a full and generated configure script. At some point, you should reconsider whether this is actually software you want to port.
</p>
<h2><span class="mw-headline" id="Upstreaming_Local_Patches">Upstreaming Local Patches</span></h2>
<p>As you port more packages, you gradually get a patch collection. Many of these patches likely works around issues in your system, but other patches solves general issues in the packages. Ideally, you should not need to patch packages at all. Though, your operating system is not terribly important to support in the upstream version and any patches will likely go stale soon as your operating system improves. However, the patches not related to your operating system is likely of value upstream (or to the other osdever's that also port stuff). You should send such patches upstream or file bug reports. In the long run, it decreases the size of your patch collection and makes it more maintainable.
</p>
<h2><span class="mw-headline" id="Patch_Collections">Patch Collections</span></h2>
<p>It is probable that other community members have already ported a particular package. Their patches likely contain insight into how troublesome it is to do a port and what needs to be done. You can often find a collection of all their local patches in a central location.
</p>
<ul><li><a href="./User:Sortie" title="User:Sortie">Sortie</a> has a <a rel="nofollow" class="external text" href="https://pub.sortix.org/sortix/release/nightly/patches/">large collection of patches</a> and <a rel="nofollow" class="external text" href="https://gitlab.com/sortix/sortix/wikis/Ports">notes on each port</a>.</li></ul>
<!-- 
NewPP limit report
Cached time: 20250211124733
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.042 seconds
Real time usage: 0.428 seconds
Preprocessor visited node count: 204/1000000
Post‐expand include size: 372/2097152 bytes
Template argument size: 84/2097152 bytes
Highest expansion depth: 23/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 2197/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
106.77%    5.235      4 Template:If
100.00%    4.903      1 Template:Rating
100.00%    4.903      1 -total
 93.90%    4.604      4 Template:Show1
 22.08%    1.083      4 Template:Eq
 10.67%    0.523      4 Template:Eq1
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3628-0!canonical and timestamp 20250211124732 and revision id 28165.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Cross-Porting_Software&amp;oldid=28165">https://wiki.osdev.org/index.php?title=Cross-Porting_Software&amp;oldid=28165</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_duplicate_arguments_in_template_calls&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using duplicate arguments in template calls (page does not exist)">Pages using duplicate arguments in template calls</a></li><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Level_3_Tutorials" title="Category:Level 3 Tutorials">Level 3 Tutorials</a></li><li><a href="./Category:Porting" title="Category:Porting">Porting</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Cross-Porting+Software" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Cross-Porting_Software#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Cross-Porting_Software" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:Cross-Porting_Software&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Cross-Porting_Software"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Cross-Porting_Software&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Cross-Porting_Software&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Cross-Porting_Software" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Cross-Porting_Software" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Cross-Porting_Software&amp;oldid=28165" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Cross-Porting_Software&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 10 July 2023, at 14:49.</li>
	<li id="footer-info-0">This page has been accessed 3,312 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Cross-Porting_Software&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.042","walltime":"0.428","ppvisitednodes":{"value":204,"limit":1000000},"postexpandincludesize":{"value":372,"limit":2097152},"templateargumentsize":{"value":84,"limit":2097152},"expansiondepth":{"value":23,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":2197,"limit":5000000},"timingprofile":["106.77%    5.235      4 Template:If","100.00%    4.903      1 Template:Rating","100.00%    4.903      1 -total"," 93.90%    4.604      4 Template:Show1"," 22.08%    1.083      4 Template:Eq"," 10.67%    0.523      4 Template:Eq1"]},"cachereport":{"timestamp":"20250211124733","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":533});});</script>
</body>
</html>