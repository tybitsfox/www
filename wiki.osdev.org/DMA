<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>ISA DMA - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"e0b0033b2b6d3c872d841790","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"ISA_DMA","wgTitle":"ISA DMA","wgCurRevisionId":29156,"wgRevisionId":29156,"wgArticleId":1467,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Storage"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"ISA_DMA","wgRelevantArticleId":1467,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRedirectedFrom":"DMA",
"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgInternalRedirectTargetUrl":"/ISA_DMA","wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["mediawiki.action.view.redirect","site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<link rel="canonical" href="ISA_DMA"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-ISA_DMA rootpage-ISA_DMA skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">ISA DMA</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"><span class="mw-redirectedfrom">(Redirected from <a href="https://wiki.osdev.org/index.php?title=DMA&amp;redirect=no" class="mw-redirect" title="DMA">DMA</a>)</span></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="DMA#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="DMA#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><dl><dt>The main points about ISA DMA are</dt>
<dd></dd></dl>
<ul><li>ISA DMA is not the same thing as PCI Busmastering DMA;</li>
<li>ISA DMA channels 1, 2 and 3 are available for 8 bit transfers to ISA peripherals;</li>
<li>ISA DMA channels 5, 6 and 7 are available for 16 bit transfers to ISA peripherals;</li>
<li>Transfers must not cross physical 64 KB boundaries and must never be bigger than 64 KB;</li>
<li>Transfers must be physically contiguous, and can only target the lowest 16 MB of physical memory;</li>
<li>ISA DMA is slow - theoretically 4.77 MB/second, but more like 400 KB/second due to ISA bus protocols;</li>
<li>ISA DMA frees up CPU resources, but adds an extremely heavy load to the memory bus;</li>
<li>Very few devices currently use ISA DMA -- only internal floppies, some embedded sound chips, some parallel ports, and some serial ports.</li></ul>
<p>Notes:
</p>
<ul><li>Sound Blaster and Sound Blaster PRO only support 8 bit DMA;</li>
<li><a href="Sound_Blaster_16" title="Sound Blaster 16">Sound Blaster 16</a>+ supports both;</li>
<li><a href="https://wiki.osdev.org/index.php?title=Floppy_disk_controllers&amp;action=edit&amp;redlink=1" class="new" title="Floppy disk controllers (page does not exist)">Floppy disk controllers</a> only support 8 bit DMA and are hardwired to use DMA Channel 2.</li></ul>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="DMA#There_Is_More_Than_One_Kind_of_DMA_on_a_PC"><span class="tocnumber">1</span> <span class="toctext">There Is More Than One Kind of DMA on a PC</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="DMA#ISA_DMA_Background"><span class="tocnumber">2</span> <span class="toctext">ISA DMA Background</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="DMA#Technical_Details"><span class="tocnumber">3</span> <span class="toctext">Technical Details</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="DMA#Programming_Details"><span class="tocnumber">4</span> <span class="toctext">Programming Details</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="DMA#16_bit_issues"><span class="tocnumber">4.1</span> <span class="toctext">16 bit issues</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="DMA#Physical_Memory_vs._Paging"><span class="tocnumber">4.2</span> <span class="toctext">Physical Memory vs. Paging</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="DMA#Buffer_Size"><span class="tocnumber">4.3</span> <span class="toctext">Buffer Size</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="DMA#The_Flip-Flop"><span class="tocnumber">4.4</span> <span class="toctext">The Flip-Flop</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="DMA#Masking_DRQ"><span class="tocnumber">4.5</span> <span class="toctext">Masking DRQ</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="DMA#Transfer_Length"><span class="tocnumber">4.6</span> <span class="toctext">Transfer Length</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="DMA#Interrupt_on_Completion"><span class="tocnumber">4.7</span> <span class="toctext">Interrupt on Completion</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="DMA#The_Registers"><span class="tocnumber">4.8</span> <span class="toctext">The Registers</span></a>
<ul>
<li class="toclevel-3 tocsection-13"><a href="DMA#Useful_Registers"><span class="tocnumber">4.8.1</span> <span class="toctext">Useful Registers</span></a></li>
<li class="toclevel-3 tocsection-14"><a href="DMA#The_Other_Registers"><span class="tocnumber">4.8.2</span> <span class="toctext">The Other Registers</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-15"><a href="DMA#Examples"><span class="tocnumber">5</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2 tocsection-16"><a href="DMA#Floppy_Disk_DMA_Initialization"><span class="tocnumber">5.1</span> <span class="toctext">Floppy Disk DMA Initialization</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-17"><a href="DMA#References"><span class="tocnumber">6</span> <span class="toctext">References</span></a>
<ul>
<li class="toclevel-2 tocsection-18"><a href="DMA#Articles"><span class="tocnumber">6.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="DMA#External_Links"><span class="tocnumber">6.2</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="There_Is_More_Than_One_Kind_of_DMA_on_a_PC">There Is More Than One Kind of DMA on a PC</span></h2>
<p>Modern PCI controllers always have their own 'Busmastering DMA', which is far better than ISA DMA. Even USB floppy drives send their DMA
data using PCI Busmastering, through the PCI USB controller.
PCI Busmasters can access memory with 32 bit addressing. Newer PCI cards are starting to support 64 bit addressing (although at the moment most
don't). Typically PCI cards use 'scatter-gather' bus mastering, where one page is used as a directory of data pages. This almost completely overcomes
the "physical memory only" limitation of all forms of DMA.
</p><p><br />
</p>
<h2><span class="mw-headline" id="ISA_DMA_Background">ISA DMA Background</span></h2>
<p><b>ISA DMA</b> (<i>Industry Standard Architecture Direct Memory Access</i>), like ISA itself, is an <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Appendix_(anatomy)">appendix</a> for modern PCs. It is used by the
internal floppy disk controller, ISA sound cards, ISA network cards, and parallel ports (if they support ECP mode). Whilst interrupt, keyboard
and timer interface circuits have obvious and relevant uses, the ISA DMA controller and its programming interface are still well and truly stuck in the
1970s where they were first designed.
</p><p>The idea behind DMA is that you can set up a 'channel' with an address pointing into memory and the length of the data to be transferred. Once set up, the
CPU can tell the peripheral owning the channel to do whatever it is supposed to do (e.g. read a sector). Then the CPU can go do something else.
When the memory bus isn't being used by the CPU, the DMA chip takes over and transfers data between the peripheral and memory without involving the CPU. When
the transfer is complete (e.g. an entire sector has been sent to the floppy drive) the DMA chip then signals that it is finished. The DMA chip can even
signal if it has run out of data, allowing the system to locate the next block of data to transfer on the same DMA transaction.
DMA can improve the speed of a system quite a bit and was borrowed by Intel (who designed the DMA controller chip) from the old 1960s mainframes which had
DMA channels for all devices (CPUs weren't all on a single chip and very slow back then).
</p><p>Of course all good ideas can have downsides and while Intel can't really be blamed for what is about to be described, IBM certainly can.
</p><p>In the beginning there was a PC, but the PC was slow. IBM looked down from the heavens and said "Slap on a DMA controller -- that should speed it up." IBM's
heart was in the right place; its collective brains were elsewhere as the DMA controller never met the needs of the system. The PC/AT standard contains 2
Intel 8237A DMA chips, connected as Master/Slave. The second chip is Master, and its first line (Channel 4) is used by the first chip, which is Slave. (This
is unlike the interrupt controller, where the first chip is Master.) The 8237A was designed for the old 8080 8-bit processor and this is probably the main
reason for so many DMA problems. The 8088 and 8086 processors chosen by IBM for its PC were too advanced for the DMA controller.
</p><p>Previously it was mentioned that a DMA controller is able to signal completion and even ask for more information. Unfortunately this would make expansion
slots too big, so IBM left all of the connections to the DMA chips off. The only time you know when a transfer is complete is for a peripheral to signal an
interrupt. This implies that all peripherals using an ISA DMA channel are limited to no more than 64 KB transfers for fear of upsetting the DMA controller.
</p><p>Even with the PC/AT, IBM began bypassing the ISA DMA used in the PC/XT and used <a href="ATA_PIO_Mode" title="ATA PIO Mode">ATA PIO Mode</a> for the hard disk. This
was because of the 64 KB limitations outlined above and the fact that the 286 processor could perform 16 bit transactions at 6 MHz. Even the ISA bus could
run at a speed of up to 12 MHz, far faster than the 4.77 MHz the DMA controller was running at.
</p><p>Expansion card designers were also upset with DMA's lack of capabilities, noticeably 'Hard-Card' hard disk expansion card manufacturers who depended on the
speed of data transfer.
</p><p>To get around the limitations of the 'on board' DMA controller, expansion card manufacturers began to put their own DMA controllers on their expansion
cards. They functioned exactly the same way as the 'on board' DMA, 'stealing memory bus cycles' when the processor wasn't looking and thus improving the
performance of the system as a whole. These "ISA Bus Masters" are still usually limited to the lower 16 MiB of memory, but do not have the 4.77 MHz issue.
This trend continued through the creation of the PCI bus, which eventually entirely replaced the ISA bus in PCs.
</p>
<h2><span class="mw-headline" id="Technical_Details">Technical Details</span></h2>
<p>Each 8237 DMA chip has 4 DMA channels. DMA0-DMA3 on the first chip and DMA4-DMA7 on the second. The first DMA controller is wired up for 8 bit transfers,
while the second is wired up for 16 bit transfers. On some tutorials or other wiki articles, you will sometimes see the <b>second</b> DMA chip (channels 4 to 7) labeled as the "<b>master</b>" controller, and the first (channels 0 to 3) called the "slave". This is highly confusing, and these terms will not be used again, here.
</p><p>DMA Channel 0 is unavailable as it was used for a short time for DRAM memory refresh, and remains reserved because of this (even though modern computers
don't use it). DMA channel 4 cannot be used for peripherals because it is used for cascading the other DMA controller.
</p><p>The internal address registers of the DMA controller are only 16 bits. In order to extend this, IBM added one <i>external</i> "page register" byte per channel,
allowing access to 16 MB of memory (24 bits total). If a DMA transfer crosses a 64 KB boundary, the internal address register wraps around to zero,
and the external page register is <b>not</b> incremented. The DMA controller will happily continue the transfer with whatever data it finds at
the new address.
</p><p>ISA-based DMA controllers are specified to run at 4.77 MHz. <b>No exceptions</b>. If the "front-side" (memory) bus of a system runs at 133 MHz, it will be
artificially slowed down to 4.77 MHz when transferring each ISA DMA byte/word. This includes EISA and PS/2 32-bit
controllers, even though these controllers have an extra page register (which allows a 4 GiB addressing space)
and the ability to do 32 bit transfers. (These DMA controllers exist only on EISA and MCA systems, which are now obsolete and are not further
described here.)
</p><p><br />
</p>
<h2><span class="mw-headline" id="Programming_Details">Programming Details</span></h2>
<h3><span class="mw-headline" id="16_bit_issues">16 bit issues</span></h3>
<p>The 16 bit channels (5, 6, and 7) have a special addressing scheme to handle the way they increment addresses. The internal registers increment by 1,
but the memory address needs to be incremented by 2 between each access. The solution is that the "start address" that the CPU stores in the DMA controller
needs to be shifted right by 1 bit. On each memory access, this internal 16 bit address value is incremented by one, then that value is taken and shifted
one bit to the left (clearing the lower bit) before being used as an address. The external "page register" addressing byte is then appended in the normal
way. It is important to note that the upper bit of the internal address is <b>lost</b> when it is shifted left -- it is not ORed into the page register byte.
This prevents DMA transfers bigger than 64 KB from working even though they should be technically possible for 16 bit channels, because the address register
will effectively wrap around to zero without incrementing the page register byte.
</p>
<h3><span class="mw-headline" id="Physical_Memory_vs._Paging">Physical Memory vs. Paging</span></h3>
<p>Paged memory mapping is exclusively controlled by the CPU. The whole point of DMA is to bypass the CPU. Therefore, no DMA can ever access any virtual
memory addresses. All DMA is always done on physical memory addresses only. ISA DMA has a 16 MB physical address limit.
</p><p>Since DMA runs independently of the CPU, it is important that an OS allocates a block of contiguous physical memory for the DMA transfer in
a way that prevents that memory from being used for any other purpose, or swapped out, until the DMA transfer is complete.
</p><p>Note: VM86 mode does not use <i>physical</i> addressing. The memory addresses are <i>fake</i>. In VM86 mode the OS must emulate any DMA transactions on
behalf of an application.
</p>
<h3><span class="mw-headline" id="Buffer_Size">Buffer Size</span></h3>
<p>A typical 1.44 MB floppy disk can easily transfer 36 sectors of data in a single transfer. This is only 18 KB. The biggest internal floppy with
worst-case formatting may be able to transfer 84 sectors at once. This is still only 42 KB. A Soundblaster card may run best with a 64 KB buffer. It
is never necessary to try to double-buffer ISA DMA transfers, because they are so slow anyway. There are at most 6 usable DMA channels, and it is not
necessary to allocate a full 64 KB to each of them. Putting all of this together, any OS should be easily able to allocate all the ISA DMA physical
memory that it needs from a 256 KB pool, or even only half of that.
</p>
<h3><span class="mw-headline" id="The_Flip-Flop">The Flip-Flop</span></h3>
<p>Many devices on a PC (e.g. ATA disk drives) use 8 bit IO Ports to receive 16 bit values. This is done using a flip-flop. The device expects the low
byte first. As soon as it receives a byte, the flip-flop changes state and then the device expects the high byte. When the high byte is received,
the flip-flop changes state again, and the device expects a new low byte. Usually, each 16 bit 'register' will have its own flip-flop, but the ISA
DMA controller has a problem regarding this.
</p><p>On a 8237 chip, there is <b>only one</b> flip-flop. And there are eight of the 16 bit registers. And there can be up to three device drivers all competing
for the use of that one flip-flop simultaneously.
</p><p>This creates two serious problems. One is "contention issues". The other is that it is difficult to be sure what state the flip-flop is currently in.
The standard solution for dealing with the flip-flop state issue is to reset the flip-flop to "low byte" state every single time you want to use it, just
so you can be certain it is in the proper state before sending bytes. There are only two solutions to "contention": either use a <a href="https://wiki.osdev.org/index.php?title=Lock&amp;action=edit&amp;redlink=1" class="new" title="Lock (page does not exist)">lock</a>, or allow only
one ISA DMA driver, so that contention is impossible.
</p>
<h3><span class="mw-headline" id="Masking_DRQ">Masking DRQ</span></h3>
<p>Setting up a DMA transfer always requires setting up both "ends" of the transfer. That is, whichever peripheral owns the DMA channel needs to be told
to transfer a block of data via DMA. And the DMA controller needs to be told the memory address, the transfer length, perhaps a transfer "mode", and
a transfer direction (read or write). So, one of these two things always needs to be done <i>first</i> -- and it is usually the peripheral that has a long
latency time before being ready to transfer the first byte. If you set up the peripheral first, however, its first DMA request signal (often called
DRQ) may arrive while you are in the middle of setting up the DMA controller.
</p><p>The answer is to mask DRQ for a particular channel while you are initializing the DMA controller. There are three ways of temporarily disabling channels
described below.
</p>
<h3><span class="mw-headline" id="Transfer_Length">Transfer Length</span></h3>
<p>The value that gets stored into each Count Register is always the transfer length (either bytes or words) <b>minus 1</b>. If you forget to subtract
the one, you will get an error on your transfer.
</p>
<h3><span class="mw-headline" id="Interrupt_on_Completion">Interrupt on Completion</span></h3>
<p>As implemented in a PC, the DMA controller can not send interrupts. Hopefully, whichever peripheral "owns" each DMA channel will send the CPU an
interrupt when a transfer completes. However, some peripherals may <b>not</b> send an interrupt if a transfer fails with an error. As always, timeouts
are important.
</p>
<h3><span class="mw-headline" id="The_Registers">The Registers</span></h3>
<p>The master and slave DMA controllers are very similar, so (to save space) both of them have been combined into the following table. Please try
not to let this confuse you.
Note: for Address and Count Registers on channels 5 to 7, see <a href="DMA#16_bit_issues">16 bit issues</a> above.
</p><p>Each 8237A has 18 registers, addressed via the I/O Port bus:
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1&#125;&#125;&#125;">

<tbody><tr>
<th>Channels 0-3
</th>
<th>Channels 4-7
</th>
<td>
</td>
<td>
</td>
<td>
</td></tr>
<tr>
<th>IO Port
</th>
<th>IO Port
</th>
<th>Size
</th>
<th>Read or Write
</th>
<th>Function
</th></tr>
<tr>
<td>0x00
</td>
<td>0xC0
</td>
<td>Word
</td>
<td>W
</td>
<td>Start Address Register channel 0/4 (unusable)
</td></tr>
<tr>
<td>0x01
</td>
<td>0xC2
</td>
<td>Word
</td>
<td>W
</td>
<td>Count Register channel 0/4 (unusable)
</td></tr>
<tr>
<td>0x02
</td>
<td>0xC4
</td>
<td>Word
</td>
<td>W
</td>
<td>Start Address Register channel 1/5
</td></tr>
<tr>
<td>0x03
</td>
<td>0xC6
</td>
<td>Word
</td>
<td>W
</td>
<td>Count Register channel 1/5
</td></tr>
<tr>
<td>0x04
</td>
<td>0xC8
</td>
<td>Word
</td>
<td>W
</td>
<td>Start Address Register channel 2/6
</td></tr>
<tr>
<td>0x05
</td>
<td>0xCA
</td>
<td>Word
</td>
<td>W
</td>
<td>Count Register channel 2/6
</td></tr>
<tr>
<td>0x06
</td>
<td>0xCC
</td>
<td>Word
</td>
<td>W
</td>
<td>Start Address Register channel 3/7
</td></tr>
<tr>
<td>0x07
</td>
<td>0xCE
</td>
<td>Word
</td>
<td>W
</td>
<td>Count Register channel 3/7
</td></tr>
<tr>
<td>0x08
</td>
<td>0xD0
</td>
<td>Byte
</td>
<td>R
</td>
<td>Status Register
</td></tr>
<tr>
<td>0x08
</td>
<td>0xD0
</td>
<td>Byte
</td>
<td>W
</td>
<td>Command Register
</td></tr>
<tr>
<td>0x09
</td>
<td>0xD2
</td>
<td>Byte
</td>
<td>W
</td>
<td>Request Register
</td></tr>
<tr>
<td>0x0A
</td>
<td>0xD4
</td>
<td>Byte
</td>
<td>W
</td>
<td>Single Channel Mask Register
</td></tr>
<tr>
<td>0x0B
</td>
<td>0xD6
</td>
<td>Byte
</td>
<td>W
</td>
<td>Mode Register
</td></tr>
<tr>
<td>0x0C
</td>
<td>0xD8
</td>
<td>Byte
</td>
<td>W
</td>
<td>Flip-Flop Reset Register
</td></tr>
<tr>
<td>0x0D
</td>
<td>0xDA
</td>
<td>Byte
</td>
<td>R
</td>
<td>Intermediate Register
</td></tr>
<tr>
<td>0x0D
</td>
<td>0xDA
</td>
<td>Byte
</td>
<td>W
</td>
<td>Master Reset Register
</td></tr>
<tr>
<td>0x0E
</td>
<td>0xDC
</td>
<td>Byte
</td>
<td>W
</td>
<td>Mask Reset Register
</td></tr>
<tr>
<td>0x0F
</td>
<td>0xDE
</td>
<td>Byte
</td>
<td>RW
</td>
<td>MultiChannel Mask Register (reading is undocumented, but it works!)
</td></tr>
</tbody></table>
<p>Each Channel also has an external R/W Page Address Register that contains the upper 8 bits of the 24 bit transfer memory address:
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1&#125;&#125;&#125;">

<tbody><tr>
<td>0x87
</td>
<td>Channel 0 Page Address Register (unusable)
</td></tr>
<tr>
<td>0x83
</td>
<td>Channel 1 Page Address Register
</td></tr>
<tr>
<td>0x81
</td>
<td>Channel 2 Page Address Register
</td></tr>
<tr>
<td>0x82
</td>
<td>Channel 3 Page Address Register
</td></tr>
<tr>
<td>0x8F
</td>
<td>Channel 4 Page Address Register (unusable)
</td></tr>
<tr>
<td>0x8B
</td>
<td>Channel 5 Page Address Register
</td></tr>
<tr>
<td>0x89
</td>
<td>Channel 6 Page Address Register
</td></tr>
<tr>
<td>0x8A
</td>
<td>Channel 7 Page Address Register
</td></tr>
</tbody></table>
<h4><span class="mw-headline" id="Useful_Registers">Useful Registers</span></h4>
<dl><dt>Single Channel Mask Registers 0x0A and 0xD4 (Write)</dt></dl>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1&#125;&#125;&#125;">

<tbody><tr>
<td>Bit 7
</td>
<td>Bit 6
</td>
<td>Bit 5
</td>
<td>Bit 4
</td>
<td>Bit 3
</td>
<td>Bit 2
</td>
<td>Bit 1
</td>
<td>Bit 0
</td></tr>
<tr>
<td>
</td>
<td>
</td>
<td>
</td>
<td>
</td>
<td>
</td>
<td>MASK_ON
</td>
<td>SEL 1
</td>
<td>SEL 0
</td></tr></tbody></table>
<p><br />
These registers are used to mask (or unmask) DRQ for a single channel only, on either the master or slave DMA chip.
That is, if you do not want to figure out the mask states of all the other channels, you can mask/unmask DRQ for one channel at a time.
Use the SEL 0 and 1 bits to select the channel, and the MASK_ON bit to set or clear masking for it.
Note that masking DMA channel 4 will mask 7, 6, 5 and 4 due to cascading.
</p><p><br />
</p>
<dl><dt>MultiChannel Mask Registers 0x0F and 0xDE (Read and Write)</dt></dl>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1&#125;&#125;&#125;">

<tbody><tr>
<td>Bit 7
</td>
<td>Bit 6
</td>
<td>Bit 5
</td>
<td>Bit 4
</td>
<td>Bit 3
</td>
<td>Bit 2
</td>
<td>Bit 1
</td>
<td>Bit 0
</td></tr>
<tr>
<td>
</td>
<td>
</td>
<td>
</td>
<td>
</td>
<td>MASK3
</td>
<td>MASK2
</td>
<td>MASK1
</td>
<td>MASK0
</td></tr></tbody></table>
<p>Setting the appropriate bits to 0 or 1 allows you to unmask or mask (respectively) DRQ for those channels. Using this register means that your driver needs
to know the desired mask states of <i>all</i> the channels at that moment. There are several ways to do this, but one is simply to read this register, first.
Note that masking DMA channel 4 will mask 7, 6, 5 and 4 due to cascading.
</p><p><br />
</p>
<dl><dt>DMA Mode Registers 0x0B and 0xD6 (Write)</dt></dl>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1&#125;&#125;&#125;">

<tbody><tr>
<td>Bit 7
</td>
<td>Bit 6
</td>
<td>Bit 5
</td>
<td>Bit 4
</td>
<td>Bit 3
</td>
<td>Bit 2
</td>
<td>Bit 1
</td>
<td>Bit 0
</td></tr>
<tr>
<td>MOD1
</td>
<td>MOD0
</td>
<td>DOWN
</td>
<td>AUTO
</td>
<td>TRA1
</td>
<td>TRA0
</td>
<td>SEL1
</td>
<td>SEL0
</td></tr></tbody></table>
<p>Setting this register is a little tricky as it depends highly on the peripheral you are programming the DMA controller for. However, the
driver for the peripheral is the entity that needs to set this register, and it should know what mode the peripheral needs.
</p>
<ul><li><b>SEL0</b> and <b>SEL1</b> select the channel you want to change;</li>
<li><b>TRA0</b> and <b>TRA1</b> selects the transfer type;
<ul><li>0b00 runs a self test of the controller;</li>
<li>0b01 Peripheral is writing to memory;</li>
<li>0b10 Peripheral is reading from memory;</li>
<li>0b11 invalid.</li></ul></li>
<li><b>AUTO</b>: When this bit is set, after a transfer has completed the channel resets itself to the address and count values you programmed into it. This is great for floppy transfers. Read in a track - the values set themselves up for reading again immediately. For writing you'd only need to alter the transfer mode - not the addresses. Some expansion cards do not support auto-init DMA such as Sound Blaster 1.x. These devices will crash if used with auto-init DMA. Sound Blaster 2.0 and later do support auto-init DMA.</li>
<li><b>DOWN</b>: Reverses the memory order of the data, when set. Memory is accessed from high addresses down to low addresses (the address is decremented between each transfer).</li>
<li><b>MOD0</b> and <b>MOD1</b>: This is where some problems can arise based on the peripheral the DMA controller is attached to. The DMA controller has several modes:
<ul><li>0b00 = Transfer on Demand;</li>
<li>0b01 = Single DMA Transfer;</li>
<li>0b10 = Block DMA Transfer;</li>
<li>0b11 = Cascade Mode (use to cascade another DMA controller).</li></ul></li></ul>
<p>Single transfer mode is good for peripherals than cannot cache a lot of data at once.
Non-82077AA Floppy controllers, Sound Blaster, and Sound Blaster Pro should use Single Transfer DMA Mode.
</p><p>Block transfer mode is good for peripherals that can buffer entire blocks of information. An example of this is a hard disk controller board.
</p><p>Demand transfer mode is good for peripherals that start and stop intermittently such as a tape drive. The drive can read a whole load of information for as
long as it can and the suspend the transfer to move to another section of the tape. Newer floppy controllers also work well with demand transfer because
they have FIFO buffers to store information being read and written (but you need to set up the FIFO properly). The peripheral controls the flow, and as
the information flow is uninterrupted, performance can be gained. CPUs in these later computers generally have caches and can continue working
uninterrupted during a demand DMA transfer. Older computers will slow down as their CPUs wait for the memory bus to become available.
</p>
<dl><dt>Flip-Flop Reset Registers 0x0C and 0xD8 (Write)</dt>
<dt>Master Reset Registers 0x0D and 0xDA (Write)</dt>
<dt>Mask Reset Registers 0x0E and 0xDC (Write)</dt></dl>
<p>Send any value to the Reset registers to activate them.
Master Reset sets Flip-Flop low, clears Status, and sets all Mask bits ON.
Mask Reset sets all Mask bits OFF.
</p><p>The following statement from the previous wiki article needs to be verified on real hardware, because it is likely to be wrong: "The Reset Flip-Flop command
must be sent <i>before any</i> 16 bit transaction. The flip-flop <i>does not reset</i> after the DMA controller has received the second byte."
</p><p><br />
</p>
<h4><span class="mw-headline" id="The_Other_Registers">The Other Registers</span></h4>
<dl><dt>Status Registers 0x08 and 0xD0	(Read)</dt></dl>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1&#125;&#125;&#125;">

<tbody><tr>
<td>Bit 7
</td>
<td>Bit 6
</td>
<td>Bit 5
</td>
<td>Bit 4
</td>
<td>Bit 3
</td>
<td>Bit 2
</td>
<td>Bit 1
</td>
<td>Bit 0
</td></tr>
<tr>
<td>REQ3
</td>
<td>REQ2
</td>
<td>REQ1
</td>
<td>REQ0
</td>
<td>TC3
</td>
<td>TC2
</td>
<td>TC1
</td>
<td>TC0
</td></tr></tbody></table>
<ul><li>REQ3-0: When set: DMA Request Pending.</li>
<li>TC3-0: When set: Transfer Complete.</li>
<li>Reading this register will clear the TC bits.</li></ul>
<p>This register isn't very important in light of the fact that the 8237 can't send an IRQ to tell you that it has finished. Usually there is no need to poll
this register as the peripheral (at the other end of the DMA) will send an interrupt when a transaction has completed.
</p><p><br />
</p>
<dl><dt>Command Registers 0x08 and 0xD0 (Write)</dt></dl>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1&#125;&#125;&#125;">

<tbody><tr>
<td>Bit 7
</td>
<td>Bit 6
</td>
<td>Bit 5
</td>
<td>Bit 4
</td>
<td>Bit 3
</td>
<td>Bit 2
</td>
<td>Bit 1
</td>
<td>Bit 0
</td></tr>
<tr>
<td>DACKP
</td>
<td>DRQP
</td>
<td>EXTW
</td>
<td>PRIO
</td>
<td>COMP
</td>
<td>COND
</td>
<td>ADHE
</td>
<td>MMT
</td></tr></tbody></table>
<p>This register really shows how incompatible the 8237 is with the PC hardware.
</p>
<ul><li>Let's start with EXTW and COMP. These increase the speed of DMA transfer by 25% be removing one of the clock cycles. Does it work? No.</li>
<li>PRIO. When zeroed, this allows DMA priorities to be rotated allowing freedom and liberty for all peripherals that share the data bus. Does it work? No.</li>
<li>MMT and ADHE. Did you know that the IBM PC could do memory to memory transfers since 1981? That's right, hardware sprites, hardware frame buffering from one location to another. Does it work? No.</li>
<li>COND. Hooray the only bit in the control register that does something useful. Setting this bit disables the DMA controller. This is one way to set up multiple DMA channels without masking each and every channel.</li></ul>
<dl><dt>Request Registers 0x09 and 0xD2 (Write)</dt></dl>
<p>Used for memory to memory transfers and setting up priority rotation -- absolutely useless.
</p>
<dl><dt>"Intermediate" Registers 0x0D and 0xDA (Read)</dt></dl>
<p>Never implemented on PCs. Useless.
</p>
<h2><span class="mw-headline" id="Examples">Examples</span></h2>
<h3><span class="mw-headline" id="Floppy_Disk_DMA_Initialization">Floppy Disk DMA Initialization</span></h3>
<p>You need only implement 1 to 3 tiny routines to perform a DMA transfer. This example is the Floppy Drive controller (probably the most common followed by SoundBlaster).
</p><p>Note: the following code is not optimal, because there is an OUT to the same IO port twice (in two places). This causes an extra delay on the IO Port
bus. Real code should separate the two "out 0x4" and "out 0x5" calls with an "out" to some other port.
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nl">initialize_floppy_DMA:</span><span class="w"></span>
<span class="c1">; set DMA channel 2 to transfer data from 0x1000 - 0x33ff in memory</span>
<span class="c1">; paging must map this _physical_ memory elsewhere and _pin_ it from paging to disk!</span>
<span class="c1">; set the counter to 0x23ff, the length of a track on a 1.44 MiB floppy - 1 (assuming 512 byte sectors)</span>
<span class="c1">; transfer length = counter + 1</span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="mi">0x0a</span><span class="p">,</span><span class="w"> </span><span class="mi">0x06</span><span class="w">      </span><span class="c1">; mask DMA channel 2 and 0 (assuming 0 is already masked)</span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="mi">0x0c</span><span class="p">,</span><span class="w"> </span><span class="mi">0xFF</span><span class="w">      </span><span class="c1">; reset the master flip-flop</span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="mi">0x04</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="w">         </span><span class="c1">; address to 0 (low byte)</span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="mi">0x04</span><span class="p">,</span><span class="w"> </span><span class="mi">0x10</span><span class="w">      </span><span class="c1">; address to 0x10 (high byte)</span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="mi">0x0c</span><span class="p">,</span><span class="w"> </span><span class="mi">0xFF</span><span class="w">      </span><span class="c1">; reset the master flip-flop (again!!!)</span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="mi">0x05</span><span class="p">,</span><span class="w"> </span><span class="mi">0xFF</span><span class="w">      </span><span class="c1">; count to 0x23ff (low byte)</span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="mi">0x05</span><span class="p">,</span><span class="w"> </span><span class="mi">0x23</span><span class="w">      </span><span class="c1">; count to 0x23ff (high byte),</span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="mi">0x81</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="w">         </span><span class="c1">; external page register to 0 for total address of 00 10 00</span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="mi">0x0a</span><span class="p">,</span><span class="w"> </span><span class="mi">0x02</span><span class="w">      </span><span class="c1">; unmask DMA channel 2</span>
<span class="w">    </span><span class="nf">ret</span><span class="w"></span>
</pre></div>
<p>Once you have set up your start address and transfer length you do not need to touch it again, if you are using autoinit. Once reading or writing
is selected, you don't need to change that, either. To <i>change</i> selecting reading or writing you use the mode register.
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nl">prepare_for_floppy_DMA_write:</span><span class="w"></span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="mi">0x0a</span><span class="p">,</span><span class="w"> </span><span class="mi">0x06</span><span class="w">      </span><span class="c1">; mask DMA channel 2 and 0 (assuming 0 is already masked)</span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="mi">0x0b</span><span class="p">,</span><span class="w"> </span><span class="mi">0x5A</span><span class="w">      </span><span class="c1">; 01011010</span>
<span class="w">                        </span><span class="c1">; single transfer, address increment, autoinit, write, channel2)</span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="mi">0x0a</span><span class="p">,</span><span class="w"> </span><span class="mi">0x02</span><span class="w">      </span><span class="c1">; unmask DMA channel 2</span>
<span class="w">    </span><span class="nf">ret</span><span class="w"></span>

<span class="nl">prepare_for_floppy_DMA_read:</span><span class="w"></span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="mi">0x0a</span><span class="p">,</span><span class="w"> </span><span class="mi">0x06</span><span class="w">      </span><span class="c1">; mask DMA channel 2 and 0 (assuming 0 is already masked)</span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="mi">0x0b</span><span class="p">,</span><span class="w"> </span><span class="mi">0x56</span><span class="w">      </span><span class="c1">; 01010110</span>
<span class="w">                        </span><span class="c1">; single transfer, address increment, autoinit, read, channel2)</span>
<span class="w">    </span><span class="nf">out</span><span class="w"> </span><span class="mi">0x0a</span><span class="p">,</span><span class="w"> </span><span class="mi">0x02</span><span class="w">      </span><span class="c1">; unmask DMA channel 2</span>
<span class="w">    </span><span class="nf">ret</span><span class="w"></span>
</pre></div>
<p>Some hardware, as well as VirtualPC do not support autoinit. You may want to set the Mode registers to 0x4A and 0x46 in the above routines, instead.
</p><p>The above routines use single transfer mode for compatibility, but during the initialization of your floppy driver if you detect an "advanced" floppy
controller (using the Version command), "demand transfer" should be used to reduce overhead.
</p>
<h2><span class="mw-headline" id="References">References</span></h2>
<h3><span class="mw-headline" id="Articles">Articles</span></h3>
<ul><li><a href="Floppy_Disk_Controller" title="Floppy Disk Controller">Floppy Disk Controller</a></li>
<li><a href="Sound_Blaster_16" title="Sound Blaster 16">Sound Blaster 16</a></li></ul>
<h3><span class="mw-headline" id="External_Links">External Links</span></h3>
<ul><li><a rel="nofollow" class="external text" href="http://www.intel-assembler.it/PORTALE/4/231466_8237A_DMA.pdf">Intel 8237A datasheet</a></li>
<li><a rel="nofollow" class="external text" href="http://bos.asmhackers.net/docs/dma/docs/">http://bos.asmhackers.net/docs/dma/docs/</a></li></ul>
<!-- 
NewPP limit report
Cached time: 20250211130902
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.034 seconds
Real time usage: 0.298 seconds
Preprocessor visited node count: 97/1000000
Post‐expand include size: 1134/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 3/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 5451/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.811      1 -total
 67.92%    0.551      7 Template:Wikitable
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1467-0!canonical and timestamp 20250211130902 and revision id 29156.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=ISA_DMA&amp;oldid=29156">https://wiki.osdev.org/index.php?title=ISA_DMA&amp;oldid=29156</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Storage" title="Category:Storage">Storage</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=ISA+DMA" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="DMA#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="ISA_DMA" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:ISA_DMA" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="ISA_DMA"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ISA_DMA&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ISA_DMA&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/ISA_DMA" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/ISA_DMA" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ISA_DMA&amp;oldid=29156" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=ISA_DMA&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-lang" class="vector-menu mw-portlet mw-portlet-lang vector-menu-portal portal" aria-labelledby="p-lang-label" role="navigation"  >
	<h3
		id="p-lang-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">In other languages</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li class="interlanguage-link interwiki-de mw-list-item"><a href="http://www.lowlevel.eu/wiki/DMA" title="DMA – Deutsch" lang="de" hreflang="de" class="interlanguage-link-target"><span>Deutsch</span></a></li></ul>
		
	</div>
</nav>

</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 25 June 2024, at 11:19.</li>
	<li id="footer-info-0">This page has been accessed 14,423 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=ISA_DMA&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.034","walltime":"0.298","ppvisitednodes":{"value":97,"limit":1000000},"postexpandincludesize":{"value":1134,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":3,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":5451,"limit":5000000},"timingprofile":["100.00%    0.811      1 -total"," 67.92%    0.551      7 Template:Wikitable"]},"cachereport":{"timestamp":"20250211130902","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":399});});</script>
</body>
</html>