<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Zig Bare Bones - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"ab4904ca7f9ab94dd3b31b35","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Zig_Bare_Bones","wgTitle":"Zig Bare Bones","wgCurRevisionId":29276,"wgRevisionId":29276,"wgArticleId":4677,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Pages with syntax highlighting errors","Stubs","Bare bones tutorials","Zig"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Zig_Bare_Bones","wgRelevantArticleId":4677,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,
"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Zig_Bare_Bones rootpage-Zig_Bare_Bones skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Zig Bare Bones</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Zig_Bare_Bones#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Zig_Bare_Bones#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p><a href="./File:Stub.png" class="image" title="This article is a stub!"><img alt="This article is a stub!" src="images/f/fe/Stub.png" decoding="async" width="50" height="50" data-file-width="50" data-file-height="50" /></a>
This page or section is a <a href="./Category:Stubs" title="Category:Stubs">stub</a>. You can help the wiki by <i>accurately</i> <a rel="nofollow" class="external text" href="https://wiki.osdev.org/index.php?title=Zig_Bare_Bones&amp;action=edit">contributing</a> to it.
</p>
</td>
<td>
</td></tr></tbody></table>
</center>
<center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p>This tutorial needs to explain what the code does as tutorials are not just copy paste. You can help out by <a rel="nofollow" class="external text" href="https://wiki.osdev.org/index.php?title=Zig_Bare_Bones&amp;action=edit">editing</a> this page to include more context to what the code does.
</p>
</td></tr></tbody></table>
</center>
<p>In this tutorial, we'll make a simple hello world kernel in Zig.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Zig_Bare_Bones#Prerequisites"><span class="tocnumber">1</span> <span class="toctext">Prerequisites</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Zig_Bare_Bones#Code"><span class="tocnumber">2</span> <span class="toctext">Code</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="Zig_Bare_Bones#build.zig"><span class="tocnumber">2.1</span> <span class="toctext">build.zig</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="Zig_Bare_Bones#src/main.zig"><span class="tocnumber">2.2</span> <span class="toctext">src/main.zig</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="Zig_Bare_Bones#src/console.zig"><span class="tocnumber">2.3</span> <span class="toctext">src/console.zig</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="Zig_Bare_Bones#src/linker.ld"><span class="tocnumber">2.4</span> <span class="toctext">src/linker.ld</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-7"><a href="Zig_Bare_Bones#Build"><span class="tocnumber">3</span> <span class="toctext">Build</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="Zig_Bare_Bones#Verifying_Multiboot"><span class="tocnumber">4</span> <span class="toctext">Verifying Multiboot</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="Zig_Bare_Bones#Booting_the_Kernel"><span class="tocnumber">5</span> <span class="toctext">Booting the Kernel</span></a>
<ul>
<li class="toclevel-2 tocsection-10"><a href="Zig_Bare_Bones#Testing_your_operating_system_(QEMU)"><span class="tocnumber">5.1</span> <span class="toctext">Testing your operating system (QEMU)</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Prerequisites">Prerequisites</span></h2>
<p>First off, you'll need:
</p>
<ul><li>The <a href="https://wiki.osdev.org/index.php?title=Zig&amp;action=edit&amp;redlink=1" class="new" title="Zig (page does not exist)">Zig</a> compiler version 0.13.0</li>
<li><a href="GRUB" title="GRUB">GRUB</a> as our bootloader to boot the kernel</li></ul>
<h2><span class="mw-headline" id="Code">Code</span></h2>
<p>If you done setting up all of the prerequisites above, we can now write
some code for our kernel
</p>
<h3><span class="mw-headline" id="build.zig">build.zig</span></h3>
<div class="mw-highlight mw-highlight-lang-zig mw-content-ltr" dir="ltr"><pre><span></span><span class="kr">const</span><span class="w"> </span><span class="n">std</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">@import</span><span class="p">(</span><span class="s">&quot;std&quot;</span><span class="p">);</span><span class="w"></span>

<span class="kr">pub</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">build</span><span class="p">(</span><span class="n">b</span><span class="o">:</span><span class="w"> </span><span class="o">*</span><span class="n">std</span><span class="p">.</span><span class="n">Build</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kr">var</span><span class="w"> </span><span class="n">disabled_features</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">Target</span><span class="p">.</span><span class="n">Cpu</span><span class="p">.</span><span class="n">Feature</span><span class="p">.</span><span class="n">Set</span><span class="p">.</span><span class="n">empty</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kr">var</span><span class="w"> </span><span class="n">enabled_features</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">Target</span><span class="p">.</span><span class="n">Cpu</span><span class="p">.</span><span class="n">Feature</span><span class="p">.</span><span class="n">Set</span><span class="p">.</span><span class="n">empty</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="n">disabled_features</span><span class="p">.</span><span class="n">addFeature</span><span class="p">(</span><span class="nb">@intFromEnum</span><span class="p">(</span><span class="n">std</span><span class="p">.</span><span class="n">Target</span><span class="p">.</span><span class="n">x86</span><span class="p">.</span><span class="n">Feature</span><span class="p">.</span><span class="n">mmx</span><span class="p">));</span><span class="w"></span>
<span class="w">    </span><span class="n">disabled_features</span><span class="p">.</span><span class="n">addFeature</span><span class="p">(</span><span class="nb">@intFromEnum</span><span class="p">(</span><span class="n">std</span><span class="p">.</span><span class="n">Target</span><span class="p">.</span><span class="n">x86</span><span class="p">.</span><span class="n">Feature</span><span class="p">.</span><span class="n">sse</span><span class="p">));</span><span class="w"></span>
<span class="w">    </span><span class="n">disabled_features</span><span class="p">.</span><span class="n">addFeature</span><span class="p">(</span><span class="nb">@intFromEnum</span><span class="p">(</span><span class="n">std</span><span class="p">.</span><span class="n">Target</span><span class="p">.</span><span class="n">x86</span><span class="p">.</span><span class="n">Feature</span><span class="p">.</span><span class="n">sse2</span><span class="p">));</span><span class="w"></span>
<span class="w">    </span><span class="n">disabled_features</span><span class="p">.</span><span class="n">addFeature</span><span class="p">(</span><span class="nb">@intFromEnum</span><span class="p">(</span><span class="n">std</span><span class="p">.</span><span class="n">Target</span><span class="p">.</span><span class="n">x86</span><span class="p">.</span><span class="n">Feature</span><span class="p">.</span><span class="n">avx</span><span class="p">));</span><span class="w"></span>
<span class="w">    </span><span class="n">disabled_features</span><span class="p">.</span><span class="n">addFeature</span><span class="p">(</span><span class="nb">@intFromEnum</span><span class="p">(</span><span class="n">std</span><span class="p">.</span><span class="n">Target</span><span class="p">.</span><span class="n">x86</span><span class="p">.</span><span class="n">Feature</span><span class="p">.</span><span class="n">avx2</span><span class="p">));</span><span class="w"></span>
<span class="w">    </span><span class="n">enabled_features</span><span class="p">.</span><span class="n">addFeature</span><span class="p">(</span><span class="nb">@intFromEnum</span><span class="p">(</span><span class="n">std</span><span class="p">.</span><span class="n">Target</span><span class="p">.</span><span class="n">x86</span><span class="p">.</span><span class="n">Feature</span><span class="p">.</span><span class="n">soft_float</span><span class="p">));</span><span class="w"></span>

<span class="w">    </span><span class="kr">const</span><span class="w"> </span><span class="n">target_query</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">Target</span><span class="p">.</span><span class="n">Query</span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="p">.</span><span class="n">cpu_arch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">Target</span><span class="p">.</span><span class="n">Cpu</span><span class="p">.</span><span class="n">Arch</span><span class="p">.</span><span class="n">x86</span><span class="p">,</span><span class="w"></span>
<span class="w">        </span><span class="p">.</span><span class="n">os_tag</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">Target</span><span class="p">.</span><span class="n">Os</span><span class="p">.</span><span class="n">Tag</span><span class="p">.</span><span class="n">freestanding</span><span class="p">,</span><span class="w"></span>
<span class="w">        </span><span class="p">.</span><span class="n">abi</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">Target</span><span class="p">.</span><span class="n">Abi</span><span class="p">.</span><span class="n">none</span><span class="p">,</span><span class="w"></span>
<span class="w">        </span><span class="p">.</span><span class="n">cpu_features_sub</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">disabled_features</span><span class="p">,</span><span class="w"></span>
<span class="w">        </span><span class="p">.</span><span class="n">cpu_features_add</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">enabled_features</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="p">};</span><span class="w"></span>
<span class="w">    </span><span class="kr">const</span><span class="w"> </span><span class="n">optimize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">b</span><span class="p">.</span><span class="n">standardOptimizeOption</span><span class="p">(.{});</span><span class="w"></span>

<span class="w">    </span><span class="kr">const</span><span class="w"> </span><span class="n">kernel</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">b</span><span class="p">.</span><span class="n">addExecutable</span><span class="p">(.{</span><span class="w"></span>
<span class="w">        </span><span class="p">.</span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;kernel.elf&quot;</span><span class="p">,</span><span class="w"></span>
<span class="w">        </span><span class="p">.</span><span class="n">root_source_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">b</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="s">&quot;src/main.zig&quot;</span><span class="p">),</span><span class="w"></span>
<span class="w">        </span><span class="p">.</span><span class="n">target</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">b</span><span class="p">.</span><span class="n">resolveTargetQuery</span><span class="p">(</span><span class="n">target_query</span><span class="p">),</span><span class="w"></span>
<span class="w">        </span><span class="p">.</span><span class="n">optimize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">optimize</span><span class="p">,</span><span class="w"></span>
<span class="w">        </span><span class="p">.</span><span class="n">code_model</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.</span><span class="n">kernel</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="p">});</span><span class="w"></span>

<span class="w">    </span><span class="n">kernel</span><span class="p">.</span><span class="n">setLinkerScript</span><span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="s">&quot;src/linker.ld&quot;</span><span class="p">));</span><span class="w"></span>
<span class="w">    </span><span class="n">b</span><span class="p">.</span><span class="n">installArtifact</span><span class="p">(</span><span class="n">kernel</span><span class="p">);</span><span class="w"></span>

<span class="w">    </span><span class="kr">const</span><span class="w"> </span><span class="n">kernel_step</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">b</span><span class="p">.</span><span class="n">step</span><span class="p">(</span><span class="s">&quot;kernel&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Build the kernel&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">kernel_step</span><span class="p">.</span><span class="n">dependOn</span><span class="p">(</span><span class="o">&amp;</span><span class="n">kernel</span><span class="p">.</span><span class="n">step</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h3><span id="src.2Fmain.zig"></span><span class="mw-headline" id="src/main.zig">src/main.zig</span></h3>
<div class="mw-highlight mw-highlight-lang-zig mw-content-ltr" dir="ltr"><pre><span></span><span class="kr">const</span><span class="w"> </span><span class="n">console</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">@import</span><span class="p">(</span><span class="s">&quot;./console.zig&quot;</span><span class="p">);</span><span class="w"></span>

<span class="kr">const</span><span class="w"> </span><span class="n">ALIGN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="kr">const</span><span class="w"> </span><span class="n">MEMINFO</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="kr">const</span><span class="w"> </span><span class="n">MAGIC</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x1BADB002</span><span class="p">;</span><span class="w"></span>
<span class="kr">const</span><span class="w"> </span><span class="n">FLAGS</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">MEMINFO</span><span class="p">;</span><span class="w"></span>

<span class="kr">const</span><span class="w"> </span><span class="n">MultibootHeader</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">packed</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">magic</span><span class="o">:</span><span class="w"> </span><span class="kt">i32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">MAGIC</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">flags</span><span class="o">:</span><span class="w"> </span><span class="kt">i32</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">checksum</span><span class="o">:</span><span class="w"> </span><span class="kt">i32</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">padding</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"></span>
<span class="p">};</span><span class="w"></span>

<span class="kr">export</span><span class="w"> </span><span class="kr">var</span><span class="w"> </span><span class="n">multiboot</span><span class="o">:</span><span class="w"> </span><span class="n">MultibootHeader</span><span class="w"> </span><span class="kr">align</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="w"> </span><span class="kr">linksection</span><span class="p">(</span><span class="s">&quot;.multiboot&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.{</span><span class="w"></span>
<span class="w">    </span><span class="p">.</span><span class="n">flags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">FLAGS</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="p">.</span><span class="n">checksum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="p">(</span><span class="n">MAGIC</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">FLAGS</span><span class="p">),</span><span class="w"></span>
<span class="p">};</span><span class="w"></span>

<span class="kr">var</span><span class="w"> </span><span class="n">stack_bytes</span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="mi">16</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">1024</span><span class="p">]</span><span class="kt">u8</span><span class="w"> </span><span class="kr">align</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="w"> </span><span class="kr">linksection</span><span class="p">(</span><span class="s">&quot;.bss&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">undefined</span><span class="p">;</span><span class="w"></span>

<span class="c1">// We specify that this function is &quot;naked&quot; to let the compiler know</span>
<span class="c1">// not to generate a standard function prologue and epilogue, since</span>
<span class="c1">// we don&#39;t have a stack yet.</span>
<span class="kr">export</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">_start</span><span class="p">()</span><span class="w"> </span><span class="n">callconv</span><span class="p">(.</span><span class="n">Naked</span><span class="p">)</span><span class="w"> </span><span class="kt">noreturn</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="c1">// We use inline assembly to set up the stack before jumping to</span>
<span class="w">    </span><span class="c1">// our kernel main.</span>
<span class="w">    </span><span class="k">asm</span><span class="w"> </span><span class="kr">volatile</span><span class="w"> </span><span class="p">(</span><span class="w"></span>
<span class="w">        </span><span class="sh">\\ movl&#160;%[stack_top],&#160;%%esp</span><span class="w"></span>
<span class="w">        </span><span class="sh">\\ movl&#160;%%esp,&#160;%%ebp</span><span class="w"></span>
<span class="w">        </span><span class="sh">\\ call&#160;%[kmain:P]</span><span class="w"></span>
<span class="w">        </span><span class="o">:</span><span class="w"></span>
<span class="w">        </span><span class="c1">// The stack grows downwards on x86, so we need to point ESP</span>
<span class="w">        </span><span class="c1">// to one element past the end of `stack_bytes`.</span>
<span class="w">        </span><span class="c1">// </span>
<span class="w">        </span><span class="c1">// Unfortunately, we can&#39;t just compute `&amp;stack_bytes[stack_bytes.len]`,</span>
<span class="w">        </span><span class="c1">// as the Zig compiler will notice the out-of-bounds access</span>
<span class="w">        </span><span class="c1">// at compile-time and throw an error.</span>
<span class="w">        </span><span class="c1">//</span>
<span class="w">        </span><span class="c1">// We can instead take the start address of `stack_bytes` and </span>
<span class="w">        </span><span class="c1">// add the size of the array to get the one-past-the-end </span>
<span class="w">        </span><span class="c1">// pointer. However, Zig disallows pointer arithmetic on all</span>
<span class="w">        </span><span class="c1">// pointer types except &quot;multi-pointers&quot; `[*]`, so we must cast</span>
<span class="w">        </span><span class="c1">// to that type first.</span>
<span class="w">        </span><span class="c1">//</span>
<span class="w">        </span><span class="c1">// Finally, we pass the whole expression as an input operand </span>
<span class="w">        </span><span class="c1">// with the &quot;immediate&quot; constraint to force the compiler to</span>
<span class="w">        </span><span class="c1">// encode this as an absolute address. This prevents the</span>
<span class="w">        </span><span class="c1">// compiler from doing unnecessary extra steps to compute</span>
<span class="w">        </span><span class="c1">// the address at runtime (especially in Debug mode), which </span>
<span class="w">        </span><span class="c1">// could possibly clobber registers that are specified by</span>
<span class="w">        </span><span class="c1">// multiboot to hold special values (e.g. EAX).</span>
<span class="w">        </span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="n">stack_top</span><span class="p">]</span><span class="w"> </span><span class="s">&quot;i&quot;</span><span class="w"> </span><span class="p">(</span><span class="nb">@as</span><span class="p">([</span><span class="o">*</span><span class="p">]</span><span class="kr">align</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="w"> </span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="nb">@ptrCast</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack_bytes</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">@sizeOf</span><span class="p">(</span><span class="nb">@TypeOf</span><span class="p">(</span><span class="n">stack_bytes</span><span class="p">))),</span><span class="w"></span>
<span class="w">        </span><span class="c1">// We let the compiler handle the reference to kmain by passing it as an input operand as well.</span>
<span class="w">          </span><span class="p">[</span><span class="n">kmain</span><span class="p">]</span><span class="w"> </span><span class="s">&quot;X&quot;</span><span class="w"> </span><span class="p">(</span><span class="o">&amp;</span><span class="n">kmain</span><span class="p">),</span><span class="w"></span>
<span class="w">        </span><span class="o">:</span><span class="w"></span>
<span class="w">    </span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="k">fn</span><span class="w"> </span><span class="n">kmain</span><span class="p">()</span><span class="w"> </span><span class="n">callconv</span><span class="p">(.</span><span class="n">C</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">console</span><span class="p">.</span><span class="n">initialize</span><span class="p">();</span><span class="w"></span>
<span class="w">    </span><span class="n">console</span><span class="p">.</span><span class="n">puts</span><span class="p">(</span><span class="s">&quot;Hello Zig Kernel!&quot;</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h3><span id="src.2Fconsole.zig"></span><span class="mw-headline" id="src/console.zig">src/console.zig</span></h3>
<div class="mw-highlight mw-highlight-lang-zig mw-content-ltr" dir="ltr"><pre><span></span><span class="kr">const</span><span class="w"> </span><span class="n">fmt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">@import</span><span class="p">(</span><span class="s">&quot;std&quot;</span><span class="p">).</span><span class="n">fmt</span><span class="p">;</span><span class="w"></span>
<span class="kr">const</span><span class="w"> </span><span class="n">Writer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">@import</span><span class="p">(</span><span class="s">&quot;std&quot;</span><span class="p">).</span><span class="n">io</span><span class="p">.</span><span class="n">Writer</span><span class="p">;</span><span class="w"></span>

<span class="kr">const</span><span class="w"> </span><span class="n">VGA_WIDTH</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">80</span><span class="p">;</span><span class="w"></span>
<span class="kr">const</span><span class="w"> </span><span class="n">VGA_HEIGHT</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">25</span><span class="p">;</span><span class="w"></span>
<span class="kr">const</span><span class="w"> </span><span class="n">VGA_SIZE</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">VGA_WIDTH</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">VGA_HEIGHT</span><span class="p">;</span><span class="w"></span>

<span class="kr">pub</span><span class="w"> </span><span class="kr">const</span><span class="w"> </span><span class="n">ConsoleColors</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">enum</span><span class="p">(</span><span class="kt">u8</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">Black</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">Blue</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">Green</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">Cyan</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">Red</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">Magenta</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">Brown</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">6</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">LightGray</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">7</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">DarkGray</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">8</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">LightBlue</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">9</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">LightGreen</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">LightCyan</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">11</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">LightRed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">12</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">LightMagenta</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">13</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">LightBrown</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">14</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">White</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">15</span><span class="p">,</span><span class="w"></span>
<span class="p">};</span><span class="w"></span>

<span class="kr">var</span><span class="w"> </span><span class="n">row</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="kr">var</span><span class="w"> </span><span class="n">column</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="kr">var</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vgaEntryColor</span><span class="p">(</span><span class="n">ConsoleColors</span><span class="p">.</span><span class="n">LightGray</span><span class="p">,</span><span class="w"> </span><span class="n">ConsoleColors</span><span class="p">.</span><span class="n">Black</span><span class="p">);</span><span class="w"></span>
<span class="kr">var</span><span class="w"> </span><span class="n">buffer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">@as</span><span class="p">([</span><span class="o">*</span><span class="p">]</span><span class="kr">volatile</span><span class="w"> </span><span class="kt">u16</span><span class="p">,</span><span class="w"> </span><span class="nb">@ptrFromInt</span><span class="p">(</span><span class="mh">0xB8000</span><span class="p">));</span><span class="w"></span>

<span class="k">fn</span><span class="w"> </span><span class="n">vgaEntryColor</span><span class="p">(</span><span class="n">fg</span><span class="o">:</span><span class="w"> </span><span class="n">ConsoleColors</span><span class="p">,</span><span class="w"> </span><span class="n">bg</span><span class="o">:</span><span class="w"> </span><span class="n">ConsoleColors</span><span class="p">)</span><span class="w"> </span><span class="kt">u8</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="nb">@intFromEnum</span><span class="p">(</span><span class="n">fg</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="nb">@intFromEnum</span><span class="p">(</span><span class="n">bg</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">4</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="k">fn</span><span class="w"> </span><span class="n">vgaEntry</span><span class="p">(</span><span class="n">uc</span><span class="o">:</span><span class="w"> </span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="n">new_color</span><span class="o">:</span><span class="w"> </span><span class="kt">u8</span><span class="p">)</span><span class="w"> </span><span class="kt">u16</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kr">const</span><span class="w"> </span><span class="n">c</span><span class="o">:</span><span class="w"> </span><span class="kt">u16</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">new_color</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">uc</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="n">c</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">8</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kr">pub</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">initialize</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">clear</span><span class="p">();</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kr">pub</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">setColor</span><span class="p">(</span><span class="n">new_color</span><span class="o">:</span><span class="w"> </span><span class="kt">u8</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">new_color</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kr">pub</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">clear</span><span class="p">()</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="nb">@memset</span><span class="p">(</span><span class="n">buffer</span><span class="p">[</span><span class="mi">0</span><span class="p">..</span><span class="n">VGA_SIZE</span><span class="p">],</span><span class="w"> </span><span class="n">vgaEntry</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="p">));</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kr">pub</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">putCharAt</span><span class="p">(</span><span class="n">c</span><span class="o">:</span><span class="w"> </span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="n">new_color</span><span class="o">:</span><span class="w"> </span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kr">const</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">VGA_WIDTH</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">x</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">buffer</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vgaEntry</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="w"> </span><span class="n">new_color</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kr">pub</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">putChar</span><span class="p">(</span><span class="n">c</span><span class="o">:</span><span class="w"> </span><span class="kt">u8</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">putCharAt</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="p">,</span><span class="w"> </span><span class="n">column</span><span class="p">,</span><span class="w"> </span><span class="n">row</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">column</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">column</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">VGA_WIDTH</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">column</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="n">row</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">row</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">VGA_HEIGHT</span><span class="p">)</span><span class="w"></span>
<span class="w">            </span><span class="n">row</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kr">pub</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">puts</span><span class="p">(</span><span class="n">data</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kr">const</span><span class="w"> </span><span class="kt">u8</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="n">c</span><span class="o">|</span><span class="w"></span>
<span class="w">        </span><span class="n">putChar</span><span class="p">(</span><span class="n">c</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kr">pub</span><span class="w"> </span><span class="kr">const</span><span class="w"> </span><span class="n">writer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Writer</span><span class="p">(</span><span class="kt">void</span><span class="p">,</span><span class="w"> </span><span class="k">error</span><span class="p">{},</span><span class="w"> </span><span class="n">callback</span><span class="p">){</span><span class="w"> </span><span class="p">.</span><span class="n">context</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="p">};</span><span class="w"></span>

<span class="k">fn</span><span class="w"> </span><span class="n">callback</span><span class="p">(</span><span class="n">_</span><span class="o">:</span><span class="w"> </span><span class="kt">void</span><span class="p">,</span><span class="w"> </span><span class="n">string</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kr">const</span><span class="w"> </span><span class="kt">u8</span><span class="p">)</span><span class="w"> </span><span class="k">error</span><span class="p">{}</span><span class="o">!</span><span class="kt">usize</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">puts</span><span class="p">(</span><span class="n">string</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">string</span><span class="p">.</span><span class="n">len</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kr">pub</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="n">printf</span><span class="p">(</span><span class="kr">comptime</span><span class="w"> </span><span class="n">format</span><span class="o">:</span><span class="w"> </span><span class="p">[]</span><span class="kr">const</span><span class="w"> </span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="n">args</span><span class="o">:</span><span class="w"> </span><span class="n">anytype</span><span class="p">)</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">fmt</span><span class="p">.</span><span class="n">format</span><span class="p">(</span><span class="n">writer</span><span class="p">,</span><span class="w"> </span><span class="n">format</span><span class="p">,</span><span class="w"> </span><span class="n">args</span><span class="p">)</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="k">unreachable</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h3><span id="src.2Flinker.ld"></span><span class="mw-headline" id="src/linker.ld">src/linker.ld</span></h3>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">ENTRY</span><span class="p">(</span><span class="no">_start</span><span class="p">)</span><span class="w"></span>
<span class="w"> </span>
<span class="nf">SECTIONS</span><span class="w"> </span><span class="err">{</span><span class="w"></span>
<span class="w">    </span><span class="err">.</span><span class="w"> </span><span class="err">=</span><span class="w"> </span><span class="err">2</span><span class="nf">M</span><span class="c1">;</span>

<span class="w">    </span><span class="na">.text</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="no">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="no">K</span><span class="p">)</span><span class="w"> </span><span class="err">{</span><span class="w"></span>
<span class="w">        </span><span class="cm">/* We need to specify KEEP to prevent the linker from garbage-collecting the multiboot section. */</span><span class="w"></span>
<span class="w">        </span><span class="nf">KEEP</span><span class="p">(*(.</span><span class="no">multiboot</span><span class="p">))</span><span class="w"></span>
<span class="w">        </span><span class="err">*(</span><span class="na">.text</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="err">}</span><span class="w"></span>
<span class="w"> </span>
<span class="w">    </span><span class="na">.rodata</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="no">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="no">K</span><span class="p">)</span><span class="w"> </span><span class="err">{</span><span class="w"></span>
<span class="w">        </span><span class="err">*(</span><span class="na">.rodata</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="err">}</span><span class="w"></span>
<span class="w"> </span>
<span class="w">    </span><span class="na">.data</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="no">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="no">K</span><span class="p">)</span><span class="w"> </span><span class="err">{</span><span class="w"></span>
<span class="w">        </span><span class="err">*(</span><span class="na">.data</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="err">}</span><span class="w"></span>
<span class="w"> </span>
<span class="w">    </span><span class="na">.bss</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="no">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="no">K</span><span class="p">)</span><span class="w"> </span><span class="err">{</span><span class="w"></span>
<span class="w">        </span><span class="err">*(</span><span class="nf">COMMON</span><span class="p">)</span><span class="w"></span>
<span class="w">        </span><span class="err">*(</span><span class="na">.bss</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="err">}</span><span class="w"></span>
<span class="err">}</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="Build">Build</span></h2>
<p>Now that our kernel code is done, we'll now build our kernel by running
the command below:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>$ zig build
</pre></div>
<h2><span class="mw-headline" id="Verifying_Multiboot">Verifying Multiboot</span></h2><p>
If the header isn't valid, GRUB will give an error that it can't find a Multiboot header when you try to boot it. This code fragment will help you diagnose such cases:</p><div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>grub-file --is-x86-multiboot zig-out/bin/kernel.elf
</pre></div><p><code>grub-file</code> is quiet but will exit 0 (successfully) if it is a valid multiboot kernel and exit 1 (unsuccessfully) otherwise. You can type <code>echo $?</code> in your shell immediately afterwards to see the exit status.
</p><h2><span class="mw-headline" id="Booting_the_Kernel">Booting the Kernel</span></h2><p>
You can easily create a bootable CD-ROM image containing the GRUB bootloader and your kernel using the program <code>grub-mkrescue</code>. You may need to install the GRUB utility programs and the program <code>xorriso</code> (version 0.5.6 or higher). First you should create a file called <code>grub.cfg</code> containing the contents:</p><div class="mw-highlight mw-content-ltr" dir="ltr"><pre>menuentry "Zig Bare Bones" {
	multiboot /boot/kernel.elf
}</pre></div><p>Note that the braces must be placed as shown here. You can now create a bootable image of your operating system by typing these commands:</p><div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>mkdir -p isodir/boot/grub
cp zig-out/bin/kernel.elf isodir/boot/kernel.elf
cp grub.cfg isodir/boot/grub/grub.cfg
grub-mkrescue -o kernel.iso isodir
</pre></div><p><b>Warning:</b> GNU GRUB, the bootloader used by <code>grub-mkrescue</code>, is licensed under the GNU General Public License. Your iso file contains copyrighted material under that license and redistributing it in violation of the GPL constitutes copyright infringement. The GPL requires you publish the source code corresponding to the bootloader. You need to get the exact source package corresponding to the GRUB package you have installed from your distribution, at the time <code>grub-mkrescue</code> is invoked (as distro packages are occasionally updated). You then need to publish that source code along with your ISO to satisfy the GPL. Alternative, you can build GRUB from source code yourself. Clone the latest GRUB git from savannah (do not use their last release from 2012, it's severely out of date). Run autogen.sh, ./configure and make dist. That makes a GRUB tarball. Extract it somewhere, then build GRUB from it, and install it in a isolated prefix. Add that to your PATH and ensure its <code>grub-mkrescue</code> program is used to produce your iso. Then publish the GRUB tarball of your own making along with your OS release. You're not required to publish the source code of your OS at all, only the code for the bootloader that's inside the iso.
</p><h3><span id="Testing_your_operating_system_.28QEMU.29"></span><span class="mw-headline" id="Testing_your_operating_system_(QEMU)">Testing your operating system (QEMU)</span></h3>
<p>In this tutorial, we will be using QEMU. You can also use other virtual machines if you please. Simply adding the ISO to the CD drive of an empty virtual machine will do the trick.
</p><p>
Install QEMU from your repositories, and then use the following command to start your new operating system.</p><div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>qemu-system-i386 -cdrom kernel.iso
</pre></div><p>Additionally, QEMU supports booting multiboot kernels directly without bootable medium:</p><div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>qemu-system-i386 -kernel kernel.elf
</pre></div>
<!-- 
NewPP limit report
Cached time: 20250211124315
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.081 seconds
Real time usage: 1.242 seconds
Preprocessor visited node count: 99/1000000
Post‐expand include size: 1398/2097152 bytes
Template argument size: 247/2097152 bytes
Highest expansion depth: 7/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 45616/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    6.090      1 -total
 85.71%    5.220      1 Template:TutorialExplain
 46.24%    2.816      1 Template:NoteBox
 38.05%    2.317      1 Template:EditThis
 13.30%    0.810      1 Template:Stub
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4677-0!canonical and timestamp 20250211124313 and revision id 29276.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Zig_Bare_Bones&amp;oldid=29276">https://wiki.osdev.org/index.php?title=Zig_Bare_Bones&amp;oldid=29276</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_with_syntax_highlighting_errors&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages with syntax highlighting errors (page does not exist)">Pages with syntax highlighting errors</a></li><li><a href="./Category:Stubs" title="Category:Stubs">Stubs</a></li><li><a href="./Category:Bare_bones_tutorials" title="Category:Bare bones tutorials">Bare bones tutorials</a></li><li><a href="https://wiki.osdev.org/index.php?title=Category:Zig&amp;action=edit&amp;redlink=1" class="new" title="Category:Zig (page does not exist)">Zig</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Zig+Bare+Bones" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Zig_Bare_Bones#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Zig_Bare_Bones" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:Zig_Bare_Bones&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Zig_Bare_Bones"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Zig_Bare_Bones&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Zig_Bare_Bones&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Zig_Bare_Bones" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Zig_Bare_Bones" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Zig_Bare_Bones&amp;oldid=29276" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Zig_Bare_Bones&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 22 October 2024, at 21:06.</li>
	<li id="footer-info-0">This page has been accessed 6,976 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Zig_Bare_Bones&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.081","walltime":"1.242","ppvisitednodes":{"value":99,"limit":1000000},"postexpandincludesize":{"value":1398,"limit":2097152},"templateargumentsize":{"value":247,"limit":2097152},"expansiondepth":{"value":7,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":45616,"limit":5000000},"timingprofile":["100.00%    6.090      1 -total"," 85.71%    5.220      1 Template:TutorialExplain"," 46.24%    2.816      1 Template:NoteBox"," 38.05%    2.317      1 Template:EditThis"," 13.30%    0.810      1 Template:Stub"]},"cachereport":{"timestamp":"20250211124315","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":99});});</script>
</body>
</html>