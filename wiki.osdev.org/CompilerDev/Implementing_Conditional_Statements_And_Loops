<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>CompilerDev/Implementing Conditional Statements And Loops - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"5b80fcd26b452f8165ef2502","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"CompilerDev/Implementing_Conditional_Statements_And_Loops","wgTitle":"CompilerDev/Implementing Conditional Statements And Loops","wgCurRevisionId":28080,"wgRevisionId":28080,"wgArticleId":3986,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Compiler Development"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"CompilerDev/Implementing_Conditional_Statements_And_Loops","wgRelevantArticleId":3986,
"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="../favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="../opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="../api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-CompilerDev_Implementing_Conditional_Statements_And_Loops rootpage-CompilerDev_Implementing_Conditional_Statements_And_Loops skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">CompilerDev/Implementing Conditional Statements And Loops</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Implementing_Conditional_Statements_And_Loops#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Implementing_Conditional_Statements_And_Loops#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Implementing_Conditional_Statements_And_Loops#General_Concepts"><span class="tocnumber">1</span> <span class="toctext">General Concepts</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="Implementing_Conditional_Statements_And_Loops#General_Conditional_Statements"><span class="tocnumber">1.1</span> <span class="toctext">General Conditional Statements</span></a>
<ul>
<li class="toclevel-3 tocsection-3"><a href="Implementing_Conditional_Statements_And_Loops#If"><span class="tocnumber">1.1.1</span> <span class="toctext">If</span></a>
<ul>
<li class="toclevel-4 tocsection-4"><a href="Implementing_Conditional_Statements_And_Loops#Compound_Boolean_Conditionals"><span class="tocnumber">1.1.1.1</span> <span class="toctext">Compound Boolean Conditionals</span></a></li>
<li class="toclevel-4 tocsection-5"><a href="Implementing_Conditional_Statements_And_Loops#Basic_Optimizations"><span class="tocnumber">1.1.1.2</span> <span class="toctext">Basic Optimizations</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-2 tocsection-6"><a href="Implementing_Conditional_Statements_And_Loops#Definite_Loops"><span class="tocnumber">1.2</span> <span class="toctext">Definite Loops</span></a></li>
</ul>
</li>
</ul>
</div>

<h1><span class="mw-headline" id="General_Concepts">General Concepts</span></h1>
<p>For a conventional instruction set architecture such as x86, ARM, 8051, MIPS, or most other CPU types in widespread use at this time (2016), conditional statements such as <b>if</b>/<b>elsif</b>/<b>else</b>, and loop constructs such as <b>for</b> or <b>while</b>, are generally implemented through a combination of tests, conditional jumps/branches (jz, beq, etc.) and unconditional branches (jmp, bra, j, etc.). While some common ISAs have special-purpose instructions for repetition or looping (e.g., the <b>REP</b> and <b>LOOP</b> instructions on the x86), few compilers use them due to the added work of determining where they can be applied.
</p><p>Examples below are given for <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/X86_assembly_language">Intel x86-64</a>, <a href="../ARM_Overview" title="ARM Overview"> ARM</a>, and <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/MIPS_instruction_set">MIPS R2000 assembly language</a> instruction sets. It is assumed that the compiler produces assembly language; for compilers that generate an <a href="../Executable_Formats" title="Executable Formats"> Executable File</a> directly, the compiler must handle the housekeeping (e.g., tracking branch targets) that would otherwise be done by the assembler.
</p>
<h2><span class="mw-headline" id="General_Conditional_Statements">General Conditional Statements</span></h2>
<h3><span class="mw-headline" id="If">If</span></h3>
<p>A naive implementation of a basic <b>if</b> statement will generally consist of a conditional branch to the code for the when the condition is true (the <i>consequent</i>), an unconditional branch past the end of the consequent, and the consequent itself:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">b</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* do something */</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>The generated code (assuming that <b>a</b> and <b>b</b> are in the appropriate registers already) might look like:
</p>
<table>
<tbody><tr>
<th>x86-64
</th>
<th>ARM
</th>
<th>MIPS
</th>
</tr></tbody><caption>
</caption>
<tbody><tr><td><pre>    cmp rax, rbx
    je main.if0.true
    jmp main.if0.end
main.if0.true:
   &#160;;;; consequent
main.if0.end:
</pre>
</td>
<td><pre>    teq r0, r1
    beq main.if0.true
    b main.if0.end
main.if0.true:
   &#160;;;; consequent
main.if0.end:    
</pre>
</td>
<td><pre>    beq $t0, $t1, main.if0.true
    j main.if0.end
main.if0.true:
    ### consequent
main.if0.end:
</pre>
</td></tr></tbody></table>
<p>Note that the compiler has to generate a unique label or target table listing for each of the branch targets; the simplest implementation of this is to keep a count of the labels, and assign them a separate label name with the count appended to it. For the sake of readability, the example code uses a local label with the function name (main, in this case), the type of expression, and the count of the expressions of this type. 
</p><p>Thus, for nested <b>if</b>s, such as
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">b</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">b</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">c</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="cm">/* do the inner clause */</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* do the rest of the outer clause */</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p><br />
it might produce:
</p>
<table>
<tbody><tr>
<th>x86-64
</th>
<th>ARM
</th>
<th>MIPS
</th>
</tr></tbody><caption>
</caption>
<tbody><tr><td><pre>    cmp rax, rbx
    je main.if1.true
    jmp main.if1.end
main.if1.true:
    cmp rbx, rcx
    jle main.if2.true
    jmp main.if2.end
main.if2.true:
   &#160;;;; do the inner clause
main.if2.end:
   &#160;;;; do the rest of the outer clause
main.if1.end:
</pre>
</td>
<td><pre></pre>
</td>
<td><pre>    bge $t0, $t1, main.if1.true
    j main.if1.end
main.if2.true:
    blt $t0, $t2, main.if2.true
    j main.if2.end
main.if2.true:
   &#160;;;; consequent for inner conditional
main.if2.end:
   &#160;;;; remaining code
main.if1.end:</pre>
</td></tr></tbody></table>
<h4><span class="mw-headline" id="Compound_Boolean_Conditionals">Compound Boolean Conditionals</span></h4>
<p>For compound conditionals, such as logical AND or logical OR, there naive implementation would be to first perform the tests, then use the logical ligatures to produce a testable outcome. 
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">c</span><span class="p">))</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* do something */</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>it could naively generate 
</p>
<table>
<tbody><tr>
<th>x86-64
</th>
<th>ARM
</th>
<th>MIPS
</th>
</tr></tbody><caption>
</caption>
<tbody><tr><td><pre></pre>
</td>
<td><pre></pre>
</td>
<td><pre>    ble $t0, $t1, main.if3.and0.left.true
    clear $t3
    j main.if3.and0.right
main.if3.and0.left.true:
    move $t3, 1
    j main.if3.and0.right
main.if3.and0.right:
    ble $t0, $t1, main.if3.and0.right.true
    clear $t3
    j main.if3.and0.test
main.if3.and0.right.true:
    move $t3, 1    
    j main.if3.and0.test
main.if3.and0.test:    
    and $t3, $t3, $t4
    not $t5, $t3
    bnez $t5, main.if3.true
    j main.if3.end
main.if3.true:
   &#160;;;; consequent
main.if3.end:</pre>
</td></tr></tbody></table>
<p><br />
While this is a literal translation of the condition, it is clearly less than optimal.
</p>
<h4><span class="mw-headline" id="Basic_Optimizations">Basic Optimizations</span></h4>
<p>An obvious, and reasonably simple, optimization of this is to negate or reverse the condition, thus eliminating the need for the unconditional branch:
</p>
<table>
<tbody><tr>
<th>x86-64
</th>
<th>ARM
</th>
<th>MIPS
</th>
</tr></tbody><caption>
</caption>
<tbody><tr><td><pre>    cmp rax, rbx
    jne main.if0.end
   &#160;;;; consequent
main.if0.end:
</pre>
</td>
<td><pre>    teq r0, r1
    bne main.if0.end
   &#160;;;; consequent
main.if0.end:    
</pre>
</td>
<td><pre>    bne $t0, $t1, main.if4.end
   &#160;;;; consequent
main.if4.end:</pre>
</td></tr></tbody></table>
<p>Similarly, for nested <b>if</b>s where the inner <b>if</b> is the first or last clause of the outer loop, then it can remove an extraneous labels:
</p>
<table>
<tbody><tr>
<th>x86-64
</th>
<th>ARM
</th>
<th>MIPS
</th>
</tr></tbody><caption>
</caption>
<tbody><tr><td><pre>    cmp rax, rbx
    jne main.if1.end
   &#160;;;; if(rax == rbx)
      cmp rbx, rcx
      jg main.if2.end
     &#160;;;; if(rbx &lt;= rcx)
     &#160;;;; do the inner clause
main.if2.end:
   &#160;;;; do the rest of the outer clause
main.if1.end:
</pre>
</td>
<td><pre></pre>
</td>
<td><pre>    blt $t0, $t1, main.if5.end
    bge $t0, $t2, main.if6.end
   &#160;;;; inner consequent
main.if6.end:
   &#160;;;; remaining code of outer consequent
main.if2.end:</pre>
</td></tr></tbody></table>
<p><br />
For these simple cases, since the mapping of a given operator to its inverse is fixed (e.g., to implement 'less than' you would always substitute 'greater than or equal'), the only change needed is that the code for the test be issued fro the inverse. 
</p><p>Optimizing compound conditionals is a bit trickier, as you would need to consider which operations invert which other ones, and how to apply things like de Morgan's Law. However, it is still reasonable for most compilers to perform certain eliminations, such as replacing separate tests with short-circuiting branches. In the case of an <b>AND'<i>, one can start by short-circuiting the first test to the end of the </i></b><i>and</i> part conditional, so that the second test only gets checked if the first is true. For the <b>NOT</b>, you can get the right result simply by <i>not</i> inverting the final case:
</p><p>However, with a little more effort, a better solution might be possible, if we keep a table of boolean functions and their inverses, and are willing to perform a simple analysis of the order of operations.
</p>
<h2><span class="mw-headline" id="Definite_Loops">Definite Loops</span></h2>
<p>The naive implementation of a definite loop is a conditional branch at the start of the loop and an unconditional branch back to that conditional branch at the end of the loop, which is also the naive implementation of an explicit for loop. An example in MIPS assembly code (using pseudo-instructions) might be:
</p>
<table>
<tbody><tr>
<th>x86-64
</th>
<th>ARM
</th>
<th>MIPS
</th>
</tr></tbody><caption>
</caption>
<tbody><tr><td><pre>        xor rcx, rcx
        mov rbx, for_loop_count
for0.start:
       &#160;; if rcx is greater than or equal 
       &#160;; to rbx, jump past the loop
        cmp rcx, rbx
        jge for1.end
       &#160;;;  body of the loop here
        inc rcx
        jmp for0.start
for0.end:</pre>
</td>
<td><pre>        mov r0, #0                 
        mov r1, #for_loop_count    
for0.start:
       &#160;; if r1 is greater than or equal 
       &#160;; to r0, jump past the loop     
        cmp r0, r1
        bge for1.end       
       &#160;;;  body of the loop here
        add r0, r0, #1
        b for0.start
for0.end:</pre>
</td>
<td><pre>        clear $t0                 
        move $t1, for_loop_count    
for0.start:
       &#160;; if t1 is greater than or equal 
       &#160;; to t0, jump past the loop     
        bge $t0, $t1, for1.end        
       &#160;;;  body of the loop here
        addi $t0, $t0, 1
        bra for0.start
for0.end</pre>
</td></tr></tbody></table>
<p>However, even a naive compiler will usually do <i>loop inversion</i> by using an unconditional branch, followed by the loop label, followed by the body, and then put the loop condition as the target of the original unconditional branch with the condition inverted: 
</p>
<table>
<tbody><tr>
<th>x86-64
</th>
<th>ARM
</th>
<th>MIPS
</th>
</tr></tbody><caption>
</caption>
<tbody><tr><td><pre></pre>
</td>
<td><pre></pre>
</td>
<td><pre>   clear $t0
        move $t1, for_loop_count    
        bra for1.test
for1.start:
       &#160;;;  body of the loop here
        addi $t0, $t0, 1
for1.test:
       &#160;; if t1 is less than to t0, 
       &#160;; jump past the loop
        blt $t0, $t1, for1.start         
for1.end</pre>
</td></tr></tbody></table>
<p>This means that after the loop entry, the loop has just the unconditional branch, making it faster. For a hand-coded recursive descent compiler, this becomes simply a matter of changing the order in which the parsing-emitting functions are called.
</p>
<!-- 
NewPP limit report
Cached time: 20250211125307
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.031 seconds
Real time usage: 0.416 seconds
Preprocessor visited node count: 127/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 5730/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3986-0!canonical and timestamp 20250211125307 and revision id 28080.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=CompilerDev/Implementing_Conditional_Statements_And_Loops&amp;oldid=28080">https://wiki.osdev.org/index.php?title=CompilerDev/Implementing_Conditional_Statements_And_Loops&amp;oldid=28080</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="../Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="../Category:Compiler_Development" title="Category:Compiler Development">Compiler Development</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=CompilerDev%2FImplementing+Conditional+Statements+And+Loops" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Implementing_Conditional_Statements_And_Loops#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Implementing_Conditional_Statements_And_Loops" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="../Talk:CompilerDev/Implementing_Conditional_Statements_And_Loops" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Implementing_Conditional_Statements_And_Loops"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=CompilerDev/Implementing_Conditional_Statements_And_Loops&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=CompilerDev/Implementing_Conditional_Statements_And_Loops&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="../index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="../index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="../Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="../Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="../OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="../OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="../OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="../Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="../Special:WhatLinksHere/CompilerDev/Implementing_Conditional_Statements_And_Loops" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/CompilerDev/Implementing_Conditional_Statements_And_Loops" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="../Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=CompilerDev/Implementing_Conditional_Statements_And_Loops&amp;oldid=28080" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=CompilerDev/Implementing_Conditional_Statements_And_Loops&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 9 July 2023, at 20:55.</li>
	<li id="footer-info-0">This page has been accessed 5,557 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="../OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="../OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="../OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=CompilerDev/Implementing_Conditional_Statements_And_Loops&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="../resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="../resources/assets/poweredby_mediawiki_132x47.png 1.5x, ../resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.031","walltime":"0.416","ppvisitednodes":{"value":127,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":5730,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250211125307","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":525});});</script>
</body>
</html>