<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>RISC-V Bare Bones - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"e76e83f07bef1968e08ac0a7","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"RISC-V_Bare_Bones","wgTitle":"RISC-V Bare Bones","wgCurRevisionId":28308,"wgRevisionId":28308,"wgArticleId":4332,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Stubs","Bare bones tutorials","RISC-V"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"RISC-V_Bare_Bones","wgRelevantArticleId":4332,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],
"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-RISC-V_Bare_Bones rootpage-RISC-V_Bare_Bones skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">RISC-V Bare Bones</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="RISC-V_Bare_Bones#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="RISC-V_Bare_Bones#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p><a href="./File:Stub.png" class="image" title="This article is a stub!"><img alt="This article is a stub!" src="images/f/fe/Stub.png" decoding="async" width="50" height="50" data-file-width="50" data-file-height="50" /></a>
This page or section is a <a href="./Category:Stubs" title="Category:Stubs">stub</a>. You can help the wiki by <i>accurately</i> <a rel="nofollow" class="external text" href="https://wiki.osdev.org/index.php?title=RISC-V_Bare_Bones&amp;action=edit">contributing</a> to it.
</p>
</td>
<td>
</td></tr></tbody></table>
</center>
<p>RISC-V is a instruction set architecture, fully opensource. The ISA has a bunch of extensions, in this tutorial we will assume that imad are available.
</p><p>At our disposal we will have a generic board we will program for: virt. This board is available for QEMU.
</p><p>You can obtain a <a rel="nofollow" class="external text" href="https://mirrors.edge.kernel.org/pub/tools/crosstool/files/bin/x86_64/10.1.0">riscv64 gcc toolchain</a> on kernel.org; Designing an operating system for this architecture is not complicated and is pretty straight forward:
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="RISC-V_Bare_Bones#kernel.c"><span class="tocnumber">1</span> <span class="toctext">kernel.c</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="RISC-V_Bare_Bones#entry.S"><span class="tocnumber">2</span> <span class="toctext">entry.S</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="RISC-V_Bare_Bones#linker.ld"><span class="tocnumber">3</span> <span class="toctext">linker.ld</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="RISC-V_Bare_Bones#Final"><span class="tocnumber">4</span> <span class="toctext">Final</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="RISC-V_Bare_Bones#Going_further"><span class="tocnumber">5</span> <span class="toctext">Going further</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="RISC-V_Bare_Bones#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="kernel.c">kernel.c</span></h2>
<p>The thing we will make here is a simple serial port output/reader.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdint.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stddef.h&gt;</span><span class="cp"></span>
<span class="w"> </span>
<span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">uart</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="mh">0x10000000</span><span class="p">;</span><span class="w"> </span>
<span class="kt">void</span><span class="w"> </span><span class="nf">putchar</span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="o">*</span><span class="n">uart</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">c</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="k">return</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
<span class="w"> </span>
<span class="kt">void</span><span class="w"> </span><span class="nf">print</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">str</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">str</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="sc">&#39;\0&#39;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">putchar</span><span class="p">(</span><span class="o">*</span><span class="n">str</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="n">str</span><span class="o">++</span><span class="p">;</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="k">return</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
<span class="w"> </span>
<span class="kt">void</span><span class="w"> </span><span class="nf">kmain</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;Hello world!</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="c1">// Read input from the UART</span>
<span class="w">		</span><span class="n">putchar</span><span class="p">(</span><span class="o">*</span><span class="n">uart</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="k">return</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>This will print a simple "Hello world!" and a newline following, after that it will echo any input given to the serial port.
</p>
<h2><span class="mw-headline" id="entry.S">entry.S</span></h2>
<p>Be wary we are just setting up stack and jumping into kernel. It's the kernel's job to set up IRQs and other system stuff
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="na">.section</span><span class="w"> </span><span class="no">.init</span><span class="w"></span>

<span class="na">.option</span><span class="w"> </span><span class="no">norvc</span><span class="w"></span>

<span class="na">.type</span><span class="w"> </span><span class="no">start</span><span class="p">,</span><span class="w"> </span><span class="na">@function</span><span class="w"></span>
<span class="na">.global</span><span class="w"> </span><span class="no">start</span><span class="w"></span>
<span class="nl">start:</span><span class="w"></span>
<span class="w">	</span><span class="na">.cfi_startproc</span><span class="w"></span>
<span class="w">	</span>
<span class="na">.option</span><span class="w"> </span><span class="no">push</span><span class="w"></span>
<span class="na">.option</span><span class="w"> </span><span class="no">norelax</span><span class="w"></span>
<span class="w">	</span><span class="nf">la</span><span class="w"> </span><span class="no">gp</span><span class="p">,</span><span class="w"> </span><span class="no">global_pointer</span><span class="w"></span>
<span class="na">.option</span><span class="w"> </span><span class="no">pop</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* Reset satp */</span><span class="w"></span>
<span class="w">	</span><span class="nf">csrw</span><span class="w"> </span><span class="no">satp</span><span class="p">,</span><span class="w"> </span><span class="no">zero</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* Setup stack */</span><span class="w"></span>
<span class="w">	</span><span class="nf">la</span><span class="w"> </span><span class="no">sp</span><span class="p">,</span><span class="w"> </span><span class="no">stack_top</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* Clear the BSS section */</span><span class="w"></span>
<span class="w">	</span><span class="nf">la</span><span class="w"> </span><span class="no">t5</span><span class="p">,</span><span class="w"> </span><span class="no">bss_start</span><span class="w"></span>
<span class="w">	</span><span class="nf">la</span><span class="w"> </span><span class="no">t6</span><span class="p">,</span><span class="w"> </span><span class="no">bss_end</span><span class="w"></span>
<span class="nl">bss_clear:</span><span class="w"></span>
<span class="w">	</span><span class="nf">sd</span><span class="w"> </span><span class="no">zero</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="no">t5</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="nf">addi</span><span class="w"> </span><span class="no">t5</span><span class="p">,</span><span class="w"> </span><span class="no">t5</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="w"></span>
<span class="w">	</span><span class="nf">bltu</span><span class="w"> </span><span class="no">t5</span><span class="p">,</span><span class="w"> </span><span class="no">t6</span><span class="p">,</span><span class="w"> </span><span class="no">bss_clear</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="nf">la</span><span class="w"> </span><span class="no">t0</span><span class="p">,</span><span class="w"> </span><span class="no">kmain</span><span class="w"></span>
<span class="w">	</span><span class="nf">csrw</span><span class="w"> </span><span class="no">mepc</span><span class="p">,</span><span class="w"> </span><span class="no">t0</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="cm">/* Jump to kernel! */</span><span class="w"></span>
<span class="w">	</span><span class="nf">tail</span><span class="w"> </span><span class="no">kmain</span><span class="w"></span>
<span class="w">	</span>
<span class="w">	</span><span class="na">.cfi_endproc</span><span class="w"></span>

<span class="na">.end</span><span class="w"></span>
</pre></div>
<p>Take in account that you need to implement a type of locking if you want to support SMP, and implement a trampoline or a jail for the CPUs. Be wary that we haven't enabled interrupts just yet and any return from kmain will result in invalid opcodes being executed.
</p>
<h2><span class="mw-headline" id="linker.ld">linker.ld</span></h2>
<p>We need to specify where our kernel will be loaded at. For this example we will use the start of the RAM as our load address.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="n">ENTRY</span><span class="p">(</span><span class="n">start</span><span class="p">);</span><span class="w"></span>
<span class="w"> </span>
<span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x80000000</span><span class="p">;</span><span class="w"></span>
<span class="w"> </span>
<span class="n">SECTIONS</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">	</span><span class="cm">/* Include entry point at start of binary */</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">text</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="n">K</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">init</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">text</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">bss</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="n">K</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="n">PROVIDE</span><span class="p">(</span><span class="n">bss_start</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.);</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">bss</span><span class="p">);</span><span class="w"></span>
<span class="w">		</span><span class="p">.</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">4096</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="n">PROVIDE</span><span class="p">(</span><span class="n">stack_top</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.);</span><span class="w"></span>
<span class="w">		</span><span class="p">.</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">4096</span><span class="p">;</span><span class="w"></span>
<span class="w">		</span><span class="n">PROVIDE</span><span class="p">(</span><span class="n">global_pointer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.);</span><span class="w"></span>
<span class="w">		</span><span class="n">PROVIDE</span><span class="p">(</span><span class="n">bss_end</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.);</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">rodata</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="n">K</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">rodata</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="w">	</span><span class="p">.</span><span class="n">data</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="n">K</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">		</span><span class="o">*</span><span class="p">(.</span><span class="n">data</span><span class="p">);</span><span class="w"></span>
<span class="w">	</span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="Final">Final</span></h2>
<p>The process is pretty straightforward:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>riscv64-elf-gcc -Wall -Wextra -c -mcmodel<span class="o">=</span>medany kernel.c -o kernel.o -ffreestanding
riscv64-elf-as -c entry.S -o entry.o
riscv64-elf-ld -T linker.ld -lgcc -nostdlib kernel.o entry.o -o kernel.elf
</pre></div>
<p>Once this is done, the kernel can be run with the following:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>qemu-system-riscv64 -machine virt -bios none -kernel kernel.elf -serial mon:stdio
</pre></div>
<p>You will promptly see a terminal with the "Hello world!" and you can "write stuff" to it. A serial terminal is very "boring", but you still have a lot at your disposal, you have a PLIC, a CLIC and a bunch of opportunities to learn PCI internals.
</p>
<h2><span class="mw-headline" id="Going_further">Going further</span></h2>
<ul><li>Store input somewhere for later processing (i.e: "echo" command)</li>
<li>Implement SMP support, for now our basic kernel will crash on any multicore system</li>
<li>QEMU will give FDT in register a1. Use libfdt to parse the tree to avoid nightrames</li>
<li>Implement a heap</li>
<li>Enable Sv39 paging</li>
<li>SMP support</li>
<li>Manage IRQs</li>
<li>You have a PIO and a MMIO window at your disposal, use them wisely, you will also have to face the PCIe ECAM, for your sanity: Do not implement bridges</li></ul>
<h2><span class="mw-headline" id="See_also">See also</span></h2>
<ul><li><a href="PCI_Express" title="PCI Express">PCI Express</a></li>
<li><a href="HiFive-1_Bare_Bones" title="HiFive-1 Bare Bones">HiFive-1 Bare Bones</a></li>
<li><a href="RISC-V_Meaty_Skeleton_with_QEMU_virt_board" title="RISC-V Meaty Skeleton with QEMU virt board">RISC-V Meaty Skeleton with QEMU virt board</a></li>
<li><a rel="nofollow" class="external text" href="https://msyksphinz-self.github.io/riscv-isadoc/html/rvi.html">RISC-V instruction set</a></li>
<li><a rel="nofollow" class="external text" href="https://osblog.stephenmarz.com/">Small Bare Metal RISCV OS in asm and Rust</a></li>
<li><a rel="nofollow" class="external text" href="https://marz.utk.edu/my-courses/cosc562/riscv/">Page of above with asm code setting up different kernel stack for each hart</a></li>
<li><a rel="nofollow" class="external text" href="https://github.com/cksystemsteaching/selfie">Selfie: a minimalist self hosting compiler, riscv64 os, and simulator</a></li>
<li><a rel="nofollow" class="external text" href="https://github.com/cksystemsteaching/selfie/tree/main/theses">Selfie page includes 2 well written bare-metal theses</a></li>
<li><a rel="nofollow" class="external text" href="https://github.com/phoenix-rtos">Complete open source Microkernel for riscv64 (also arm7, ia32) plus support code</a></li>
<li><a rel="nofollow" class="external text" href="https://github.com/mit-pdos/xv6-riscv">XV6: a reimplementation of original Unix for teaching riscv64 OS development</a></li>
<li><a rel="nofollow" class="external text" href="https://github.com/michaelengel/xv6-vf2">Port of XV6 to execute on VisionFive 2 SoC</a></li>
<li><a rel="nofollow" class="external text" href="https://github.com/lupyuen/nuttx-star64">Wonderfully clear and detailed base level port how2: NuttX RTOS to Star64 SoC</a></li></ul>
<!-- 
NewPP limit report
Cached time: 20250211124658
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.053 seconds
Real time usage: 0.715 seconds
Preprocessor visited node count: 49/1000000
Post‐expand include size: 479/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 4/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 13346/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    1.149      1 Template:Stub
100.00%    1.149      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4332-0!canonical and timestamp 20250211124658 and revision id 28308.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=RISC-V_Bare_Bones&amp;oldid=28308">https://wiki.osdev.org/index.php?title=RISC-V_Bare_Bones&amp;oldid=28308</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Stubs" title="Category:Stubs">Stubs</a></li><li><a href="./Category:Bare_bones_tutorials" title="Category:Bare bones tutorials">Bare bones tutorials</a></li><li><a href="./Category:RISC-V" title="Category:RISC-V">RISC-V</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=RISC-V+Bare+Bones" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="RISC-V_Bare_Bones#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="RISC-V_Bare_Bones" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:RISC-V_Bare_Bones&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="RISC-V_Bare_Bones"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=RISC-V_Bare_Bones&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=RISC-V_Bare_Bones&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/RISC-V_Bare_Bones" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/RISC-V_Bare_Bones" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=RISC-V_Bare_Bones&amp;oldid=28308" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=RISC-V_Bare_Bones&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 10 September 2023, at 17:51.</li>
	<li id="footer-info-0">This page has been accessed 6,020 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=RISC-V_Bare_Bones&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.053","walltime":"0.715","ppvisitednodes":{"value":49,"limit":1000000},"postexpandincludesize":{"value":479,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":4,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":13346,"limit":5000000},"timingprofile":["100.00%    1.149      1 Template:Stub","100.00%    1.149      1 -total"]},"cachereport":{"timestamp":"20250211124658","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":823});});</script>
</body>
</html>