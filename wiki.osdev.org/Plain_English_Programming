<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Plain English Programming - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"982c9320597d58219461e437","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Plain_English_Programming","wgTitle":"Plain English Programming","wgCurRevisionId":28680,"wgRevisionId":28680,"wgArticleId":4541,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Languages"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Plain_English_Programming","wgRelevantArticleId":4541,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],
"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Plain_English_Programming rootpage-Plain_English_Programming skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Plain English Programming</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Plain_English_Programming#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Plain_English_Programming#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>This page relates to Plain English Programming as developed by the Osmosian Order of Plain English Programmers. Notes primarily pertain to the CAL-4700 standalone IDE and compiler. There is at least one other version, Folds/english on Github, 'an authorized "dynamic fork"'. (The major differences are in UI, with Folds/english offering the standard Win32 UI elements.) Language differences, if any, should be noted below.
</p><p><a href="Español_Llano" title="Español Llano">Español Llano</a> is a Spanish-language equivalent.
</p><p>The language is very much like pseudocode. It allows a small degree of arbitrary word choice, but the code understood by the compiler must precisely describe the program's operation. It's strongly typed with a tiny runtime; less than 2KB. It natively targets only 32-bit Windows, but is so simple that retargetting is likely no harder than any other aspect of OS development.
</p><p>Far from "Hello, world," the first thing a user learns to do with CAL-4700 is recompile CAL itself. Then, the user is walked through making an app which takes a string, downloads an image from Google Image Search, and renders it in the style of famous painter Monet. It's a rather broad introduction to the language's features.
</p><p>Note that a sense of humor will be an advantage when reading CAL's instructions. 
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Plain_English_Programming#Language"><span class="tocnumber">1</span> <span class="toctext">Language</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="Plain_English_Programming#Types"><span class="tocnumber">1.1</span> <span class="toctext">Types</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="Plain_English_Programming#Routines_vs._Functions"><span class="tocnumber">1.2</span> <span class="toctext">Routines vs. Functions</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="Plain_English_Programming#Loops_and_Conditionals"><span class="tocnumber">1.3</span> <span class="toctext">Loops and Conditionals</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="Plain_English_Programming#Cross-Compiling_with_CAL"><span class="tocnumber">2</span> <span class="toctext">Cross-Compiling with CAL</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="Plain_English_Programming#Memory_allocation"><span class="tocnumber">2.1</span> <span class="toctext">Memory allocation</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Plain_English_Programming#The_assembly_language_issue"><span class="tocnumber">2.2</span> <span class="toctext">The assembly language issue</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="Plain_English_Programming#Binary_format"><span class="tocnumber">2.3</span> <span class="toctext">Binary format</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Plain_English_Programming#ABI"><span class="tocnumber">2.4</span> <span class="toctext">ABI</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="Plain_English_Programming#CPU_architecture"><span class="tocnumber">2.5</span> <span class="toctext">CPU architecture</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="Plain_English_Programming#Graphics"><span class="tocnumber">3</span> <span class="toctext">Graphics</span></a>
<ul>
<li class="toclevel-2 tocsection-12"><a href="Plain_English_Programming#Coordinate_system"><span class="tocnumber">3.1</span> <span class="toctext">Coordinate system</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-13"><a href="Plain_English_Programming#Porting_CAL"><span class="tocnumber">4</span> <span class="toctext">Porting CAL</span></a>
<ul>
<li class="toclevel-2 tocsection-14"><a href="Plain_English_Programming#Porting_The_Noodle"><span class="tocnumber">4.1</span> <span class="toctext">Porting The Noodle</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="Plain_English_Programming#CAL_looks_like_an_OS..."><span class="tocnumber">4.2</span> <span class="toctext">CAL looks like an OS...</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-16"><a href="Plain_English_Programming#License"><span class="tocnumber">5</span> <span class="toctext">License</span></a></li>
<li class="toclevel-1 tocsection-17"><a href="Plain_English_Programming#Links"><span class="tocnumber">6</span> <span class="toctext">Links</span></a></li>
<li class="toclevel-1 tocsection-18"><a href="Plain_English_Programming#People_and_OSs_using_PEP"><span class="tocnumber">7</span> <span class="toctext">People and OSs using PEP</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Language">Language</span></h2>
<p>The language and its documentation are almost entirely free of jargon and symbols other than a subset of English punctuation. Only the period, comma, colon, and semicolon are commonly used. The minus sign functions as a unary minus for negating variables.
</p><p>The Order's blog makes a case for the language being no more verbose than C or C++. This works if you're a good typist, finding whole words no more trouble to type than symbols. (Having a lot of practice in typing English, I (eekee) find it much less trouble to type than other languages. I find it hard to omit the spaces in both CamelCase and underscore-joined words, and I dislike symbols as I find using the shift key to be uncomfortable. CAL plain English only requires me to use 4 shifted symbols; colon double-quotes and the two parentheses.)
</p><p>"Not" and the suffix "n't" are recognized and understood as you'd expect.
</p><p>Some words are ignored. Development of the language started with the realization that human infants ignore a lot of words when they're starting to learn to understand language.
</p><p>Specifying parameters is more verbose than in human English. Example: a number and another number and a third number and a fourth number. It could be shortened, but typically, you set up a structure and pass that to a routine. For instance, you set up a box and then "Draw the box with the black color." Routines with more than 2 parameters are rare in CAL-4700.
</p><p>Wording tends to differ from English in some other ways too. For example, "Draw the box with the black color", rather than "Draw the box in black." FIXME: check if "in/into/to" is interpreted differently from "with". If not, the latter example is possible.
</p><p>Definition order doesn't matter. (The Order likes to sort definitions by name and rely on incremental search to find them.)
</p>
<h3><span class="mw-headline" id="Types">Types</span></h3>
<p>It has a very strict type system, surprisingly strict for a language intended to be plain English. "A buffer is a string", the compiler is told, and you can "Read the file into a buffer", but you can't "Read the file into a string." (The instructions are wrong on this point. eekee intends to raise the issue with the Order.) This example could be worked around with a record containing "a buffer and a string at the buffer," similar to the example of a box below.
</p><p><b>Numbers</b> are 32-bit signed integers. Unsigned numbers are not well-supported, but appear in ratios.
</p><p>Floating-point support is not included for philosophical reasons. (Something to do with the philosopher Kronecker.)
</p><p><b>Ratios</b> are pairs of numbers, dividend/divisor.
</p><p><b>Pointers</b> with arithmetic permitted. 
</p><p><b>Strings</b> are referenced with start and end pointers. Derived types include substrings and buffers. Riders are a more complex type which works on these. Memory allocation is fully automatic.
</p><p><b>Records</b> do the work of structs and unions. For example:
</p>
<pre>A box has
  a left coord, a top coord, a right coord, a bottom coord,
  a left-top spot at the left, and a right-bottom spot at the right.
</pre>
<p>Note the union of a 4-number structure with 2 "spots" -- pairs of numbers. Not shown: Each spot has an x and a y.
</p><p><b>Things</b> are records with implicit 'previous' and 'next' pointers for use in doubly-linked lists. These lists may be iterated over with very little code. You write, "get a &lt;type&gt; from the list", and later "Loop."
</p><p>Many more types are built from these, especially for the GUI.
</p><p>There is no syntax for genera-purpose <b>arrays</b> as the language designers felt this would not be plain English. This did not prevent them implementing strings as character arrays using pointers and pointer math. The many string routines are good examples, showing how simple this is, though they only cover single-byte pointer math. (Remember the size of numbers and pointers could change if you re-target the compiler.) Memory allocation is built on the routines "To assign a pointer given a byte count", "To reassign a pointer given a byte count", and "To unassign a pointer".
</p>
<h3><span class="mw-headline" id="Routines_vs._Functions">Routines vs. Functions</span></h3>
<p>Like C functions, routines may take parameters and return values, but unlike C functions, they may not be part of an expression. You call one routine per line.
</p><p>Functions may be part of expressions. Function calls may even look like references to structure elements. In that regard, they seem similar to the methods of a pure OO language but the instructions recommends using them sparingly.
</p>
<h3><span class="mw-headline" id="Loops_and_Conditionals">Loops and Conditionals</span></h3>
<p>Nesting of loops or conditionals is not supported. Conditionals may appear within loops, but may not be nested within each other. This was chosen for clarity.
</p><p>In place of nested loops, testing the remainder from a division is commonly used. Alternatively, the inner loop may be put into another definition.
</p><p>Conditionals generally call a routine for the true case. Multiple routines may be called, but good style is to fit the conditional onto one line, with just one or two calls. There is no "else" for the false case. Use the construct in the next paragraph.
</p><p>Switches and "else" are handled with "if" and "exit":
</p>
<pre>If &lt;decider 1&gt;, &lt;call 1&gt;; exit.
If &lt;decider 2&gt;, &lt;call 2&gt;; exit.
If &lt;decider 3&gt;, &lt;call 3&gt;; exit.
&lt;default case code&gt;.
</pre>
<p>A <i>decider</i> is a routine which returns a boolean. These are built in a similar way to switches, but the return syntax is unique:
</p>
<pre>If &lt;other decider 1&gt;, say yes.
If &lt;other decider 2&gt;, say yes.
Say no.
</pre>
<h2><span class="mw-headline" id="Cross-Compiling_with_CAL">Cross-Compiling with CAL</span></h2>
<p>The compiler, text editor, "finder", and a document editor are all integrated into a single binary. In its original form, compilation is triggered by the Run menu entry in the text editor (Ctrl-R). All the files without an extension in the current directory are combined and compiled. The resultant Windows executable is then run. To compile OS code, CAL must be modified. CAL's subsystems are, on the whole, simple and easy to modify, so this will likely be no harder than many other elements of OS development. However, there are quite a number of different areas to change.
</p><p>The compiler relies only on its own internals and files in the single source directory, there is no include search path, so there is very little to go wrong. Of course, you may wish to add path search for your own project as the present arrangement makes it hard to maintain a consistent version of the library. Folds/english may have useful code for this; it searches subfolders if a certain folder name is present.
</p>
<h3><span class="mw-headline" id="Memory_allocation">Memory allocation</span></h3>
<p>You will need some sort of allocator to use many of the language's features. The routines are, "To assign a pointer given a byte count", "To reassign a pointer given a byte count", and "To unassign a pointer". These call Win32 functions which need to be replaced. Additionally, initialization calls Win32 function GetProcessHeap, assigning the returned value to the global variable, "heap pointer".
</p>
<h3><span class="mw-headline" id="The_assembly_language_issue">The assembly language issue</span></h3>
<p>CAL doesn't include an assembler, nor does it work with an external assembler. Rather, hex strings of machine code are entered in-place, together with comments showing the assembly language. It looks like this:
</p>
<pre>To add a number to a pointer;
To add a number to another number:
Intel $8B8508000000. \ mov eax,[ebp+8] \ the number
Intel $8B00. \ mov eax,[eax]
Intel $8B9D0C000000. \ mov ebx,[ebp+12] \ the other number
Intel $0103. \ add [ebx],eax
</pre>
<p>The good news is that there are only 447 "Intel" lines totalling 1841 bytes of machine code. They're all in the standard library, called <i>the noodle</i>.
</p><p>The authors of CAL hand-assemble this code, but there are alternatives. You could write a script to assemble a file with raw output format and hexdump the result. Write each snippet to the file and run the script. Or, you could write an inline assembler. There's little need to cover the entire instruction set of your CPU, CAL-4700 only uses 36 different instructions with a small number of addressing modes. Using all the instructions is for full-complexity compiler projects; the sort which aren't likely to leave you with any time for your OS.
</p>
<h3><span class="mw-headline" id="Binary_format">Binary format</span></h3>
<p>To target x86-32-ELF, such as for a bootloader, modify <i>the compiler</i> to output the required format. 
</p>
<h3><span class="mw-headline" id="ABI">ABI</span></h3>
<p>To target ABIs which pass arguments in registers, the minimum necessary change is to alter only the Call statement. Internal calls will still use the stack for argument passing.
</p><p>Alternatively, you could modify the compiler so all calls pass arguments in registers. In CAL-4700, the compiler only emits 2 instructions on its own, to push and pop eax. Some work may be needed around those.
</p>
<h3><span class="mw-headline" id="CPU_architecture">CPU architecture</span></h3>
<p>First, decide if you're changing the ABI. Calling convention is baked into machine code in the noodle.
</p><p>If you're keeping the ABI, the compiler may only need 4 lines changed; 2 each to push and pop a register. You may also want to check over other binary code emitted by the compiler for endianness and arch-dependent ABI details.
</p><p>Changing "intel" to another name can be done with a simple search-and-replace on the compiler, replacing 12 instances on 11 lines.
</p><p>The remaining work is to rewrite the 447 machine-code instructions in the noodle.
</p>
<h2><span class="mw-headline" id="Graphics">Graphics</span></h2>
<p>CAL-4700 includes a basic GUI and, almost separately, turtle graphics. How easy would it be to use them in your OS?
</p><p>The GUI depends on quite a number of Windows calls, from font rendering to roundy boxes. Obviously, these would need to be replaced or redesigned.
</p><p>The turtle graphics are much simpler, needing only a line drawing routine.
</p><p>A 96-character font is implemented in the turtle graphics. It looks better at some PPI values than others, but may be useful for debug messages or as a very retro stylistic choice. (To find the code, start with the routine "to write a string" in the noodle. The routine "to draw a string" uses Windows font routines.)
</p>
<h3><span class="mw-headline" id="Coordinate_system">Coordinate system</span></h3>
<p>The coordinate system works entirely with integers, but is not tied to pixels. The basic unit is the "twip" which is 1/20th of a printer's point. Inches and other units are converted to twips, which in turn are multiplied by a number derived from the PPI (pixels per inch) setting to produce pixel coordinates. Rotation may be specified in degrees or fractions of a circle.
</p>
<h2><span class="mw-headline" id="Porting_CAL">Porting CAL</span></h2>
<p>Porting CAL itself to your OS might seem like a quick way to get a file manager and text editor, but its drawing code relies on some relatively complex operations. At minimum, you'd have to provide routines to draw fonts and lines clipped to boxes, and convert the "roundy boxes" to square. It doesn't help that CAL's native vector font has entirely different interface routines from TrueType fonts.
</p>
<h3><span class="mw-headline" id="Porting_The_Noodle">Porting The Noodle</span></h3>
<p>An odd feature of the compiler makes this relatively easy, initially. The compiler ignores routines which aren't called. Thus, the noodle's many Win32 calls can be replaced piecemeal. For example, to postpone dealing with sockets, comment out the lines to initialize and finalize winsock in the start up and shut down routines. On the other hand, this feature makes cleaning up harder.
</p>
<h3><span class="mw-headline" id="CAL_looks_like_an_OS...">CAL looks like an OS...</span></h3>
<p>...with its own UI design and standards, but it's not.&#160;:) GUI code is merged, with several routines in <i>the desktop</i> file having code specific to the individual apps. This works well for CAL as a program, but it's an impossible framework for an OS unless you want the most inconvenient kind of <a href="Megalithic_Kernel" title="Megalithic Kernel">Megalithic Kernel</a>.
</p>
<h2><span class="mw-headline" id="License">License</span></h2>
<p>CAL-4700 is not under an open-source license. Each source file begins with a single-line copyright giving only years, "the osmosian order" and a version number. This unfortunately includes all the code which might be called the standard library, and the GUI code which you may (or may not) wish to use. It would be best to contact the Osmosian Order, tell them what you want to do; the programs and systems you want to create and the licensing you would like to release it under, and ask how their copyright will affect it.
</p><p>Operating systems are amongst the things the Osmosian Order would like to see written in Plain English. This is stated in the <a rel="nofollow" class="external text" href="http://osmosian.com/manifesto.pdf">Osmosian Manifesto. (PDF)</a> The manifesto also gives an email address for contact.
</p>
<h2><span class="mw-headline" id="Links">Links</span></h2>
<ul><li><a rel="nofollow" class="external text" href="https://osmosianplainenglishprogramming.blog/">The Osmosian Order's blog</a> — Introduces the language, presents examples and answers many questions.</li>
<li>Download - search the blog for "http" to get the latest link.</li>
<li><a rel="nofollow" class="external text" href="http://osmosian.com/">osmosian.com</a> has very little content, just a semi-humorous slideshow and a link to the manifesto. (This server also hosts downloads.)</li>
<li><a rel="nofollow" class="external text" href="https://github.com/Folds/english">Folds/english on Github</a> — An older version with an open-source licence. Its GUI is more deeply integrated with Windows.</li>
<li><a rel="nofollow" class="external text" href="http://osmosian.com/instructions.pdf">Instructions (PDF)</a> for a deeper look at the language. It's a little out of date. The up to date instructions are included in the CAL download.</li>
<li><a rel="nofollow" class="external text" href="http://osmosian.com/manifesto.pdf">The Osmosian Manifesto (PDF)</a> explains what the Order would like to see, (including operating systems,) and gives a contact email.</li></ul>
<h2><span class="mw-headline" id="People_and_OSs_using_PEP">People and OSs using PEP</span></h2>
<ul><li><a href="./User:Eekee" title="User:Eekee">eekee</a> says, "I'm very happy to find a language which circumvents my problems with jargon and symbols. I can just read CAL's code without getting confused. I'm also happy with its simplicity and extensibility."</li></ul>
<!-- 
NewPP limit report
Cached time: 20250212013126
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.013 seconds
Real time usage: 0.013 seconds
Preprocessor visited node count: 76/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 662/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4541-0!canonical and timestamp 20250212013126 and revision id 28680.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Plain_English_Programming&amp;oldid=28680">https://wiki.osdev.org/index.php?title=Plain_English_Programming&amp;oldid=28680</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="./Category:Languages" title="Category:Languages">Languages</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Plain+English+Programming" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Plain_English_Programming#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Plain_English_Programming" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:Plain_English_Programming&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Plain_English_Programming"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Plain_English_Programming&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Plain_English_Programming&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Plain_English_Programming" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Plain_English_Programming" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Plain_English_Programming&amp;oldid=28680" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Plain_English_Programming&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 1 March 2024, at 18:56.</li>
	<li id="footer-info-0">This page has been accessed 4,418 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Plain_English_Programming&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.013","walltime":"0.013","ppvisitednodes":{"value":76,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":662,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250212013126","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":105});});</script>
</body>
</html>