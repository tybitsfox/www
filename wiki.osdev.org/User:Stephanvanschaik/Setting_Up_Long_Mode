<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Setting Up Long Mode - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"6db3b417dc479d9d645edd59","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Setting_Up_Long_Mode","wgTitle":"Setting Up Long Mode","wgCurRevisionId":28309,"wgRevisionId":28309,"wgArticleId":2814,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","X86-64","Operating Modes"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Setting_Up_Long_Mode","wgRelevantArticleId":2814,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],
"wgRestrictionMove":[],"wgRedirectedFrom":"User:Stephanvanschaik/Setting_Up_Long_Mode","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgInternalRedirectTargetUrl":"/Setting_Up_Long_Mode","wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["mediawiki.action.view.redirect","site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook",
"ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="../favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="../opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="../api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<link rel="canonical" href="../Setting_Up_Long_Mode"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Setting_Up_Long_Mode rootpage-Setting_Up_Long_Mode skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Setting Up Long Mode</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"><span class="mw-redirectedfrom">(Redirected from <a href="https://wiki.osdev.org/index.php?title=User:Stephanvanschaik/Setting_Up_Long_Mode&amp;redirect=no" class="mw-redirect" title="User:Stephanvanschaik/Setting Up Long Mode">User:Stephanvanschaik/Setting Up Long Mode</a>)</span></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Setting_Up_Long_Mode#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Setting_Up_Long_Mode#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Setting_Up_Long_Mode#Overview"><span class="tocnumber">1</span> <span class="toctext">Overview</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Setting_Up_Long_Mode#Introduction"><span class="tocnumber">2</span> <span class="toctext">Introduction</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Setting_Up_Long_Mode#Detecting_the_Presence_of_Long_Mode"><span class="tocnumber">3</span> <span class="toctext">Detecting the Presence of Long Mode</span></a>
<ul>
<li class="toclevel-2 tocsection-4"><a href="Setting_Up_Long_Mode#Detection_of_CPUID"><span class="tocnumber">3.1</span> <span class="toctext">Detection of CPUID</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="Setting_Up_Long_Mode#x86_or_x86-64"><span class="tocnumber">3.2</span> <span class="toctext">x86 or x86-64</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-6"><a href="Setting_Up_Long_Mode#Entering_Long_Mode"><span class="tocnumber">4</span> <span class="toctext">Entering Long Mode</span></a>
<ul>
<li class="toclevel-2 tocsection-7"><a href="Setting_Up_Long_Mode#Setting_up_the_Paging"><span class="tocnumber">4.1</span> <span class="toctext">Setting up the Paging</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="Setting_Up_Long_Mode#Future_of_x86-64_-_the_PML5"><span class="tocnumber">4.2</span> <span class="toctext">Future of x86-64 - the PML5</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Setting_Up_Long_Mode#The_Switch_from_Real_Mode"><span class="tocnumber">4.3</span> <span class="toctext">The Switch from Real Mode</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="Setting_Up_Long_Mode#The_Switch_from_Protected_Mode"><span class="tocnumber">4.4</span> <span class="toctext">The Switch from Protected Mode</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="Setting_Up_Long_Mode#Entering_the_64-bit_Submode"><span class="tocnumber">5</span> <span class="toctext">Entering the 64-bit Submode</span></a>
<ul>
<li class="toclevel-2 tocsection-12"><a href="Setting_Up_Long_Mode#Sample"><span class="tocnumber">5.1</span> <span class="toctext">Sample</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-13"><a href="Setting_Up_Long_Mode#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a>
<ul>
<li class="toclevel-2 tocsection-14"><a href="Setting_Up_Long_Mode#Articles"><span class="tocnumber">6.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="Setting_Up_Long_Mode#Threads"><span class="tocnumber">6.2</span> <span class="toctext">Threads</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="Setting_Up_Long_Mode#Wikipedia"><span class="tocnumber">6.3</span> <span class="toctext">Wikipedia</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Overview">Overview</span></h2>
<ul><li>Covering long mode.</li>
<li>How to detect long mode (Recommended read: <a href="../CPUID" title="CPUID">CPUID</a>).</li>
<li>How to set up paging for long mode (Recommended reads: <a href="../Setting_Up_Paging" title="Setting Up Paging">Setting up Paging</a> and <a href="../Setting_Up_Paging_With_PAE" title="Setting Up Paging With PAE">Setting up Paging using PAE</a>).</li>
<li>How to enter long mode.</li>
<li>How to set up the GDT for long mode (Recommended read: <a href="../GDT" class="mw-redirect" title="GDT">GDT</a>).</li></ul>
<h2><span class="mw-headline" id="Introduction">Introduction</span></h2>
<p>What is long mode and why set it up? Since the introduction of the x86-64 processors (AMD64, Intel 64 (a.k.a. EM64T), VIA Nano) a new mode has been introduced as well, which is called long mode. Long mode basically consists out of two sub modes which are the actual 64-bit mode and compatibility mode (32-bit, usually referred to as IA32e in the AMD64 manuals). What we are interested in is simply the 64-bit mode as this mode provides a lot of new features such as: registers being extended to 64-bit (rax, rcx, rdx, rbx, rsp, rbp, rip, etc.) and the introduction of eight new general-purpose registers (r8 - r15), but also the introduction of eight new multimedia registers (xmm8 - xmm15). 64-bit mode is basically a new world as it is almost completely void of the segmentation that was used on the 8086-processors and the <a href="../GDT" class="mw-redirect" title="GDT">GDT</a>, the <a href="../IDT" class="mw-redirect" title="IDT">IDT</a>, <a href="../Paging" title="Paging">paging</a>, etc. are also kind of different compared to the old 32-bit mode (a.k.a. <a href="../Protected_Mode" title="Protected Mode">protected mode</a>).
</p>
<h2><span class="mw-headline" id="Detecting_the_Presence_of_Long_Mode">Detecting the Presence of Long Mode</span></h2>
<p>There are only three processor vendors so far who have made processors that are capable of entering and using long mode, they're: AMD, Intel and VIA. Basically Intel tried to get 64-bit processors on the market with EM64T, but failed to do so and now they use AMD's x86-64 architecture instead, which means using 64-bit on an Intel processor is (almost) identical to using 64-bit on an AMD processor (and VIA should be identical as well). We can detect the presence of long mode by using the <a href="../CPUID" title="CPUID">CPUID-instruction</a>.
</p>
<h3><span class="mw-headline" id="Detection_of_CPUID">Detection of CPUID</span></h3>
<p>Basically, detecting whether CPUID is supported by your processor is covered <a href="../CPUID" title="CPUID">here</a>, but we will show how to do it here. CPUID is supported when the ID-bit in the FLAGS-register can be flipped. So let's try that, then:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="w">    </span><span class="c1">; Check if CPUID is supported by attempting to flip the ID bit (bit 21) in</span>
<span class="w">    </span><span class="c1">; the FLAGS register. If we can flip it, CPUID is available.</span>

<span class="w">    </span><span class="c1">; Copy FLAGS in to EAX via stack</span>
<span class="w">    </span><span class="nf">pushfd</span><span class="w"></span>
<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">eax</span><span class="w"></span>

<span class="w">    </span><span class="c1">; Copy to ECX as well for comparing later on</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">ecx</span><span class="p">,</span><span class="w"> </span><span class="no">eax</span><span class="w"></span>

<span class="w">    </span><span class="c1">; Flip the ID bit</span>
<span class="w">    </span><span class="nf">xor</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">21</span><span class="w"></span>

<span class="w">    </span><span class="c1">; Copy EAX to FLAGS via the stack</span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">eax</span><span class="w"></span>
<span class="w">    </span><span class="nf">popfd</span><span class="w"></span>

<span class="w">    </span><span class="c1">; Copy FLAGS back to EAX (with the flipped bit if CPUID is supported)</span>
<span class="w">    </span><span class="nf">pushfd</span><span class="w"></span>
<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">eax</span><span class="w"></span>

<span class="w">    </span><span class="c1">; Restore FLAGS from the old version stored in ECX (i.e. flipping the ID bit</span>
<span class="w">    </span><span class="c1">; back if it was ever flipped).</span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">ecx</span><span class="w"></span>
<span class="w">    </span><span class="nf">popfd</span><span class="w"></span>

<span class="w">    </span><span class="c1">; Compare EAX and ECX. If they are equal then that means the bit wasn&#39;t</span>
<span class="w">    </span><span class="c1">; flipped, and CPUID isn&#39;t supported.</span>
<span class="w">    </span><span class="nf">xor</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="no">ecx</span><span class="w"></span>
<span class="w">    </span><span class="nf">jz</span><span class="w"> </span><span class="no">.NoCPUID</span><span class="w"></span>
<span class="w">    </span><span class="nf">ret</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="x86_or_x86-64">x86 or x86-64</span></h3>
<p>Now that CPUID is available we have to check whether long mode can be used or not. Long mode can only be detected using the extended functions of CPUID (&gt; 0x80000000), so we have to check if the function that determines whether long mode is available or not is actually available:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">0x80000000</span><span class="w">    </span><span class="c1">; Set the A-register to 0x80000000.</span>
<span class="w">    </span><span class="nf">cpuid</span><span class="w">                  </span><span class="c1">; CPU identification.</span>
<span class="w">    </span><span class="nf">cmp</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">0x80000001</span><span class="w">    </span><span class="c1">; Compare the A-register with 0x80000001.</span>
<span class="w">    </span><span class="nf">jb</span><span class="w"> </span><span class="no">.NoLongMode</span><span class="w">         </span><span class="c1">; It is less, there is no long mode.</span>
</pre></div>
<p>Now that we know that extended function is available we can use it to detect long mode:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">0x80000001</span><span class="w">    </span><span class="c1">; Set the A-register to 0x80000001.</span>
<span class="w">    </span><span class="nf">cpuid</span><span class="w">                  </span><span class="c1">; CPU identification.</span>
<span class="w">    </span><span class="nf">test</span><span class="w"> </span><span class="no">edx</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">29</span><span class="w">      </span><span class="c1">; Test if the LM-bit, which is bit 29, is set in the D-register.</span>
<span class="w">    </span><span class="nf">jz</span><span class="w"> </span><span class="no">.NoLongMode</span><span class="w">         </span><span class="c1">; They aren&#39;t, there is no long mode.</span>
</pre></div>
<p>Now that we know if long mode is actually supported by the processor, we can actually use it.
</p>
<h2><span class="mw-headline" id="Entering_Long_Mode">Entering Long Mode</span></h2>
<p>Entering long mode can be done from both real mode and protected mode, however only protected mode is covered in the Intel and AMD64 manuals. Early AMD documentation explains this process works from real mode as well.
</p><p>Before anything, it is recommended that you enable the <a href="../A20_Line" title="A20 Line">A20 Line</a>; otherwise only odd MiBs can be accessed.
</p>
<h3><span class="mw-headline" id="Setting_up_the_Paging">Setting up the Paging</span></h3>
<p>Before we actually cover up the new paging used in x86-64 we should disable the old paging first (you can skip this if you never set up paging in protected mode) as this is required.
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="no">cr0</span><span class="w">                                   </span><span class="c1">; Set the A-register to control register 0.</span>
<span class="w">    </span><span class="nf">and</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">01111111111111111111111111111111</span><span class="no">b</span><span class="w">     </span><span class="c1">; Clear the PG-bit, which is bit 31.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">cr0</span><span class="p">,</span><span class="w"> </span><span class="no">eax</span><span class="w">                                   </span><span class="c1">; Set control register 0 to the A-register.</span>
</pre></div>
<p>Now that paging is disabled, we can actually take a look at how paging is set up in x86-64 (It's recommended to read Chapter 5.3 of the AMD64 Architecture Programmer's Manual, Volume 2). First of all, long mode uses PAE paging and therefore you have the page-directory pointer table (PDPT), the page-directory table (PDT) and the page table (PT). There's also another table which now forms the root (instead of the PDPT or the PDT) and that is page-map level-4 table (PML4T). In protected mode a page table entry was only four bytes long, so you had 1024 entries per table. In long mode, however, you only have 512 entries per table as each entry is eight bytes long. This means that one entry in a PT can address 4kB, one entry in a PDT can address 2MB, one entry in a PDPT can address 1GB and one entry in a PML4T can address 512GB. This means that only 256TB can be addressed. The way these tables work is that each entry in the PML4T point to a PDPT, each entry in a PDPT to a PDT and each entry in a PDT to a PT. Each entry in a PT then points to the physical address, that is, if it is marked as present. So how does the MMU/processor know which physical address should be used with which virtual address? Basically each table has 512 entries ranging from 0 to 511. These entries each refer to a specific domain of memory. Like index 0 of the PML4T refers to the first 512GB in virtual memory, index 1 refers to the next 512GB and so on. The same applies to the PDPT, PDT and the PT (except with smaller sizes; 1GB, 2MB and 4kB as seen above). The last gigabyte of virtual memory would be described in the table referred to by 511th index of the PDPT which is referred to by the 511th index of the PML4T or in psuedo-C:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="n">pagedir_t</span><span class="o">*</span><span class="w"> </span><span class="n">PDT</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PML4</span><span class="p">[</span><span class="mi">511</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">PDPT</span><span class="p">[</span><span class="mi">511</span><span class="p">];</span><span class="w"></span>
</pre></div>
<p>Basically, what pages you want to set up and how you want them to be set up is up to you, but I'd identity map the first megabyte and then map some high memory to the memory after the first megabyte, however, this may be pretty difficult to set up first. So let's identity map the first two megabytes. We'll set up four tables at 0x1000 (assuming that this is free to use): a PML4T, a PDPT, a PDT and a PT. Basically we want to identity map the first two megabytes so:
</p>
<ul><li>PML4T[0] -&gt; PDPT.</li>
<li>PDPT[0] -&gt; PDT.</li>
<li>PDT[0] -&gt; PT.</li>
<li>PT -&gt; 0x00000000 - 0x00200000.</li></ul>
<p>First we will clear the tables:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">edi</span><span class="p">,</span><span class="w"> </span><span class="mi">0x1000</span><span class="w">    </span><span class="c1">; Set the destination index to 0x1000.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">cr3</span><span class="p">,</span><span class="w"> </span><span class="no">edi</span><span class="w">       </span><span class="c1">; Set control register 3 to the destination index.</span>
<span class="w">    </span><span class="nf">xor</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="no">eax</span><span class="w">       </span><span class="c1">; Nullify the A-register.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">ecx</span><span class="p">,</span><span class="w"> </span><span class="mi">4096</span><span class="w">      </span><span class="c1">; Set the C-register to 4096.</span>
<span class="w">    </span><span class="na">rep</span><span class="w"> </span><span class="nf">stosd</span><span class="w">          </span><span class="c1">; Clear the memory.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">edi</span><span class="p">,</span><span class="w"> </span><span class="no">cr3</span><span class="w">       </span><span class="c1">; Set the destination index to control register 3.</span>
</pre></div>
<p>Now that the page are clear we're going to set up the tables, the page tables are going to be located at these addresses:
</p>
<ul><li>PML4T - 0x1000.</li>
<li>PDPT - 0x2000.</li>
<li>PDT - 0x3000.</li>
<li>PT - 0x4000.</li></ul>
<p>So lets make PML4T[0] point to the PDPT and so on:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">DWORD</span><span class="w"> </span><span class="p">[</span><span class="no">edi</span><span class="p">],</span><span class="w"> </span><span class="mi">0x2003</span><span class="w">      </span><span class="c1">; Set the uint32_t at the destination index to 0x2003.</span>
<span class="w">    </span><span class="nf">add</span><span class="w"> </span><span class="no">edi</span><span class="p">,</span><span class="w"> </span><span class="mi">0x1000</span><span class="w">              </span><span class="c1">; Add 0x1000 to the destination index.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">DWORD</span><span class="w"> </span><span class="p">[</span><span class="no">edi</span><span class="p">],</span><span class="w"> </span><span class="mi">0x3003</span><span class="w">      </span><span class="c1">; Set the uint32_t at the destination index to 0x3003.</span>
<span class="w">    </span><span class="nf">add</span><span class="w"> </span><span class="no">edi</span><span class="p">,</span><span class="w"> </span><span class="mi">0x1000</span><span class="w">              </span><span class="c1">; Add 0x1000 to the destination index.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">DWORD</span><span class="w"> </span><span class="p">[</span><span class="no">edi</span><span class="p">],</span><span class="w"> </span><span class="mi">0x4003</span><span class="w">      </span><span class="c1">; Set the uint32_t at the destination index to 0x4003.</span>
<span class="w">    </span><span class="nf">add</span><span class="w"> </span><span class="no">edi</span><span class="p">,</span><span class="w"> </span><span class="mi">0x1000</span><span class="w">              </span><span class="c1">; Add 0x1000 to the destination index.</span>
</pre></div>
<p>If you haven't noticed already, I used a three. This simply means that the first two bits should be set. These bits indicate that the page is present and that it is readable as well as writable. Now all that's left to do is identity map the first two megabytes:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">ebx</span><span class="p">,</span><span class="w"> </span><span class="mi">0x00000003</span><span class="w">          </span><span class="c1">; Set the B-register to 0x00000003.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">ecx</span><span class="p">,</span><span class="w"> </span><span class="mi">512</span><span class="w">                 </span><span class="c1">; Set the C-register to 512.</span>
<span class="w">    </span>
<span class="nl">.SetEntry:</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">DWORD</span><span class="w"> </span><span class="p">[</span><span class="no">edi</span><span class="p">],</span><span class="w"> </span><span class="no">ebx</span><span class="w">         </span><span class="c1">; Set the uint32_t at the destination index to the B-register.</span>
<span class="w">    </span><span class="nf">add</span><span class="w"> </span><span class="no">ebx</span><span class="p">,</span><span class="w"> </span><span class="mi">0x1000</span><span class="w">              </span><span class="c1">; Add 0x1000 to the B-register.</span>
<span class="w">    </span><span class="nf">add</span><span class="w"> </span><span class="no">edi</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="w">                   </span><span class="c1">; Add eight to the destination index.</span>
<span class="w">    </span><span class="nf">loop</span><span class="w"> </span><span class="no">.SetEntry</span><span class="w">               </span><span class="c1">; Set the next entry.</span>
</pre></div>
<p>Now we should enable PAE-paging by setting the PAE-bit in the fourth control register:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="no">cr4</span><span class="w">                 </span><span class="c1">; Set the A-register to control register 4.</span>
<span class="w">    </span><span class="nf">or</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">5</span><span class="w">               </span><span class="c1">; Set the PAE-bit, which is the 6th bit (bit 5).</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">cr4</span><span class="p">,</span><span class="w"> </span><span class="no">eax</span><span class="w">                 </span><span class="c1">; Set control register 4 to the A-register.</span>
</pre></div>
<p>Now paging is set up, but it isn't enabled yet.
</p>
<h3><span class="mw-headline" id="Future_of_x86-64_-_the_PML5">Future of x86-64 - the PML5</span></h3>
<p>In November 2016, Intel released a white paper <a rel="nofollow" class="external autonumber" href="https://cdrdv2-public.intel.com/671442/5-level-paging-white-paper.pdf">[1]</a> about 5-level paging, and started supporting it with Ice Lake processors in 2019. These processors support a 128 PiB address space, and furthermore up to 4 PiB of physical memory (far above the 4-level 256 TiB/64 TiB limits). Support for this is detected as follows:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">0x7</span><span class="w">                 </span><span class="c1">; You might want to check for page 7 first!</span>
<span class="w">    </span><span class="nf">xor</span><span class="w"> </span><span class="no">ecx</span><span class="p">,</span><span class="w"> </span><span class="no">ecx</span><span class="w"></span>
<span class="w">    </span><span class="nf">cpuid</span><span class="w"></span>
<span class="w">    </span><span class="nf">test</span><span class="w"> </span><span class="no">ecx</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="err">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="nf">jnz</span><span class="w"> </span><span class="no">.5_level_paging</span><span class="w"></span>
</pre></div>
<p>The paging structures are identical to the 4 level versions, there's just an added layer of indirection. Your recursive address (if you use recursive mappings) will change.
5 level paging is enabled if CR4.LA57=1, and EFER.LMA=1.
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">BITS</span><span class="w"> </span><span class="mi">32</span><span class="w"></span>
<span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="no">cr4</span><span class="w"></span>
<span class="nf">or</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="err">&lt;&lt;</span><span class="mi">12</span><span class="p">)</span><span class="w"> </span><span class="c1">;CR4.LA57</span>
<span class="nf">mov</span><span class="w"> </span><span class="no">cr4</span><span class="p">,</span><span class="w"> </span><span class="no">eax</span><span class="w"></span>
</pre></div>
<p>Note that attempting to set CR4.LA57 while EFER.LMA=1 causes a #GP general protection fault. You therefore need to drop into protected mode or set up 5 level paging before entering long mode in the first place.
</p>
<h3><span class="mw-headline" id="The_Switch_from_Real_Mode">The Switch from Real Mode</span></h3>
<p>There's not much left to do. We should set the long mode bit in the EFER MSR and then we should enable paging and protected mode and then we are in compatibility mode (which is part of long mode).
</p><p>So we first set the LM-bit:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">ecx</span><span class="p">,</span><span class="w"> </span><span class="mi">0xC0000080</span><span class="w">          </span><span class="c1">; Set the C-register to 0xC0000080, which is the EFER MSR.</span>
<span class="w">    </span><span class="nf">rdmsr</span><span class="w">                        </span><span class="c1">; Read from the model-specific register.</span>
<span class="w">    </span><span class="nf">or</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">8</span><span class="w">               </span><span class="c1">; Set the LM-bit which is the 9th bit (bit 8).</span>
<span class="w">    </span><span class="nf">wrmsr</span><span class="w">                        </span><span class="c1">; Write to the model-specific register.</span>
</pre></div>
<p>Enabling paging and protected mode:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="no">cr0</span><span class="w">                 </span><span class="c1">; Set the A-register to control register 0.</span>
<span class="w">    </span><span class="nf">or</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">31</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">0</span><span class="w">     </span><span class="c1">; Set the PG-bit, which is the 31nd bit, and the PM-bit, which is the 0th bit.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">cr0</span><span class="p">,</span><span class="w"> </span><span class="no">eax</span><span class="w">                 </span><span class="c1">; Set control register 0 to the A-register.</span>
</pre></div>
<p>Now we're in compatibility mode.
</p>
<h3><span class="mw-headline" id="The_Switch_from_Protected_Mode">The Switch from Protected Mode</span></h3>
<p>There's not much left to do. We should set the long mode bit in the EFER MSR and then we should enable paging and then we are in compatibility mode (which is part of long mode).
</p><p>So we first set the LM-bit:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">ecx</span><span class="p">,</span><span class="w"> </span><span class="mi">0xC0000080</span><span class="w">          </span><span class="c1">; Set the C-register to 0xC0000080, which is the EFER MSR.</span>
<span class="w">    </span><span class="nf">rdmsr</span><span class="w">                        </span><span class="c1">; Read from the model-specific register.</span>
<span class="w">    </span><span class="nf">or</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">8</span><span class="w">               </span><span class="c1">; Set the LM-bit which is the 9th bit (bit 8).</span>
<span class="w">    </span><span class="nf">wrmsr</span><span class="w">                        </span><span class="c1">; Write to the model-specific register.</span>
</pre></div>
<p>Enabling paging:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="no">cr0</span><span class="w">                 </span><span class="c1">; Set the A-register to control register 0.</span>
<span class="w">    </span><span class="nf">or</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">31</span><span class="w">              </span><span class="c1">; Set the PG-bit, which is the 32nd bit (bit 31).</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">cr0</span><span class="p">,</span><span class="w"> </span><span class="no">eax</span><span class="w">                 </span><span class="c1">; Set control register 0 to the A-register.</span>
</pre></div>
<p>Now we're in compatibility mode.
</p>
<h2><span class="mw-headline" id="Entering_the_64-bit_Submode">Entering the 64-bit Submode</span></h2>
<p>Now that we're in long mode, there's one issue left: we are in the 32-bit compatibility submode and we actually wanted to enter 64-bit long mode. This isn't a hard thing to do. We should load just load a GDT with the 64-bit flags set in the code and data selectors.
</p><p>Our GDT (see chapter 4.8.1 and 4.8.2 of the AMD64 Architecture Programmer's Manual Volume 2) should look like this:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">; Access bits</span>
<span class="nf">PRESENT</span><span class="w">        </span><span class="no">equ</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">7</span><span class="w"></span>
<span class="nf">NOT_SYS</span><span class="w">        </span><span class="no">equ</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">4</span><span class="w"></span>
<span class="nf">EXEC</span><span class="w">           </span><span class="no">equ</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">3</span><span class="w"></span>
<span class="nf">DC</span><span class="w">             </span><span class="no">equ</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">2</span><span class="w"></span>
<span class="nf">RW</span><span class="w">             </span><span class="no">equ</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">1</span><span class="w"></span>
<span class="nf">ACCESSED</span><span class="w">       </span><span class="no">equ</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>

<span class="c1">; Flags bits</span>
<span class="nf">GRAN_4K</span><span class="w">       </span><span class="no">equ</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">7</span><span class="w"></span>
<span class="nf">SZ_32</span><span class="w">         </span><span class="no">equ</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">6</span><span class="w"></span>
<span class="nf">LONG_MODE</span><span class="w">     </span><span class="no">equ</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">&lt;&lt;</span><span class="w"> </span><span class="mi">5</span><span class="w"></span>

<span class="nl">GDT:</span><span class="w"></span>
<span class="w">    </span><span class="nl">.Null:</span><span class="w"> </span><span class="nf">equ</span><span class="w"> </span><span class="no">$</span><span class="w"> </span><span class="p">-</span><span class="w"> </span><span class="no">GDT</span><span class="w"></span>
<span class="w">        </span><span class="nf">dq</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="w">    </span><span class="nl">.Code:</span><span class="w"> </span><span class="nf">equ</span><span class="w"> </span><span class="no">$</span><span class="w"> </span><span class="p">-</span><span class="w"> </span><span class="no">GDT</span><span class="w"></span>
<span class="w">        </span><span class="nf">dd</span><span class="w"> </span><span class="mi">0xFFFF</span><span class="w">                                   </span><span class="c1">; Limit &amp; Base (low, bits 0-15)</span>
<span class="w">        </span><span class="nf">db</span><span class="w"> </span><span class="mi">0</span><span class="w">                                        </span><span class="c1">; Base (mid, bits 16-23)</span>
<span class="w">        </span><span class="nf">db</span><span class="w"> </span><span class="no">PRESENT</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="no">NOT_SYS</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="no">EXEC</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="no">RW</span><span class="w">            </span><span class="c1">; Access</span>
<span class="w">        </span><span class="nf">db</span><span class="w"> </span><span class="no">GRAN_4K</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="no">LONG_MODE</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="mi">0xF</span><span class="w">                </span><span class="c1">; Flags &amp; Limit (high, bits 16-19)</span>
<span class="w">        </span><span class="nf">db</span><span class="w"> </span><span class="mi">0</span><span class="w">                                        </span><span class="c1">; Base (high, bits 24-31)</span>
<span class="w">    </span><span class="nl">.Data:</span><span class="w"> </span><span class="nf">equ</span><span class="w"> </span><span class="no">$</span><span class="w"> </span><span class="p">-</span><span class="w"> </span><span class="no">GDT</span><span class="w"></span>
<span class="w">        </span><span class="nf">dd</span><span class="w"> </span><span class="mi">0xFFFF</span><span class="w">                                   </span><span class="c1">; Limit &amp; Base (low, bits 0-15)</span>
<span class="w">        </span><span class="nf">db</span><span class="w"> </span><span class="mi">0</span><span class="w">                                        </span><span class="c1">; Base (mid, bits 16-23)</span>
<span class="w">        </span><span class="nf">db</span><span class="w"> </span><span class="no">PRESENT</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="no">NOT_SYS</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="no">RW</span><span class="w">                   </span><span class="c1">; Access</span>
<span class="w">        </span><span class="nf">db</span><span class="w"> </span><span class="no">GRAN_4K</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="no">SZ_32</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="mi">0xF</span><span class="w">                    </span><span class="c1">; Flags &amp; Limit (high, bits 16-19)</span>
<span class="w">        </span><span class="nf">db</span><span class="w"> </span><span class="mi">0</span><span class="w">                                        </span><span class="c1">; Base (high, bits 24-31)</span>
<span class="w">    </span><span class="nl">.TSS:</span><span class="w"> </span><span class="nf">equ</span><span class="w"> </span><span class="no">$</span><span class="w"> </span><span class="p">-</span><span class="w"> </span><span class="no">GDT</span><span class="w"></span>
<span class="w">        </span><span class="nf">dd</span><span class="w"> </span><span class="mi">0x00000068</span><span class="w"></span>
<span class="w">        </span><span class="nf">dd</span><span class="w"> </span><span class="mi">0x00CF8900</span><span class="w"></span>
<span class="w">    </span><span class="nl">.Pointer:</span><span class="w"></span>
<span class="w">        </span><span class="nf">dw</span><span class="w"> </span><span class="no">$</span><span class="w"> </span><span class="p">-</span><span class="w"> </span><span class="no">GDT</span><span class="w"> </span><span class="p">-</span><span class="w"> </span><span class="mi">1</span><span class="w"></span>
<span class="w">        </span><span class="nf">dq</span><span class="w"> </span><span class="no">GDT</span><span class="w"></span>
</pre></div>
<p>Notice that we set a 4gb limit for code. This is needed because the processor will make a last limit check before the jump, and having a limit of 0 will cause a #GP (tested in bochs). After that, the limit will be ignored. Now the only thing left to do is load it and make the jump to 64-bit:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="w">    </span><span class="nf">lgdt</span><span class="w"> </span><span class="p">[</span><span class="no">GDT64.Pointer</span><span class="p">]</span><span class="w">         </span><span class="c1">; Load the 64-bit global descriptor table.</span>
<span class="w">    </span><span class="nf">jmp</span><span class="w"> </span><span class="no">GDT64.Code</span><span class="p">:</span><span class="no">Realm64</span><span class="w">       </span><span class="c1">; Set the code segment and enter 64-bit long mode.</span>
</pre></div>
<h3><span class="mw-headline" id="Sample">Sample</span></h3>
<p>Now that we're in 64-bit, we want to do something that is actually 64-bit. In this sample I'm just going with an ordinary clear the screen:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">; Use 64-bit.</span>
<span class="err">[</span><span class="nf">BITS</span><span class="w"> </span><span class="mi">64</span><span class="p">]</span><span class="w"></span>

<span class="nl">Realm64:</span><span class="w"></span>
<span class="w">    </span><span class="nf">cli</span><span class="w">                           </span><span class="c1">; Clear the interrupt flag.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">ax</span><span class="p">,</span><span class="w"> </span><span class="no">GDT64.Data</span><span class="w">            </span><span class="c1">; Set the A-register to the data descriptor.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">ds</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w">                    </span><span class="c1">; Set the data segment to the A-register.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">es</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w">                    </span><span class="c1">; Set the extra segment to the A-register.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">fs</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w">                    </span><span class="c1">; Set the F-segment to the A-register.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">gs</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w">                    </span><span class="c1">; Set the G-segment to the A-register.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">ss</span><span class="p">,</span><span class="w"> </span><span class="no">ax</span><span class="w">                    </span><span class="c1">; Set the stack segment to the A-register.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">edi</span><span class="p">,</span><span class="w"> </span><span class="mi">0xB8000</span><span class="w">              </span><span class="c1">; Set the destination index to 0xB8000.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">rax</span><span class="p">,</span><span class="w"> </span><span class="mi">0x1F201F201F201F20</span><span class="w">   </span><span class="c1">; Set the A-register to 0x1F201F201F201F20.</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">ecx</span><span class="p">,</span><span class="w"> </span><span class="mi">500</span><span class="w">                  </span><span class="c1">; Set the C-register to 500.</span>
<span class="w">    </span><span class="na">rep</span><span class="w"> </span><span class="nf">stosq</span><span class="w">                     </span><span class="c1">; Clear the screen.</span>
<span class="w">    </span><span class="nf">hlt</span><span class="w">                           </span><span class="c1">; Halt the processor.</span>
</pre></div>
<p>It is very important that you don't enable the interrupts (unless you have set up a 64-bit IDT of course).
</p>
<h2><span class="mw-headline" id="See_also">See also</span></h2>
<h3><span class="mw-headline" id="Articles">Articles</span></h3>
<ul><li><a href="../EM64T" title="EM64T">Intel EM64T</a></li>
<li><a href="../X86-64" title="X86-64">X86-64</a></li>
<li><a href="../Creating_a_64-bit_kernel" title="Creating a 64-bit kernel">Creating a 64-bit kernel</a></li>
<li><a href="../Entering_Long_Mode_Directly" title="Entering Long Mode Directly">Entering Long Mode Directly</a></li></ul>
<h3><span class="mw-headline" id="Threads">Threads</span></h3>
<ul><li><a rel="nofollow" class="external text" href="http://forum.osdev.org/viewtopic.php?f=8&amp;t=21601">Wrote a tutorial covering long mode</a> about this article.</li>
<li><a rel="nofollow" class="external text" href="http://forum.osdev.org/viewtopic.php?f=1&amp;t=21748">Loading a higher-half kernel</a> on setting up long mode for a higher-half kernel.</li>
<li><a rel="nofollow" class="external text" href="http://forum.osdev.org/viewtopic.php?f=1&amp;t=21772">Setting up the stack after the switch to long mode</a> on the stack segment note.</li></ul>
<h3><span class="mw-headline" id="Wikipedia">Wikipedia</span></h3>
<ul><li><a href="https://wikipedia.org/wiki/AMD64" class="extiw" title="wikipedia:AMD64">AMD64</a></li>
<li><a href="https://wikipedia.org/wiki/64-bit" class="extiw" title="wikipedia:64-bit">64-bit</a></li></ul>
<!-- 
NewPP limit report
Cached time: 20250212020104
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.094 seconds
Real time usage: 2.432 seconds
Preprocessor visited node count: 152/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 32700/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:2814-0!canonical and timestamp 20250212020102 and revision id 28309.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Setting_Up_Long_Mode&amp;oldid=28309">https://wiki.osdev.org/index.php?title=Setting_Up_Long_Mode&amp;oldid=28309</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="../Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="../Category:X86-64" title="Category:X86-64">X86-64</a></li><li><a href="../Category:Operating_Modes" title="Category:Operating Modes">Operating Modes</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Setting+Up+Long+Mode" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Setting_Up_Long_Mode#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="../Setting_Up_Long_Mode" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="../Talk:Setting_Up_Long_Mode" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="../Setting_Up_Long_Mode"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Setting_Up_Long_Mode&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Setting_Up_Long_Mode&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="../index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="../index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="../Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="../Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="../OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="../OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="../OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="../Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="../Special:WhatLinksHere/Setting_Up_Long_Mode" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Setting_Up_Long_Mode" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="../Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Setting_Up_Long_Mode&amp;oldid=28309" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Setting_Up_Long_Mode&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 11 September 2023, at 15:59.</li>
	<li id="footer-info-0">This page has been accessed 16,334 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="../OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="../OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="../OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Setting_Up_Long_Mode&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="../resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="../resources/assets/poweredby_mediawiki_132x47.png 1.5x, ../resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.094","walltime":"2.432","ppvisitednodes":{"value":152,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":32700,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250212020104","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":2531});});</script>
</body>
</html>