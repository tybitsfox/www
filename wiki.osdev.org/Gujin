<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Gujin - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"3271aebf8b3cdd6f53deb6f4","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Gujin","wgTitle":"Gujin","wgCurRevisionId":29253,"wgRevisionId":29253,"wgArticleId":2272,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Disputed Pages","Articles Written in First Person","Bootloaders"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Gujin","wgRelevantArticleId":2272,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],
"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Gujin rootpage-Gujin skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Gujin</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Gujin#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Gujin#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><center>
<table style="border: 1px solid #cfcfbf; padding: .0em .25em .0em; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p><font color="black">The factual accuracy of this article or section is <a href="./Category:Disputed_Pages" title="Category:Disputed Pages">disputed</a>.</font><br /><small><font color="red">Please see the relevant discussion on the <a href="./Talk:Gujin" title="Talk:Gujin">talk page</a>.</font></small>
</p>
</td>
<td>
</td></tr></tbody></table>
</center>
<center>
<table style="border: 1px solid #bfcfcf; padding: .0em .25em .0em; background-color: #fff0f0; text-align: center;">
<tbody><tr>
<td>
<p><b>WARNING:</b> Gujin appears to be abandonware and hasn't been updated since 2013.
</p>
</td></tr></tbody></table>
</center>
<p>Gujin is a GPLed <a href="Bootloader" title="Bootloader">bootloader</a> for the PC.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Gujin#What_can_Gujin_do?"><span class="tocnumber">1</span> <span class="toctext">What can Gujin do?</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Gujin#See_Also"><span class="tocnumber">2</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="Gujin#Articles"><span class="tocnumber">2.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="Gujin#Threads"><span class="tocnumber">2.2</span> <span class="toctext">Threads</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="Gujin#External_Links"><span class="tocnumber">2.3</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span id="What_can_Gujin_do.3F"></span><span class="mw-headline" id="What_can_Gujin_do?">What can Gujin do?</span></h2>
<p>It can read FAT12, FAT16, FAT32, ext2, ext3, ext4 (with constant inode size) and ISO 9660 filesystems.
</p><p>It has a graphical user interface with mouse support, and can be installed on any media: floppy, hard/USB disk partitions, hard/USB disk MBR, CD/DVD-ROM, DVD-RAM (i.e. FAT with 2048 bytes/sectors). It can also use a serial port as input/ouput instead of the screen and keyboard.
</p><p>Gujin can chain-load other bootloader, load Linux kernel, has an unfinished loader of Multiboot specification, but more importantly for our current interest it can load standard ELF files (more exactly GZIP compressed ELF files).
</p><p>There is two major ELF variant on the PC: ELF32 (with 32 bits load address, sizes and entry point) and ELF64 (with 64 bits fields), Gujin loads any of them and switch the processor in protected mode to jump to the ELF entry point.
</p><p>Gujin will not try to set-up memory paging at all, that is the job of the kernel to select which kind of paging it wants - so even the 64 bits ELF files will have to handle the transition from 32 bits to 64 bits themselves (because you need paging to go to 64 bits mode).
</p><p>Same for interrupts, Gujin switches to protected mode but does not re-enable interrupts, that is the job of the kernel being booted to set-up the Interrupt Decriptor Table and handle each interrupts, because BIOS will not help the kernel any more.
</p><p>Gujin can also relocate the ELF file if it contains relocation information, see option <a rel="nofollow" class="external text" href="http://sourceware.org/binutils/docs-2.19/ld/Options.html#index-g_t_002d_002demit_002drelocs-79">--emit-relocs</a> of the "ld" linker of the "Binutils" toolchain.
</p><p>Because most applications will want to collect BIOS informations before the switch to protected mode, Gujin can call in real-mode a function of the ELF file, and if this function returns zero - continue the loading process - else display an error message (for instance: "trying to execute a 64 bits application on a processor without this feature!").
</p><p>Moreover, in most cases the kernel can decide to return to the Gujin bootloader (if it did not erased it from memory), without forcing a reboot.
</p><p>The Gujin bootloader is built using standard Linux tools, it does not need Linux to run (only a not-too-buggy BIOS) - but we have to assume you are running Linux to use the GNU toolchain: GCC, Binutils, GZIP... to produce the ELF file for the kernel.
Also, Gujin installer needs either Linux 32 bits or Linux 64 bits to run and install the Gujin bootloader on a device.
</p><p>Because Windows uses another executable format, you cannot install Cygwin/MinGW on windows and use the compilation toolchain directly, in this case you would have to generate a cross compiler toolchain to produce ELF files, and that is out of scope for this description (but not that difficult).
</p>
<hr />
<center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p>This page or section refers to its readers or editors using <i>I</i>, <i>my</i>, <i>we</i> or <i>us</i>. It should be <a rel="nofollow" class="external text" href="https://wiki.osdev.org/index.php?title=Gujin&amp;action=edit">edited</a> to be in an encyclopedic tone.
</p>
</td></tr></tbody></table>
</center>
<p>So enough text description, let's try it!
</p><p>The floppies being out-dated, let's say we want to use a USB stick as our test media. In some cases, we may want to use a SD card, basically the process is the same.
</p><p>We first need to check that the target PC will be able to boot that USB stick or SD card, when Gujin is installed on it.
</p><p>To have increased chances of success, we will ask the Gujin installer to reformat completely this USB disk or SD card, so first backup any interresting file you have in some other place.
</p><p>Then, download this <a rel="nofollow" class="external text" href="http://www.mirrorservice.org/sites/download.sourceforge.net/pub/sourceforge/g/project/gu/gujin/install/2.8.2/install-2.8.2.tar.gz/install/gujin?extract=true">gujin executable</a> if you are using a 32 bits Linux, and that <a rel="nofollow" class="external text" href="http://www.mirrorservice.org/sites/download.sourceforge.net/pub/sourceforge/g/project/gu/gujin/install/2.8.2/install-2.8.2.tar.gz/install/gujin64?extract=true">gujin64 executable</a> if you are using a 64 bits Linux:
</p><p>If you do not trust anybody, download the source file <a rel="nofollow" class="external text" href="http://sourceforge.net/projects/gujin/files/gujin/2.8.2/gujin-2.8.2.tar.gz/download">gujin-*.tar.gz</a>, extract it in a directory and type "make" - that will produce an executable named "gujin" (even on a 64 bits Linux).
</p><p>Remember to visit <a rel="nofollow" class="external text" href="http://gujin.org">http://gujin.org</a> to check if there is a newer version of Gujin, and to increase Gujin author counters and keep him happy.
</p><p>Then, we reformat that dedicated USB stick as a bootable FAT filesystem, erasing all its content: first go in "root" by typing "su" or "sudo" (distribution dependant), then get the device name of you USB stick (let's say it is /dev/sdg) (sometimes /dev/mmcblk0 for SD cards), and type:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>./gujin /dev/sdg --disk<span class="o">=</span>BIOS:0x00,auto
</pre></div>
<p>Depending on the size of the USB stick, that will have created either a FAT16 or a FAT32 (or even a FAT12) filesystem, but that point is not really important.
</p><p>You then unplug this device, and replug it: most distribution will automatically mount the filesystem and display a window of its content: only a single file which is the bootloader itself.
</p><p>To check that this filesystem is correctly created, you can type:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>/sbin/fsck.vfat /dev/sdg
</pre></div>
<p>With the Gujin installer parameters we used, that would have created a "superfloppy" format on our USB stick, that is currently the format most PC will be able to understand and boot from.
</p><p>That does not mean your own PC will 100% boot it, due to BIOS bugs - so you need to test now that this USB stick is bootable by your PC or not: umount the USB stick, plug it in the test PC and power it on, see if Gujin is started (you will notice easily).
</p><p>If it is not started try to check:
</p>
<pre> - that the boot order in the BIOS is set to boot USB devices first
 - try the different USB devices if your BIOS has switchable items.
 - try to tell the Gujin installer to use the Extended BIOS instead by typing (--disk=EBIOS:0x00,auto is the default):
 ./gujin /dev/sdg
 - try to tell the Gujin installer to generate a real disk and not a superfloppy by:
 ./gujin --mbr /dev/sdg --disk=BIOS:0x00,auto
 - try the two previous options together:
 ./gujin --mbr /dev/sdg --disk=EBIOS:0x00,auto
 - try to use another (smaller) USB stick, some BIOS will only accept to boot from a FAT16 superfloppy
</pre>
<p>By now you should know a lot more about your BIOS, and have a bootable USB stick.
</p>
<hr />
<center>
<table style="border: 1px solid #bfcfcf; padding: .0em .25em .0em; background-color: #fff0f0; text-align: center;">
<tbody><tr>
<td>
<p><b>WARNING:</b> This section does not use a <a href="Why_do_I_need_a_Cross_Compiler?" title="Why do I need a Cross Compiler?">cross-compiler</a> and will likely not work or cause subtle major problems later.
</p>
</td></tr></tbody></table>
</center>
<p>Then, we want to generate this ELF kernel - let's try to generate a "hello world":
Create a file with that content:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">msg1</span><span class="p">[]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;Hello protected-mode text world! please reboot ...&quot;</span><span class="p">;</span><span class="w"> </span>
<span class="cp">#define STACKSIZE 64 * 1024 </span>
<span class="k">static</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="n">stack</span><span class="p">[</span><span class="n">STACKSIZE</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">4</span><span class="p">]</span><span class="w"> </span><span class="n">__attribute__</span><span class="w"> </span><span class="p">((</span><span class="n">aligned</span><span class="p">(</span><span class="mi">32</span><span class="p">)));</span><span class="w"> </span>

<span class="kt">void</span><span class="w"> </span><span class="nf">_start</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span>
<span class="p">{</span><span class="w"> </span>
<span class="w">	</span><span class="cm">/* We are flat non-paged memory and interrupt disabled */</span><span class="w"> </span>
<span class="w">	</span><span class="k">asm</span><span class="w"> </span><span class="p">(</span><span class="s">&quot; mov %0,%%esp &quot;</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="s">&quot;i&quot;</span><span class="w"> </span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack</span><span class="p">[</span><span class="n">STACKSIZE</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">4</span><span class="p">]));</span><span class="w"> </span>
<span class="w">	</span><span class="k">volatile</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="o">*</span><span class="n">video_array</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="k">volatile</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="mh">0xB8000</span><span class="p">;</span><span class="w"> </span>
<span class="w">	</span><span class="kt">unsigned</span><span class="w"> </span><span class="n">cpt1</span><span class="p">;</span><span class="w"> </span>

<span class="w">	</span><span class="n">video_array</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">10</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">80</span><span class="p">;</span><span class="w"> </span><span class="cm">/* few empty lines */</span><span class="w"> </span>
<span class="w">	</span><span class="cm">/* We want blue background color and lightgray foreground, so 0x1700: */</span><span class="w"> </span>
<span class="w">	</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">cpt1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">cpt1</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="k">sizeof</span><span class="p">(</span><span class="n">msg1</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="n">cpt1</span><span class="o">++</span><span class="p">)</span><span class="w"> </span>
<span class="w">		</span><span class="n">video_array</span><span class="p">[</span><span class="n">cpt1</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x1700</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">msg1</span><span class="p">[</span><span class="n">cpt1</span><span class="p">];</span><span class="w"> </span>

<span class="w">	</span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span>
<span class="w">		</span><span class="k">continue</span><span class="p">;</span><span class="w"> </span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>Then compile it like (you may need to add "-fno-stack-protector" too, distribution dependant):
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>gcc -m32 -Wall -O2 -s -static -nostartfiles -nodefaultlibs -Wl,-Ttext<span class="o">=</span>0x110000 hello.c -o hello.elf
</pre></div> 
<p>and compress it by:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>gzip -9 hello.elf -c &gt; hello.kgz
</pre></div>
<p>You just need to copy that hello.kgz file into the USB stick, and reboot with this USB stick, you will get a menu with "hello.kgz" displayed.
</p><p>If you click on this filename, you will have "Hello protected-mode text world! please reboot ..." displayed (Because this hello-world do not manage graphic modes, you have to "force start kernel in text mode" in Gujin configuration).
</p><p>If you want a bit more complex "hello world" applications, you should download Gujin <a rel="nofollow" class="external text" href="http://sourceforge.net/projects/gujin/files/install/2.8.2/install-2.8.2.tar.gz/download">install*.tar.gz</a> pack .
</p><p>you will find there few KGZ files, like previous example but with some addresses displayed to show the exact position of the application in memory.
</p><p>You will see <a rel="nofollow" class="external text" href="http://www.mirrorservice.org/sites/download.sourceforge.net/pub/sourceforge/g/project/gu/gujin/install/2.8.2/install-2.8.2.tar.gz/install/hello_32bits.kgz?extract=true">hello_32bits.kgz</a> and <a rel="nofollow" class="external text" href="http://www.mirrorservice.org/sites/download.sourceforge.net/pub/sourceforge/g/project/gu/gujin/install/2.8.2/install-2.8.2.tar.gz/install/hello_32bits_r.kgz?extract=true">hello_32bits_r.kgz</a> to show the effect of relocation, and <a rel="nofollow" class="external text" href="http://www.mirrorservice.org/sites/download.sourceforge.net/pub/sourceforge/g/project/gu/gujin/install/2.8.2/install-2.8.2.tar.gz/install/hello_64bits.kgz?extract=true">hello_64bits.kgz</a> and <a rel="nofollow" class="external text" href="http://www.mirrorservice.org/sites/download.sourceforge.net/pub/sourceforge/g/project/gu/gujin/install/2.8.2/install-2.8.2.tar.gz/install/hello_64bits_r.kgz?extract=true">hello_64bits_r.kgz</a> to show 64 bits applications.
</p><p>To get the source code, just download the file <a rel="nofollow" class="external text" href="http://sourceforge.net/projects/gujin/files/gujin/2.8.2/gujin-2.8.2.tar.gz/download">gujin*.tar.gz</a>, and extract the corresponding c files.
</p><p>To see the command used to compile them, just search the string "hello_32bits.kgz:" (with semicolon) in the file <a rel="nofollow" class="external text" href="http://www.mirrorservice.org/sites/download.sourceforge.net/pub/sourceforge/g/project/gu/gujin/gujin/2.8.2/gujin-2.8.2.tar.gz/gujin/Makefile?extract=true">Makefile</a>.
</p><p>If you just want a real mode "hello world", you can do that too with an ELF file where the load address is null for the code segment.
</p><p>There is a limit of 64 Kbytes for real mode ELF file.
</p><p>Just create a file which <a rel="nofollow" class="external text" href="http://www.mirrorservice.org/sites/download.sourceforge.net/pub/sourceforge/g/project/gu/gujin/gujin/2.8.2/gujin-2.8.2.tar.gz/gujin/hello_bios.c?extract=true">contains</a>:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cm">/* hello_bios.c - public domain - no support whatsoever */</span><span class="w"></span>

<span class="cm">/* Constant entry block, max 64 KB code+data+stack, do not touch: */</span><span class="w"></span>
<span class="k">asm</span><span class="w"> </span><span class="p">(</span><span class="w"></span>
<span class="s">&quot;	.code16gcc				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	.section .init,</span><span class="se">\&quot;</span><span class="s">ax</span><span class="se">\&quot;</span><span class="s">,@progbits		</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	.global _start				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;_start:					</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="c1">//  &quot;int $3 # if debugging with borland td.exe, started by tiny.exe	\n&quot;</span>
<span class="s">&quot;	pushw	%ds				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	pushw	%es				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	pushw	%fs				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	pushw	%gs				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	pushfl					</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	pushal					</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	movw	%ss,%cs:1f+1			</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	movw	%sp,%cs:2f+2			</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	movw	%cs,%ax				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	movw	%ax,%ds				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	movw	%ax,%es				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	movw	%ax,%fs				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	movw	%ax,%gs				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	movw	%ax,%ss				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	movl	$0,%esp				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	cld					</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	calll	main				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	movl	%eax,%cs:3f+2			</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;1:	movw	$0,%ax				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	movw	%ax,%ss				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;2:	movl	$0,%esp				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	popal					</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	popfl					</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	popw	%gs				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	popw	%fs				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	popw	%es				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	popw	%ds				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;3:	movl	$0,%eax				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	lretw					</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	.previous				</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="p">);</span><span class="w"></span>

<span class="cm">/* For information about asm() construct, see GCC manual:</span>
<span class="cm">[http://gcc.gnu.org/onlinedocs/gcc-4.5.0/gcc/Extended-Asm.html http://gcc.gnu.org/onlinedocs/gcc-4.5.0/gcc/Extended-Asm.html]</span>
<span class="cm">For information about BIOS services, see</span>
<span class="cm">[http://stanislavs.org/helppc/ http://stanislavs.org/helppc/]</span>
<span class="cm">*/</span><span class="w"></span>
<span class="k">enum</span><span class="w"> </span><span class="n">standard_color</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="n">black</span><span class="p">,</span><span class="w">		</span><span class="n">blue</span><span class="p">,</span><span class="w">		</span><span class="n">green</span><span class="p">,</span><span class="w">		</span><span class="n">cyan</span><span class="p">,</span><span class="w"></span>
<span class="n">red</span><span class="p">,</span><span class="w">		</span><span class="n">magenta</span><span class="p">,</span><span class="w">	</span><span class="n">brown</span><span class="p">,</span><span class="w">		</span><span class="n">lightgray</span><span class="p">,</span><span class="w"></span>
<span class="n">darkgray</span><span class="p">,</span><span class="w">	</span><span class="n">lightblue</span><span class="p">,</span><span class="w">	</span><span class="n">lightgreen</span><span class="p">,</span><span class="w">	</span><span class="n">lightcyan</span><span class="p">,</span><span class="w"></span>
<span class="n">lightred</span><span class="p">,</span><span class="w">	</span><span class="n">lightmagenta</span><span class="p">,</span><span class="w">	</span><span class="n">yellow</span><span class="p">,</span><span class="w">		</span><span class="n">white</span><span class="w"></span>
<span class="p">};</span><span class="w"></span>

<span class="cm">/* This assumes 16 colors modes, text or graphic - i.e. not 256 colors: */</span><span class="w"></span>
<span class="k">static</span><span class="w"> </span><span class="kr">inline</span><span class="w"> </span><span class="kt">void</span><span class="w"></span>
<span class="nf">VGA_writestring</span><span class="w"> </span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">string</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">row</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">col</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="n">page_attribute</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">16</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">blue</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">lightgray</span><span class="p">,</span><span class="w"> </span><span class="n">strlen_string</span><span class="p">;</span><span class="w"></span>
<span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">endstring</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">string</span><span class="p">;</span><span class="w"></span>

<span class="cm">/* We cannot rely on libc to provide strlen(): */</span><span class="w"></span>
<span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="n">endstring</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="n">endstring</span><span class="o">++</span><span class="p">;</span><span class="w"></span>
<span class="n">strlen_string</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">endstring</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">string</span><span class="p">;</span><span class="w"></span>

<span class="k">asm</span><span class="w"> </span><span class="p">(</span><span class="w"></span>
<span class="s">&quot;	xchgl	%%ebp,%4		</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	int	$0x10 # writestring	</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="s">&quot;	xchgl	%%ebp,%4		</span><span class="se">\n</span><span class="s">&quot;</span><span class="w"></span>
<span class="w">	</span><span class="o">:</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="s">&quot;a&quot;</span><span class="w"> </span><span class="p">(</span><span class="mh">0x1301</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;b&quot;</span><span class="w"> </span><span class="p">(</span><span class="n">page_attribute</span><span class="p">),</span><span class="w"></span>
<span class="w">	</span><span class="s">&quot;c&quot;</span><span class="w"> </span><span class="p">(</span><span class="n">strlen_string</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;d&quot;</span><span class="w"> </span><span class="p">(((</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="p">)</span><span class="n">row</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">col</span><span class="p">),</span><span class="w"></span>
<span class="w">	</span><span class="s">&quot;r&quot;</span><span class="w"> </span><span class="p">(</span><span class="n">string</span><span class="p">)</span><span class="w">	</span><span class="cm">/* in fact %es:%bp, but &quot;B&quot; (string) doesn&#39;t work */</span><span class="w"></span>
<span class="w">	</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="k">static</span><span class="w"> </span><span class="kr">inline</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">BIOS_wait</span><span class="w"> </span><span class="p">(</span><span class="kt">unsigned</span><span class="w"> </span><span class="n">nb_microsecond</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="n">status</span><span class="p">;</span><span class="w"></span>

<span class="cm">/* Use volatile when there is at least one result, but even if the result</span>
<span class="cm">	is not used, the code has to be inserted (status is the result): */</span><span class="w"></span>
<span class="k">asm</span><span class="w"> </span><span class="k">volatile</span><span class="w"> </span><span class="p">(</span><span class="s">&quot;	int	$0x15	&quot;</span><span class="w"></span>
<span class="w">	</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;=a&quot;</span><span class="w"> </span><span class="p">(</span><span class="n">status</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="o">:</span><span class="w">  </span><span class="s">&quot;a&quot;</span><span class="w"> </span><span class="p">(</span><span class="mh">0x8600</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;d&quot;</span><span class="w"> </span><span class="p">(</span><span class="n">nb_microsecond</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0xFFFF</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;c&quot;</span><span class="w"> </span><span class="p">(</span><span class="n">nb_microsecond</span><span class="w"> </span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="mi">16</span><span class="p">)</span><span class="w"></span>
<span class="w">	</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="n">VGA_writestring</span><span class="w"> </span><span class="p">(</span><span class="s">&quot;Hello BIOS world! Please wait...</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w"></span>
<span class="n">BIOS_wait</span><span class="w"> </span><span class="p">(</span><span class="mi">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">1000</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">1000</span><span class="p">);</span><span class="w"> </span><span class="cm">/* 3 seconds before returning to Gujin*/</span><span class="w"></span>
<span class="c1">//	return 0x80000000; /* to return to Gujin menu */</span>
<span class="k">return</span><span class="w"> </span><span class="mh">0xA0000000</span><span class="p">;</span><span class="w"> </span><span class="cm">/* to return to Gujin menu, do not display &quot;press a key to continue&quot; */</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>And then compile it by:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>gcc -m32 -Wall -Os -s -static -nostartfiles -nodefaultlibs -Wa,-R -Wl,--section-start,.init<span class="o">=</span><span class="m">0</span> hello_bios.c -o hello_bios.elf
</pre></div>
<p>and compress it:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>gzip -9 hello_bios.elf -c &gt; hello_bios.kgz
</pre></div>
<p>you can copy this hello_bios.kgz to the USB stick and run it, I hope the different functions of the source file are obvious.
</p><p>The Gujin bootloader is willing to let the real mode and protected mode kernel to access the bootloader internal data (like what is the current video mode, how to display strings...) as long as the kernel is licensed under the GPL license - i.e. when the GZIP kernel contains a GZIP comment describing its license. That is illustrated by <a rel="nofollow" class="external text" href="http://www.mirrorservice.org/sites/download.sourceforge.net/pub/sourceforge/g/project/gu/gujin/install/2.8.2/install-2.8.2.tar.gz/install/cleandisk.kgz?extract=true">cleandisk.kgz</a> compiled form this <a rel="nofollow" class="external text" href="http://www.mirrorservice.org/sites/download.sourceforge.net/pub/sourceforge/g/project/gu/gujin/gujin/2.8.2/gujin-2.8.2.tar.gz/gujin/cleandisk.c?extract=true">cleandisk.c</a> source code and linked with this <a rel="nofollow" class="external text" href="http://www.mirrorservice.org/sites/download.sourceforge.net/pub/sourceforge/g/project/gu/gujin/gujin/2.8.2/gujin-2.8.2.tar.gz/gujin/cleandisk.ld?extract=true">linker file</a>.
</p><p>The main point about the GPL license is that it is not possible to draw a line in between Gujin possible bug and a closed source application: it is no allowed to modify Gujin data while in real mode - but there isn't any enforcement by hardware.
</p><p>Obviously, Gujin will enable you to run an ELF file with a real mode part AND a protected mode part, just have a look at the example <a rel="nofollow" class="external text" href="http://www.mirrorservice.org/sites/download.sourceforge.net/pub/sourceforge/g/project/gu/gujin/install/2.8.2/install-2.8.2.tar.gz/install/hello_gpl.kgz?extract=true">hello_gpl.kgz</a> and its source code <a rel="nofollow" class="external text" href="http://www.mirrorservice.org/sites/download.sourceforge.net/pub/sourceforge/g/project/gu/gujin/gujin/2.8.2/gujin-2.8.2.tar.gz/gujin/hello_gpl.c?extract=true">hello_gpl.c</a>.
</p>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<h3><span class="mw-headline" id="Articles">Articles</span></h3>
<ul><li><a href="Bootloader" title="Bootloader">Bootloader</a></li></ul>
<h3><span class="mw-headline" id="Threads">Threads</span></h3>
<h3><span class="mw-headline" id="External_Links">External Links</span></h3>
<ul><li><a rel="nofollow" class="external text" href="http://gujin.sourceforge.net">Gujin</a> at sourceforge.net</li></ul>
<!-- 
NewPP limit report
Cached time: 20250212011857
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.066 seconds
Real time usage: 1.108 seconds
Preprocessor visited node count: 91/1000000
Post‐expand include size: 1736/2097152 bytes
Template argument size: 421/2097152 bytes
Highest expansion depth: 6/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 21364/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%  291.877      1 -total
  2.04%    5.952      1 Template:Disputed
  1.04%    3.038      1 Template:FirstPerson
  0.82%    2.401      1 Template:DiscussThis
  0.80%    2.339      2 Template:Warning
  0.28%    0.807      1 Template:NoteBox
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:2272-0!canonical and timestamp 20250212011856 and revision id 29253.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Gujin&amp;oldid=29253">https://wiki.osdev.org/index.php?title=Gujin&amp;oldid=29253</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Disputed_Pages" title="Category:Disputed Pages">Disputed Pages</a></li><li><a href="./Category:Articles_Written_in_First_Person" title="Category:Articles Written in First Person">Articles Written in First Person</a></li><li><a href="./Category:Bootloaders" title="Category:Bootloaders">Bootloaders</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Gujin" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Gujin#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Gujin" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:Gujin" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Gujin"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Gujin&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Gujin&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Gujin" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Gujin" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Gujin&amp;oldid=29253" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Gujin&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 29 September 2024, at 22:30.</li>
	<li id="footer-info-0">This page has been accessed 4,066 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Gujin&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.066","walltime":"1.108","ppvisitednodes":{"value":91,"limit":1000000},"postexpandincludesize":{"value":1736,"limit":2097152},"templateargumentsize":{"value":421,"limit":2097152},"expansiondepth":{"value":6,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":21364,"limit":5000000},"timingprofile":["100.00%  291.877      1 -total","  2.04%    5.952      1 Template:Disputed","  1.04%    3.038      1 Template:FirstPerson","  0.82%    2.401      1 Template:DiscussThis","  0.80%    2.339      2 Template:Warning","  0.28%    0.807      1 Template:NoteBox"]},"cachereport":{"timestamp":"20250212011857","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":1207});});</script>
</body>
</html>