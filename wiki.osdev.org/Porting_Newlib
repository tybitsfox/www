<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Porting Newlib - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"0e80b6e14c0d43f178af85ab","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Porting_Newlib","wgTitle":"Porting Newlib","wgCurRevisionId":28218,"wgRevisionId":28218,"wgArticleId":2126,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using duplicate arguments in template calls","Pages using deprecated source tags","Pages with syntax highlighting errors","Level 3 Tutorials","Porting","C","Standard Libraries","Tutorials"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Porting_Newlib","wgRelevantArticleId":
2126,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook",
"ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Porting_Newlib rootpage-Porting_Newlib skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Porting Newlib</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Porting_Newlib#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Porting_Newlib#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear:right; border:1px solid #aaaaaa; background:#eee; text-align:center;;"><tbody><tr><th>Difficulty level</th></tr><tr><td><a href="./File:Difficulty_3.png" class="image"><img alt="Difficulty 3.png" src="images/c/c1/Difficulty_3.png" decoding="async" width="46" height="14" data-file-width="46" data-file-height="14" /></a><br />Advanced</td></tr></tbody></table>
<p>Newlib is a C library intended for use on embedded systems available under a free software license. It is known for being simple to port to new operating systems. Allegedly, it's coding practices are sometimes questionable. This tutorial follows <a href="OS_Specific_Toolchain" title="OS Specific Toolchain">OS Specific Toolchain</a> and completes it using newlib rather than using another <a href="C_Library" title="C Library">C Library</a> such as <a href="Creating_a_C_Library" title="Creating a C Library">your own</a>.
</p><p>Porting newlib is one of the easiest ways to get a simple C library into your operating system without an excessive amount of effort. As an added bonus, once complete you can port the toolchain (GCC/binutils) to your OS - and who wouldn't want to do that?
</p><p><i>This article was written with x86 in mind. It has been extended to armv8 through tips and notes in the troubleshooting section.</i>
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Porting_Newlib#Introduction"><span class="tocnumber">1</span> <span class="toctext">Introduction</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Porting_Newlib#Preparation"><span class="tocnumber">2</span> <span class="toctext">Preparation</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="Porting_Newlib#Download_source_code_of_Automake_and_Autoconf"><span class="tocnumber">2.1</span> <span class="toctext">Download source code of Automake and Autoconf</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="Porting_Newlib#System_Calls"><span class="tocnumber">3</span> <span class="toctext">System Calls</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="Porting_Newlib#Porting_Newlib"><span class="tocnumber">4</span> <span class="toctext">Porting Newlib</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="Porting_Newlib#config.sub"><span class="tocnumber">4.1</span> <span class="toctext">config.sub</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Porting_Newlib#newlib/configure.host"><span class="tocnumber">4.2</span> <span class="toctext">newlib/configure.host</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="Porting_Newlib#newlib/libc/sys/configure.in"><span class="tocnumber">4.3</span> <span class="toctext">newlib/libc/sys/configure.in</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Porting_Newlib#newlib/libc/sys/myos"><span class="tocnumber">4.4</span> <span class="toctext">newlib/libc/sys/myos</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="Porting_Newlib#newlib/libc/sys/myos/crt0.c"><span class="tocnumber">4.5</span> <span class="toctext">newlib/libc/sys/myos/crt0.c</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="Porting_Newlib#newlib/libc/sys/myos/syscalls.c"><span class="tocnumber">4.6</span> <span class="toctext">newlib/libc/sys/myos/syscalls.c</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="Porting_Newlib#newlib/libc/sys/myos/configure.in"><span class="tocnumber">4.7</span> <span class="toctext">newlib/libc/sys/myos/configure.in</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="Porting_Newlib#newlib/libc/sys/myos/Makefile.am"><span class="tocnumber">4.8</span> <span class="toctext">newlib/libc/sys/myos/Makefile.am</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="Porting_Newlib#Signal_handling"><span class="tocnumber">4.9</span> <span class="toctext">Signal handling</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-15"><a href="Porting_Newlib#Compiling"><span class="tocnumber">5</span> <span class="toctext">Compiling</span></a></li>
<li class="toclevel-1 tocsection-16"><a href="Porting_Newlib#Conclusion"><span class="tocnumber">6</span> <span class="toctext">Conclusion</span></a></li>
<li class="toclevel-1 tocsection-17"><a href="Porting_Newlib#Troubleshooting"><span class="tocnumber">7</span> <span class="toctext">Troubleshooting</span></a>
<ul>
<li class="toclevel-2 tocsection-18"><a href="Porting_Newlib#Autotools"><span class="tocnumber">7.1</span> <span class="toctext">Autotools</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="Porting_Newlib#Library_Implementation"><span class="tocnumber">7.2</span> <span class="toctext">Library Implementation</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="Porting_Newlib#Build_System_Tips"><span class="tocnumber">7.3</span> <span class="toctext">Build System Tips</span></a></li>
<li class="toclevel-2 tocsection-21"><a href="Porting_Newlib#General_Tips"><span class="tocnumber">7.4</span> <span class="toctext">General Tips</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-22"><a href="Porting_Newlib#See_Also"><span class="tocnumber">8</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-23"><a href="Porting_Newlib#Articles"><span class="tocnumber">8.1</span> <span class="toctext">Articles</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Introduction">Introduction</span></h2>
<p>I decided that after an incredibly difficult week of trying to get newlib ported to my own OS that I would write a tutorial that outlines the requirements for porting newlib and how to actually do it. I'm assuming you can already load binaries from somewhere and that these binaries are compiled C code. I also assume you have a syscall interface setup already. Why wait? Let's get cracking!
</p>
<h2><span class="mw-headline" id="Preparation">Preparation</span></h2>
<p>Download newlib source (I'm using 2.5.0) from <a rel="nofollow" class="external text" href="ftp://sources.redhat.com/pub/newlib/index.html">this ftp server</a>.
</p>
<h3><span class="mw-headline" id="Download_source_code_of_Automake_and_Autoconf">Download source code of Automake and Autoconf</span></h3>
<p>Acquire Automake (v1.11) and Autoconf (v2.65) from here:
<a rel="nofollow" class="external autonumber" href="https://ftp.gnu.org/gnu/automake/automake-1.11.tar.gz">[1]</a>
<a rel="nofollow" class="external autonumber" href="https://ftp.gnu.org/gnu/autoconf/autoconf-2.65.tar.gz">[2]</a>
</p><p><i>Note</i>: The newlib source is organized using "Cygnus style," which is unsupported in Automake versions 1.12 and beyond.
Therefore, to be able to build newlib, you need a version less than or equal to 1.11.
</p><p>Untar both of the archives:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>tar xvf automake-1.11.tar.gz
tar xvf autoconf-2.65.tar.gz
</pre></div>
<p>Create a destination folder:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>mkdir ~/bin
</pre></div>
<p>Create a build folder:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>mkdir build
<span class="nb">cd</span> build
</pre></div>
<p>Configure automake first:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>../automake-1.11/configure --prefix<span class="o">=</span><span class="s2">&quot;~/bin&quot;</span>
</pre></div>
<p>Make and install
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>make <span class="o">&amp;&amp;</span> make install
</pre></div>
<p>Now lets configure autoconf
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>../autoconf-2.65/configure --prefix<span class="o">=</span>~/bin
</pre></div>
<p>Then make and install:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>make <span class="o">&amp;&amp;</span> make install
</pre></div>
<p>You should now have the proper binaries in ~/bin!
</p><p>To add these binaries to your path temporarily
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span>~/bin:<span class="nv">$PATH</span>
</pre></div>
<h2><span class="mw-headline" id="System_Calls">System Calls</span></h2>
<p>First of all you need to support a set of 17 system calls that act as 'glue' between newlib and your OS. These calls are the typical "_exit", "open", "read/write", "execve" (et al).
See the <a rel="nofollow" class="external text" href="http://sourceware.org/newlib/libc.html#Syscalls">Red Hat newlib C library</a> documentation for an overview of necessary calls.
</p><p>Newlib uses a very specific hierarchy of syscalls, many of which can be supplied by more than one file.
This can quickly lead to symbol redefinition or symbol missing errors when linking with the library.
The normal way that newlib expects you to define syscalls, which you may see elsewhere is to define the underscored symbols (e.g. _open instead of open).
In this case, newlib will call the underscored versions using wrappers defined in newlib/libc/syscalls/.
Our different (simplified) approach is to define the syscalls directly. No wrappers.
To do this the newlib_cflags variable must be set to "" in configure.host (default for some platforms, like x86), which will prevent the wrappers from being compiled.
</p><p>Implementing the syscalls is usually quite trivial, my kernel exposes all the system calls on interrupt 0x80 (128d) so I just had to put a bit of inline assembly into each stub to do what I needed it to do.
It's up to you how to implement them in relation to your kernel.
</p>
<h2><span class="mw-headline" id="Porting_Newlib">Porting Newlib</span></h2>
<h3><span class="mw-headline" id="config.sub">config.sub</span></h3>
<p>Same as for binutils in <a href="OS_Specific_Toolchain" title="OS Specific Toolchain">OS Specific Toolchain</a>.
</p>
<h3><span id="newlib.2Fconfigure.host"></span><span class="mw-headline" id="newlib/configure.host">newlib/configure.host</span></h3>
<p>Tell newlib which system-specific directory to use for our particular target.  In the section starting 'Get the source directories to use for the host ... case "${host}" in', add a section:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>i<span class="o">[</span><span class="m">3</span>-7<span class="o">]</span><span class="m">86</span>-*-myos*<span class="o">)</span>
    <span class="nv">sys_dir</span><span class="o">=</span>myos
    <span class="p">;;</span>
</pre></div>
<p>configure.host contains two switch clauses, make sure that your variables are not overwritten later!
For example, for aarch64 platforms it sets the syscall_dir variable after us, breaking the library.
</p>
<h3><span id="newlib.2Flibc.2Fsys.2Fconfigure.in"></span><span class="mw-headline" id="newlib/libc/sys/configure.in">newlib/libc/sys/configure.in</span></h3>
<p>Tell the newlib build system that it also needs to configure our myos-specific host directory.  In the <tt>case ${sys_dir} in</tt> list, simply add
</p>
<div class="mw-highlight mw-content-ltr" dir="ltr"><pre>  myos) AC_CONFIG_SUBDIRS(myos)&#160;;;</pre></div>
<p><b>Note:</b> After this, you need to run <tt>autoconf (precisely version 2.64)</tt> in the libc/sys directory.
</p>
<h3><span id="newlib.2Flibc.2Fsys.2Fmyos"></span><span class="mw-headline" id="newlib/libc/sys/myos">newlib/libc/sys/myos</span></h3>
<p>This is a directory that we need to create where we put our OS-specific extensions to newlib.  We need to create a minimum of 4 files.  You can easily add more files to this directory to define your own os-specific library functions, if you want them to be included in libc.a (and so linked in to every application by default).
</p>
<h3><span id="newlib.2Flibc.2Fsys.2Fmyos.2Fcrt0.c"></span><span class="mw-headline" id="newlib/libc/sys/myos/crt0.c">newlib/libc/sys/myos/crt0.c</span></h3>
<p>This file creates crt0.o, which is included in every application.  It should define the symbol _start, and then call the main() function, possibly after setting up process-space segment selectors and pushing argc and argv onto the stack.  A simple implementation is:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;fcntl.h&gt;</span><span class="cp"></span>

<span class="k">extern</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">exit</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">code</span><span class="p">);</span><span class="w"></span>
<span class="k">extern</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="w"> </span><span class="p">();</span><span class="w"></span>

<span class="kt">void</span><span class="w"> </span><span class="nf">_start</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">ex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">main</span><span class="p">();</span><span class="w"></span>
<span class="w">    </span><span class="n">exit</span><span class="p">(</span><span class="n">ex</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p><b>Note:</b> add in argc and argv support based on how you handle them in your OS
</p>
<h3><span id="newlib.2Flibc.2Fsys.2Fmyos.2Fsyscalls.c"></span><span class="mw-headline" id="newlib/libc/sys/myos/syscalls.c">newlib/libc/sys/myos/syscalls.c</span></h3>
<p>This file should contain the implementations for each glue function newlib requires.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cm">/* note these headers are all provided by newlib - you don&#39;t need to provide them */</span><span class="w"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;sys/stat.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;sys/types.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;sys/fcntl.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;sys/times.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;sys/errno.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;sys/time.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp"></span>

<span class="kt">void</span><span class="w"> </span><span class="nf">_exit</span><span class="p">();</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">close</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">file</span><span class="p">);</span><span class="w"></span>
<span class="kt">char</span><span class="w"> </span><span class="o">**</span><span class="n">environ</span><span class="p">;</span><span class="w"> </span><span class="cm">/* pointer to array of char * strings that define the current environment variables */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">execve</span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">**</span><span class="n">argv</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">**</span><span class="n">env</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">fork</span><span class="p">();</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">fstat</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">file</span><span class="p">,</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">stat</span><span class="w"> </span><span class="o">*</span><span class="n">st</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">getpid</span><span class="p">();</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">isatty</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">file</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">kill</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">pid</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">sig</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">link</span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">old</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">new</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">lseek</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">file</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">ptr</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">dir</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">open</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">flags</span><span class="p">,</span><span class="w"> </span><span class="p">...);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">read</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">file</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">ptr</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="p">);</span><span class="w"></span>
<span class="n">caddr_t</span><span class="w"> </span><span class="nf">sbrk</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">incr</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">stat</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">file</span><span class="p">,</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">stat</span><span class="w"> </span><span class="o">*</span><span class="n">st</span><span class="p">);</span><span class="w"></span>
<span class="kt">clock_t</span><span class="w"> </span><span class="nf">times</span><span class="p">(</span><span class="k">struct</span><span class="w"> </span><span class="nc">tms</span><span class="w"> </span><span class="o">*</span><span class="n">buf</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">unlink</span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">name</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">wait</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="o">*</span><span class="n">status</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">write</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">file</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">ptr</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">gettimeofday</span><span class="p">(</span><span class="k">struct</span><span class="w"> </span><span class="nc">timeval</span><span class="w"> </span><span class="o">*</span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">timezone</span><span class="w"> </span><span class="o">*</span><span class="n">z</span><span class="p">);</span><span class="w"></span>
</pre></div>
<p><b>Note</b>: You may split this up into multiple files, just don't forget to link against all of them in Makefile.am.
</p>
<h3><span id="newlib.2Flibc.2Fsys.2Fmyos.2Fconfigure.in"></span><span class="mw-headline" id="newlib/libc/sys/myos/configure.in">newlib/libc/sys/myos/configure.in</span></h3>
<p>Configure script for our system directory.
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>AC_PREREQ<span class="o">(</span><span class="m">2</span>.59<span class="o">)</span>
AC_INIT<span class="o">([</span>newlib<span class="o">]</span>, <span class="o">[</span>NEWLIB_VERSION<span class="o">])</span>
AC_CONFIG_SRCDIR<span class="o">([</span>crt0.c<span class="o">])</span>
AC_CONFIG_AUX_DIR<span class="o">(</span>../../../..<span class="o">)</span>
NEWLIB_CONFIGURE<span class="o">(</span>../../..<span class="o">)</span>
AC_CONFIG_FILES<span class="o">([</span>Makefile<span class="o">])</span>
AC_OUTPUT
</pre></div>
<h3><span id="newlib.2Flibc.2Fsys.2Fmyos.2FMakefile.am"></span><span class="mw-headline" id="newlib/libc/sys/myos/Makefile.am">newlib/libc/sys/myos/Makefile.am</span></h3>
<p>A Makefile template for this directory:
</p>
<div class="mw-highlight mw-highlight-lang-make mw-content-ltr" dir="ltr"><pre><span></span><span class="nv">AUTOMAKE_OPTIONS</span> <span class="o">=</span> cygnus
<span class="nv">INCLUDES</span> <span class="o">=</span> <span class="k">$(</span>NEWLIB_CFLAGS<span class="k">)</span> <span class="k">$(</span>CROSS_CFLAGS<span class="k">)</span> <span class="k">$(</span>TARGET_CFLAGS<span class="k">)</span>
<span class="nv">AM_CCASFLAGS</span> <span class="o">=</span> <span class="k">$(</span>INCLUDES<span class="k">)</span>

<span class="nv">noinst_LIBRARIES</span> <span class="o">=</span> lib.a

<span class="cp">if MAY_SUPPLY_SYSCALLS</span>
<span class="nv">extra_objs</span> <span class="o">=</span> syscalls.o <span class="c1"># add more object files here if you split up</span>
<span class="cp">else                    # syscalls.c into multiple files in the previous step</span>
<span class="nv">extra_objs</span> <span class="o">=</span>
<span class="cp">endif</span>

<span class="nv">lib_a_SOURCES</span> <span class="o">=</span>
<span class="nv">lib_a_LIBADD</span> <span class="o">=</span> <span class="k">$(</span>extra_objs<span class="k">)</span>
<span class="nv">EXTRA_lib_a_SOURCES</span> <span class="o">=</span> syscalls.c crt0.c <span class="c1"># add more source files here if you split up</span>
<span class="nv">lib_a_DEPENDENCIES</span> <span class="o">=</span> <span class="k">$(</span>extra_objs<span class="k">)</span>      <span class="c1"># syscalls.c into multiple files</span>
<span class="nv">lib_a_CCASFLAGS</span> <span class="o">=</span> <span class="k">$(</span>AM_CCASFLAGS<span class="k">)</span>
<span class="nv">lib_a_CFLAGS</span> <span class="o">=</span> <span class="k">$(</span>AM_CFLAGS<span class="k">)</span>

<span class="cp">if MAY_SUPPLY_SYSCALLS</span>
<span class="nf">all</span><span class="o">:</span> <span class="n">crt</span>0.<span class="n">o</span>
<span class="cp">endif</span>

<span class="nv">ACLOCAL_AMFLAGS</span> <span class="o">=</span> -I ../../..
<span class="nv">CONFIG_STATUS_DEPENDENCIES</span> <span class="o">=</span> <span class="k">$(</span>newlib_basedir<span class="k">)</span>/configure.host
</pre></div>
<p><b>Note</b>:  After this, you need to run <tt>autoconf</tt> in the newlib/libc/sys/ directory, and <tt>autoreconf</tt> in the newlib/libc/sys/myos directory.
</p>
<h3><span class="mw-headline" id="Signal_handling">Signal handling</span></h3>
<p>Newlib has two different mechanisms for dealing with UNIX signals (see the man pages for signal()/raise()).  In the first, it provides its own emulation, where it maintains a table of signal handlers in a per-process manner.  If you use this method, then you will only be able to respond to signals sent from within the current process.  In order to support it, all you need to do is make sure your crt0 calls '_init_signal' before it calls main, which sets up the signal handler table.
</p><p>Alternatively, you can provide your own implementation.  To do this, you need to define your own version of signal() in syscalls.c.  A typical implementation would register the handler somewhere in kernel space, so that issuing a signal from another process causes the corresponding function to be called in the receiving process (this will also require some nifty stack-playing in the receiving process, as you are basically interrupting the program flow in the middle).  You then need to provide a kill() function in syscalls.c which actually sends signals to another process.  Newlib will still define a raise() function for you, but it is just a stub which calls kill() with the current process id.  To switch newlib to this mode, you need to #define the SIGNAL_PROVIDED macro when compiling.  A simple way to do this is to add the line:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span><span class="nv">newlib_cflags</span><span class="o">=</span><span class="s2">&quot;</span><span class="si">${</span><span class="nv">newlib_cflags</span><span class="si">}</span><span class="s2"> -DSIGNAL_PROVIDED&quot;</span>
</pre></div>
<p>to your host's entry in <tt>configure.host</tt>.  It would probably also make sense to provide sigaction(), and provide signal() as a wrapper for it.  Note that <a rel="nofollow" class="external text" href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/sigaction.html">the Open Group's</a> definition of sigaction states that 1) sigaction supersedes signal, and 2) an application designed shouldn't use both to manipulate the same signal.
</p>
<h2><span class="mw-headline" id="Compiling">Compiling</span></h2>
<p>You can build newlib in this manner:
Newlib is very pesky about the compiler, and you probably haven't built your own i686-myos-gcc toolchain yet, meaning that configure will not be happy when you set target to i686-myos. So use this hack to get it to work (it worked fine for me).
</p><p><b>Note:</b> there must be a better way then this.
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span><span class="c1"># newlib setup</span>
<span class="nv">CURRDIR</span><span class="o">=</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>

<span class="c1"># make symlinks (a bad hack) to make newlib work</span>
<span class="nb">cd</span> ~/cross/bin/ <span class="c1"># this is where the bootstrapped generic cross compiler toolchain (i686-elf-xxx) is installed in,</span>
                <span class="c1"># change this based on your development environment.</span>
ln i686-elf-ar i686-myos-ar
ln i686-elf-as i686-myos-as
ln i686-elf-gcc i686-myos-gcc
ln i686-elf-gcc i686-myos-cc
ln i686-elf-ranlib i686-myos-ranlib

<span class="c1"># return</span>
<span class="nb">cd</span> <span class="nv">$CURRDIR</span>
</pre></div>
<p>Then run the following commands to build newlib
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>mkdir build-newlib
<span class="nb">cd</span> build-newlib
../newlib-x.y.z/configure --prefix<span class="o">=</span>/usr --target<span class="o">=</span>i686-myos
make all
make <span class="nv">DESTDIR</span><span class="o">=</span><span class="si">${</span><span class="nv">SYSROOT</span><span class="si">}</span> install
</pre></div>
<p><b>Note:</b> SYSROOT is where all your OS-specific toolchains will be installed in. It will look like a miniature version of the Linux filesystem, but have your OS-specific toolchains in; I am using ~/myos as my SYSROOT directory.
</p><p><b>Note:</b> By default, newlib is configured to not support %lld/u format specifiers in printf()/scanf() (i.e. it assumes %lld to mean the same as %ld). In order to override this, should it matter, one must add --enable-newlib-io-long-long to the configure invocation
</p><p>For some reason, the newer versions of newlib (at least for me) didn't put the libraries in a location where other utilities like binutils could find.
So here's another hack to fix this:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>cp -ar <span class="nv">$SYSROOT</span>/usr/i686-myos/* <span class="nv">$SYSROOT</span>/usr/
</pre></div>
<p>After building all of this, your freshly built libc will be installed in your SYSROOT directory! Now you can progress to building your own <a href="OS_Specific_Toolchain" title="OS Specific Toolchain">OS Specific Toolchain</a>.
</p><p><b>Important Note:</b> I found that for newlib to properly work, you have to link against libc, libg, libm, and libnosys - hence when porting gcc, in
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define LIB_SPEC ...</span>
</pre></div>
<p>in gcc/config/myos.h,
</p><p>make sure you put
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define LIB_SPEC &quot;-lc -lg -lm -lnosys&quot;</span>
</pre></div>
<p>at the bare minimum.
</p><p>I highly recommend rebuilding the library with your <a href="OS_Specific_Toolchain" title="OS Specific Toolchain">OS Specific Toolchain</a> after you are done porting one. (don't forget to remove the symlinks, too.)
</p>
<h2><span class="mw-headline" id="Conclusion">Conclusion</span></h2>
<p>Well, you've done it. You've ported newlib to your OS! With this you can start creating user mode programs with ease! You may now also add in new functions to newlib, such as dlopen(), dlclose(), dlsym(), and dlerror() for dynamic linking support. Your operating system has a bright road ahead! You can now port the toolchain and run binutils and GCC on your own OS. Almost self-hosting, how do you feel?
</p><p>Good luck!
</p><p>Last Updated by <b>0fb1d8</b> for compatibility with newer versions of newlib and the <a href="OS_Specific_Toolchain" title="OS Specific Toolchain">OS Specific Toolchain</a> tutorial.
</p><p><b>Note:</b> I used a lot of hacks in this article, if you find a better way to do something, please contribute to the page. Thank you.
</p>
<h2><span class="mw-headline" id="Troubleshooting">Troubleshooting</span></h2>
<h3><span class="mw-headline" id="Autotools">Autotools</span></h3>
<ul><li>Whenever you modifiy configure.ac/in files, or not auto-generated Makefile.in files, you must run the appropriate autoconf/automake/autoreconf command</li>
<li>autoreconf is a tool that automatically calls autotools as required to process the present working working directory. Autoreconf will use the versions of autotools in your path, so make sure to prepend(!) your custom build of autotools to the path variable. There are also supposedly environment variables that can be set.</li>
<li>*.ac or *.in files are modified by pattern substitution. Lone spaces or tabs WILL cause issues later, since Makefiles are whitespace sensitive and the whitespace is never removed</li></ul>
<h3><span class="mw-headline" id="Library_Implementation">Library Implementation</span></h3>
<ul><li>In some situations, the <code>-DMISSING_SYSCALL_NAMES</code> flag must be set in `newlib_cflags` so that certain functions can call your syscalls as the underscore variant. I.e. sbrk() instead of _sbrk() in your syscalls.c. Otherwise at compile time, the symbol _sbrk will be reported as missing.</li>
<li>The crt0.o object is overridden by the one generated by <code>libgloss/aarch64</code>. To use your crt file, make sure to override the existing one in your sysroot with the version from the <code>$NEWLIB_BUILD_DIR/$TARGET/newlib/</code> folder after installing newlib.</li></ul>
<h3><span class="mw-headline" id="Build_System_Tips">Build System Tips</span></h3>
<ul><li>When porting aarch64 (and perhaps other platforms), not having *-elf at the end of your target string can lead to a circular dependency in one of the Makefiles, causing the build to fail on copying the .spec files. Make sure to add a match statement in the <code>case "${target}" in</code> case in `libgloss/aarch64/configure.in`.</li>
<li>The build system was rewritten in later versions of NEWLIB. The instructions regarding the automake files will no longer apply. For the most part, it just means leaving out those parts, but be prepared to do your own detective work!</li></ul>
<h3><span class="mw-headline" id="General_Tips">General Tips</span></h3>
<ul><li>Copy-pasting may introduce aforementioned missing newlines or spurious spaces.</li>
<li>Don't move your build artifacts. This may break dependencies.</li>
<li>If you are stuck, try taking a look at other NEWLIB ports, such as for Jin Xue's <a rel="nofollow" class="external free" href="https://github.com/Jimx-/lyos">https://github.com/Jimx-/lyos</a>, for example.</li></ul>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<h3><span class="mw-headline" id="Articles">Articles</span></h3>
<ul><li><a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a></li>
<li><a href="OS_Specific_Toolchain" title="OS Specific Toolchain">OS Specific Toolchain</a></li></ul>
<!-- 
NewPP limit report
Cached time: 20250212011017
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.104 seconds
Real time usage: 2.450 seconds
Preprocessor visited node count: 291/1000000
Post‐expand include size: 372/2097152 bytes
Template argument size: 84/2097152 bytes
Highest expansion depth: 23/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 17082/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
114.40%    5.187      4 Template:If
100.73%    4.567      4 Template:Show1
100.00%    4.534      1 Template:Rating
100.00%    4.534      1 -total
 23.94%    1.086      4 Template:Eq
 11.49%    0.521      4 Template:Eq1
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:2126-0!canonical and timestamp 20250212011015 and revision id 28218.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Porting_Newlib&amp;oldid=28218">https://wiki.osdev.org/index.php?title=Porting_Newlib&amp;oldid=28218</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_duplicate_arguments_in_template_calls&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using duplicate arguments in template calls (page does not exist)">Pages using duplicate arguments in template calls</a></li><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_with_syntax_highlighting_errors&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages with syntax highlighting errors (page does not exist)">Pages with syntax highlighting errors</a></li><li><a href="./Category:Level_3_Tutorials" title="Category:Level 3 Tutorials">Level 3 Tutorials</a></li><li><a href="./Category:Porting" title="Category:Porting">Porting</a></li><li><a href="./Category:C" title="Category:C">C</a></li><li><a href="./Category:Standard_Libraries" title="Category:Standard Libraries">Standard Libraries</a></li><li><a href="./Category:Tutorials" title="Category:Tutorials">Tutorials</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Porting+Newlib" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Porting_Newlib#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Porting_Newlib" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:Porting_Newlib" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Porting_Newlib"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Porting_Newlib&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Porting_Newlib&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Porting_Newlib" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Porting_Newlib" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Porting_Newlib&amp;oldid=28218" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Porting_Newlib&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 10 July 2023, at 20:21.</li>
	<li id="footer-info-0">This page has been accessed 12,043 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Porting_Newlib&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.104","walltime":"2.450","ppvisitednodes":{"value":291,"limit":1000000},"postexpandincludesize":{"value":372,"limit":2097152},"templateargumentsize":{"value":84,"limit":2097152},"expansiondepth":{"value":23,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":17082,"limit":5000000},"timingprofile":["114.40%    5.187      4 Template:If","100.73%    4.567      4 Template:Show1","100.00%    4.534      1 Template:Rating","100.00%    4.534      1 -total"," 23.94%    1.086      4 Template:Eq"," 11.49%    0.521      4 Template:Eq1"]},"cachereport":{"timestamp":"20250212011017","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":2550});});</script>
</body>
</html>