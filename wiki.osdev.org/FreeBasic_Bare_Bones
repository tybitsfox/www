<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>FreeBasic Bare Bones - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"38040fbfcb6ee80297f7fcac","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"FreeBasic_Bare_Bones","wgTitle":"FreeBasic Bare Bones","wgCurRevisionId":22767,"wgRevisionId":22767,"wgArticleId":2155,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using duplicate arguments in template calls","Pages using deprecated source tags","Level 2 Tutorials","Bare bones tutorials"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"FreeBasic_Bare_Bones","wgRelevantArticleId":2155,"wgIsProbablyEditable":false,
"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-FreeBasic_Bare_Bones rootpage-FreeBasic_Bare_Bones skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">FreeBasic Bare Bones</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="FreeBasic_Bare_Bones#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="FreeBasic_Bare_Bones#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p><big><b>WAIT! Have you read <a href="Getting_Started" title="Getting Started">Getting Started</a>, <a href="Beginner_Mistakes" title="Beginner Mistakes">Beginner Mistakes</a>, and some of the related <a href="./Category:OS_theory" title="Category:OS theory">OS theory</a>?</b></big>
</p>
</td></tr></tbody></table>
</center><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear:right; border:1px solid #aaaaaa; background:#eee; text-align:center;;"><tbody><tr><th>Difficulty level</th></tr><tr><td><a href="./File:Difficulty_2.png" class="image"><img alt="Difficulty 2.png" src="images/a/a1/Difficulty_2.png" decoding="async" width="46" height="14" data-file-width="46" data-file-height="14" /></a><br />Medium</td></tr></tbody></table>
<p>While the forum has several flamewars about BASIC, it is a turing-complete language. FreeBasic adds functionality that makes it suitable for OS development. This tutorial provides a working kernel in Basic, together with the pitfalls associated with it.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="FreeBasic_Bare_Bones#About_FreeBasic_and_the_Runtime"><span class="tocnumber">1</span> <span class="toctext">About FreeBasic and the Runtime</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="FreeBasic_Bare_Bones#Pointers_for_Beginners"><span class="tocnumber">2</span> <span class="toctext">Pointers for Beginners</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="FreeBasic_Bare_Bones#Tuning_FreeBasic_for_OS_Development"><span class="tocnumber">3</span> <span class="toctext">Tuning FreeBasic for OS Development</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="FreeBasic_Bare_Bones#The_code"><span class="tocnumber">4</span> <span class="toctext">The code</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="FreeBasic_Bare_Bones#kernel.bas"><span class="tocnumber">4.1</span> <span class="toctext">kernel.bas</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="FreeBasic_Bare_Bones#link.ld"><span class="tocnumber">4.2</span> <span class="toctext">link.ld</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="FreeBasic_Bare_Bones#Build_instructions"><span class="tocnumber">4.3</span> <span class="toctext">Build instructions</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-8"><a href="FreeBasic_Bare_Bones#Getting_the_Runtime_to_work"><span class="tocnumber">5</span> <span class="toctext">Getting the Runtime to work</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="About_FreeBasic_and_the_Runtime">About FreeBasic and the Runtime</span></h2>
<p><a href="FreeBasic" class="mw-redirect" title="FreeBasic">FreeBasic</a> is a BASIC compiler with syntax compatible to QuickBasic, with several improvements that make it a viable compiler for Operating System Development. However, normal Basic programs rely heavily on part of the language that is called the Runtime. The Runtime consists of all operations that cannot be performed by a set of basic processor instructions. When engaging in operating systems development, you must be aware that you can not use anything that is part of the Runtime. That includes:
</p>
<ul><li>String operations. You can define strings, but not use them in any regular way.</li>
<li>Dynamic-sized arrays. Only arrays with a fixed size can be used, and even then some operations won't work on them.</li>
<li>Any input or output statements. Normally the program communicates with the OS about these things, but since we are <i>writing</i> the OS, these things can't be used.</li></ul>
<p>When you get messages about undefined symbols starting with fb_, it means you are using parts of the Runtime.
</p><p>To compensate, FreeBasic provides pointers that can be used to perform functionality the runtime would provide. Inline assembly can be used as well.
</p>
<h2><span class="mw-headline" id="Pointers_for_Beginners">Pointers for Beginners</span></h2>
<p>Pointers can be difficult to understand. Many modern languages do not work with pointers, while if you know a language like C, C++ or Assembly, you will probably know what they do. Since you will need to use them, a quick introduction in how they work in FreeBasic.
</p><p>The computer uses a set of registers, and memory. Memory is divided into bytes, each byte has its own location number. Big numbers, strings, types and arrays use up multiple bytes. These bytes are stored next to each other. A Long will hold 4 bytes, and will for example occupy locations 239394, 239395, 239396 and 239397. In the computer, these location numbers are called addresses (like the address when sending letters)
</p><p>Pointers hold these location numbers. For bytes, they hold the exact address, for larger objects, it will hold the address of the lowest address (you can determine the other addresses as they will immediately follow the first)
</p><p>In FreeBasic, a pointer is defined by adding the Ptr keyword.
</p>
<div class="mw-highlight mw-highlight-lang-basic mw-content-ltr" dir="ltr"><pre><span></span><span class="w"> </span><span class="vg">Dim</span><span class="w"> </span><span class="vg">mypointer</span><span class="w"> </span><span class="vg">As</span><span class="w"> </span><span class="vg">Byte</span><span class="w"> </span><span class="vg">Ptr</span>
</pre></div>
<p>This one holds the location of a byte of memory.
</p>
<div class="mw-highlight mw-highlight-lang-basic mw-content-ltr" dir="ltr"><pre><span></span><span class="w"> </span><span class="vg">Dim</span><span class="w"> </span><span class="vg">mypointer</span><span class="w"> </span><span class="vg">As</span><span class="w"> </span><span class="vg">Long</span><span class="w"> </span><span class="vg">Ptr</span>
</pre></div>
<p>This one points to the first of 4 bytes of memory, which together form the number.
</p><p>You can not use pointers straight away. Consider sending a letter with no address on it will not do any good. So we must first put an address in there. That leads to the question: how do we get an address. Some things have fixed addresses, like the video card. 
You can also ask variables for their addresses.
</p>
<div class="mw-highlight mw-highlight-lang-basic mw-content-ltr" dir="ltr"><pre><span></span><span class="w"> </span><span class="vg">Dim</span><span class="w"> </span><span class="vg">variable</span><span class="w"> </span><span class="vg">as</span><span class="w"> </span><span class="vg">Byte</span>
<span class="w"> </span><span class="vg">Dim</span><span class="w"> </span><span class="vg">pointer</span><span class="w"> </span><span class="vg">as</span><span class="w"> </span><span class="vg">Byte</span><span class="w"> </span><span class="vg">Ptr</span>
<span class="w"> </span><span class="vg">pointer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="vg">variable</span>
</pre></div>
<p>The @ returns the address of the variable that follows it.
</p>
<div class="mw-highlight mw-highlight-lang-basic mw-content-ltr" dir="ltr"><pre><span></span><span class="w"> </span><span class="vg">Dim</span><span class="w"> </span><span class="vg">pointer</span><span class="w"> </span><span class="vg">as</span><span class="w"> </span><span class="vg">Byte</span><span class="w"> </span><span class="vg">Ptr</span>
<span class="w"> </span><span class="vg">Dim</span><span class="w"> </span><span class="vg">address</span><span class="w"> </span><span class="vg">as</span><span class="w"> </span><span class="vg">Long</span>
<span class="w"> </span><span class="vg">address</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="il">12345</span>
<span class="w"> </span><span class="vg">pointer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="vg">CPtr</span><span class="p">(</span><span class="vg">Byte</span><span class="w"> </span><span class="vg">Ptr</span><span class="p">,</span><span class="w"> </span><span class="vg">address</span><span class="p">)</span>
</pre></div>
<p>Here CPtr (Convert to Pointer) is used to create pointers. You give it a type (Byte Ptr) and the address. You can also change pointers:
</p>
<div class="mw-highlight mw-highlight-lang-basic mw-content-ltr" dir="ltr"><pre><span></span><span class="w"> </span><span class="vg">Dim</span><span class="w"> </span><span class="vg">pointer1</span><span class="w"> </span><span class="vg">as</span><span class="w"> </span><span class="vg">Byte</span><span class="w"> </span><span class="vg">Ptr</span>
<span class="w"> </span><span class="vg">Dim</span><span class="w"> </span><span class="vg">pointer2</span><span class="w"> </span><span class="vg">as</span><span class="w"> </span><span class="vg">Long</span><span class="w"> </span><span class="vg">Ptr</span>
<span class="w"> </span><span class="vg">pointer2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="vg">CPtr</span><span class="p">(</span><span class="vg">Long</span><span class="w"> </span><span class="vg">Ptr</span><span class="p">,</span><span class="w"> </span><span class="vg">pointer1</span><span class="p">)</span>
</pre></div>
<p>Be careful when you do so: a byte occupies one location in memory, a long occupies four. if we would use this pointer, we would use three locations in memory of which we know nothing about. Sometimes, they are necessary, like when we want to work with strings without having the Runtime.
</p><p>You can access pointers with an index:
</p>
<div class="mw-highlight mw-highlight-lang-basic mw-content-ltr" dir="ltr"><pre><span></span><span class="w"> </span><span class="vg">Dim</span><span class="w"> </span><span class="vg">value</span><span class="w"> </span><span class="vg">as</span><span class="w"> </span><span class="vg">Long</span>
<span class="w"> </span><span class="vg">Dim</span><span class="w"> </span><span class="vg">pointer</span><span class="w"> </span><span class="vg">as</span><span class="w"> </span><span class="vg">Long</span><span class="w"> </span><span class="vg">Pointer</span>
<span class="w"> </span><span class="vg">pointer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="vg">value</span>
<span class="w"> </span><span class="c1">&#39; value = pointer[0]</span>
</pre></div>
<p>when we want to know what is behind the pointer, we ask for the memory at its location with the [ ], and then we add a number which tells us how many locations further to look. When we use [0] it simply means that we do not want to do anything with the address stored in the pointer. The result is the value stored in the memory locations pointed to by the pointer. For byte pointers, this will look at the address stored and return the result. For other pointers, it will look at a series of locations and return what those values represent.
</p><p>Strings are useful, but tedious. A string is stored as a series of bytes in consecutive addresses. You can build a pointer to a string as well:
</p>
<div class="mw-highlight mw-highlight-lang-basic mw-content-ltr" dir="ltr"><pre><span></span><span class="w"> </span><span class="vg">Dim</span><span class="w"> </span><span class="vg">s</span><span class="w"> </span><span class="vg">as</span><span class="w"> </span><span class="vg">String</span>
<span class="w"> </span><span class="vg">Dim</span><span class="w"> </span><span class="vg">pointer</span><span class="w"> </span><span class="vg">as</span><span class="w"> </span><span class="vg">String</span><span class="w"> </span><span class="vg">Ptr</span>
<span class="w"> </span><span class="vg">pointer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">@</span><span class="vg">s</span>
</pre></div>
<p>But since we do not have the Runtime, we have to use something that does not use it.
</p>
<div class="mw-highlight mw-highlight-lang-basic mw-content-ltr" dir="ltr"><pre><span></span><span class="w"> </span><span class="vg">Const</span><span class="w"> </span><span class="vg">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">&quot;Text&quot;</span>
<span class="w"> </span><span class="vg">Dim</span><span class="w"> </span><span class="vg">pointer</span><span class="w"> </span><span class="vg">as</span><span class="w"> </span><span class="vg">Byte</span><span class="w"> </span><span class="vg">Ptr</span>
<span class="w"> </span><span class="vg">pointer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="vg">CPtr</span><span class="p">(</span><span class="vg">Byte</span><span class="w"> </span><span class="vg">Ptr</span><span class="p">,</span><span class="w"> </span><span class="err">@</span><span class="vg">s</span><span class="p">)</span>
<span class="w"> </span><span class="c1">&#39; pointer[0] = Asc(&quot;T&quot;)</span>
<span class="w"> </span><span class="c1">&#39; pointer[1] = Asc(&quot;e&quot;)</span>
<span class="w"> </span><span class="c1">&#39; pointer[2] = Asc(&quot;x&quot;)</span>
<span class="w"> </span><span class="c1">&#39; pointer[3] = Asc(&quot;t&quot;)</span>
<span class="w"> </span><span class="c1">&#39; pointer[4] = 0</span>
</pre></div>
<p>The first example uses the Runtime which will not compile. The second example shows the only working method of using strings: Define one using Const, then ask for a pointer to that. Since a string is a sequence of characters (bytes), we change the type of the pointer in the process. Next we can ask for individual characters as if it were an array. However, they now appear as numbers. The ASCII codes to be precise, and the same as when you use Chr$() and Asc().
</p><p>Basic uses an borrowed trick to tell us the end of the string. After the last character, there will always be a 0. So if we read a string in order, we can tell when it has ended.
</p>
<div class="mw-highlight mw-highlight-lang-basic mw-content-ltr" dir="ltr"><pre><span></span><span class="w"> </span><span class="vg">Sub</span><span class="w"> </span><span class="vg">PrintString</span><span class="p">(</span><span class="vg">src</span><span class="w"> </span><span class="vg">As</span><span class="w"> </span><span class="vg">Byte</span><span class="w"> </span><span class="vg">Ptr</span><span class="p">,</span><span class="w"> </span><span class="vg">x</span><span class="w"> </span><span class="vg">As</span><span class="w"> </span><span class="vg">Long</span><span class="p">,</span><span class="w"> </span><span class="vg">y</span><span class="w"> </span><span class="vg">As</span><span class="w"> </span><span class="vg">Long</span><span class="p">)</span>
<span class="w"> </span>
<span class="w">    </span><span class="vg">Dim</span><span class="w"> </span><span class="vg">dst</span><span class="w"> </span><span class="vg">as</span><span class="w"> </span><span class="vg">Byte</span><span class="w"> </span><span class="vg">Ptr</span>
<span class="w">    </span><span class="vg">Dim</span><span class="w"> </span><span class="vg">counter</span><span class="w"> </span><span class="vg">as</span><span class="w"> </span><span class="vg">Long</span>
<span class="w"> </span>
<span class="w">    </span><span class="vg">dst</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="vg">CPtr</span><span class="p">(</span><span class="vg">Byte</span><span class="w"> </span><span class="vg">Ptr</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="vg">HB8000</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="vg">y</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="il">160</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="vg">x</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="il">2</span><span class="p">)</span>
<span class="w"> </span>
<span class="w">    </span><span class="vg">counter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="il">0</span>
<span class="w"> </span>
<span class="w">    </span><span class="vg">while</span><span class="w"> </span><span class="vg">src</span><span class="p">[</span><span class="vg">counter</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="il">0</span>
<span class="w">        </span><span class="vg">dst</span><span class="p">[</span><span class="il">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="vg">counter</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="vg">src</span><span class="p">[</span><span class="vg">counter</span><span class="p">]</span>
<span class="w">        </span><span class="vg">dst</span><span class="p">[</span><span class="il">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="vg">counter</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="il">1</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="il">15</span>
<span class="w">        </span><span class="vg">counter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="vg">counter</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="il">1</span>
<span class="w">    </span><span class="vg">wend</span>
<span class="w"> </span><span class="vg">End</span><span class="w"> </span><span class="vg">Sub</span>
</pre></div>
<p>To conclude, this function prints a string (a converted Byte Ptr string). It creates a pointer that is aimed at the <a href="Text_UI" title="Text UI">video card</a> (it occupies among others a range starting from address B8000 hex), and we pick a location in there. Next we take a character from the string, check if its 0, and if it isn't, copy it to the video card and go to the next character. Due to the way the video card works, we add a color (15) as well.
</p>
<h2><span class="mw-headline" id="Tuning_FreeBasic_for_OS_Development">Tuning FreeBasic for OS Development</span></h2>
<p>A normal install of FreeBasic is in most cases configured to build for the system it was installed on. That means that it will try to compile programs for linux or windows OSes, rather than your own. 
</p><p>To fix this, you should build at the very least a <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">crosscompiling binutils</a> (2.17 or later recommended). While you're at it, you can also build GCC, which comes in handy once you start porting software written in C (that includes the runtime).
</p><p>FreeBasic stores its auxiliary binaries in the bin directory, or a subdirectory thereof. To get started quickly, replace <code>ld</code>, <code>ar</code> and <code>as</code> with the versions built in the previous step. Note that this stops FreeBasic from working on its previous host.
Under windows, the bin directory is subdivided into platforms, and you can add a new one rather than modifying the existing one. To use this, create the 'linux' directory, copy <code>i586-elf-ld</code>, <code>i586-elf-ar</code> and <code>i586-elf-as</code>, and rename them to <code>ld</code>, <code>ar</code> and <code>as</code>. When running freebasic you can use the <code>-t linux</code> command line switch to compile for your OS instead of windows, allowing you to continue using Freebasic normally for non-os development. The Linux version does not come with this target switch - here you'll have to replace the bundled binaries with your own versions.
</p>
<h2><span class="mw-headline" id="The_code">The code</span></h2>
<p>Here is the entire project for reference
</p>
<h3><span class="mw-headline" id="kernel.bas">kernel.bas</span></h3>
<div class="mw-highlight mw-highlight-lang-qbasic mw-content-ltr" dir="ltr"><pre><span></span><span class="vg">Declare</span><span class="w"> </span><span class="vg">Sub</span><span class="w"> </span><span class="vg">PrintString</span><span class="p">(</span><span class="vg">src</span><span class="w"> </span><span class="vg">As</span><span class="w"> </span><span class="vg">Byte</span><span class="w"> </span><span class="vg">Ptr</span><span class="p">,</span><span class="w"> </span><span class="vg">x</span><span class="w"> </span><span class="vg">As</span><span class="w"> </span><span class="vg">Long</span><span class="p">,</span><span class="w"> </span><span class="vg">y</span><span class="w"> </span><span class="vg">As</span><span class="w"> </span><span class="vg">Long</span><span class="p">)</span>
<span class="vg">Declare</span><span class="w"> </span><span class="vg">Sub</span><span class="w"> </span><span class="vg">main</span><span class="w"> </span><span class="p">()</span>

<span class="vg">Sub</span><span class="w"> </span><span class="vg">multiboot</span><span class="w"> </span><span class="p">()</span>
<span class="w">   </span><span class="vg">Asm</span>

<span class="w">     </span><span class="c1">&#39;setting up the Multiboot header - see GRUB docs for details</span>
<span class="w">    </span>
<span class="w">     </span><span class="o">.</span><span class="vg">set</span><span class="w"> </span><span class="vg">ALIGN</span><span class="p">,</span><span class="w">    </span><span class="il">1</span><span class="o">&lt;&lt;</span><span class="il">0</span><span class="w">             </span>
<span class="w">     </span><span class="o">.</span><span class="vg">set</span><span class="w"> </span><span class="vg">MEMINFO</span><span class="p">,</span><span class="w">  </span><span class="il">1</span><span class="o">&lt;&lt;</span><span class="il">1</span><span class="w">             </span>
<span class="w">     </span><span class="o">.</span><span class="vg">set</span><span class="w"> </span><span class="vg">FLAGS</span><span class="p">,</span><span class="w">    </span><span class="vg">ALIGN</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="vg">MEMINFO</span><span class="w">  </span>
<span class="w">     </span><span class="o">.</span><span class="vg">set</span><span class="w"> </span><span class="vg">MAGIC</span><span class="p">,</span><span class="w">    </span><span class="il">0</span><span class="vg">x1BADB002</span><span class="w">       </span>
<span class="w">     </span><span class="o">.</span><span class="vg">set</span><span class="w"> </span><span class="vg">CHECKSUM</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="p">(</span><span class="vg">MAGIC</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="vg">FLAGS</span><span class="p">)</span><span class="w"> </span>

<span class="w">     </span><span class="o">.</span><span class="vg">align</span><span class="w"> </span><span class="il">4</span>
<span class="w">     </span><span class="o">.</span><span class="vg">long</span><span class="w"> </span><span class="vg">MAGIC</span>
<span class="w">     </span><span class="o">.</span><span class="vg">long</span><span class="w"> </span><span class="vg">FLAGS</span>
<span class="w">     </span><span class="o">.</span><span class="vg">long</span><span class="w"> </span><span class="vg">CHECKSUM</span>

<span class="w">     </span><span class="o">.</span><span class="vg">set</span><span class="w"> </span><span class="vg">STACKSIZE</span><span class="p">,</span><span class="w"> </span><span class="il">0</span><span class="vg">x4000</span><span class="w">          </span>
<span class="w">     </span><span class="o">.</span><span class="vg">comm</span><span class="w"> </span><span class="vg">stack</span><span class="p">,</span><span class="w"> </span><span class="vg">STACKSIZE</span><span class="p">,</span><span class="w"> </span><span class="il">32</span><span class="w">      </span>
<span class="w">    </span>
<span class="w">     </span><span class="o">.</span><span class="vg">global</span><span class="w"> </span><span class="vg">loader</span><span class="w">                  </span>

<span class="w">     </span><span class="nl">loader:</span>
<span class="w">       </span><span class="vg">lea</span><span class="w">   </span><span class="vg">esp</span><span class="p">,</span><span class="w"> </span><span class="vg">stack</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="vg">STACKSIZE</span>
<span class="w">       </span><span class="vg">push</span><span class="w">  </span><span class="vg">eax</span><span class="w">                       </span>
<span class="w">       </span><span class="vg">push</span><span class="w">  </span><span class="vg">ebx</span><span class="w">                       </span>

<span class="w">       </span><span class="vg">call</span><span class="w">  </span><span class="vg">MAIN</span>

<span class="w">       </span><span class="vg">cli</span>
<span class="w">       </span><span class="vg">hlt</span><span class="w">                    </span>
<span class="w">   </span><span class="vg">End</span><span class="w"> </span><span class="vg">Asm</span>

<span class="vg">End</span><span class="w"> </span><span class="vg">Sub</span>

<span class="vg">Sub</span><span class="w"> </span><span class="vg">main</span><span class="w"> </span><span class="p">()</span>
<span class="w">    </span><span class="vg">Const</span><span class="w"> </span><span class="vg">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">&quot;Hello World&quot;</span>

<span class="w">    </span><span class="vg">PrintString</span><span class="w"> </span><span class="vg">CPtr</span><span class="p">(</span><span class="vg">Byte</span><span class="w"> </span><span class="vg">Ptr</span><span class="p">,</span><span class="w"> </span><span class="err">@</span><span class="vg">s</span><span class="p">),</span><span class="w"> </span><span class="il">35</span><span class="p">,</span><span class="w"> </span><span class="il">12</span>

<span class="vg">End</span><span class="w"> </span><span class="vg">Sub</span>

<span class="vg">Sub</span><span class="w"> </span><span class="vg">PrintString</span><span class="p">(</span><span class="vg">src</span><span class="w"> </span><span class="vg">As</span><span class="w"> </span><span class="vg">Byte</span><span class="w"> </span><span class="vg">Ptr</span><span class="p">,</span><span class="w"> </span><span class="vg">x</span><span class="w"> </span><span class="vg">As</span><span class="w"> </span><span class="vg">Long</span><span class="p">,</span><span class="w"> </span><span class="vg">y</span><span class="w"> </span><span class="vg">As</span><span class="w"> </span><span class="vg">Long</span><span class="p">)</span>

<span class="w">    </span><span class="vg">Dim</span><span class="w"> </span><span class="vg">dst</span><span class="w"> </span><span class="vg">as</span><span class="w"> </span><span class="vg">Byte</span><span class="w"> </span><span class="vg">Ptr</span>
<span class="w">    </span><span class="vg">Dim</span><span class="w"> </span><span class="vg">counter</span><span class="w"> </span><span class="vg">as</span><span class="w"> </span><span class="vg">Long</span>

<span class="w">    </span><span class="vg">dst</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="vg">CPtr</span><span class="p">(</span><span class="vg">Byte</span><span class="w"> </span><span class="vg">Ptr</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="vg">HB8000</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="vg">y</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="il">160</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="vg">x</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="il">2</span><span class="p">)</span>

<span class="w">    </span><span class="vg">counter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="il">0</span>
<span class="w"> </span>
<span class="w">    </span><span class="vg">while</span><span class="w"> </span><span class="vg">src</span><span class="p">[</span><span class="vg">counter</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="il">0</span>
<span class="w">        </span><span class="vg">dst</span><span class="p">[</span><span class="il">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="vg">counter</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="vg">src</span><span class="p">[</span><span class="vg">counter</span><span class="p">]</span>
<span class="w">        </span><span class="vg">dst</span><span class="p">[</span><span class="il">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="vg">counter</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="il">1</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="il">15</span>
<span class="w">        </span><span class="vg">counter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="vg">counter</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="il">1</span>
<span class="w">    </span><span class="vg">wend</span>
<span class="vg">End</span><span class="w"> </span><span class="vg">Sub</span>
</pre></div>
<h3><span class="mw-headline" id="link.ld">link.ld</span></h3>
<pre>OUTPUT_FORMAT("elf32-i386")
ENTRY (loader)

SECTIONS{
    . = 0x00100000;

    .text&#160;:{
        KERNEL_START = .;

        *(.text)
    }

    .rodata ALIGN (0x1000)&#160;: {
        *(.rodata)
        _CTORS = .;
        *(.ctors)
        _CTORS_END = .;       
    }

    .data ALIGN (0x1000)&#160;: {
        *(.data)
    }

    .bss&#160;: {
        SBSS = .;
        *(COMMON)
        *(.bss)
        EBSS = .;

        KERNEL_END = .;
    }
}
</pre>
<h3><span class="mw-headline" id="Build_instructions">Build instructions</span></h3>
<pre>fbc -c kernel.bas -o kernel.o
i586-elf-ld -T link.ld -o kernel.bin kernel.o</pre>
<p><tt>kernel.bin</tt> can then be loaded by <a href="GRUB" title="GRUB">GRUB</a>
</p>
<h2><span class="mw-headline" id="Getting_the_Runtime_to_work">Getting the Runtime to work</span></h2>
<p>Once you progress with your kernel, you can try to get runtime functionality to work.
</p><p>The Runtime is built on top of the C library. FreeBasic provides sources to the Runtime (which are written in C). You'll need to provide the C library. Since many parts of the kernel rely heavily upon each other, you will probably add the Runtime in steps.
Some functions compile cleanly with minimal effort. When you compile the CType, String and Stdlib (excluding malloc, calloc, and free) parts of the runtime can be compiled on top of those. 
Before you can use the string and array instructions, you will need to have <a href="Memory_Management" class="mw-redirect" title="Memory Management">memory management</a> implemented. That will allow you to compile malloc, calloc, free from the C library, after which the string and some of the array functions can be compiled.
</p>
<!-- 
NewPP limit report
Cached time: 20250211121657
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.078 seconds
Real time usage: 1.428 seconds
Preprocessor visited node count: 186/1000000
Post‐expand include size: 916/2097152 bytes
Template argument size: 192/2097152 bytes
Highest expansion depth: 19/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 21367/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    5.820      1 -total
 71.71%    4.173      3 Template:If
 69.81%    4.063      1 Template:Rating
 62.25%    3.623      3 Template:Show1
 29.15%    1.697      1 Template:BeginnersWarning
 16.22%    0.944      3 Template:Eq
  7.80%    0.454      3 Template:Eq1
  6.79%    0.395      1 Template:NoteBox
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:2155-0!canonical and timestamp 20250211121655 and revision id 22767.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=FreeBasic_Bare_Bones&amp;oldid=22767">https://wiki.osdev.org/index.php?title=FreeBasic_Bare_Bones&amp;oldid=22767</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_duplicate_arguments_in_template_calls&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using duplicate arguments in template calls (page does not exist)">Pages using duplicate arguments in template calls</a></li><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Level_2_Tutorials" title="Category:Level 2 Tutorials">Level 2 Tutorials</a></li><li><a href="./Category:Bare_bones_tutorials" title="Category:Bare bones tutorials">Bare bones tutorials</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=FreeBasic+Bare+Bones" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="FreeBasic_Bare_Bones#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="FreeBasic_Bare_Bones" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:FreeBasic_Bare_Bones&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="FreeBasic_Bare_Bones"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=FreeBasic_Bare_Bones&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=FreeBasic_Bare_Bones&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/FreeBasic_Bare_Bones" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/FreeBasic_Bare_Bones" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=FreeBasic_Bare_Bones&amp;oldid=22767" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=FreeBasic_Bare_Bones&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 10 September 2018, at 03:45.</li>
	<li id="footer-info-0">This page has been accessed 6,128 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=FreeBasic_Bare_Bones&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.078","walltime":"1.428","ppvisitednodes":{"value":186,"limit":1000000},"postexpandincludesize":{"value":916,"limit":2097152},"templateargumentsize":{"value":192,"limit":2097152},"expansiondepth":{"value":19,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":21367,"limit":5000000},"timingprofile":["100.00%    5.820      1 -total"," 71.71%    4.173      3 Template:If"," 69.81%    4.063      1 Template:Rating"," 62.25%    3.623      3 Template:Show1"," 29.15%    1.697      1 Template:BeginnersWarning"," 16.22%    0.944      3 Template:Eq","  7.80%    0.454      3 Template:Eq1","  6.79%    0.395      1 Template:NoteBox"]},"cachereport":{"timestamp":"20250211121657","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":1534});});</script>
</body>
</html>