<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Ada Bare Bones - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"172c63abc29b3cab8527b35b","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Ada_Bare_Bones","wgTitle":"Ada Bare Bones","wgCurRevisionId":26305,"wgRevisionId":26305,"wgArticleId":3231,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Bare bones tutorials","Ada"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Ada_Bare_Bones","wgRelevantArticleId":3231,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],
"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Ada_Bare_Bones rootpage-Ada_Bare_Bones skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Ada Bare Bones</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Ada_Bare_Bones#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Ada_Bare_Bones#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p><i>The aim of this tutorial is to produce a small Multiboot kernel written in the Ada programming language.</i>
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Ada_Bare_Bones#Preface"><span class="tocnumber">1</span> <span class="toctext">Preface</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="Ada_Bare_Bones#Prerequisites"><span class="tocnumber">1.1</span> <span class="toctext">Prerequisites</span></a>
<ul>
<li class="toclevel-3 tocsection-3"><a href="Ada_Bare_Bones#Cross-Compiler"><span class="tocnumber">1.1.1</span> <span class="toctext">Cross-Compiler</span></a></li>
<li class="toclevel-3 tocsection-4"><a href="Ada_Bare_Bones#GPRbuild"><span class="tocnumber">1.1.2</span> <span class="toctext">GPRbuild</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="Ada_Bare_Bones#Ada_run-time_library"><span class="tocnumber">2</span> <span class="toctext">Ada run-time library</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="Ada_Bare_Bones#Files"><span class="tocnumber">3</span> <span class="toctext">Files</span></a>
<ul>
<li class="toclevel-2 tocsection-7"><a href="Ada_Bare_Bones#gnat.adc"><span class="tocnumber">3.1</span> <span class="toctext">gnat.adc</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="Ada_Bare_Bones#system.ads"><span class="tocnumber">3.2</span> <span class="toctext">system.ads</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Ada_Bare_Bones#Last_chance_handler"><span class="tocnumber">3.3</span> <span class="toctext">Last chance handler</span></a>
<ul>
<li class="toclevel-3 tocsection-10"><a href="Ada_Bare_Bones#last_chance_handler.ads"><span class="tocnumber">3.3.1</span> <span class="toctext">last_chance_handler.ads</span></a></li>
<li class="toclevel-3 tocsection-11"><a href="Ada_Bare_Bones#last_chance_handler.adb"><span class="tocnumber">3.3.2</span> <span class="toctext">last_chance_handler.adb</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-12"><a href="Ada_Bare_Bones#Compiling_the_runtime"><span class="tocnumber">3.4</span> <span class="toctext">Compiling the runtime</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="Ada_Bare_Bones#startup.s"><span class="tocnumber">3.5</span> <span class="toctext">startup.s</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="Ada_Bare_Bones#multiboot.ads"><span class="tocnumber">3.6</span> <span class="toctext">multiboot.ads</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="Ada_Bare_Bones#Console"><span class="tocnumber">3.7</span> <span class="toctext">Console</span></a>
<ul>
<li class="toclevel-3 tocsection-16"><a href="Ada_Bare_Bones#console.ads"><span class="tocnumber">3.7.1</span> <span class="toctext">console.ads</span></a></li>
<li class="toclevel-3 tocsection-17"><a href="Ada_Bare_Bones#console.adb"><span class="tocnumber">3.7.2</span> <span class="toctext">console.adb</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-18"><a href="Ada_Bare_Bones#bare_bones.adb"><span class="tocnumber">3.8</span> <span class="toctext">bare_bones.adb</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="Ada_Bare_Bones#linker.ld"><span class="tocnumber">3.9</span> <span class="toctext">linker.ld</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="Ada_Bare_Bones#makefile"><span class="tocnumber">3.10</span> <span class="toctext">makefile</span></a></li>
<li class="toclevel-2 tocsection-21"><a href="Ada_Bare_Bones#bare_bones.gpr"><span class="tocnumber">3.11</span> <span class="toctext">bare_bones.gpr</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-22"><a href="Ada_Bare_Bones#Raspberry_Pi"><span class="tocnumber">4</span> <span class="toctext">Raspberry Pi</span></a>
<ul>
<li class="toclevel-2 tocsection-23"><a href="Ada_Bare_Bones#Boot_process"><span class="tocnumber">4.1</span> <span class="toctext">Boot process</span></a></li>
<li class="toclevel-2 tocsection-24"><a href="Ada_Bare_Bones#U-Boot"><span class="tocnumber">4.2</span> <span class="toctext">U-Boot</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-25"><a href="Ada_Bare_Bones#Testing"><span class="tocnumber">5</span> <span class="toctext">Testing</span></a></li>
<li class="toclevel-1 tocsection-26"><a href="Ada_Bare_Bones#Source_access"><span class="tocnumber">6</span> <span class="toctext">Source access</span></a></li>
<li class="toclevel-1 tocsection-27"><a href="Ada_Bare_Bones#Next_Steps"><span class="tocnumber">7</span> <span class="toctext">Next Steps</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Preface">Preface</span></h2>
<p>One of the first things people ask on the Ada IRC channel on Freenode is <i>"Can Ada be used for OS development?"</i> to which the answer is a resounding <b>yes</b>.
</p>
<h3><span class="mw-headline" id="Prerequisites">Prerequisites</span></h3>
<p>The following section details the prerequisite software necessary for successfully building the kernel.
</p>
<h4><span class="mw-headline" id="Cross-Compiler">Cross-Compiler</span></h4>
<dl><dd><i>Main article:</i> <a href="GNAT_Cross-Compiler" title="GNAT Cross-Compiler">GNAT Cross-Compiler</a></dd></dl>
<p>This tutorial requires the use of a <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">cross-compiler</a> with Ada support targeting the <tt>i686-elf</tt> architecture. Theoretically, any Ada compiler capable of producing bare-metal ELF binaries for this architecture is suitable. The recommended compiler is <a rel="nofollow" class="external text" href="https://www.gnu.org/software/gnat/">GNAT</a>, which is part of the GNU Compiler Collection maintained by the Free Software Foundation. Historically it was difficult to create cross-compiler builds for GNAT, but recent versions of GCC have made this much simpler. For a tutorial on how to set up a GNAT cross-compiler, refer to <a href="GNAT_Cross-Compiler" title="GNAT Cross-Compiler">this article</a>.
</p>
<h4><span class="mw-headline" id="GPRbuild">GPRbuild</span></h4>
<p>This tutorial will require the use of the <a rel="nofollow" class="external text" href="https://docs.adacore.com/gprbuild-docs/html/gprbuild_ug.html">GPRBuild</a> utility to build GNAT project files. GPRbuild is a generic build tool designed for the construction of multi-language systems. It is included with AdaCore's distribution of their proprietary GNAT compiler: <a rel="nofollow" class="external autonumber" href="https://www.adacore.com/download">[1]</a> or can be built from source files obtained from AdaCore's <a rel="nofollow" class="external text" href="https://github.com/AdaCore/gprbuild">github profile</a>. Older versions of GNAT distributed by the Free Software Foundation were able to build GNAT project files using the <tt>gnatmake</tt> utility, however newer versions do not support all the required features.
</p><p>The cross-compiler mentioned above will need to be properly integrated with GPRbuild and its associated tools. This can be accomplished by following the guide detailed <a href="GNAT_Cross-Compiler#GPRbuild_Integration" title="GNAT Cross-Compiler">here</a>.
</p>
<h2><span class="mw-headline" id="Ada_run-time_library">Ada run-time library</span></h2>
<dl><dd><i>Main article:</i> <a href="Ada_Runtime_Library" title="Ada Runtime Library">Ada Runtime Library</a></dd></dl>
<p>The Ada run-time library is responsible for the implementation of the standard library as defined in the <a rel="nofollow" class="external text" href="http://ada-auth.org/standards/12rm/html/RM-TOC.html">Ada Language Reference Manual</a>. Not all features outlined in the reference manual need to be implemented for every platform. Since the kernel will be running in a freestanding environment without the support of an underlying operating system, it will be built with what is known as a <i>a zero-footprint run-time system</i> (commonly abbreviated as 'ZFP'). A zero-footprint RTS will typically provide only the bare-minimum functionality for the target architecture.
</p><p>The following steps will detail how to create an initial zero-footprint runtime library suitable for building the kernel.
</p><p>The first step is to set up the directory structure to hold the runtime library. GNAT expects the runtime library to conform to the a set directory structure. It requires the presence of two directories: <tt>adalib</tt> and <tt>adainclude</tt>. <tt>adainclude</tt> contains the runtime package specifications and source files, which are used analogously to include files in C. <tt>adalib</tt> contains the compiled binary artifacts of the runtime library.
</p><p>The following code demonstrates setting up a directory structure for the RTS:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>mkdir -p bare_bones/src/pc
<span class="nb">cd</span> bare_bones
mkdir -p rts/boards/i386/adalib
mkdir -p rts/boards/i386/adainclude
mkdir -p rts/src
mkdir -p obj
</pre></div>
<p>The best way to begin creating a new run-time library is to base it upon the existing source files obtained from the system GNAT installation, modifying them where necessary.
</p><p>The following code demonstrates copying the required files from the host system's GNAT installation's run-time library into <tt>rts/src</tt> and then creating symbolic links to <tt>rts/boards/${arch}/adainclude</tt>. Where <tt>${arch}</tt> is <tt>i386</tt>, <tt>armv6</tt>, etc. The source location will need to be modified to reflect the location of the system compiler.
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span><span class="nv">system_compiler_dir</span><span class="o">=</span><span class="s2">&quot;/usr/lib/gcc/x86_64-linux-gnu/8&quot;</span>
<span class="nv">rts_dir</span><span class="o">=</span><span class="s2">&quot;</span><span class="si">${</span><span class="nv">PWD</span><span class="si">}</span><span class="s2">/rts&quot;</span>

<span class="k">for</span> f <span class="k">in</span> <span class="s2">&quot;ada.ads&quot;</span> <span class="s2">&quot;a-unccon.ads&quot;</span> <span class="s2">&quot;a-uncdea.ads&quot;</span> <span class="s2">&quot;gnat.ads&quot;</span> <span class="s2">&quot;g-souinf.ads&quot;</span> <span class="se">\</span>
<span class="s2">&quot;interfac.ads&quot;</span> <span class="s2">&quot;s-atacco.adb&quot;</span> <span class="s2">&quot;s-atacco.ads&quot;</span> <span class="s2">&quot;s-maccod.ads&quot;</span> <span class="s2">&quot;s-stoele.adb&quot;</span> <span class="se">\</span>
<span class="s2">&quot;s-stoele.ads&quot;</span>
<span class="k">do</span>
	cp <span class="s2">&quot;</span><span class="si">${</span><span class="nv">system_compiler_dir</span><span class="si">}</span><span class="s2">/adainclude/</span><span class="nv">$f</span><span class="s2">&quot;</span> <span class="s2">&quot;</span><span class="si">${</span><span class="nv">rts_dir</span><span class="si">}</span><span class="s2">/src/&quot;</span>
	ln -s <span class="s2">&quot;</span><span class="si">${</span><span class="nv">rts_dir</span><span class="si">}</span><span class="s2">/src/</span><span class="nv">$f</span><span class="s2">&quot;</span> <span class="s2">&quot;</span><span class="si">${</span><span class="nv">rts_dir</span><span class="si">}</span><span class="s2">/rts/boards/i386/adainclude/</span><span class="nv">$f</span><span class="s2">&quot;</span>
<span class="k">done</span>
</pre></div>
<h2><span class="mw-headline" id="Files">Files</span></h2>
<h3><span class="mw-headline" id="gnat.adc">gnat.adc</span></h3>
<p>During compilation the GNAT compiler will search for a file named <tt>gnat.adc</tt> within the current working directory. This file is expected to contain one or more configuration pragmas that will be applied to the current compilation. These pragma directives instruct the compiler what features of the runtime should be restricted. This is of particular importance to kernel development since many of Ada's features are not supported by a freestanding, bare-metal environment. 
</p><p>These pragma directives can alternatively be placed at the start of the runtime library's <tt>system.ads</tt> file (see below), however convention dictates using the <tt>gnat.adc</tt> file for this purpose.
</p><p>Additionally, it is possible to apply additional global configuration files by appending the following line to the <tt>Builder</tt> package in a GNAT project file:
</p>
<div class="mw-highlight mw-highlight-lang-ada mw-content-ltr" dir="ltr"><pre><span></span>   <span class="kd">package</span> <span class="nc">Builder</span> <span class="kr">is</span>
      <span class="c1">--  ...</span>
      <span class="kr">for</span> <span class="n">Global_Configuration_Pragmas</span> <span class="kn">use</span> <span class="s">&quot;kernel.adc&quot;</span><span class="p">;</span>
   <span class="kr">end</span> <span class="nf">Builder</span><span class="p">;</span>
</pre></div>
<p>It is also possible to instruct the compiler to apply additional files containing configuration pragmas to the current compilation using the switch <tt>-gnatec=path</tt> on the command line. These configuration pragmas are applied in addition to those found in <tt>gnat.adc</tt>, if it is present.
More information on configuration files can be found in the GNAT documentation: <a rel="nofollow" class="external autonumber" href="https://gcc.gnu.org/onlinedocs/gnat_ugn/Handling-of-Configuration-Pragmas.html">[2]</a>
</p><p>The GNAT Reference Manual and the Ada Reference Manual provide information on the various configuration pragmas.
See below for a list of restriction pragmas useful for a bare bones kernel and runtime:
</p>
<div class="mw-highlight mw-highlight-lang-ada mw-content-ltr" dir="ltr"><pre><span></span><span class="kr">pragma</span> <span class="cp">Discard_Names</span><span class="p">;</span>
<span class="kr">pragma</span> <span class="cp">Restrictions</span> <span class="p">(</span><span class="n">No_Enumeration_Maps</span><span class="p">);</span>
<span class="kr">pragma</span> <span class="cp">Normalize_Scalars</span><span class="p">;</span>
<span class="kr">pragma</span> <span class="cp">Restrictions</span> <span class="p">(</span><span class="n">No_Exception_Propagation</span><span class="p">);</span>
<span class="kr">pragma</span> <span class="cp">Restrictions</span> <span class="p">(</span><span class="n">No_Finalization</span><span class="p">);</span>
<span class="kr">pragma</span> <span class="cp">Restrictions</span> <span class="p">(</span><span class="n">No_Tasking</span><span class="p">);</span>
<span class="kr">pragma</span> <span class="cp">Restrictions</span> <span class="p">(</span><span class="n">No_Protected_Types</span><span class="p">);</span>
<span class="kr">pragma</span> <span class="cp">Restrictions</span> <span class="p">(</span><span class="n">No_Delay</span><span class="p">);</span>
<span class="kr">pragma</span> <span class="cp">Restrictions</span> <span class="p">(</span><span class="n">No_Recursion</span><span class="p">);</span>
<span class="kr">pragma</span> <span class="cp">Restrictions</span> <span class="p">(</span><span class="n">No_Allocators</span><span class="p">);</span>
<span class="kr">pragma</span> <span class="cp">Restrictions</span> <span class="p">(</span><span class="n">No_Dispatch</span><span class="p">);</span>
<span class="kr">pragma</span> <span class="cp">Restrictions</span> <span class="p">(</span><span class="n">No_Implicit_Dynamic_Code</span><span class="p">);</span>
<span class="kr">pragma</span> <span class="cp">Restrictions</span> <span class="p">(</span><span class="n">No_Secondary_Stack</span><span class="p">);</span>
</pre></div>
<p><b>Note:</b> <i>Do not use <tt>pragma No_Run_Time</tt>. It is obsolete.</i>
</p><p>Below is an explanation of these configuration pragmas:
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1&#125;&#125;&#125;">
<tbody><tr>
<th>Restriction
</th>
<th>Purpose
</th></tr>
<tr>
<td>Discard_Names</td>
<td>The Ada compiler automatically generates strings containing the names of enumerated data types, among others. These strings can be used in I/O.
<div class="mw-highlight mw-highlight-lang-ada mw-content-ltr" dir="ltr"><pre><span></span><span class="kd">type</span> <span class="kt">Fruit</span> <span class="kr">is</span> <span class="p">(</span><span class="nv">Orange</span><span class="p">,</span> <span class="nv">Banana</span><span class="p">,</span> <span class="nv">Apple</span><span class="p">);</span>
<span class="c1">--  Ada defines the following strings, &quot;Orange&quot;, &quot;Banana&quot; and &quot;Apple&quot; in an array.</span>

<span class="c1">--  These strings can be accessed using the &#39;Image attribute, as in</span>
<span class="n">Put</span> <span class="p">(</span><span class="n">Fruit</span><span class="p">&#39;</span><span class="na">Image</span> <span class="p">(</span><span class="n">Orange</span><span class="p">));</span>
<span class="c1">--  Prints &quot;Orange&quot; to the console.</span>
</pre></div>
<p>This directive instructs the compiler not to generate these strings.
</p>
</td></tr>
<tr>
<td>Normalize_Scalars</td>
<td>Forces all scalars to be initialised. Refer to <a rel="nofollow" class="external text" href="http://gcc.gnu.org/onlinedocs/gcc-4.7.0/gnat_rm/Pragma-Normalize_005fScalars.html#Pragma-Normalize_005fScalars">GNAT RM:Normalize_Scalars</a> for more information.
</td></tr>
<tr>
<td>No_Exception_Propagation</td>
<td>This directive forces the compiler to disallow any attempt to raise an exception over a subprogram boundary. Refer to <a rel="nofollow" class="external text" href="http://gcc.gnu.org/onlinedocs/gcc-4.7.0/gnat_rm/No_005fException_005fPropagation.html#No_005fException_005fPropagation">GNAT RM:No_Exception_Propagation</a> for more information.
<p>Note: The <a rel="nofollow" class="external text" href="http://docs.adacore.com/gnat-hie-docs/html/gnathie_ug_3.html#SEC8">GNAT High Integrity Edition</a> documentation states the following:
</p>
<blockquote>
<p>Exception declarations and raise statements are still permitted under this restriction. A raise statement is compiled into a call of <tt>__gnat_last_chance_handler</tt>.
</p>
</blockquote>
<p>All exceptions that are not handled with an explicit exception handler within its subprogram will be caught with the <tt>Last_Chance_Handler</tt> subprogram. This will cause a warning to be issued at compile time.
</p>
</td></tr>
<tr>
<td>No_Exception_Registration</td>
<td>Ensures no stream operations are performed on types declared in Ada.Exceptions. See <a rel="nofollow" class="external text" href="http://gcc.gnu.org/onlinedocs/gcc-4.7.0/gnat_rm/No_005fException_005fRegistration.html#No_005fException_005fRegistration">GNAT RM:No_Exception_Registration</a> for more information.
</td></tr>
<tr>
<td>No_Finalization
</td>
<td>Restricts the use of controlled types. Refer to <a rel="nofollow" class="external text" href="http://gcc.gnu.org/onlinedocs/gcc-4.7.0/gnat_rm/No_005fFinalization.html#No_005fFinalization">GNAT RM:No_Finalization</a> for more information.
</td></tr>
<tr>
<td>No_Tasking
</td>
<td>This directive restricts all features related to tasking, including the use of protected objects. Refer to <a rel="nofollow" class="external text" href="http://gcc.gnu.org/onlinedocs/gcc-4.7.0/gnat_rm/No_005fTasking.html#No_005fTasking">GNAT RM:No_Tasking</a> for more information.
</td></tr>
<tr>
<td>No_Protected_Types
</td>
<td>This reinforces the above restriction. Refer to <a rel="nofollow" class="external text" href="http://gcc.gnu.org/onlinedocs/gcc-4.7.0/gnat_rm/No_005fProtected_005fTypes.html#No_005fProtected_005fTypes">GNAT RM:No_Protected_Types</a> for more information.
</td></tr>
<tr>
<td>No_Delay
</td>
<td>Restricts the use of <tt>delay</tt> statements or the calendar package. Refer to <a rel="nofollow" class="external text" href="http://gcc.gnu.org/onlinedocs/gcc-4.7.0/gnat_rm/No_005fDelay.html#No_005fDelay">GNAT RM:No_Delay</a> for more information.
</td></tr>
<tr>
<td>No_Recursion
</td>
<td>Restricts the use of recursion. Refer to <a rel="nofollow" class="external text" href="http://gcc.gnu.org/onlinedocs/gcc-4.7.0/gnat_rm/No_005fRecursion.html#No_005fRecursion">GNAT RM:No_Recursion</a> for more information.
</td></tr>
<tr>
<td>No_Allocators
</td>
<td>Restricts the use of dynamic memory. This is essential for a bare-metal application, since there is no underlying facility for allocation of dynamic memory. Refer to <a rel="nofollow" class="external text" href="http://gcc.gnu.org/onlinedocs/gcc-4.7.0/gnat_rm/No_005fAllocators.html#No_005fAllocators">GNAT RM:No_Allocators</a> for more information.
</td></tr>
<tr>
<td>No_Dispatch
</td>
<td>Disallows calling a subprogram using Ada's object-orientated mechanism. Refer to <a rel="nofollow" class="external text" href="http://gcc.gnu.org/onlinedocs/gcc-4.7.0/gnat_rm/No_005fDispatch.html#No_005fDispatch">GNAT RM:No_Dispatch</a> for more information.
</td></tr>
<tr>
<td>No_Implicit_Dynamic_Code
</td>
<td>Disallows nested subprograms or any other features that generate trampolines on the stack. Refer to <a rel="nofollow" class="external text" href="http://gcc.gnu.org/onlinedocs/gcc-4.7.0/gnat_rm/No_005fImplicit_005fDynamic_005fCode.html#No_005fImplicit_005fDynamic_005fCode">GNAT RM:No_Implicit_Dynamic_Code</a> for more information.
</td></tr>
<tr>
<td>No_Secondary_Stack
</td>
<td>Ada uses a <i>secondary stack</i> to return unconstrained types, such as arbitrary length strings or variant records. This directive instructs the compiler that there is no secondary stack present, and to restrict the use of code that requires one. Refer to <a rel="nofollow" class="external text" href="http://gcc.gnu.org/onlinedocs/gcc-4.7.0/gnat_rm/No_005fSecondary_005fStack.html#No_005fSecondary_005fStack">GNAT RM:No_Secondary_Stack</a> for more information.
</td></tr></tbody></table>
<p>Passing the <tt>-r</tt> flag to the binder instructs it to emit a list of further restrictions that are possible to apply to the project.
</p>
<div class="mw-highlight mw-highlight-lang-ada mw-content-ltr" dir="ltr"><pre><span></span>   <span class="kd">package</span> <span class="nc">Binder</span> <span class="kr">is</span>
      <span class="kr">for</span> <span class="n">Default_Switches</span> <span class="p">(</span><span class="s">&quot;Ada&quot;</span><span class="p">)</span> <span class="kn">use</span> <span class="p">(</span><span class="s">&quot;-r&quot;</span><span class="p">);</span>
   <span class="kr">end</span> <span class="nf">Binder</span><span class="p">;</span>
</pre></div>
<h3><span class="mw-headline" id="system.ads">system.ads</span></h3>
<p>Every Ada program must have access to the System package, this essentially tells the compiler what kind of hardware we are building for, therefore there will be 1 system.ads file per architecture your kernel supports.
</p><p>Copy a system.ads from GCC that matches the target you are working with, in our case this is  gcc-&lt;version&gt;/gcc/ada/system-linux-x86.ads, name it system.ads and place it into rts/boards/i386/adainclude/ we need to edit this a bit.
</p><p>We don't need to change anything from the top as all the integer sizes should be correct. Go to the private part of the spec and change the following values:
</p>
<ol><li>Command_Line_Args =&gt; False</li>
<li>Configurable_Run_Time =&gt; True</li>
<li>Exit_Status_Supported =&gt; False</li>
<li>Stack_Check_Probes =&gt; False</li>
<li>Suppress_Standard_Library =&gt; True</li>
<li>ZCX_By_Default =&gt; False</li>
<li>GCC_ZCX_Support =&gt; False</li></ol>
<p>For more information on these options, see gcc-&lt;version&gt;/gcc/ada/targparm.ads.
</p><p>Also, add the following line in the private part of the package:
</p>
<div class="mw-highlight mw-highlight-lang-ada mw-content-ltr" dir="ltr"><pre><span></span><span class="kd">private</span>

   <span class="no">Run_Time_Name</span> <span class="p">:</span> <span class="kr">constant</span> <span class="kt">String</span> <span class="p">:=</span> <span class="s">&quot;Bare Bones Run Time&quot;</span><span class="p">;</span>
</pre></div>
<p>According to targparm.ads, it must be the first thing after the private keyword. It should also show up in error messages in parentheses, but I've not managed to get it to show up thus far. This is useful as it should show you which RTS you are currently using, just in case you configure your build incorrectly.
</p>
<h3><span class="mw-headline" id="Last_chance_handler">Last chance handler</span></h3>
<p>The Ada runtime requires the presence of a <tt>Last_Chance_Handler</tt> subprogram. This subprogram is used as a handler for any exceptions that are not explicitly handled within their subprogram. These calls to the <tt>Last_Chance_Handler</tt> procedure in the case of unhandled exceptions will be automatically generated by the compiler.
</p><p>In order to facilitate this the last chance handler procedure must be defined somewhere within the program. Typically this is defined within the runtime. The last chance handler procedure may have any name, however the compiler will search for a procedure with external linkage with the name <tt>__gnat_last_chance_handler</tt>. 
</p><p>Create the following files in the <tt>rts/boards/${arch}/adainclude</tt>:
</p>
<h4><span class="mw-headline" id="last_chance_handler.ads">last_chance_handler.ads</span></h4>
<div class="mw-highlight mw-highlight-lang-ada mw-content-ltr" dir="ltr"><pre><span></span><span class="kn">with</span> <span class="nn">System</span><span class="p">;</span>

<span class="kd">procedure</span> <span class="nf">Last_Chance_Handler</span>
  <span class="p">(</span><span class="nv">Source_Location</span> <span class="p">: </span><span class="nv">System</span><span class="p">.</span><span class="nv">Address</span><span class="p">;</span> <span class="nv">Line</span> <span class="p">: </span><span class="nv">Integer</span><span class="p">);</span>
<span class="kr">pragma</span> <span class="cp">Export</span> <span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">Last_Chance_Handler</span><span class="p">,</span> <span class="s">&quot;__gnat_last_chance_handler&quot;</span><span class="p">);</span>
</pre></div>
<h4><span class="mw-headline" id="last_chance_handler.adb">last_chance_handler.adb</span></h4>
<div class="mw-highlight mw-highlight-lang-ada mw-content-ltr" dir="ltr"><pre><span></span><span class="kd">procedure</span> <span class="nf">Last_Chance_Handler</span>
  <span class="p">(</span><span class="nv">Source_Location</span> <span class="p">: </span><span class="nv">System</span><span class="p">.</span><span class="nv">Address</span><span class="p">;</span> <span class="nv">Line</span> <span class="p">: </span><span class="nv">Integer</span><span class="p">)</span> <span class="kr">is</span>
   <span class="kr">pragma</span> <span class="cp">Unreferenced</span> <span class="p">(</span><span class="n">Source_Location</span><span class="p">,</span> <span class="n">Line</span><span class="p">);</span>
<span class="kr">begin</span>
   <span class="c1">--  TODO: Add in board-specific code to dump exception information to serial/screen.</span>
   <span class="kr">loop</span>
      <span class="kc">null</span><span class="p">;</span>
   <span class="kr">end</span> <span class="kr">loop</span><span class="p">;</span>
<span class="kr">end</span> <span class="nf">Last_Chance_Handler</span><span class="p">;</span>
</pre></div>
<p>The contents of the <tt>Last_Chance_Handler</tt> procedure will need to be tailored to the specific platform of the kernel. Typically this procedure will dump information regarding the exception to output media such as a <a href="Serial_Ports" title="Serial Ports">serial port</a>.
</p>
<h3><span class="mw-headline" id="Compiling_the_runtime">Compiling the runtime</span></h3>
<p>Create a file called <tt>gnat.gpr</tt> in the root directory with the following contents:
</p>
<div class="mw-highlight mw-highlight-lang-ada mw-content-ltr" dir="ltr"><pre><span></span><span class="n">library</span> <span class="n">project</span> <span class="n">gnat</span> <span class="kr">is</span>
   <span class="kd">type</span> <span class="kt">Arch_Name</span> <span class="kr">is</span> <span class="p">(</span><span class="s">&quot;i386&quot;</span><span class="p">,</span> <span class="s">&quot;arm&quot;</span><span class="p">);</span>
   <span class="kd">type</span> <span class="kt">Board_Name</span> <span class="kr">is</span> <span class="p">(</span><span class="s">&quot;pc&quot;</span><span class="p">,</span> <span class="s">&quot;rpi&quot;</span><span class="p">);</span>

   <span class="n">Arch</span>  <span class="p">:</span> <span class="n">Arch_Name</span>  <span class="p">:=</span> <span class="s">&quot;i386&quot;</span><span class="p">;</span>
   <span class="n">Board</span> <span class="p">:</span> <span class="n">Board_Name</span> <span class="p">:=</span> <span class="n">external</span> <span class="p">(</span><span class="s">&quot;Board&quot;</span><span class="p">);</span>

   <span class="kr">case</span> <span class="n">Board</span> <span class="kr">is</span>
      <span class="kr">when</span> <span class="s">&quot;pc&quot;</span> <span class="p">=&gt;</span>
         <span class="n">Arch</span> <span class="p">:=</span> <span class="s">&quot;i386&quot;</span><span class="p">;</span>
      <span class="kr">when</span> <span class="s">&quot;rpi&quot;</span> <span class="p">=&gt;</span>
         <span class="n">Arch</span>  <span class="p">:=</span> <span class="s">&quot;arm&quot;</span><span class="p">;</span>
   <span class="kr">end</span> <span class="kr">case</span><span class="p">;</span>

   <span class="kr">for</span> <span class="n">Source_Dirs</span> <span class="kn">use</span> <span class="p">(</span><span class="s">&quot;rts/boards/&quot;</span> <span class="o">&amp;</span> <span class="n">Arch</span> <span class="o">&amp;</span> <span class="s">&quot;/adainclude&quot;</span><span class="p">);</span>
   <span class="kr">for</span> <span class="n">Object_Dir</span> <span class="kn">use</span> <span class="s">&quot;obj&quot;</span><span class="p">;</span> <span class="c1">--&quot;rts/boards/&quot; &amp; Arch &amp; &quot;/adalib&quot;;</span>

   <span class="kd">package</span> <span class="nc">Builder</span> <span class="kr">is</span>
      <span class="n">Basic_Switches</span> <span class="p">:=</span> <span class="p">(</span><span class="s">&quot;-gnat2005&quot;</span><span class="p">,</span> <span class="s">&quot;-g&quot;</span><span class="p">,</span> <span class="s">&quot;-x&quot;</span><span class="p">,</span> <span class="s">&quot;-a&quot;</span><span class="p">,</span> <span class="s">&quot;-gnatg&quot;</span><span class="p">,</span>
			 <span class="s">&quot;-gnatec=../gnat.adc&quot;</span><span class="p">);</span>

      <span class="kr">case</span> <span class="n">Board</span> <span class="kr">is</span>
         <span class="kr">when</span> <span class="s">&quot;pc&quot;</span> <span class="p">=&gt;</span>
            <span class="kr">for</span> <span class="n">Default_Switches</span> <span class="p">(</span><span class="s">&quot;Ada&quot;</span><span class="p">)</span> <span class="kn">use</span> <span class="nn">Basic_Switches</span> <span class="o">&amp;</span>
               <span class="p">(</span><span class="s">&quot;-m32&quot;</span><span class="p">,</span> <span class="s">&quot;-march=i386&quot;</span><span class="p">);</span>
         <span class="kr">when</span> <span class="s">&quot;rpi&quot;</span> <span class="p">=&gt;</span>
            <span class="kr">for</span> <span class="n">Default_Switches</span> <span class="p">(</span><span class="s">&quot;Ada&quot;</span><span class="p">)</span> <span class="kn">use</span> <span class="nn">Basic_Switches</span> <span class="o">&amp;</span>
               <span class="p">(</span><span class="s">&quot;-march=armv6zk&quot;</span><span class="p">,</span> <span class="s">&quot;-mfpu=vfp&quot;</span><span class="p">,</span> <span class="s">&quot;-mfloat-abi=hard&quot;</span><span class="p">,</span> <span class="s">&quot;-marm&quot;</span><span class="p">,</span>
                <span class="s">&quot;-mcpu=arm1176jzf-s&quot;</span><span class="p">,</span> <span class="s">&quot;-mtune=arm1176jzf-s&quot;</span><span class="p">);</span>
      <span class="kr">end</span> <span class="kr">case</span><span class="p">;</span>
   <span class="kr">end</span> <span class="nf">Builder</span><span class="p">;</span>

   <span class="kd">package</span> <span class="nc">Compiler</span> <span class="kr">is</span>
      <span class="kr">for</span> <span class="n">Default_Switches</span> <span class="p">(</span><span class="s">&quot;Ada&quot;</span><span class="p">)</span> <span class="kn">use</span> <span class="p">(</span><span class="s">&quot;-O2&quot;</span><span class="p">,</span> <span class="s">&quot;-ffunction-sections&quot;</span><span class="p">,</span> <span class="s">&quot;-fdata-sections&quot;</span><span class="p">);</span>
   <span class="kr">end</span> <span class="nf">Compiler</span><span class="p">;</span>

   <span class="kr">for</span> <span class="n">Library_Kind</span> <span class="kn">use</span> <span class="s">&quot;static&quot;</span><span class="p">;</span>
   <span class="kr">for</span> <span class="n">Library_Name</span> <span class="kn">use</span> <span class="s">&quot;gnat-4.6&quot;</span><span class="p">;</span>
   <span class="kr">for</span> <span class="n">Library_Dir</span> <span class="kn">use</span> <span class="s">&quot;rts/boards/&quot;</span> <span class="o">&amp;</span> <span class="n">Arch</span> <span class="o">&amp;</span> <span class="s">&quot;/adalib&quot;</span><span class="p">;</span>
<span class="kr">end</span> <span class="nf">gnat</span><span class="p">;</span>
</pre></div>
<p>Now compile with the following command:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>gprbuild -XBoard<span class="o">=</span>pc -Pgnat.gpr
</pre></div>
<p>Inside <tt>rts/boards/i386/adainclude/</tt> the RTS sources should be symbolically linked along with the custom <tt>last_chance_hander</tt> and system files. Inside <tt>rts/boards/i386/adalib/</tt> there should be the <tt>libgnat-4.6.a</tt> file as well as <tt>*.ali</tt> matching the source files, which are required by GNAT.
</p><p><i>Note: Please note that the above lib might need it's name changed as some OSes might have built libgnat with a version number different to the one used here. The system libnat version may be <tt>libgnat-4.4.a</tt> and GNAT will expect to find that, so change the name in the GPR file accordingly.</i>
</p>
<h3><span class="mw-headline" id="startup.s">startup.s</span></h3>
<p>This is the main system bootstrapping code. This version is PC specific, so place this in the <tt>src/pc</tt> directory.
</p><p><i>Note: This source file is written using GAS syntax.</i>
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="na">.global</span><span class="w"> </span><span class="no">startup</span><span class="w">                         </span><span class="c1"># Make the startup entry point symbol visible to the linker</span>

<span class="c1"># Set up the Multiboot header (see GRUB docs for details)</span>
<span class="na">.set</span><span class="w"> </span><span class="no">ALIGN</span><span class="p">,</span><span class="w">    </span><span class="mi">1</span><span class="err">&lt;&lt;</span><span class="mi">0</span><span class="w">                     </span><span class="c1"># Align loaded modules on page boundaries</span>
<span class="na">.set</span><span class="w"> </span><span class="no">MEMINFO</span><span class="p">,</span><span class="w">  </span><span class="mi">1</span><span class="err">&lt;&lt;</span><span class="mi">1</span><span class="w">                     </span><span class="c1"># Provide memory map</span>
<span class="na">.set</span><span class="w"> </span><span class="no">FLAGS</span><span class="p">,</span><span class="w">    </span><span class="no">ALIGN</span><span class="w"> </span><span class="err">|</span><span class="w"> </span><span class="no">MEMINFO</span><span class="w">          </span><span class="c1"># This is the Multiboot &#39;flag&#39; field</span>
<span class="na">.set</span><span class="w"> </span><span class="no">MAGIC</span><span class="p">,</span><span class="w">    </span><span class="mi">0x1BADB002</span><span class="w">               </span><span class="c1"># &#39;magic number&#39; lets your bootloader find the header</span>
<span class="na">.set</span><span class="w"> </span><span class="no">CHECKSUM</span><span class="p">,</span><span class="w"> </span><span class="p">-(</span><span class="no">MAGIC</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="no">FLAGS</span><span class="p">)</span><span class="w">         </span><span class="c1"># Checksum required</span>

<span class="nl">header:</span><span class="w">                                 </span><span class="c1"># Must be in the first 8kb of the kernel file</span>
<span class="na">.align</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">0x90</span><span class="w">                          </span><span class="c1"># Pad the location counter (in the current subsection) to a 4-byte</span>
<span class="w">                                        </span><span class="c1"># storage boundary. The way alignment is specified can vary with</span>
<span class="w">                                        </span><span class="c1"># host system architecture.</span>
<span class="na">.long</span><span class="w"> </span><span class="no">MAGIC</span><span class="w"></span>
<span class="na">.long</span><span class="w"> </span><span class="no">FLAGS</span><span class="w"></span>
<span class="na">.long</span><span class="w"> </span><span class="no">CHECKSUM</span><span class="w"></span>

<span class="c1"># Reserve initial kernel stack space</span>
<span class="na">.set</span><span class="w"> </span><span class="no">STACKSIZE</span><span class="p">,</span><span class="w"> </span><span class="mi">0x4000</span><span class="w">                  </span><span class="c1"># 0x4000 being 16k.</span>
<span class="na">.lcomm</span><span class="w"> </span><span class="no">stack</span><span class="p">,</span><span class="w"> </span><span class="no">STACKSIZE</span><span class="w">                 </span><span class="c1"># Reserve 16k stack on a32-bit boundary</span>
<span class="na">.comm</span><span class="w">  </span><span class="no">mbd</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="w">                           </span><span class="c1"># Declare common symbol mbd, allocate it 4-bytes of</span>
<span class="w">                                        </span><span class="c1"># uninitialized memory.</span>
<span class="na">.comm</span><span class="w">  </span><span class="no">magic</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="w">                         </span><span class="c1"># Declare common symbol magic, allocate it 4-bytes of</span>
<span class="w">                                        </span><span class="c1"># uninitialized memory.</span>

<span class="nl">startup:</span><span class="w"></span>
<span class="w">    </span><span class="nf">movl</span><span class="w">  </span><span class="no">$</span><span class="p">(</span><span class="no">stack</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="no">STACKSIZE</span><span class="p">),</span><span class="w"> </span><span class="nv">%esp</span><span class="w">    </span><span class="c1"># Set up the stack</span>

<span class="c1"># The following saves the contents of the registers as they will likely be</span>
<span class="c1"># overwritten because main is not our actual entry point, Bare_Bones is. We</span>
<span class="c1"># will use these 2 symbols inside Bare_Bones.</span>

<span class="w">    </span><span class="nf">movl</span><span class="w">  </span><span class="nv">%eax</span><span class="p">,</span><span class="w"> </span><span class="no">magic</span><span class="w">                   </span><span class="c1"># EAX indicates to the OS that it was loaded by a Multiboot-compliant boot</span>
<span class="w">                                        </span><span class="c1"># loader</span>
<span class="w">    </span><span class="nf">movl</span><span class="w">  </span><span class="nv">%ebx</span><span class="p">,</span><span class="w"> </span><span class="no">mbd</span><span class="w">                     </span><span class="c1"># EBX must contain the physical address of the Multiboot information</span>
<span class="w">                                        </span><span class="c1"># structure</span>

<span class="w">    </span><span class="nf">call</span><span class="w">  </span><span class="no">main</span><span class="w">                          </span><span class="c1"># Call main (created by gnatbind)</span>

<span class="w">    </span><span class="nf">cli</span><span class="w">                                 </span><span class="c1"># Disable interrupts. then intentionally hang the system.</span>
<span class="w">                                        </span><span class="c1"># CLI only affects the interrupt flag for the processor on which it is</span>
<span class="w">                                        </span><span class="c1"># executed.</span>

<span class="nl">hang:</span><span class="w"></span>
<span class="w">    </span><span class="nf">hlt</span><span class="w">                                 </span><span class="c1"># Because the HLT instruction halts until an interrupt occurs, the</span>
<span class="w">                                        </span><span class="c1"># combination of a CLI followed by a HLT is used to intentionally hang</span>
<span class="w">                                        </span><span class="c1"># the computer if the kernel returns.</span>
<span class="w">                                        </span><span class="c1"># HLT is in a loop just in case a single HLT instruction fails to execute</span>
<span class="w">                                        </span><span class="c1"># for some reason, (such as in the case of an NMI).</span>
<span class="w">    </span><span class="nf">jmp</span><span class="w">   </span><span class="no">hang</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="multiboot.ads">multiboot.ads</span></h3>
<p>I won't show the source to this package as  I have made it more Ada-like and it's quite large, so I will link to the current versions, <a rel="nofollow" class="external text" href="https://github.com/Lucretia/bare_bones/blob/master/src/pc/multiboot.ads">multiboot.ads</a> and <a rel="nofollow" class="external text" href="https://github.com/Lucretia/bare_bones/blob/master/src/pc/multiboot.adb">multiboot.adb</a>.
</p>
<h3><span class="mw-headline" id="Console">Console</span></h3>
<p><b>Disclaimer:</b> I wrote this package a long time ago and have reformatted it using my current Ada programming style. I have not gone too far into the code, so it may not be the best implementation of an console.
</p><p>The following 2 files give you access to the VGA console at 80x25 characters. As they are PC specific, they go into the src/pc directory.
</p>
<h4><span class="mw-headline" id="console.ads">console.ads</span></h4>
<div class="mw-highlight mw-highlight-lang-ada mw-content-ltr" dir="ltr"><pre><span></span><span class="kn">with</span> <span class="nn">System</span><span class="p">;</span>

<span class="kd">package</span> <span class="nc">Console</span> <span class="kr">is</span>
   <span class="kr">pragma</span> <span class="cp">Preelaborate</span> <span class="p">(</span><span class="n">Console</span><span class="p">);</span>

   <span class="kd">type</span> <span class="kt">Background_Colour</span> <span class="kr">is</span>
     <span class="p">(</span><span class="nv">Black</span><span class="p">,</span>
      <span class="nv">Blue</span><span class="p">,</span>
      <span class="nv">Green</span><span class="p">,</span>
      <span class="nv">Cyan</span><span class="p">,</span>
      <span class="nv">Red</span><span class="p">,</span>
      <span class="nv">Magenta</span><span class="p">,</span>
      <span class="nv">Brown</span><span class="p">,</span>
      <span class="nv">Light_Grey</span><span class="p">);</span>

   <span class="kr">for</span> <span class="n">Background_Colour</span> <span class="kn">use</span>
     <span class="p">(</span><span class="n">Black</span>      <span class="p">=&gt;</span> <span class="mh">16#0#</span><span class="p">,</span>
      <span class="n">Blue</span>       <span class="p">=&gt;</span> <span class="mh">16#1#</span><span class="p">,</span>
      <span class="n">Green</span>      <span class="p">=&gt;</span> <span class="mh">16#2#</span><span class="p">,</span>
      <span class="n">Cyan</span>       <span class="p">=&gt;</span> <span class="mh">16#3#</span><span class="p">,</span>
      <span class="n">Red</span>        <span class="p">=&gt;</span> <span class="mh">16#4#</span><span class="p">,</span>
      <span class="n">Magenta</span>    <span class="p">=&gt;</span> <span class="mh">16#5#</span><span class="p">,</span>
      <span class="n">Brown</span>      <span class="p">=&gt;</span> <span class="mh">16#6#</span><span class="p">,</span>
      <span class="n">Light_Grey</span> <span class="p">=&gt;</span> <span class="mh">16#7#</span><span class="p">);</span>

   <span class="kr">for</span> <span class="n">Background_Colour</span><span class="p">&#39;</span><span class="na">Size</span> <span class="kn">use</span> <span class="nn">4</span><span class="p">;</span>

   <span class="kd">type</span> <span class="kt">Foreground_Colour</span> <span class="kr">is</span>
     <span class="p">(</span><span class="nv">Black</span><span class="p">,</span>
      <span class="nv">Blue</span><span class="p">,</span>
      <span class="nv">Green</span><span class="p">,</span>
      <span class="nv">Cyan</span><span class="p">,</span>
      <span class="nv">Red</span><span class="p">,</span>
      <span class="nv">Magenta</span><span class="p">,</span>
      <span class="nv">Brown</span><span class="p">,</span>
      <span class="nv">Light_Grey</span><span class="p">,</span>
      <span class="nv">Dark_Grey</span><span class="p">,</span>
      <span class="nv">Light_Blue</span><span class="p">,</span>
      <span class="nv">Light_Green</span><span class="p">,</span>
      <span class="nv">Light_Cyan</span><span class="p">,</span>
      <span class="nv">Light_Red</span><span class="p">,</span>
      <span class="nv">Light_Magenta</span><span class="p">,</span>
      <span class="nv">Yellow</span><span class="p">,</span>
      <span class="nv">White</span><span class="p">);</span>

   <span class="kr">for</span> <span class="n">Foreground_Colour</span> <span class="kn">use</span>
     <span class="p">(</span><span class="n">Black</span>         <span class="p">=&gt;</span> <span class="mh">16#0#</span><span class="p">,</span>
      <span class="n">Blue</span>          <span class="p">=&gt;</span> <span class="mh">16#1#</span><span class="p">,</span>
      <span class="n">Green</span>         <span class="p">=&gt;</span> <span class="mh">16#2#</span><span class="p">,</span>
      <span class="n">Cyan</span>          <span class="p">=&gt;</span> <span class="mh">16#3#</span><span class="p">,</span>
      <span class="n">Red</span>           <span class="p">=&gt;</span> <span class="mh">16#4#</span><span class="p">,</span>
      <span class="n">Magenta</span>       <span class="p">=&gt;</span> <span class="mh">16#5#</span><span class="p">,</span>
      <span class="n">Brown</span>         <span class="p">=&gt;</span> <span class="mh">16#6#</span><span class="p">,</span>
      <span class="n">Light_Grey</span>    <span class="p">=&gt;</span> <span class="mh">16#7#</span><span class="p">,</span>
      <span class="n">Dark_Grey</span>     <span class="p">=&gt;</span> <span class="mh">16#8#</span><span class="p">,</span>
      <span class="n">Light_Blue</span>    <span class="p">=&gt;</span> <span class="mh">16#9#</span><span class="p">,</span>
      <span class="n">Light_Green</span>   <span class="p">=&gt;</span> <span class="mh">16#A#</span><span class="p">,</span>
      <span class="n">Light_Cyan</span>    <span class="p">=&gt;</span> <span class="mh">16#B#</span><span class="p">,</span>
      <span class="n">Light_Red</span>     <span class="p">=&gt;</span> <span class="mh">16#C#</span><span class="p">,</span>
      <span class="n">Light_Magenta</span> <span class="p">=&gt;</span> <span class="mh">16#D#</span><span class="p">,</span>
      <span class="n">Yellow</span>        <span class="p">=&gt;</span> <span class="mh">16#E#</span><span class="p">,</span>
      <span class="n">White</span>         <span class="p">=&gt;</span> <span class="mh">16#F#</span><span class="p">);</span>

   <span class="kr">for</span> <span class="n">Foreground_Colour</span><span class="p">&#39;</span><span class="na">Size</span> <span class="kn">use</span> <span class="nn">4</span><span class="p">;</span>

   <span class="kd">type</span> <span class="kt">Cell_Colour</span> <span class="kr">is</span>
      <span class="kr">record</span>
         <span class="nl">Foreground</span> <span class="p">:</span> <span class="kr">For</span><span class="n">eground_Colour</span><span class="p">;</span>
         <span class="n">Background</span> <span class="p">:</span> <span class="n">Background_Colour</span><span class="p">;</span>
      <span class="kr">end record</span><span class="p">;</span>

   <span class="kr">for</span> <span class="n">Cell_Colour</span> <span class="kn">use</span>
      <span class="nn">record</span>
         <span class="n">Foreground</span> <span class="kr">at</span> <span class="mi">0</span> <span class="kr">range</span> <span class="mi">0</span> <span class="p">..</span> <span class="mi">3</span><span class="p">;</span>
         <span class="n">Background</span> <span class="kr">at</span> <span class="mi">0</span> <span class="kr">range</span> <span class="mi">4</span> <span class="p">..</span> <span class="mi">7</span><span class="p">;</span>
      <span class="kr">end</span> <span class="kr">record</span><span class="p">;</span>

   <span class="kr">for</span> <span class="n">Cell_Colour</span><span class="p">&#39;</span><span class="na">Size</span> <span class="kn">use</span> <span class="nn">8</span><span class="p">;</span>

   <span class="kd">type</span> <span class="kt">Cell</span> <span class="kr">is</span>
      <span class="kr">record</span>
         <span class="n">Char</span>   <span class="p">:</span> <span class="kt">Character</span><span class="p">;</span>
         <span class="n">Colour</span> <span class="p">:</span> <span class="n">Cell_Colour</span><span class="p">;</span>
      <span class="kr">end record</span><span class="p">;</span>

   <span class="kr">for</span> <span class="n">Cell</span><span class="p">&#39;</span><span class="na">Size</span> <span class="kn">use</span> <span class="nn">16</span><span class="p">;</span>

   <span class="no">Screen_Width</span>  <span class="p">:</span> <span class="kr">constant</span> <span class="kt">Natural</span> <span class="p">:=</span> <span class="mi">80</span><span class="p">;</span>
   <span class="no">Screen_Height</span> <span class="p">:</span> <span class="kr">constant</span> <span class="kt">Natural</span> <span class="p">:=</span> <span class="mi">25</span><span class="p">;</span>

   <span class="kd">subtype</span> <span class="kt">Screen_Width_Range</span>  <span class="kr">is</span> <span class="kt">Natural</span> <span class="kr">range</span> <span class="mi">1</span> <span class="p">..</span> <span class="n">Screen_Width</span><span class="p">;</span>
   <span class="kd">subtype</span> <span class="kt">Screen_Height_Range</span> <span class="kr">is</span> <span class="kt">Natural</span> <span class="kr">range</span> <span class="mi">1</span> <span class="p">..</span> <span class="n">Screen_Height</span><span class="p">;</span>

   <span class="kd">type</span> <span class="kt">Row</span>    <span class="kr">is</span> <span class="kr">array</span> <span class="p">(</span><span class="n">Screen_Width_Range</span><span class="p">)</span>  <span class="kr">of</span> <span class="n">Cell</span><span class="p">;</span>
   <span class="kd">type</span> <span class="kt">Screen</span> <span class="kr">is</span> <span class="kr">array</span> <span class="p">(</span><span class="n">Screen_Height_Range</span><span class="p">)</span> <span class="kr">of</span> <span class="n">Row</span><span class="p">;</span>

   <span class="n">Video_Memory</span> <span class="p">:</span> <span class="n">Screen</span><span class="p">;</span>

   <span class="kr">for</span> <span class="n">Video_Memory</span><span class="p">&#39;</span><span class="na">Address</span> <span class="kn">use</span> <span class="nn">System</span><span class="p">&#39;</span><span class="na">To_Address</span> <span class="p">(</span><span class="mh">16#000B_8000#</span><span class="p">);</span>

   <span class="kr">pragma</span> <span class="cp">Import</span> <span class="p">(</span><span class="n">Ada</span><span class="p">,</span> <span class="n">Video_Memory</span><span class="p">);</span>

   <span class="kd">procedure</span> <span class="nf">Put</span>
     <span class="p">(</span><span class="nv">Char</span>       <span class="p">: </span><span class="nv">in</span> <span class="nv">Character</span><span class="p">;</span>
      <span class="nv">X</span>          <span class="p">: </span><span class="nv">in</span> <span class="nv">Screen_Width_Range</span><span class="p">;</span>
      <span class="nv">Y</span>          <span class="p">: </span><span class="nv">in</span> <span class="nv">Screen_Height_Range</span><span class="p">;</span>
      <span class="nv">Foreground</span> <span class="p">: </span><span class="nv">in</span> <span class="nv">Foreground_Colour</span> <span class="p">:=</span> <span class="nv">White</span><span class="p">;</span>
      <span class="nv">Background</span> <span class="p">: </span><span class="nv">in</span> <span class="nv">Background_Colour</span> <span class="p">:=</span> <span class="nv">Black</span><span class="p">);</span>

   <span class="kd">procedure</span> <span class="nf">Put</span>
     <span class="p">(</span><span class="nv">Str</span>        <span class="p">: </span><span class="nv">in</span> <span class="nv">String</span><span class="p">;</span>
      <span class="nv">X</span>          <span class="p">: </span><span class="nv">in</span> <span class="nv">Screen_Width_Range</span><span class="p">;</span>
      <span class="nv">Y</span>          <span class="p">: </span><span class="nv">in</span> <span class="nv">Screen_Height_Range</span><span class="p">;</span>
      <span class="nv">Foreground</span> <span class="p">: </span><span class="nv">in</span> <span class="nv">Foreground_Colour</span> <span class="p">:=</span> <span class="nv">White</span><span class="p">;</span>
      <span class="nv">Background</span> <span class="p">: </span><span class="nv">in</span> <span class="nv">Background_Colour</span> <span class="p">:=</span> <span class="nv">Black</span><span class="p">);</span>

   <span class="kd">procedure</span> <span class="nf">Clear</span> <span class="p">(</span><span class="nv">Background</span> <span class="p">: </span><span class="nv">in</span> <span class="nv">Background_Colour</span> <span class="p">:=</span> <span class="nv">Black</span><span class="p">);</span>
<span class="kr">end</span> <span class="nf">Console</span><span class="p">;</span>
</pre></div>
<h4><span class="mw-headline" id="console.adb">console.adb</span></h4>
<div class="mw-highlight mw-highlight-lang-ada mw-content-ltr" dir="ltr"><pre><span></span><span class="kd">package</span> <span class="kd">body</span> <span class="nc">Console</span> <span class="kr">is</span>
   <span class="kd">procedure</span> <span class="nf">Put</span>
     <span class="p">(</span><span class="nv">Char</span>       <span class="p">: </span><span class="nv">in</span> <span class="nv">Character</span><span class="p">;</span>
      <span class="nv">X</span>          <span class="p">: </span><span class="nv">in</span> <span class="nv">Screen_Width_Range</span><span class="p">;</span>
      <span class="nv">Y</span>          <span class="p">: </span><span class="nv">in</span> <span class="nv">Screen_Height_Range</span><span class="p">;</span>
      <span class="nv">Foreground</span> <span class="p">: </span><span class="nv">in</span> <span class="nv">Foreground_Colour</span> <span class="p">:=</span> <span class="nv">White</span><span class="p">;</span>
      <span class="nv">Background</span> <span class="p">: </span><span class="nv">in</span> <span class="nv">Background_Colour</span> <span class="p">:=</span> <span class="nv">Black</span><span class="p">)</span> <span class="kr">is</span>
   <span class="kr">begin</span>
      <span class="n">Video_Memory</span> <span class="p">(</span><span class="n">Y</span><span class="p">)(</span><span class="n">X</span><span class="p">).</span><span class="n">Char</span>              <span class="p">:=</span> <span class="n">Char</span><span class="p">;</span>
      <span class="n">Video_Memory</span> <span class="p">(</span><span class="n">Y</span><span class="p">)(</span><span class="n">X</span><span class="p">).</span><span class="n">Colour</span><span class="p">.</span><span class="n">Foreground</span> <span class="p">:=</span> <span class="n">Foreground</span><span class="p">;</span>
      <span class="n">Video_Memory</span> <span class="p">(</span><span class="n">Y</span><span class="p">)(</span><span class="n">X</span><span class="p">).</span><span class="n">Colour</span><span class="p">.</span><span class="n">Background</span> <span class="p">:=</span> <span class="n">Background</span><span class="p">;</span>
   <span class="kr">end</span> <span class="nf">Put</span><span class="p">;</span>

   <span class="kd">procedure</span> <span class="nf">Put</span>
      <span class="p">(</span><span class="nv">Str</span>        <span class="p">: </span><span class="nv">in</span> <span class="nv">String</span><span class="p">;</span>
       <span class="nv">X</span>          <span class="p">: </span><span class="nv">in</span> <span class="nv">Screen_Width_Range</span><span class="p">;</span>
       <span class="nv">Y</span>          <span class="p">: </span><span class="nv">in</span> <span class="nv">Screen_Height_Range</span><span class="p">;</span>
       <span class="nv">Foreground</span> <span class="p">: </span><span class="nv">in</span> <span class="nv">Foreground_Colour</span> <span class="p">:=</span> <span class="nv">White</span><span class="p">;</span>
       <span class="nv">Background</span> <span class="p">: </span><span class="nv">in</span> <span class="nv">Background_Colour</span> <span class="p">:=</span> <span class="nv">Black</span><span class="p">)</span> <span class="kr">is</span>
   <span class="kr">begin</span>
      <span class="kr">for</span> <span class="n">Index</span> <span class="ow">in</span> <span class="n">Str</span><span class="p">&#39;</span><span class="na">First</span> <span class="p">..</span> <span class="n">Str</span><span class="p">&#39;</span><span class="na">Last</span> <span class="kr">loop</span>
         <span class="n">Put</span> <span class="p">(</span><span class="n">Str</span> <span class="p">(</span><span class="n">Index</span><span class="p">),</span>
              <span class="n">X</span> <span class="o">+</span> <span class="n">Screen_Width_Range</span> <span class="p">(</span><span class="n">Index</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span>
              <span class="n">Y</span><span class="p">,</span>
              <span class="n">Foreground</span><span class="p">,</span>
              <span class="n">Background</span><span class="p">);</span>
      <span class="kr">end</span> <span class="kr">loop</span><span class="p">;</span>
   <span class="kr">end</span> <span class="nf">Put</span><span class="p">;</span>

   <span class="kd">procedure</span> <span class="nf">Clear</span> <span class="p">(</span><span class="nv">Background</span> <span class="p">: </span><span class="nv">in</span> <span class="nv">Background_Colour</span> <span class="p">:=</span> <span class="nv">Black</span><span class="p">)</span> <span class="kr">is</span>
   <span class="kr">begin</span>
      <span class="kr">for</span> <span class="n">X</span> <span class="ow">in</span> <span class="n">Screen_Width_Range</span><span class="p">&#39;</span><span class="na">First</span> <span class="p">..</span> <span class="n">Screen_Width_Range</span><span class="p">&#39;</span><span class="na">Last</span> <span class="kr">loop</span>
         <span class="kr">for</span> <span class="n">Y</span> <span class="ow">in</span> <span class="n">Screen_Height_Range</span><span class="p">&#39;</span><span class="na">First</span> <span class="p">..</span> <span class="n">Screen_Height_Range</span><span class="p">&#39;</span><span class="na">Last</span> <span class="kr">loop</span>
            <span class="n">Put</span> <span class="p">(</span><span class="s s-Character">&#39; &#39;</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">Background</span> <span class="p">=&gt;</span> <span class="n">Background</span><span class="p">);</span>
         <span class="kr">end</span> <span class="kr">loop</span><span class="p">;</span>
      <span class="kr">end</span> <span class="kr">loop</span><span class="p">;</span>
   <span class="kr">end</span> <span class="nf">Clear</span><span class="p">;</span>
<span class="kr">end</span> <span class="nf">Console</span><span class="p">;</span>
</pre></div>
<h3><span class="mw-headline" id="bare_bones.adb">bare_bones.adb</span></h3>
<p>This is platform independent and therefore goes into the src directory.
</p>
<div class="mw-highlight mw-highlight-lang-ada mw-content-ltr" dir="ltr"><pre><span></span><span class="kn">with</span> <span class="nn">Console</span><span class="p">;</span> <span class="kn">use</span> <span class="nn">Console</span><span class="p">;</span>

<span class="kd">procedure</span> <span class="nf">Bare_Bones</span> <span class="kr">is</span>
<span class="kr">begin</span>
   <span class="n">Clear</span><span class="p">;</span>

   <span class="n">Put</span> <span class="p">(</span><span class="s">&quot;Hello, bare bones in Ada.&quot;</span><span class="p">,</span>
        <span class="n">Screen_Width_Range</span><span class="p">&#39;</span><span class="na">First</span><span class="p">,</span>
        <span class="n">Screen_Height_Range</span><span class="p">&#39;</span><span class="na">First</span><span class="p">);</span>
<span class="kr">end</span> <span class="nf">Bare_Bones</span><span class="p">;</span>
<span class="kr">pragma</span> <span class="cp">No_Return</span> <span class="p">(</span><span class="n">Bare_Bones</span><span class="p">);</span>
</pre></div>
<h3><span class="mw-headline" id="linker.ld">linker.ld</span></h3>
<p>This is a PC specific script so goes into the src/pc directory.
</p>
<pre>OUTPUT_FORMAT(elf32-i386)

/* Tell the linker which startup code to use, we do this as there is no way to do this (well not easily) from the GNAT tools. */
STARTUP(startup.o)

ENTRY (startup)

SECTIONS
{
    . = 0x00100000;

    .text&#160;:{
        code = .; _code = .; __code = .;
        *(.text)
        *(.rodata)
    }

    .rodata ALIGN (0x1000)&#160;: {
        *(.rodata)
    }

    .data ALIGN (0x1000)&#160;: {
        data = .; _data = .; __data = .;
        *(.data)
    }

    .bss&#160;: {
        sbss = .;
        bss = .; _bss = .; __bss = .;
        *(COMMON)
        *(.bss)
        ebss = .;
    }
    end = .; _end = .; __end = .;
}
</pre>
<h3><span class="mw-headline" id="makefile">makefile</span></h3>
<p>Place this file in the root directory.
</p>
<div class="mw-highlight mw-highlight-lang-make mw-content-ltr" dir="ltr"><pre><span></span><span class="nv">ARCH</span>		<span class="o">=</span>	i386
<span class="nv">RTS_DIR</span>		<span class="o">=</span>	<span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/rts/boards/<span class="k">$(</span>ARCH<span class="k">)</span>

<span class="cp">ifeq ($(ARCH),i386)</span>
<span class="nv">GPRBUILD</span>	<span class="o">=</span>	gprbuild
<span class="nv">AS</span>		<span class="o">=</span>	as
<span class="nv">ASFLAGS</span>		<span class="o">=</span>	--32 -march<span class="o">=</span>i386

<span class="nv">OBJS</span>		<span class="o">=</span>	obj/startup.o obj/multiboot.o obj/console.o
<span class="nv">BOARD</span>		<span class="o">=</span>	pc

<span class="nf">.PHONY</span><span class="o">:</span> <span class="n">obj</span>/<span class="n">multiboot</span>.<span class="n">o</span> <span class="n">obj</span>/<span class="n">console</span>.<span class="n">o</span>

<span class="cp">endif</span>

<span class="nf">all</span><span class="o">:</span> <span class="n">bare_bones</span>

<span class="nf">bare_bones</span><span class="o">:</span> <span class="k">$(</span><span class="nv">OBJS</span><span class="k">)</span> <span class="n">src</span>/<span class="n">bare_bones</span>.<span class="n">adb</span>
	<span class="k">$(</span>GPRBUILD<span class="k">)</span> --RTS<span class="o">=</span><span class="k">$(</span>RTS_DIR<span class="k">)</span> -XBoard<span class="o">=</span><span class="k">$(</span>BOARD<span class="k">)</span> -Pbare_bones.gpr

<span class="nf">obj/startup.o</span><span class="o">:</span> <span class="n">src</span>/<span class="k">$(</span><span class="nv">BOARD</span><span class="k">)</span>/<span class="n">startup</span>.<span class="n">s</span>
	<span class="k">$(</span>AS<span class="k">)</span> <span class="k">$(</span>ASFLAGS<span class="k">)</span> src/<span class="k">$(</span>BOARD<span class="k">)</span>/startup.s -o obj/startup.o

<span class="nf">.PHONY</span><span class="o">:</span> <span class="n">clean</span>

<span class="nf">clean</span><span class="o">:</span>
	-rm obj/* *~ bare_bones
</pre></div>
<h3><span class="mw-headline" id="bare_bones.gpr">bare_bones.gpr</span></h3>
<p>Place this file in the root directory.
</p>
<div class="mw-highlight mw-highlight-lang-ada mw-content-ltr" dir="ltr"><pre><span></span><span class="n">project</span> <span class="n">Bare_Bones</span> <span class="kr">is</span>
   <span class="kd">type</span> <span class="kt">Arch_Name</span> <span class="kr">is</span> <span class="p">(</span><span class="s">&quot;i386&quot;</span><span class="p">,</span> <span class="s">&quot;arm&quot;</span><span class="p">);</span>
   <span class="kd">type</span> <span class="kt">Board_Name</span> <span class="kr">is</span> <span class="p">(</span><span class="s">&quot;pc&quot;</span><span class="p">,</span> <span class="s">&quot;rpi&quot;</span><span class="p">);</span>

   <span class="n">Arch</span>  <span class="p">:</span> <span class="n">Arch_Name</span>  <span class="p">:=</span> <span class="s">&quot;i386&quot;</span><span class="p">;</span>
   <span class="n">Board</span> <span class="p">:</span> <span class="n">Board_Name</span> <span class="p">:=</span> <span class="n">external</span> <span class="p">(</span><span class="s">&quot;Board&quot;</span><span class="p">);</span>

   <span class="c1">-- TODO: Add in a case statement that adds an arch dir to source.</span>

   <span class="kr">case</span> <span class="n">Board</span> <span class="kr">is</span>
      <span class="kr">when</span> <span class="s">&quot;pc&quot;</span> <span class="p">=&gt;</span>
         <span class="kr">for</span> <span class="n">Source_Dirs</span> <span class="kn">use</span> <span class="p">(</span><span class="s">&quot;src&quot;</span><span class="p">,</span> <span class="s">&quot;src/pc&quot;</span><span class="p">);</span>
      <span class="kr">when</span> <span class="s">&quot;rpi&quot;</span> <span class="p">=&gt;</span>
         <span class="kr">for</span> <span class="n">Source_Dirs</span> <span class="kn">use</span> <span class="p">(</span><span class="s">&quot;src&quot;</span><span class="p">,</span> <span class="s">&quot;src/rpi&quot;</span><span class="p">);</span>
   <span class="kr">end</span> <span class="kr">case</span><span class="p">;</span>

   <span class="kr">for</span> <span class="n">Object_Dir</span> <span class="kn">use</span> <span class="s">&quot;obj&quot;</span><span class="p">;</span>
   <span class="kr">for</span> <span class="n">Exec_Dir</span> <span class="kn">use</span> <span class="s">&quot;.&quot;</span><span class="p">;</span>
   <span class="kr">for</span> <span class="n">Main</span> <span class="kn">use</span> <span class="p">(</span><span class="s">&quot;bare_bones.adb&quot;</span><span class="p">);</span>

   <span class="kd">package</span> <span class="nc">Builder</span> <span class="kr">is</span>
      <span class="n">Basic_Switches</span> <span class="p">:=</span> <span class="p">(</span><span class="s">&quot;-gnat2005&quot;</span><span class="p">,</span> <span class="s">&quot;-g&quot;</span><span class="p">,</span> <span class="s">&quot;-x&quot;</span><span class="p">,</span> <span class="s">&quot;-a&quot;</span><span class="p">,</span> <span class="s">&quot;-gnatg&quot;</span><span class="p">,</span>
                         <span class="s">&quot;-gnatec=../gnat.adc&quot;</span><span class="p">,</span> <span class="s">&quot;-gnaty-I&quot;</span><span class="p">,</span> <span class="s">&quot;-gnaty+d&quot;</span><span class="p">);</span>

      <span class="kr">case</span> <span class="n">Board</span> <span class="kr">is</span>
         <span class="kr">when</span> <span class="s">&quot;pc&quot;</span> <span class="p">=&gt;</span>
            <span class="kr">for</span> <span class="n">Default_Switches</span> <span class="p">(</span><span class="s">&quot;Ada&quot;</span><span class="p">)</span> <span class="kn">use</span> <span class="nn">Basic_Switches</span> <span class="o">&amp;</span>
               <span class="p">(</span><span class="s">&quot;-m32&quot;</span><span class="p">,</span> <span class="s">&quot;-march=i386&quot;</span><span class="p">);</span>
         <span class="kr">when</span> <span class="s">&quot;rpi&quot;</span> <span class="p">=&gt;</span>
            <span class="kr">for</span> <span class="n">Default_Switches</span> <span class="p">(</span><span class="s">&quot;Ada&quot;</span><span class="p">)</span> <span class="kn">use</span> <span class="nn">Basic_Switches</span> <span class="o">&amp;</span>
               <span class="p">(</span><span class="s">&quot;-march=armv6zk&quot;</span><span class="p">,</span> <span class="s">&quot;-mfpu=vfp&quot;</span><span class="p">,</span> <span class="s">&quot;-mfloat-abi=hard&quot;</span><span class="p">,</span> <span class="s">&quot;-marm&quot;</span><span class="p">,</span>
                <span class="s">&quot;-mcpu=arm1176jzf-s&quot;</span><span class="p">,</span> <span class="s">&quot;-mtune=arm1176jzf-s&quot;</span><span class="p">);</span>
      <span class="kr">end</span> <span class="kr">case</span><span class="p">;</span>
   <span class="kr">end</span> <span class="nf">Builder</span><span class="p">;</span>

   <span class="kd">package</span> <span class="nc">Compiler</span> <span class="kr">is</span>
      <span class="kr">case</span> <span class="n">Board</span> <span class="kr">is</span>
         <span class="kr">when</span> <span class="s">&quot;pc&quot;</span> <span class="p">=&gt;</span>
            <span class="kr">for</span> <span class="n">Default_Switches</span> <span class="p">(</span><span class="s">&quot;Ada&quot;</span><span class="p">)</span> <span class="kn">use</span>
               <span class="p">(</span><span class="s">&quot;-O0&quot;</span><span class="p">,</span> <span class="s">&quot;-g&quot;</span><span class="p">,</span> <span class="s">&quot;-ggdb&quot;</span><span class="p">,</span> <span class="s">&quot;-ffunction-sections&quot;</span><span class="p">,</span> <span class="s">&quot;-fdata-sections&quot;</span><span class="p">);</span>
         <span class="kr">when</span> <span class="s">&quot;rpi&quot;</span> <span class="p">=&gt;</span>
            <span class="kr">for</span> <span class="n">Default_Switches</span> <span class="p">(</span><span class="s">&quot;Ada&quot;</span><span class="p">)</span> <span class="kn">use</span>
               <span class="p">(</span><span class="s">&quot;-O0&quot;</span><span class="p">,</span> <span class="s">&quot;-g&quot;</span><span class="p">,</span> <span class="s">&quot;-ggdb&quot;</span><span class="p">,</span> <span class="s">&quot;-ffunction-sections&quot;</span><span class="p">,</span> <span class="s">&quot;-fdata-sections&quot;</span><span class="p">);</span>

      <span class="kr">end</span> <span class="kr">case</span><span class="p">;</span>
   <span class="kr">end</span> <span class="nf">Compiler</span><span class="p">;</span>

<span class="c1">-- To reduce size of final binary.</span>
   <span class="kd">package</span> <span class="nc">Linker</span> <span class="kr">is</span>
      <span class="kr">for</span> <span class="n">Default_Switches</span> <span class="p">(</span><span class="s">&quot;Ada&quot;</span><span class="p">)</span> <span class="kn">use</span>
         <span class="p">(</span><span class="s">&quot;-Wl,--gc-sections&quot;</span><span class="p">,</span> <span class="s">&quot;-static&quot;</span><span class="p">,</span> <span class="s">&quot;-nostartfiles&quot;</span><span class="p">,</span> <span class="s">&quot;-nodefaultlibs&quot;</span><span class="p">,</span>
          <span class="s">&quot;-T../src/&quot;</span> <span class="o">&amp;</span> <span class="n">Board</span> <span class="o">&amp;</span> <span class="s">&quot;/linker.ld&quot;</span><span class="p">,</span> <span class="s">&quot;-v&quot;</span><span class="p">);</span>
   <span class="kr">end</span> <span class="nf">Linker</span><span class="p">;</span>
<span class="kr">end</span> <span class="nf">Bare_Bones</span><span class="p">;</span>
</pre></div>
<h2><span class="mw-headline" id="Raspberry_Pi">Raspberry Pi</span></h2>
<h3><span class="mw-headline" id="Boot_process">Boot process</span></h3>
<p>As stated in <a rel="nofollow" class="external autonumber" href="http://www.raspberrypi.org/phpBB3/viewtopic.php?f=63&amp;t=6685">[3]</a>, the RPi boot proces is as follows:
</p>
<ol><li>Power on starts the stage 1 boot loader which is on the SoC, which loads the stage 2 boot loader (bootcode.bin) into L2 cache (thus turning it on).</li>
<li>bootcode.bin enables SDRAM and loads the stage 3 boot loader (loader.bin).</li>
<li>loader.bin loads and executes the VideoCore firmware (start.elf).</li>
<li>start.elf loads config.txt, cmdline.txt and kernel.img.</li></ol>
<p>The config.txt file can contain aline "kernel=&lt;name&gt;" where you can name the kernel image anything you like.
</p><p>Ideally for development we would use an emulator or some kind of netbooting facility so we don't have to keep switching the SD Card from the Pi to the PC and vice versa, this would get tedious really fast.
</p>
<h3><span class="mw-headline" id="U-Boot">U-Boot</span></h3>
<p>Seems you need serial access to the board to do this, so I won't be atempting this yet.
</p><p>By following the information starting on the <a rel="nofollow" class="external text" href="http://kernelnomicon.org/?p=92">FreeBSD</a> porting page, we can build u-boot for RPi.
</p><p><br />
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>git clone git://github.com/gonzoua/u-boot-pi.git

<span class="nb">cd</span> u-boot-pi
make rpi_b_config
</pre></div>
<h2><span class="mw-headline" id="Testing">Testing</span></h2>
<p>Make sure you have built the RTS above before this next stage otherwise you won't be able to compile the kernel.
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>make qemu
</pre></div>
<p>On the QEMU window, it should clear the screen, the the cursor won't move so it will be in the middle of the screen, in the top-left corner will be the message "Hello, bare bones in Ada."
</p>
<h2><span class="mw-headline" id="Source_access">Source access</span></h2>
<p>I have created a Git repository on <a rel="nofollow" class="external text" href="https://github.com/Lucretia/bare_bones">GitHub</a> containing the source above so you don't have to do it by hand if you don't want to.
</p><p>In fact there have ben a lot of changes since I started this project and it is a better idea to grab the source from GitHub as it will be more up to date. I will leave the documents above so you can see how it's evolved and also how it works, maybe a bit clearer that it is now.
</p>
<h2><span class="mw-headline" id="Next_Steps">Next Steps</span></h2>
<p>A useful next step for further developing the bare bones kernel outlined in this article is implementing capability for using the <tt>'Image</tt> attributes on scalar types. This facilitates the printing of integers in string form, which is extremely useful for kernel debugging. A simple guide on how to accomplish this is detailed <a href="Ada_Runtime_Library#Image_attributes" title="Ada Runtime Library">here</a>.
</p>
<!-- 
NewPP limit report
Cached time: 20250212010356
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.125 seconds
Real time usage: 2.674 seconds
Preprocessor visited node count: 202/1000000
Post‐expand include size: 246/2097152 bytes
Template argument size: 38/2097152 bytes
Highest expansion depth: 3/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 53967/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%  547.955      1 -total
  0.13%    0.729      1 Template:Wikitable
  0.11%    0.611      2 Template:Main
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3231-0!canonical and timestamp 20250212010353 and revision id 26305.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Ada_Bare_Bones&amp;oldid=26305">https://wiki.osdev.org/index.php?title=Ada_Bare_Bones&amp;oldid=26305</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Bare_bones_tutorials" title="Category:Bare bones tutorials">Bare bones tutorials</a></li><li><a href="./Category:Ada" title="Category:Ada">Ada</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Ada+Bare+Bones" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Ada_Bare_Bones#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Ada_Bare_Bones" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:Ada_Bare_Bones" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Ada_Bare_Bones"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Ada_Bare_Bones&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Ada_Bare_Bones&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Ada_Bare_Bones" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Ada_Bare_Bones" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Ada_Bare_Bones&amp;oldid=26305" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Ada_Bare_Bones&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 12 August 2021, at 23:08.</li>
	<li id="footer-info-0">This page has been accessed 15,002 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Ada_Bare_Bones&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.125","walltime":"2.674","ppvisitednodes":{"value":202,"limit":1000000},"postexpandincludesize":{"value":246,"limit":2097152},"templateargumentsize":{"value":38,"limit":2097152},"expansiondepth":{"value":3,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":53967,"limit":5000000},"timingprofile":["100.00%  547.955      1 -total","  0.13%    0.729      1 Template:Wikitable","  0.11%    0.611      2 Template:Main"]},"cachereport":{"timestamp":"20250212010356","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":2773});});</script>
</body>
</html>