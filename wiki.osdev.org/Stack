<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Stack - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"f4ca02bc64c4e070b323e28e","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Stack","wgTitle":"Stack","wgCurRevisionId":26459,"wgRevisionId":26459,"wgArticleId":1704,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["OS theory"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Stack","wgRelevantArticleId":1704,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline"
:false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Stack rootpage-Stack skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Stack</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Stack#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Stack#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><dl><dd><i>Stack can also refer to the TCP/IP stack in <a href="./Category:Networking" title="Category:Networking">Networking</a>. This article discuss the datastructure and stacks used in architectures.</i></dd></dl>
<div class="thumb tright"><div class="thumbinner" style="width:202px;"><a href="./File:Stack.png" class="image"><img alt="" src="images/9/9f/Stack.png" decoding="async" width="200" height="150" class="thumbimage" data-file-width="200" data-file-height="150" /></a>  <div class="thumbcaption"><div class="magnify"><a href="./File:Stack.png" class="internal" title="Enlarge"></a></div>A normal stack, that grows upwards.</div></div></div>
<p>A <b>stack</b> is a datastructure. You can push and pop elements to and from it respectively. Unlike a <a href="https://wiki.osdev.org/index.php?title=FIFO&amp;action=edit&amp;redlink=1" class="new" title="FIFO (page does not exist)">FIFO</a> (first in, first out) however, the popped elements from a stack are the elements that you pushed last. Because of this, a stack is also termed LIFO (last in, first out) or FILO (first in, last out).
</p><p>In the <a href="./Category:X86" title="Category:X86">X86 architecture</a>, and many others, there is one stack used for code execution. It is used to store return pointers when calling routines, but you can also store temporary data and local variables on it.
</p><p><br />
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Stack#Stack_theory"><span class="tocnumber">1</span> <span class="toctext">Stack theory</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="Stack#Stack_example_on_the_X86_architecture"><span class="tocnumber">1.1</span> <span class="toctext">Stack example on the X86 architecture</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="Stack#Set_up_the_stack"><span class="tocnumber">1.2</span> <span class="toctext">Set up the stack</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="Stack#Security"><span class="tocnumber">1.3</span> <span class="toctext">Security</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="Stack#Stack_trace"><span class="tocnumber">2</span> <span class="toctext">Stack trace</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="Stack#Unwinding_the_stack"><span class="tocnumber">3</span> <span class="toctext">Unwinding the stack</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="Stack#See_Also"><span class="tocnumber">4</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-8"><a href="Stack#Articles"><span class="tocnumber">4.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Stack#Threads"><span class="tocnumber">4.2</span> <span class="toctext">Threads</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="Stack#External_Links"><span class="tocnumber">4.3</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Stack_theory">Stack theory</span></h2>
<p>Many languages and architectures have a stack at their disposal. When return values are stored on it, the concept of stack frames emerges. A stack is divided into a number of stack frames. Each stack frame contains the local/temporary data for the routine, parameters, and a return value to the former routine (the caller).
</p>
<h3><span class="mw-headline" id="Stack_example_on_the_X86_architecture">Stack example on the X86 architecture</span></h3>
<p>On the X86 architecture the stack grows downwards. The stack frames have a certain structure regarding the calling convention. The CDECL calling convention is the most widely used. It is most likely used by your compiler. Two registers are used:
</p>
<ul><li><b><tt>ESP</tt>:</b> Extended Stack Pointer. 32 bit value containing the <i>top-of-stack</i> address (more accurately the ``bottom-of-stack`` on X86!)</li>
<li><b><tt>EBP</tt>:</b> Extended Base Pointer. 32 bit value defining the current stack frame, when using CDECL calling convention. It points at the current local data. It can also access the routine parameters.</li></ul>
<p>Take care when implementing your kernel. If you use <a href="Segmentation" title="Segmentation">segmentation</a>, the <tt>DS</tt> segment should be configured to have its base at the same address as SS does. Otherwise you may run into problems when passing pointers to local variables into functions, because <tt>normal GPRs</tt> can't access the stack the way you might think.
</p><p>Here is an example stack. The elements are 4 byte words in protected mode:
</p>
<pre>Memory address:   Stack elements:

               +----------------------------+
 0x105000      | Parameter 1 for routine 1  | \
               +----------------------------+  |
 0x104FFC      | First callers return addr. |   &gt;  Stack frame 1
               +----------------------------+  |
 0x104FF8      | First callers EBP          | /
               +----------------------------+
 0x104FF4   +-&gt;| Parameter 2 for routine 2  | \  &lt;-- Routine 1's EBP
            |  +----------------------------+  |
 0x104FF0   |  | Parameter 1 for routine 2  |  |
            |  +----------------------------+  |
 0x104FEC   |  | Return address, routine 1  |  |
            |  +----------------------------+  |
 0x104FE8   +--| EBP value for routine 1    |   &gt;  Stack frame 2
               +----------------------------+  |
 0x104FE4   +-&gt;| Local data                 |  | &lt;-- Routine 2's EBP
            |  +----------------------------+  |
 0x104FE0   |  | Local data                 |  |
            |  +----------------------------+  |
 0x104FDC   |  | Local data                 | /
            |  +----------------------------+
 0x104FD8   |  | Parameter 1 for routine 3  | \
            |  +----------------------------+  |
 0x104FD4   |  | Return address, routine 2  |  |
            |  +----------------------------+   &gt;  Stack frame 3
 0x104FD0   +--| EBP value for routine 2    |  |
               +----------------------------+  |
 0x104FCC   +-&gt;| Local data                 | /  &lt;-- Routine 3's EBP
            |  +----------------------------+
 0x104FC8   |  | Return address, routine 3  | \
            |  +----------------------------+  |
 0x104FC4   +--| EBP value for routine 3    |  |
               +----------------------------+   &gt;  Stack frame 4
 0x104FC0      | Local data                 |  | &lt;-- Current EBP
               +----------------------------+  |
 0x104FBC      | Local data                 | /
               +----------------------------+
 0x104FB8      |                            |    &lt;-- Current ESP
                \/\/\/\/\/\/\/\/\/\/\/\/\/\/
</pre>
<p>The CDECL calling convention is described here:
</p>
<dl><dt>Caller's responsibilities</dt></dl>
<ul><li>Push parameters in reverse order (last parameter pushed first)</li>
<li>Perform the call</li>
<li>Pop the parameters, use them, or simply increment ESP to remove them (stack clearing)</li>
<li>The return value is stored in EAX</li></ul>
<dl><dt>Callee's responsibilities (callee is the routine being called)</dt></dl>
<ul><li>Store caller's EBP on the stack</li>
<li>Save current ESP in EBP</li>
<li>Code, storing local data on the stack</li>
<li>For a fast exit load the old ESP from EBP, else pop local data elements</li>
<li>Pop the old EBP and return &#8211; store return value in EAX</li></ul>
<p>It looks like this in assembly (NASM):
</p>
<pre>SECTION .text

caller:
    
   &#160;; ...
    
   &#160;; Caller responsibilities:
    PUSH  3        &#160;; push the parameters in reverse order
    PUSH  2
    CALL  callee   &#160;; perform the call
    ADD   ESP, 8   &#160;; stack cleaning (remove the 2 words)
    
   &#160;; ... Use the return value in EAX ...
    
    
callee:
    
   &#160;; Callee responsibilities:
    PUSH  EBP      &#160;; store caller's EBP
    MOV   EBP, ESP &#160;; save current stack pointer in EBP
    
   &#160;; ... Code, store return value in EAX ...
    
   &#160;; Callee responsibilities:
    MOV   ESP, EBP &#160;; remove an unknown number of local data elements
    POP   EBP      &#160;; restore caller's EBP
    RET            &#160;; return
</pre>
<p>The GCC compiler does all this automatically, but if you have to call C/C++ methods from assembly or reverse, you have to know the convention. Now look at one stack frame (the callee's):
</p>
<pre>+-------------------------+
| Parameter 3             |
+-------------------------+
| Parameter 2             |
+-------------------------+
| Parameter 1             |
+-------------------------+
| Caller's return address |
+-------------------------+
| Caller's EBP value      |
+-------------------------+
| Local variable          | &lt;-- Current EBP
+-------------------------+
| Local variable          |
+-------------------------+
| Local variable          |
+-------------------------+
| Temporary data          |
+-------------------------+
| Temporary data          |
+-------------------------+
|                         | &lt;-- Current ESP
+-------------------------+
</pre>
<p>Using <tt>EBP</tt> the callee can access both parameters and local variables:
</p>
<pre>MOV  EAX, [[EBP + 12]] &#160;; Load parameter 1 into EAX

MOV  EAX, [[EBP + 16]] &#160;; Load parameter 2

MOV  EAX, [[EBP + 4 * EBX + 12]] &#160;; Load parameter EBX (0-indexed)

MOV  EAX, [[EBP]]      &#160;; Load local variable 1

MOV  EAX, [[EBP - 4]]  &#160;; Load local variable 2
</pre>
<p>There are other calling conventions for X86. To name a few: Pascal calling convention, fastcall convention, stdcall. Read more on Wikipedia, see the links below.
</p>
<h3><span class="mw-headline" id="Set_up_the_stack">Set up the stack</span></h3>
<p>When creating a kernel you have to manually set up the stack. It can be done by the <a href="Bootloader" title="Bootloader">bootloader</a>, but it is good to know how anyway.
</p><p>If you go from real mode to protected mode, you have to set up the stack as well. This is because the <tt>SS</tt> segment might change, so <tt>ESP</tt> in protected mode does not point to the same location that <tt>SP</tt> in real mode did. If you switch a lot between real mode and protected mode, it can be nice for them to share the stack. You have to find a smart solution for that yourself. It can be done.
</p><p>In protected mode you set up the stack by just moving a new pointer value into the <tt>ESP</tt> register:
</p>
<pre>MOV  ESP, 0x105000 &#160;; Set the stack pointer
</pre>
<p>Remember that it grows downwards. You might allocate space for it in the kernel's <tt>.BSS</tt> section if it contains one:
</p>
<pre>SECTION .text

set_up_stack:
    
    MOV  ESP, stack_end &#160;; Set the stack pointer

SECTION .bss

stack_begin:
    RESB 4096 &#160;; Reserve 4 KiB stack space
stack_end:
</pre>
<p>If your kernel is booted by a <a href="Multiboot" title="Multiboot">Multiboot</a>-compliant bootloader, like <a href="GRUB" title="GRUB">GRUB</a>, you are provided a memory map. You can set up the stack by looking for free memory chunks of the appropriate size. You just have to ensure that you don't overwrite any important data or code when setting the stack pointer.
</p>
<h3><span class="mw-headline" id="Security">Security</span></h3>
<p>The stack is easy to use, but it has one problem. There is no "end," so it is vulnerable to a variation of the buffer overflow attack. The attacker pushes more elements than the stack is able to contain, so elements are pushed outside the stack memory, overwriting code, which the attacker can then execute.
</p><p>In X86 protected mode it can be solved by allocating a <a href="GDT" class="mw-redirect" title="GDT">GDT descriptor</a> solely for the stack, which defines its boundaries.
</p>
<h2><span class="mw-headline" id="Stack_trace">Stack trace</span></h2>
<p>When debugging, a stack trace is often shown and can be helpful. <a href="Stack_Trace" title="Stack Trace">Stack Trace</a> describes how this can be done and provides sample code for X86 CDECL using the stack layout above.
</p>
<h2><span class="mw-headline" id="Unwinding_the_stack">Unwinding the stack</span></h2>
<p>Unwinding the stack is complex. It is done when using exceptions, like in <a href="C++" title="C++">C++</a>. It is performed when an exception is thrown. The purpose of unwinding the stack is to call the destructor of local objects of the stack frames and to remove stack frames until an appropriate landing pad is found. The landing pad is the try..catch block in C++ or Java. The catch block has to match the exception, i.e. a RuntimeException object can't be caught as a String object.
</p><p>The unwinding algorithm depends on the architecture. Normally this algorithm is provided in the language runtime library. When using GCC and C++ it is defined in the libsupc++ library linked with your application. However this doesn't happen when creating a kernel. The libsupc++ library is also too bloated to use in kernel space.
</p>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<h3><span class="mw-headline" id="Articles">Articles</span></h3>
<p><a href="Stack_Trace" title="Stack Trace">Stack Trace</a> - Trace the called functions from the stack
</p>
<h3><span class="mw-headline" id="Threads">Threads</span></h3>
<h3><span class="mw-headline" id="External_Links">External Links</span></h3>
<ul><li><a href="https://wikipedia.org/wiki/x86_calling_conventions" class="extiw" title="wikipedia:x86 calling conventions"> x86 calling conventions</a> on Wikipedia.</li>
<li><a href="https://wikipedia.org/wiki/Stack_(data_structure)" class="extiw" title="wikipedia:Stack (data structure)"> Stack (data structure)</a> on Wikipedia.</li></ul>
<!-- 
NewPP limit report
Cached time: 20250212010824
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.021 seconds
Real time usage: 0.022 seconds
Preprocessor visited node count: 67/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 64/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1704-0!canonical and timestamp 20250212010824 and revision id 26459.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Stack&amp;oldid=26459">https://wiki.osdev.org/index.php?title=Stack&amp;oldid=26459</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="./Category:OS_theory" title="Category:OS theory">OS theory</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Stack" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Stack#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Stack" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:Stack" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Stack"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Stack&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Stack&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Stack" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Stack" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Stack&amp;oldid=26459" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Stack&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 4 October 2021, at 21:23.</li>
	<li id="footer-info-0">This page has been accessed 8,091 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Stack&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.021","walltime":"0.022","ppvisitednodes":{"value":67,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":64,"limit":5000000},"timingprofile":["100.00%    0.000      1 -total"]},"cachereport":{"timestamp":"20250212010824","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":131});});</script>
</body>
</html>