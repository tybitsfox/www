<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>System Calls - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"a3cd1e9b18cc8a0e06dc20c3","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"System_Calls","wgTitle":"System Calls","wgCurRevisionId":28234,"wgRevisionId":28234,"wgArticleId":1961,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","System Calls","OS theory"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"System_Calls","wgRelevantArticleId":1961,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],
"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-System_Calls rootpage-System_Calls skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">System Calls</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="System_Calls#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="System_Calls#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>System Calls are used to call a kernel service from user land. The goal is to be able to switch from user mode to kernel mode, with the associated privileges. Provided system calls depend on the nature of your <a href="Kernels" class="mw-redirect" title="Kernels">kernel</a>.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="System_Calls#Possible_methods_to_make_a_System_Call"><span class="tocnumber">1</span> <span class="toctext">Possible methods to make a System Call</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="System_Calls#Interrupts"><span class="tocnumber">1.1</span> <span class="toctext">Interrupts</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="System_Calls#Sysenter/Sysexit_(Intel)"><span class="tocnumber">1.2</span> <span class="toctext">Sysenter/Sysexit (Intel)</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="System_Calls#Trap"><span class="tocnumber">1.3</span> <span class="toctext">Trap</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="System_Calls#Call_Gates_(Intel)"><span class="tocnumber">1.4</span> <span class="toctext">Call Gates (Intel)</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-6"><a href="System_Calls#Passing_Arguments"><span class="tocnumber">2</span> <span class="toctext">Passing Arguments</span></a>
<ul>
<li class="toclevel-2 tocsection-7"><a href="System_Calls#Registers"><span class="tocnumber">2.1</span> <span class="toctext">Registers</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="System_Calls#Stack"><span class="tocnumber">2.2</span> <span class="toctext">Stack</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="System_Calls#Memory"><span class="tocnumber">2.3</span> <span class="toctext">Memory</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-10"><a href="System_Calls#Security/safety_implications"><span class="tocnumber">3</span> <span class="toctext">Security/safety implications</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="System_Calls#On_the_user_land_side"><span class="tocnumber">4</span> <span class="toctext">On the user land side</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="System_Calls#Strategies_Conclusion"><span class="tocnumber">5</span> <span class="toctext">Strategies Conclusion</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="System_Calls#See_Also"><span class="tocnumber">6</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-14"><a href="System_Calls#Threads"><span class="tocnumber">6.1</span> <span class="toctext">Threads</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="System_Calls#External_Links"><span class="tocnumber">6.2</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Possible_methods_to_make_a_System_Call">Possible methods to make a System Call</span></h2>
<h3><span class="mw-headline" id="Interrupts">Interrupts</span></h3>
<p>The most common way to implement system calls is using a software <a href="Interrupt" class="mw-redirect" title="Interrupt">interrupt</a>. It is probably the most portable way to implement system calls. Linux traditionally uses interrupt 0x80 for this purpose on x86. Other systems may have a fixed system call vector (e.g. PowerPC or Microblaze).
</p><p>To do this, you will have to create your interrupt handler in Assembly. This is because your system call ABI will likely not correspond to the normal ABI the compiler supports. It is therefore necessary to translate from one to the other.
</p><p>For example, on i386, the Linux kernel gets its arguments in <code>eax, ebx, ecx, edx, esi, edi, and ebp</code> in that order. The ABI however places all arguments in reverse order on the stack. Linux proceeds to construct a <code>pt_regs</code> structure on the stack and passes a pointer to it to a C function to handle the call itself. This can be simplified into something like this:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nl">Int128Handler:</span><span class="w"></span>
<span class="w">    </span><span class="c1">; already on stack: ss, sp, flags, cs, ip.</span>
<span class="w">    </span><span class="c1">; need to push ax, gs, fs, es, ds, -ENOSYS, bp, di, si, dx, cx, and bx</span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">eax</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">dword</span><span class="w"> </span><span class="no">gs</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">dword</span><span class="w"> </span><span class="no">fs</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">dword</span><span class="w"> </span><span class="no">es</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">dword</span><span class="w"> </span><span class="no">ds</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">dword</span><span class="w"> </span><span class="p">-</span><span class="no">ENOSYS</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">ebp</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">edi</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">esi</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">edx</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">ecx</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">ebx</span><span class="w"></span>
<span class="w">    </span><span class="nf">push</span><span class="w"> </span><span class="no">esp</span><span class="w"></span>
<span class="w">    </span><span class="nf">call</span><span class="w"> </span><span class="no">do_syscall_in_C</span><span class="w"></span>
<span class="w">    </span><span class="nf">add</span><span class="w"> </span><span class="no">esp</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="w"></span>
<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">ebx</span><span class="w"></span>
<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">ecx</span><span class="w"></span>
<span class="w">    </span><span class="err">[</span><span class="na">...</span><span class="p">]</span><span class="w"></span>
<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">es</span><span class="w"></span>
<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">fs</span><span class="w"></span>
<span class="w">    </span><span class="nf">pop</span><span class="w"> </span><span class="no">gs</span><span class="w"></span>
<span class="w">    </span><span class="nf">add</span><span class="w"> </span><span class="no">esp</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="w"></span>
<span class="w">    </span><span class="nf">iretd</span><span class="w"></span>
</pre></div>
<p>Many protected mode OSes use EAX to hold the function code. DOS uses the AX register to store the function code — AH for the service and AL for functions of the service, or AH for the functions if there are no services. For example, let's say you have read() and write(). The codes are 1 for read() and 2 for write() from the interrupt 0A9h (an arbitrary choice, possibly wrong). You can write
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="w"> </span><span class="nl">IntA9Handler:</span><span class="w"></span>
<span class="w">     </span><span class="nf">CMP</span><span class="w"> </span><span class="no">AH</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"></span>
<span class="w">     </span><span class="nf">JNE</span><span class="w"> </span><span class="no">.write</span><span class="w"></span>
<span class="w">     </span><span class="nf">CALL</span><span class="w"> </span><span class="no">_read</span><span class="w"></span>
<span class="w">     </span><span class="nf">JMP</span><span class="w"> </span><span class="no">.done</span><span class="w"></span>
<span class="w"> </span><span class="nl">.write:</span><span class="w"></span>
<span class="w">     </span><span class="nf">CMP</span><span class="w"> </span><span class="no">AH</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"></span>
<span class="w">     </span><span class="nf">JNE</span><span class="w"> </span><span class="no">.badcode</span><span class="w"></span>
<span class="w">     </span><span class="nf">CALL</span><span class="w"> </span><span class="no">_write</span><span class="w"></span>
<span class="w">     </span><span class="nf">JMP</span><span class="w"> </span><span class="no">.done</span><span class="w"></span>
<span class="w"> </span><span class="nl">.badcode:</span><span class="w"></span>
<span class="w">     </span><span class="nf">MOV</span><span class="w"> </span><span class="no">EAX</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="no">FFFFFFFFh</span><span class="w"></span>
<span class="w"> </span><span class="nl">.done:</span><span class="w"></span>
<span class="w">     </span><span class="nf">IRETD</span><span class="w"></span>
</pre></div>
<p>However, if all function codes are small contiguous numbers, a better option might be a function table, such as:
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nl">dispatch_syscall:</span><span class="w"></span>
<span class="w">    </span><span class="nf">cmp</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="no">NR_syscalls</span><span class="w"></span>
<span class="w">    </span><span class="nf">ja</span><span class="w"> </span><span class="no">.badcode</span><span class="w"></span>
<span class="w">    </span><span class="nf">jmp</span><span class="w"> </span><span class="p">[</span><span class="no">syscall_table</span><span class="err">+</span><span class="mi">4</span><span class="p">*</span><span class="no">eax</span><span class="p">]</span><span class="w"></span>
<span class="nl">.badcode:</span><span class="w"></span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">eax</span><span class="p">,</span><span class="w"> </span><span class="p">-</span><span class="no">ENOSYS</span><span class="w"></span>
<span class="w">    </span><span class="nf">ret</span><span class="w"></span>
</pre></div>
<p>Note that this assumes the syscall table to be NULL free. If there is a hole in the table, fill it with a pointer to a function returning an error code!
</p>
<h3><span id="Sysenter.2FSysexit_.28Intel.29"></span><span class="mw-headline" id="Sysenter/Sysexit_(Intel)">Sysenter/Sysexit (Intel)</span></h3>
<dl><dd><i>Main article:</i> <a href="Sysenter" class="mw-redirect" title="Sysenter">Sysenter</a></dd></dl>
<p>On Intel CPU, starting from the Pentium II, a new instruction pair sysenter/sysexit has appeared. It allows a faster switch from user mode to kernel mode, by limiting the overhead of changing mode. The sysenter entry point will have the kernel stack set already. However, sysenter does absolutely no state saving, so the user stack pointer and return address both have to either be well-known values, or have to be saved by the user-space code leading up to the sysenter. Also, besides unconditionally clearing the interrupt and VM flags, sysenter will not modify any flags.
</p><p>A similar instruction pair has been created by AMD: Syscall/Sysret. However the behaviour of these instructions are different from Intel's. The syscall entry point will still have the user space stack loaded, and will have to save it and load the kernel stack. The only reasonable way to do this is by way of a CPU-local variable: By way of the <code>swapgs</code> instruction, a CPU-local pointer can be loaded, behind which the user stack pointer can be saved, before overwriting the stack pointer with the kernel value (which also can be saved among the CPU-local variables). In 32-bit mode you get a bit of a chicken-and-egg scenario: You can't save any register to stack, since the stack in question is user stack and thus not to be trusted or modified, and in an SMP system, you can't use any global state, either. And you need to save pretty much all registers, so you can't modify them. So, possibly avoid syscall in 32-bit mode.
</p><p>In 64-bit mode, the flags register can be modified by way of the SFMASK MSR. The original RFLAGS value will be saved in r11.
</p><p>Note that, although these instructions did appear in pairs, there is no actual need to keep these instructions paired. With a properly constructed stack-frame, a system call that was started with <code>syscall</code> can be ended with <code>iret</code>.
</p><p>The kernel can specify which registers are preserved and which registers are lost on SYSENTER or SYSCALL (with the exception of r11 in 64-bit mode, which is always lost) as part of its syscall ABI. It then does not need to save all registers but only those specified as being preserved. Most commonly the C calling conventions in use are followed. By using a tiny assembler stub that calls SYSENTER or SYSCALL the C compiler will safeguard caller saved registers. The kernel entry point for SYSENTER or SYSCALL can then be another small assembler stub that avoids changing any callee saved register before calling a C function for the syscall. That way only the user space stack pointer (and r11 in 64-bit mode) need to be saved as everything else is either preserved by the C compiler or allowed to be destroyed.
</p><p>Note that for security reasons the kernel should zero all the registers that are not preserved across SYSENTER or SYSCALL so no information is accidentally leaked from kernel to userspace.
</p>
<h3><span class="mw-headline" id="Trap">Trap</span></h3>
<p>Some OSes implement system calls by triggering a CPU <a href="https://wiki.osdev.org/index.php?title=Trap&amp;action=edit&amp;redlink=1" class="new" title="Trap (page does not exist)">Trap</a> in a determined fashion such that they can recognize it as a system call. This solution is adopted on some hardware by Solaris, by L4, and probably others.
</p><p>For example, L4 use a "LOCK NOP" instruction on x86. Since it is not permitted to perform a lock on the "NOP" instruction a trap is triggered. The problem with this approach is that there is no guarantee the "LOCK NOP" will have the same behavior on future x86 CPU. They should probably have used the "UD2" instruction, since it is defined for this purpose.
</p>
<h3><span id="Call_Gates_.28Intel.29"></span><span class="mw-headline" id="Call_Gates_(Intel)">Call Gates (Intel)</span></h3>
<p>The 80386 family of processors offer various call gates as part of the <a href="GDT" class="mw-redirect" title="GDT">GDT</a>. The call gate is a far pointer that can be called similar to calling a normal function. Very few operating systems use call gates.
</p><p>To use a call gate in 32-bit mode, an entry has to be added to the GDT. Assuming the standard two-tier architecture (kernel is ring 0, user is ring 3, and rings 1 and 2 are unused), the DPL of that segment needs to be 3, the first two bytes and last two bytes of the descriptor (i.e. the limit, flags, and high base fields) need to be set to a pointer to the handler function, the second two bytes (the low base field) needs to be set to the kernel code segment selector, the mid-base field can contain a parameter count (up to 31 DWORDs can be copied from user to kernel stack), and the access byte has to be set up like this: Pr must be 1, Privl must be 3, the bit the <a href="GDT" class="mw-redirect" title="GDT">GDT</a> page claims must be 1 (which is called S in the AMD documentation) must actually be 0, and below that a value of 1100 causes the segment to be seen as a 32-bit call-gate.
</p><p>To use the gate, user-space code must use a far-call instruction. The offset will be ignored. Assuming the gate is the first entry in the GDT, segment 0x0b will have to be requested (offset 8 and RPL 3):
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">call</span><span class="w"> </span><span class="no">far</span><span class="w"> </span><span class="mi">0x0b</span><span class="p">:</span><span class="mi">0</span><span class="w"></span>
</pre></div>
<p>In 64-bit mode, the descriptor size is doubled, with the high half of the handler address directly after the rest of the descriptor described above. Also, the argument count has to be zero, and the second DWORD of the second descriptor has to be all zeros. Otherwise, no changes.
</p>
<h2><span class="mw-headline" id="Passing_Arguments">Passing Arguments</span></h2>
<h3><span class="mw-headline" id="Registers">Registers</span></h3>
<p>The easiest way to pass arguments to a System Call handler are the registers. The <a href="BIOS" title="BIOS">BIOS</a> takes arguments this way.
</p><p>Pros:
</p>
<ul><li>very fast</li></ul>
<p>Cons:
</p>
<ul><li>limited to the number of available registers</li>
<li>caller has to save/restore the used registers if it needs their old values after the System Call</li>
<li>insecure (if the caller passes more/less arguments than the callee assumes to get)</li></ul>
<h3><span class="mw-headline" id="Stack">Stack</span></h3>
<p>It is also possible to pass arguments through the <a href="Stack" title="Stack">stack</a>.
</p><p>Pros:
</p>
<ul><li>nested System Calls are possible</li>
<li>it is easy to implement a System Call handler in C because C uses the stack to pass arguments to functions, too</li>
<li>not limited</li></ul>
<p>Cons:
</p>
<ul><li>insecure (if the caller passes more/less arguments than the callee assumes to get)</li></ul>
<h3><span class="mw-headline" id="Memory">Memory</span></h3>
<p>The last common way to pass arguments is to store them in memory. Before making the System Call the caller must store a pointer to the argument's location in a register for the System Call handler. (assuming this location is not fixed)
</p><p>Pros:
</p>
<ul><li>not limited</li>
<li>secure</li></ul>
<p>Cons:
</p>
<ul><li>one register is still needed</li>
<li>nested System Calls are not possible without copying arguments</li>
<li>insecure (if the caller passes more/less arguments than the callee assumes to get)</li></ul>
<h2><span id="Security.2Fsafety_implications"></span><span class="mw-headline" id="Security/safety_implications">Security/safety implications</span></h2>
<p>Since the kernel is running at higher privilege than the user mode code calling it, it is imperative to check everything. This is not merely paranoia for fear of malicious programs, but also to protect your kernel from broken applications. It is therefore necessary to check all arguments for being in range, and all pointers for being actual user land pointers. The kernel can write anywhere, but you would not want a specially crafted <code>read()</code> system call to overwrite the credentials of some process with zeroes (thus giving it root access).
</p><p>As for making sure that pointers are in range, checking if they point to user or kernel memory can be difficult to do efficiently unless you are writing a <a href="Higher_Half_Kernel" title="Higher Half Kernel">Higher Half Kernel</a>. For checking all user space accesses for being valid, you can either check with your <a href="Page_Frame_Allocation" title="Page Frame Allocation">Virtual Memory Manager</a> to see if the requested bytes are mapped, or else you can just access them and handle the resulting page faults. Linux switched to doing the latter from version 2.6 onwards.
</p>
<h2><span class="mw-headline" id="On_the_user_land_side">On the user land side</span></h2>
<p>While the developer can trigger a system call manually, it is probably a good idea to provide a library to encapsulate such call. Therefore you will be able to switch the system call technique without impacting user applications.
</p><p>Another way is to have a stub somewhere in memory that the kernel places there, then once your registers are set up, call that stub to do the actual system call for you. Then you can swap methods at load time rather than compile time.
</p><p>Note that whatever library you provide, you cannot assume the user to call the system with that stub. They can, and will, call the system directly if given half the chance.
</p>
<h2><span class="mw-headline" id="Strategies_Conclusion">Strategies Conclusion</span></h2>
<p>The system call strategy depends on the platform. You may want to use different strategy depending on the architecture, and even switch strategy depending on the hardware performance. You might also need more parameter copying on a <a href="Microkernel" title="Microkernel">microkernel</a> than you will need on a <a href="Monolithic_Kernel" title="Monolithic Kernel">monolithic</a> one.
</p>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<h3><span class="mw-headline" id="Threads">Threads</span></h3>
<ul><li><a href="http://forum.osdev.org/viewtopic.php?t=13186" class="extiw" title="topic:13186">System call implementation</a></li></ul>
<h3><span class="mw-headline" id="External_Links">External Links</span></h3>
<ul><li><a href="https://wikipedia.org/wiki/System_call" class="extiw" title="wikipedia:System call">System Call</a> on Wikipedia.</li>
<li><a rel="nofollow" class="external text" href="http://www.sandpile.org/post/msgs/20003633.htm">sandpile.org - Re: SYSENTER SYSCALL</a> - An explanation on using sysenter / sysexit / syscall.</li>
<li><a rel="nofollow" class="external text" href="http://www.pagetable.com/?p=9">Asking the kernel how to make a syscall</a> - Just the same, with notes on how the L4 microkernel is impacted by this.</li>
<li><a rel="nofollow" class="external text" href="https://manugarg.appspot.com/systemcallinlinux2_6.html">Sysenter Based System Call Mechanism in Linux 2.6</a> - Explains the how and why of why Linux changed their System Call procedure for Pentium II+ machines.</li>
<li><a rel="nofollow" class="external text" href="http://www.freebsd.org/doc/en_US.ISO8859-1/books/developers-handbook/x86-system-calls.html">FreeBSD Developers' Handbook - System Calls</a> - Discusses System Calls in FreeBSD from the usermode perspective.</li></ul>
<!-- 
NewPP limit report
Cached time: 20250211124923
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.036 seconds
Real time usage: 0.580 seconds
Preprocessor visited node count: 83/1000000
Post‐expand include size: 31/2097152 bytes
Template argument size: 8/2097152 bytes
Highest expansion depth: 3/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 7368/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.834      1 Template:Main
100.00%    0.834      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1961-0!canonical and timestamp 20250211124922 and revision id 28234.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=System_Calls&amp;oldid=28234">https://wiki.osdev.org/index.php?title=System_Calls&amp;oldid=28234</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:System_Calls" title="Category:System Calls">System Calls</a></li><li><a href="./Category:OS_theory" title="Category:OS theory">OS theory</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=System+Calls" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="System_Calls#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="System_Calls" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:System_Calls" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="System_Calls"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=System_Calls&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=System_Calls&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/System_Calls" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/System_Calls" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=System_Calls&amp;oldid=28234" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=System_Calls&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 10 July 2023, at 22:02.</li>
	<li id="footer-info-0">This page has been accessed 9,465 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=System_Calls&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.036","walltime":"0.580","ppvisitednodes":{"value":83,"limit":1000000},"postexpandincludesize":{"value":31,"limit":2097152},"templateargumentsize":{"value":8,"limit":2097152},"expansiondepth":{"value":3,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":7368,"limit":5000000},"timingprofile":["100.00%    0.834      1 Template:Main","100.00%    0.834      1 -total"]},"cachereport":{"timestamp":"20250211124923","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":679});});</script>
</body>
</html>