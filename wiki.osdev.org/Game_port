<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Game port - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"ebe3306d0088cb9ff3a7a717","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Game_port","wgTitle":"Game port","wgCurRevisionId":28285,"wgRevisionId":28285,"wgArticleId":4378,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Hardware Interfaces"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Game_port","wgRelevantArticleId":4378,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions"
:{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Game_port rootpage-Game_port skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Game port</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Game_port#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Game_port#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>Game port is an old and obsolete parallel communication port. Used mostly for analog joysticks, but also for another devices (like MIDI devices or paddles). Game port uses an DB-15 port. It has eight analog connections for four buttons and four for the axis.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Game_port#History"><span class="tocnumber">1</span> <span class="toctext">History</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Game_port#Programming_the_game_port"><span class="tocnumber">2</span> <span class="toctext">Programming the game port</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Game_port#Example_code"><span class="tocnumber">3</span> <span class="toctext">Example code</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="Game_port#See_Also"><span class="tocnumber">4</span> <span class="toctext">See Also</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="History">History</span></h2>
<p>The port was introduced in the IBM Game Control Adapter, an optional add-on board for the original IBM PC. Creative Labs included the game port in their soundcards (SoundBlaster)
to provide an "all-in-one" solution for gamers, because sound cards were mostly used for gaming. Since then it was very popular among gamers.
Joysticks aren't limited to four buttons as you may think. Some joysticks (like Microsoft Sidewinder with nine buttons) used multiplexation techniques to get up to 15 buttons or even 20.
</p><p>However, there's a serious drawback; old analog joysticks (that use the game port) use an potentiometer (variable resistor) with a resistance of usually 100kÎ© and a capacitor. The controller board calculates the charge threshold of the capacitor, and then converts it to numbers (axis). The problem is that the joystick resistor starts to heat up with time (10-15 mins.), and the resistance changes, leading to incorrect values. Analog joysticks need constant calibration.
</p><p><br />
</p>
<h2><span class="mw-headline" id="Programming_the_game_port">Programming the game port</span></h2>
<p>Game port uses port 201h. It's a read and write port. Nothing much to say, it is very simple.
Any axis read must be preceded by an write, it can be any data, it doesn't matter.
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1&#125;&#125;&#125;">

<tbody><tr>
<th>IO Port
</th>
<th>Access Type
</th>
<th>Purpose
</th></tr>
<tr>
<td>0x201
</td>
<td>Read/Write
</td>
<td>Joystick status
</td></tr></tbody></table>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1&#125;&#125;&#125;">

<tbody><tr>
<th>Bits
</th>
<th>Purpose
</th></tr>
<tr>
<td>0
</td>
<td>X joystick axis (A). If bit is set, timing isn't active. Same for all.
</td></tr>
<tr>
<td>1
</td>
<td>Y joystick axis (A)
</td></tr>
<tr>
<td>2
</td>
<td>X joystick axis (B)
</td></tr>
<tr>
<td>3
</td>
<td>Y joystick axis (B)
</td></tr>
<tr>
<td>4
</td>
<td>Status of (A) button 1. If bit is not set, button has been pressed. Same for all.
</td></tr>
<tr>
<td>5
</td>
<td>Status of (A) button 2
</td></tr>
<tr>
<td>6
</td>
<td>Status of (B) button 1
</td></tr>
<tr>
<td>7
</td>
<td>Status of (B) button 2
</td></tr></tbody></table>
<p>There's also and <a href="BIOS" title="BIOS">BIOS</a> call for joystick; Int 0x15, AH 0x84. But it is poorly supported, and most BIOSes have an buggy implementation.
</p><p><br />
</p>
<h2><span class="mw-headline" id="Example_code">Example code</span></h2>
<p>Example code, to get button status. Uses polling to detect status. You can also use <a href="IRQ" class="mw-redirect" title="IRQ">IRQ</a> 9-11, they are free for peripherals, but it is a waste for such a simple device.
</p><p><b>WARNING!</b> this code has not been tested!
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cm">/* Simple joystick port controller. hextakatt 2019, public domain. Improvements are welcome, send me an PM (in the forum) if you have any. */</span><span class="w"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdint.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdbool.h&gt;</span><span class="cp"></span>

<span class="cm">/* Joystick 200h - 201h. */</span><span class="w"></span>
<span class="cp">#define JOYSTICK_PORT      0x201</span>
<span class="cp">#define GARBAGE_DATA       0xAA55</span>
<span class="cp">#define MAX_TIME_ATTEMPTS  1000</span>

<span class="cm">/* Joystick values: axis and buttons */</span><span class="w"></span>
<span class="k">enum</span><span class="w"> </span><span class="n">JoystickValues</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">JoystickButtonA</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x10</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">JoystickButtonB</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x20</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">JoystickButtonC</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x40</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">JoystickButtonD</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x80</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">JoystickAxisX</span><span class="w">   </span><span class="o">=</span><span class="w"> </span><span class="mh">0x01</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">JoystickAxisY</span><span class="w">   </span><span class="o">=</span><span class="w"> </span><span class="mh">0x02</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">JoystickDeltaX</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="mh">0x04</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">JoystickDeltaY</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="mh">0x08</span><span class="p">,</span><span class="w"></span>
<span class="p">};</span><span class="w"></span>

<span class="cm">/* A nice struct which contains the joystick status */</span><span class="w"></span>
<span class="k">struct</span><span class="w"> </span><span class="nc">JoystickStatus</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">int16_t</span><span class="w"> </span><span class="n">AxisX</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">int16_t</span><span class="w"> </span><span class="n">AxisY</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">int16_t</span><span class="w"> </span><span class="n">DeltaX</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">int16_t</span><span class="w"> </span><span class="n">DeltaY</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">bool</span><span class="w"> </span><span class="n">ButtonA</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">bool</span><span class="w"> </span><span class="n">ButtonB</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">bool</span><span class="w"> </span><span class="n">ButtonC</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">bool</span><span class="w"> </span><span class="n">ButtonD</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">bool</span><span class="w"> </span><span class="n">JoystickFlag</span><span class="p">;</span><span class="w"></span>
<span class="p">};</span><span class="w"></span>

<span class="k">struct</span><span class="w"> </span><span class="nc">JoystickStatus</span><span class="w"> </span><span class="o">*</span><span class="n">jst</span><span class="p">;</span><span class="w"></span>
<span class="cm">/* If joystick is present, flag is true. */</span><span class="w"></span>
<span class="n">jst</span><span class="o">-&gt;</span><span class="n">JoystickFlag</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">false</span><span class="p">;</span><span class="w"></span>

<span class="kt">uint8_t</span><span class="w"> </span><span class="n">joystick_values</span><span class="p">[]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="mh">0x01</span><span class="p">,</span><span class="w"> </span><span class="mh">0x02</span><span class="p">,</span><span class="w"> </span><span class="mh">0x04</span><span class="p">,</span><span class="w"> </span><span class="mh">0x08</span><span class="p">,</span><span class="w"> </span><span class="cm">/* Axis */</span><span class="w"></span>
<span class="w">    </span><span class="mh">0x10</span><span class="p">,</span><span class="w"> </span><span class="mh">0x20</span><span class="p">,</span><span class="w"> </span><span class="mh">0x40</span><span class="p">,</span><span class="w"> </span><span class="mh">0x80</span><span class="p">,</span><span class="w"> </span><span class="cm">/* Buttons */</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kt">bool</span><span class="w"> </span><span class="n">joystick_button</span><span class="p">(</span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">buttonnum</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="mi">8</span><span class="p">;</span><span class="w"> </span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">joystick_values</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">buttonnum</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w"> 	           </span><span class="k">return</span><span class="w"> </span><span class="p">((</span><span class="n">inb</span><span class="p">(</span><span class="n">JOYSTICK_PORT</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">buttonnum</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w"></span>
<span class="w">        </span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="n">kputs</span><span class="p">(</span><span class="s">&quot;Invalid value: %x; Out of bounds.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">buttonnum</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="cm">/* Dump all joystick values to an structure */</span><span class="w"></span>
<span class="k">struct</span><span class="w"> </span><span class="nc">JoystickStatus</span><span class="w"> </span><span class="n">joystick_dump</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">struct</span><span class="w"> </span><span class="nc">JoystickStatus</span><span class="w"> </span><span class="n">jst</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">jst</span><span class="p">.</span><span class="n">AxisX</span><span class="w">   </span><span class="o">=</span><span class="w"> </span><span class="n">joystick_status</span><span class="p">(</span><span class="n">JoystickAxisX</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">jst</span><span class="p">.</span><span class="n">AxisY</span><span class="w">   </span><span class="o">=</span><span class="w"> </span><span class="n">joystick_status</span><span class="p">(</span><span class="n">JoystickAxisY</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">jst</span><span class="p">.</span><span class="n">DeltaX</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">joystick_status</span><span class="p">(</span><span class="n">JoystickDeltaX</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">jst</span><span class="p">.</span><span class="n">DeltaY</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">joystick_status</span><span class="p">(</span><span class="n">JoystickDeltaY</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">jst</span><span class="p">.</span><span class="n">ButtonA</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">joystick_button</span><span class="p">(</span><span class="n">joystick_status</span><span class="p">(</span><span class="n">JoystickButtonA</span><span class="p">));</span><span class="w"></span>
<span class="w">    </span><span class="n">jst</span><span class="p">.</span><span class="n">ButtonB</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">joystick_button</span><span class="p">(</span><span class="n">joystick_status</span><span class="p">(</span><span class="n">JoystickButtonB</span><span class="p">));</span><span class="w"></span>
<span class="w">    </span><span class="n">jst</span><span class="p">.</span><span class="n">ButtonC</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">joystick_button</span><span class="p">(</span><span class="n">joystick_status</span><span class="p">(</span><span class="n">JoystickButtonC</span><span class="p">));</span><span class="w"></span>
<span class="w">    </span><span class="n">jst</span><span class="p">.</span><span class="n">ButtonD</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">joystick_button</span><span class="p">(</span><span class="n">joystick_status</span><span class="p">(</span><span class="n">JoystickButtonD</span><span class="p">));</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">jst</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="cm">/* </span>
<span class="cm"> * There&#39;s no IRQ for joystick port, so we poll instead.</span>
<span class="cm"> * However isn&#39;t a problem, because very few data is transmitted</span>
<span class="cm"> * through game port.</span>
<span class="cm"> */</span><span class="w"></span>
<span class="kt">uint16_t</span><span class="w"> </span><span class="n">joystick_status</span><span class="p">(</span><span class="kt">uint8_t</span><span class="w"> </span><span class="n">byte</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">timeout</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* Disable interrupts, so they don&#39;t affect timing */</span><span class="w"></span>
<span class="w">    </span><span class="k">asm</span><span class="w"> </span><span class="k">volatile</span><span class="p">(</span><span class="s">&quot;cli&quot;</span><span class="p">);</span><span class="w"></span>

<span class="w">    </span><span class="kt">uint16_t</span><span class="w"> </span><span class="n">stat</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">inb</span><span class="p">(</span><span class="n">JOYSTICK_PORT</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* Any read needs to be with a write. The byte that we send </span>
<span class="cm">     * can be garbage, it doesn&#39;t matters.</span>
<span class="cm">     */</span><span class="w"></span>
<span class="w">    </span><span class="n">outb</span><span class="p">(</span><span class="n">JOYSTICK_PORT</span><span class="p">,</span><span class="w"> </span><span class="n">GARBAGE_DATA</span><span class="p">);</span><span class="w"></span>

<span class="w">    </span><span class="cm">/* Poll until we get our requested value */</span><span class="w"></span>
<span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">stat</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">byte</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">            </span><span class="n">jst</span><span class="o">-&gt;</span><span class="n">JoystickFlag</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">true</span><span class="p">;</span><span class="w"></span>
<span class="w">            </span><span class="k">break</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="p">}</span><span class="w"></span>
<span class="w">      	 </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">timeout</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">MAX_TIME_ATTEMPTS</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">            </span><span class="n">jst</span><span class="o">-&gt;</span><span class="n">JoystickFlag</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">false</span><span class="p">;</span><span class="w"></span>
<span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="w">    	</span><span class="p">}</span><span class="w"></span>
<span class="w">        </span><span class="o">++</span><span class="n">timeout</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* Now we can enable interrupts again */</span><span class="w"></span>
<span class="w">    </span><span class="k">asm</span><span class="w"> </span><span class="k">volatile</span><span class="p">(</span><span class="s">&quot;sti&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="p">(</span><span class="n">stat</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">byte</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<p><b>External Links</b>
</p><p><a rel="nofollow" class="external text" href="https://github.com/torvalds/linux/blob/master/drivers/input/gameport/gameport.c">Linux gameport implementation</a>
</p><p><a rel="nofollow" class="external text" href="http://web.archive.org/web/20021208052845/http://www.nondot.org/sabre/os/files/HCI/JOYSTICK.TXT">Nondot OSRC joystick article</a>
</p><p><a rel="nofollow" class="external text" href="https://www.minuszerodegrees.net/oa/OA%20-%20IBM%20Game%20Control%20Adapter.pdf">IBM Game Control Adapter manual</a>
</p>
<!-- 
NewPP limit report
Cached time: 20250212024136
Cache expiry: 86400
Reduced expiry: false
Complications: [showâtoc]
CPU time usage: 0.025 seconds
Real time usage: 0.160 seconds
Preprocessor visited node count: 27/1000000
Postâexpand include size: 324/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 3/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip postâexpand size: 17318/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.781      1 -total
 89.62%    0.700      2 Template:Wikitable
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4378-0!canonical and timestamp 20250212024136 and revision id 28285.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Game_port&amp;oldid=28285">https://wiki.osdev.org/index.php?title=Game_port&amp;oldid=28285</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Hardware_Interfaces" title="Category:Hardware Interfaces">Hardware Interfaces</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Game+port" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Game_port#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Game_port" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:Game_port" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Game_port"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Game_port&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Game_port&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Game_port" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Game_port" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Game_port&amp;oldid=28285" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Game_port&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 18 August 2023, at 18:04.</li>
	<li id="footer-info-0">This page has been accessed 3,858 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Game_port&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.025","walltime":"0.160","ppvisitednodes":{"value":27,"limit":1000000},"postexpandincludesize":{"value":324,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":3,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":17318,"limit":5000000},"timingprofile":["100.00%    0.781      1 -total"," 89.62%    0.700      2 Template:Wikitable"]},"cachereport":{"timestamp":"20250212024136","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":253});});</script>
</body>
</html>