<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Building GCC - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"abd98ed6e2653f948a2f61fb","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Building_GCC","wgTitle":"Building GCC","wgCurRevisionId":25043,"wgRevisionId":25043,"wgArticleId":3363,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using duplicate arguments in template calls","Pages using deprecated source tags","Pages using deprecated enclose attributes","Level 1 Tutorials","Compilers","Tutorials"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Building_GCC","wgRelevantArticleId":3363,"wgIsProbablyEditable"
:false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Building_GCC rootpage-Building_GCC skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Building GCC</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Building_GCC#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Building_GCC#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear:right; border:1px solid #aaaaaa; background:#eee; text-align:center;;"><tbody><tr><th>Difficulty level</th></tr><tr><td><a href="./File:Difficulty_1.png" class="image"><img alt="Difficulty 1.png" src="images/d/d3/Difficulty_1.png" decoding="async" width="46" height="14" data-file-width="46" data-file-height="14" /></a><br />Beginner</td></tr></tbody></table>
<p>In this tutorial we upgrade your system <a href="GCC" title="GCC">GCC</a> to the most recent version. This helps you build a <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a>, as it is recommended that you build the cross-compiler with the same compiler version. With some care, you don't have to bootstrap a new system compiler, but it is risky and can potentially create trouble. You should use the same major compiler release for your system compiler and your cross-compiler.
</p><p>See also the <a rel="nofollow" class="external text" href="http://gcc.gnu.org/install/">official instructions for building GCC</a>.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Building_GCC#Introduction"><span class="tocnumber">1</span> <span class="toctext">Introduction</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="Building_GCC#Do_I_need_to_bootstrap?"><span class="tocnumber">1.1</span> <span class="toctext">Do I need to bootstrap?</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="Building_GCC#Which_compiler_version_do_I_want?"><span class="tocnumber">1.2</span> <span class="toctext">Which compiler version do I want?</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="Building_GCC#Do_I_need_a_new_Binutils_as_well?"><span class="tocnumber">1.3</span> <span class="toctext">Do I need a new Binutils as well?</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="Building_GCC#Preparing_for_the_build"><span class="tocnumber">2</span> <span class="toctext">Preparing for the build</span></a>
<ul>
<li class="toclevel-2"><a href="Building_GCC#Installing_Dependencies"><span class="tocnumber">2.1</span> <span class="toctext">Installing Dependencies</span></a></li>
<li class="toclevel-2"><a href="Building_GCC#Downloading_the_Source_Code"><span class="tocnumber">2.2</span> <span class="toctext">Downloading the Source Code</span></a></li>
<li class="toclevel-2"><a href="Building_GCC#Linux_Users_building_a_System_Compiler"><span class="tocnumber">2.3</span> <span class="toctext">Linux Users building a System Compiler</span></a></li>
<li class="toclevel-2"><a href="Building_GCC#Gentoo_Users"><span class="tocnumber">2.4</span> <span class="toctext">Gentoo Users</span></a></li>
<li class="toclevel-2"><a href="Building_GCC#Nix(OS)_Users"><span class="tocnumber">2.5</span> <span class="toctext">Nix(OS) Users</span></a></li>
<li class="toclevel-2"><a href="Building_GCC#macOS_Users"><span class="tocnumber">2.6</span> <span class="toctext">macOS Users</span></a></li>
<li class="toclevel-2"><a href="Building_GCC#Windows_Users"><span class="tocnumber">2.7</span> <span class="toctext">Windows Users</span></a></li>
<li class="toclevel-2"><a href="Building_GCC#OpenBSD_Users"><span class="tocnumber">2.8</span> <span class="toctext">OpenBSD Users</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-6"><a href="Building_GCC#The_Build"><span class="tocnumber">3</span> <span class="toctext">The Build</span></a>
<ul>
<li class="toclevel-2 tocsection-7"><a href="Building_GCC#Preparation"><span class="tocnumber">3.1</span> <span class="toctext">Preparation</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="Building_GCC#Binutils"><span class="tocnumber">3.2</span> <span class="toctext">Binutils</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Building_GCC#GCC"><span class="tocnumber">3.3</span> <span class="toctext">GCC</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-10"><a href="Building_GCC#Using_the_new_Compiler"><span class="tocnumber">4</span> <span class="toctext">Using the new Compiler</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="Building_GCC#Building_the_Cross-Compiler"><span class="tocnumber">5</span> <span class="toctext">Building the Cross-Compiler</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Introduction">Introduction</span></h2>
<p>Compilers are upgraded through a process called bootstrapping. At first you have your old system compiler that produces slow code and doesn't support all the new language features. You then use this old system compiler to build the new version of the compiler, hoping that the old compiler is able to build the new compiler (it supports all needed features). This produces a new compiler that produces fast code and supports all the new features, however the compiler itself is slow, because it was compiled with a compiler that produces slow code. In addition, the new compiler may be buggy because your old compiler was buggy, or perhaps the new compiler release has a bug.
</p><p>The next step is to use your new slow compiler that produces fast code, and then build the new compiler again. This produces a fast compiler that produces fast code. However, the first compiler we built could be buggy, and the compiler we just built using it may be defect. We need to verify the correctness of our new fast compiler that produces fast code.
</p><p>To solve that problem, we build the compiler <i>a third</i> time. Once we have built the third compiler using the second compiler, it should produce the very same output as the first compiler building the second, as both times we are using compilers that produce fast code and use the same source code. The compiler build system will then verify that the second and third compilers are identical, which gives you confidence in the bootstrap. If the second and third compilers are not identical, the bootstrap failed and you have encountered a compiler bug. Bootstrapping takes three times as long as just building a regular compiler, but it makes sure your toolchain is stable.
</p><p>The last thing to do is run the compiler test suite so you can verify that it works correctly.
</p><p>Notice how the same problems could occur if you use GCC 4.4 to build a GCC 4.8 cross-compiler. For that reason, it is recommended to use GCC 4.8 to build the GCC 4.8 cross-compiler, so you know no such problems could occur. You can't bootstrap a cross-compiler as it doesn't produce programs for the local operating system.
</p>
<h3><span id="Do_I_need_to_bootstrap.3F"></span><span class="mw-headline" id="Do_I_need_to_bootstrap?">Do I need to bootstrap?</span></h3>
<p>If your system compiler is the same major version as the compiler version you wish to build (for instance, if you have 4.6.2 and want 4.6.3), then you don't need to bootstrap. The minor releases are usually very compatible. You may be able to build another major version (such as 4.6.3 building 4.7.3) without a bootstrap, but it may not produce the ideal compiler. As the gap widens between the compiler versions, you are very likely to run into trouble. Each major compiler release is always able to build the next using a bootstrap. If you have the patience, it is possible to find a very old Linux system with a very old GCC release, and then bootstrap all the way up to the most recent GCC release, simply by iteratively upgrading a few major compiler releases at a time.
</p><p>You may also be able to upgrade your system compiler through other channels.
</p>
<h3><span id="Which_compiler_version_do_I_want.3F"></span><span class="mw-headline" id="Which_compiler_version_do_I_want?">Which compiler version do I want?</span></h3>
<p>The newest <a href="GCC" title="GCC">GCC</a> is recommended as it is the latest and greatest release. At this time, GCC 4.9.2 is the newest release. We recommend that you use the latest compiler release for your cross-compiler. You can also use older releases as they are usually reasonably good. If your local system compiler isn't too terribly old (at least GCC 4.6.0), you may wish to safe yourself the trouble and just pick the latest minor release (such as 4.6.3 if your system compiler is 4.6.1) for your cross-compiler. In that case, you don't need to bootstrap and you can proceed directly to building your <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a>.
</p><p>You can view your current compiler version by invoking:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>gcc --version
</pre></div>
<p>If you have patience and wish to build yourself the latest and greatest cross-compiler, you'll want to bootstrap your system compiler before building your <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a>.
</p>
<h3><span id="Do_I_need_a_new_Binutils_as_well.3F"></span><span class="mw-headline" id="Do_I_need_a_new_Binutils_as_well?">Do I need a new Binutils as well?</span></h3>
<p>It certainly couldn't hurt, but if your Binutils isn't too horribly out of date, it should be good enough for your new system compiler. You can view your current Binutils version by invoking:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>ld --version
</pre></div>
<p>You probably need at least Binutils 2.22, or preferably the latest 2.25 release.
</p>
<h2><span class="mw-headline" id="Preparing_for_the_build">Preparing for the build</span></h2><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear:right; border:1px solid #aaaaaa; background:#eee; text-align:center;;"><tbody><tr><th>Difficulty level</th></tr><tr><td><a href="./File:Difficulty_1.png" class="image"><img alt="Difficulty 1.png" src="images/d/d3/Difficulty_1.png" decoding="async" width="46" height="14" data-file-width="46" data-file-height="14" /></a><br />Beginner</td></tr></tbody></table>
<p><br />
</p><p>The GNU Compiler Collection is an advanced piece of software with dependencies. You need the following in order to build GCC:
</p>
<ul><li>A Unix-like environment (Windows users can use the Windows Subsystem for Linux or Cygwin)</li>
<li>Enough memory and hard disk space (it depends, 256 MiB will not be enough).</li>
<li>GCC (existing release you wish to replace), or another system C compiler</li>
<li>G++ (if building a version of GCC &gt;= 4.8.0), or another system C++ compiler</li>
<li>Make</li>
<li>Bison</li>
<li>Flex</li>
<li>GMP</li>
<li>MPFR</li>
<li>MPC</li>
<li>Texinfo</li>
<li>ISL (optional)</li></ul>
<h3><span class="mw-headline" id="Installing_Dependencies">Installing Dependencies</span></h3>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1&#125;&#125;&#125;">

<tbody><tr>
<th>&#8595; Dependency / OS &#8594;
</th>
<td>Source Code
</td>
<td>Debian (Ubuntu, Mint, WSL, ...)
</td>
<td>Gentoo
</td>
<td>Fedora
</td>
<td>Cygwin
</td>
<td>OpenBSD
</td>
<td>Arch
</td></tr>
<tr>
<td>How to install
</td>
<td>Normally
</td>
<td><b><tt>sudo apt install</tt> <i>foo</i></b>
</td>
<td><b><tt>sudo emerge --ask</tt> <i>foo</i></b>
</td>
<td><b><tt>sudo dnf install</tt> <i>foo</i></b>
</td>
<td>Cygwin GUI setup
</td>
<td><b><tt>doas pkg_add</tt> <i>foo</i></b>
</td>
<td><b><tt>pacman -Syu</tt> <i>foo</i></b>
</td></tr>
<tr>
<td>Compiler
</td>
<td>N/A
</td>
<td><b><tt>build-essential</tt></b>
</td>
<td><b><tt>sys-devel/gcc</tt></b>
</td>
<td><b><tt>gcc gcc-c++</tt></b>
</td>
<td><b><tt>mingw64-x86_64-gcc-g++</tt></b> / <b><tt>mingw64-i686-gcc-g++</tt></b>
</td>
<td>Preinstalled
</td>
<td><b><tt>base-devel</tt></b>
</td></tr>
<tr>
<td>Make
</td>
<td>N/A
</td>
<td><b><tt>build-essential</tt></b>
</td>
<td><b><tt>dev-build/make</tt></b>
</td>
<td><b><tt>make</tt></b>
</td>
<td><b><tt>make</tt></b>
</td>
<td>Preinstalled
</td>
<td><b><tt>base-devel</tt></b>
</td></tr>
<tr>
<td><a rel="nofollow" class="external text" href="https://www.gnu.org/software/bison/">Bison</a>
</td>
<td><a rel="nofollow" class="external autonumber" href="https://ftp.gnu.org/gnu/bison/">[1]</a>
</td>
<td><b><tt>bison</tt></b>
</td>
<td><b><tt>sys-devel/bison</tt></b>
</td>
<td><b><tt>bison</tt></b>
</td>
<td><b><tt>bison</tt></b>
</td>
<td>?
</td>
<td><b><tt>base-devel</tt></b>
</td></tr>
<tr>
<td><a rel="nofollow" class="external text" href="https://github.com/westes/flex">Flex</a>
</td>
<td><a rel="nofollow" class="external autonumber" href="https://github.com/westes/flex/releases">[2]</a>
</td>
<td><b><tt>flex</tt></b>
</td>
<td><b><tt>sys-devel/flex</tt></b>
</td>
<td><b><tt>flex</tt></b>
</td>
<td><b><tt>flex</tt></b>
</td>
<td>?
</td>
<td><b><tt>base-devel</tt></b>
</td></tr>
<tr>
<td><a rel="nofollow" class="external text" href="https://gmplib.org/">GMP</a>
</td>
<td><a rel="nofollow" class="external autonumber" href="https://ftp.gnu.org/gnu/gmp/">[3]</a>
</td>
<td><b><tt>libgmp3-dev</tt></b>
</td>
<td><b><tt>dev-libs/gmp</tt></b>
</td>
<td><b><tt>gmp-devel</tt></b>
</td>
<td><b><tt>libgmp-devel</tt></b>
</td>
<td><b><tt>gmp</tt></b>
</td>
<td><b><tt>gmp</tt></b>
</td></tr>
<tr>
<td>MPC
</td>
<td><a rel="nofollow" class="external autonumber" href="https://ftp.gnu.org/gnu/mpc/">[4]</a>
</td>
<td><b><tt>libmpc-dev</tt></b>
</td>
<td><b><tt>dev-libs/mpc</tt></b>
</td>
<td><b><tt>libmpc-devel</tt></b>
</td>
<td><b><tt>libmpc-devel</tt></b>
</td>
<td><b><tt>libmpc</tt></b>
</td>
<td><b><tt>libmpc</tt></b>
</td></tr>
<tr>
<td><a rel="nofollow" class="external text" href="https://www.mpfr.org/">MPFR</a>
</td>
<td><a rel="nofollow" class="external autonumber" href="https://ftp.gnu.org/gnu/mpfr/">[5]</a>
</td>
<td><b><tt>libmpfr-dev</tt></b>
</td>
<td><b><tt>dev-libs/mpfr</tt></b>
</td>
<td><b><tt>mpfr-devel</tt></b>
</td>
<td><b><tt>libmpfr-devel</tt></b>
</td>
<td><b><tt>mpfr</tt></b>
</td>
<td><b><tt>mpfr</tt></b>
</td></tr>
<tr>
<td><a rel="nofollow" class="external text" href="https://www.gnu.org/software/texinfo/">Texinfo</a>
</td>
<td><a rel="nofollow" class="external autonumber" href="https://ftp.gnu.org/gnu/texinfo/">[6]</a>
</td>
<td><b><tt>texinfo</tt></b>
</td>
<td><b><tt>sys-apps/texinfo</tt></b>
</td>
<td><b><tt>texinfo</tt></b>
</td>
<td><b><tt>texinfo</tt></b>
</td>
<td><b><tt>texinfo</tt></b>
</td>
<td><b><tt>base-devel</tt></b>
</td></tr>
<tr>
<td><a rel="nofollow" class="external text" href="http://isl.gforge.inria.fr/">ISL</a> (Optional)
</td>
<td><a rel="nofollow" class="external autonumber" href="http://isl.gforge.inria.fr/">[7]</a>
</td>
<td><b><tt>libisl-dev</tt></b>
</td>
<td><b><tt>dev-libs/isl</tt></b>
</td>
<td><b><tt>isl-devel</tt></b>
</td>
<td><b><tt>libisl-devel</tt></b>
</td>
<td>N/A
</td>
<td>N/A
</td></tr></tbody></table>
<p>You need to have Texinfo installed to build Binutils. You need to have GMP, MPC, and MPFR installed to build GCC. GCC optionally can make use of the ISL library.
</p><p>For instance, you can install <b><tt>libgmp3-dev</tt></b> on Debian by running the shell command: <b><tt>sudo apt install libgmp3-dev</tt></b>
</p><p><b>Note:</b> Version 5.x (or later) of Texinfo is known to be incompatible with the current Binutils 2.23.2 release (and older). You can check your current version using <tt>makeinfo --version</tt>. If your version is too new and you encounter problems during the build, you will need to either use Binutils 2.24 release (or newer) or install an older version of Texinfo - perhaps through building from source - and add it to your <tt>PATH</tt> prior and during the Binutils build.
</p><p><b>Note:</b> GCC has dropped support for CLooG in the 5.x releases <a rel="nofollow" class="external autonumber" href="https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=r5-2770-geae1a5d419d30e">[8]</a>, and many distributions have dropped the CLooG package (e.g. Gentoo in December 2022).
</p><p><b>Note:</b> GCC requires at least ISL version 0.15.
</p><p><b>Note:</b> If you are using <b>Cygwin</b>, it is recommended to install the <tt><b>libintl-devel</b></tt> package (I couldn't build a cross-compiler without this package)
</p>
<h3><span class="mw-headline" id="Downloading_the_Source_Code">Downloading the Source Code</span></h3>
<p>Download the needed source code into a suitable directory such as <tt>$HOME/src</tt>:
</p>
<ul><li>You can download the desired Binutils release by visiting the <a rel="nofollow" class="external text" href="https://gnu.org/software/binutils/">Binutils website</a> or directly accessing the <a rel="nofollow" class="external text" href="https://ftp.gnu.org/gnu/binutils/">GNU main mirror</a>.</li></ul>
<ul><li>You can download the desired GCC release by visiting the <a rel="nofollow" class="external text" href="https://gnu.org/software/gcc/">GCC website</a> or directly accessing the <a rel="nofollow" class="external text" href="https://ftp.gnu.org/gnu/gcc/">GNU main mirror</a>.</li></ul>
<p><b>Note:</b> The versioning scheme used is that each fullstop separates a full number, i.e. Binutils 2.20.0 is newer than 2.9.0. This may be confusing, if you have not encountered this (quite common) versioning scheme yet, when looking at an alphanumerically sorted list of tarballs: The file at the bottom of the list is not the latest version! An easy way of getting the latest version is to sort by the last modified date and scrolling to the bottom.
</p><p><b>Note (16-bit C/C++):</b> If you need to build 16-bit C/C++ code, don't use GCC versions 13.X.X and 14.X.X! When accessing global variables, an error occurs: collect2: fatal error: ld terminated with signal 11 [Segmentation fault], core dumped. You can build GCC version 12.1.0 and use it.
</p>
<h3><span class="mw-headline" id="Linux_Users_building_a_System_Compiler">Linux Users building a System Compiler</span></h3>
<p>Your distribution may ship its own patched GCC and Binutils that is customized to work on your particular Linux distribution. You should be able to build a working cross-compiler using the above source code, but you might not be able to build a new system compiler for your current Linux distribution. In that case, try a newer GCC release or get the patched source code.
</p>
<h3><span class="mw-headline" id="Gentoo_Users">Gentoo Users</span></h3>
<p>Gentoo offers <a rel="nofollow" class="external text" href="https://wiki.gentoo.org/wiki/Crossdev">crossdev</a> to set up a cross-development toolchain:
</p>
<pre>   emerge -av crossdev
   crossdev --help
   PORTDIR_OVERLAY="/usr/local/crossdev" crossdev --stage1 --binutils &lt;binutils-version&gt; --gcc &lt;gcc-version&gt; --target &lt;target&gt;
</pre>
<p>This will install a GCC cross-compiler into a "slot", i.e. alongside already-existing compiler versions. You can install several cross-compilers that way, simply by changing target designations. An unfortunate downside is that it will also pull in gentoo patches and pass additional configure options that differ from the official <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a> setup, and they might behave differently.
</p><p>After the compilation finishes successfully, your cross-compiler is callable via &lt;target&gt;-gcc. You can also use gcc-config to toggle between compiler versions should you need to do so. Don't replace your system compiler with a cross-compiler. The package manager will also suggest updates as soon as they become available. 
</p><p>You can uninstall the cross-compiler by calling <i>crossdev --clean &lt;target&gt;</i>. Read the <a rel="nofollow" class="external text" href="https://wiki.gentoo.org/wiki/Cross_build_environment">cross-development</a> document for additional information.
</p><p>Note that the version numbers to binutils and gcc are <i>Gentoo package versions</i>, i.e. there might be a suffix to the "official" (GNU) version that addresses additional patchsets supplied by the Gentoo maintainers. (For example, <i>--binutils 2.24-r3 --gcc 4.8.3</i> is the latest stable package pair at the time of this writing.) You can omit the version numbers to use the latest package available.
</p><p>Portage uses overlays to store packages that are not part of the original package management. Crossdev needs one overlay where it can store its binutils and gcc packages before building them. You can configure one properly, or you can use PORTDIR_OVERLAY to point at where it should keep its package manager files. Using PORTDIR_OVERLAY is not a good idea with existing overlays, but by then you should know how you have personally set them up earlier anyway and how to do it properly. See <a rel="nofollow" class="external autonumber" href="https://wiki.gentoo.org/wiki/Custom_repository#Crossdev">[9]</a>.
</p>
<h3><span id="Nix.28OS.29_Users"></span><span class="mw-headline" id="Nix(OS)_Users">Nix(OS) Users</span></h3>
<p><code>nixpkgs</code> provides cross-compiled versions of most packages and their dependencies/compilers, that includes pre-compiled build tools for cross-compilation for every avaliable architecture in <code>pkgs.pkgsCross</code>. This code snippet declares a nix shell with <code>i686-elf-gcc</code>&#160;:</p><div class="mw-highlight mw-highlight-lang-nix mw-content-ltr mw-highlight-lines" dir="ltr"><pre><span></span><span class="linenos" data-line="1"></span><span class="p">{</span> pkgs <span class="o">?</span> <span class="nb">import</span> <span class="l">&lt;nixpkgs&gt;</span> <span class="p">{}</span> <span class="p">}:</span>
<span class="linenos" data-line="2"></span>
<span class="linenos" data-line="3"></span>pkgs<span class="o">.</span>mkShell <span class="p">{</span>
<span class="linenos" data-line="4"></span>  <span class="ss">nativeBuildInputs =</span>
<span class="linenos" data-line="5"></span>    <span class="k">with</span> pkgs<span class="p">;</span> <span class="p">[</span>
<span class="linenos" data-line="6"></span>        pkgsCross<span class="o">.</span>i686-embedded<span class="o">.</span>buildPackages<span class="o">.</span>gcc
<span class="linenos" data-line="7"></span>    <span class="p">];</span>
<span class="linenos" data-line="8"></span><span class="p">}</span>
</pre></div><p>Read more at <a rel="nofollow" class="external text" href="https://nix.dev/tutorials/cross-compilation.html">the official Nix documentation page for cross-compilation</a>.
</p><h3><span class="mw-headline" id="macOS_Users">macOS Users</span></h3>
<p>macOS users need a replacement libiconv because the system libiconv is seriously out of date. macOS users can download the latest libiconv release by visiting the <a rel="nofollow" class="external text" href="https://gnu.org/software/libiconv/">libiconv website</a> or directly accessing the <a rel="nofollow" class="external text" href="https://ftp.gnu.org/gnu/libiconv/">GNU main FTP mirror</a>. Otherwise you may  get unresolved symbol errors related to libiconv when compiling GCC 4.3 or higher on OS X 10.4 and 10.5.
</p><p>Install a new version (compile it yourself or use MacPorts) and add <tt>--with-libiconv-prefix=/opt/local</tt> (or <tt>/usr/local</tt> if you compiled it yourself) to GCC's <tt>./configure</tt> line. Alternatively you may place the libiconv source as gcc-x.y.z/libiconv and it will be compiled as part of the GCC compilation process. (This trick also works for MPFR, GMP, and MPC).
</p><p>The makefiles of Binutils and GCC use the <code class="mw-highlight mw-highlight-lang-make mw-content-ltr" dir="ltr"><span class="k">$(</span><span class="nv">CC</span><span class="k">)</span><span class="w"></span></code> variable to invoke the compiler. On OS X, this resolves to <code class="mw-highlight mw-highlight-lang-text mw-content-ltr" dir="ltr">gcc</code> by default, which is actually <code class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr">clang</code>. Prior to OS X 10.8, the Clang that came with Xcode's Command Line Tools package was not able to build a working GCC. Users running OS X 10.7 or below may need to find and install GCC, either from <a rel="nofollow" class="external text" href="https://brew.sh">Homebrew</a>, or from somewhere on Apple's website. You can try with the old GCC that comes preinstalled on some macOS versions.
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span><span class="c1"># This is only necessary for OS X users running 10.7 or below.</span>
<span class="nb">export</span> <span class="nv">CC</span><span class="o">=</span>/usr/bin/gcc-4.2
<span class="nb">export</span> <span class="nv">CXX</span><span class="o">=</span>/usr/bin/g++-4.2
<span class="nb">export</span> <span class="nv">CPP</span><span class="o">=</span>/usr/bin/cpp-4.2
<span class="nb">export</span> <span class="nv">LD</span><span class="o">=</span>/usr/bin/gcc-4.2
</pre></div>
<p>You will want to unset these exports once you compiled and installed the cross compiler.
</p><p><b>Note for Lion users:</b> If you're on Lion (or above) chances are that you don't have the "real" GCC since Apple removed it from the Xcode package, but you can still install it. You can do it via Homebrew or by compiling from source, both are perfectly described on <a rel="nofollow" class="external text" href="https://apple.stackexchange.com/a/38247">a StackExchange answer</a>.
</p><p><b>Note for Maverick users:</b> You can build binutils-2.24 and gcc-4.8.3 (possible other version) with Xcode 5.1.1. Note that building GCC with LLVM is not officially supported and may cause interesting bugs, if you are willing to take this risk and save time building host-gcc just to compile a cross-gcc, follow this.
Install GMP, MPFR, Mpc with <a rel="nofollow" class="external text" href="https://www.macports.org/">MacPorts</a>.
</p>
<pre>sudo port install gmp mpfr libmpc
</pre>
<pre>../binutils-2.24/configure --prefix=$PREFIX \
--target=$TARGET \
--enable-interwork --enable-multilib \
--disable-nls --disable-werror
</pre>
<pre>../gcc-4.8.3/configure --prefix=$PREFIX \
--target=$TARGET \
--disable-nls \
--enable-languages=c,c++ --without-headers \
--enable-interwork --enable-multilib \
--with-gmp=/usr --with-mpc=/opt/local --with-mpfr=/opt/local
</pre>
<p><b>Note:</b> There is an issue with port's GMP, so the version from OS X from /usr is used instead.
<b>Note2:</b> If you still have some errors, try making a case-sensitive APFS disk image using disk utility app and build from there
</p>
<h3><span class="mw-headline" id="Windows_Users">Windows Users</span></h3>
<p>Windows users need to set up a Unix-like enviroment such as <a href="MinGW" title="MinGW">MinGW</a> or <a href="Cygwin" title="Cygwin">Cygwin</a>. It may well be worth looking into systems such as Linux and see if they fit your needs, as you commonly use a lot of Unix-like tools in operating systems development and this is much easier from a Unix-like operating system. <b>If you have just installed the basic <a href="Cygwin" title="Cygwin">Cygwin</a> package, you have to run the setup.exe again and install the following packages:</b> GCC, G++, Make, Flex, Bison, Diffutils, libintl-devel, libgmp-devel, libmpfr-devel, libmpc-devel, Texinfo
</p><p>MinGW + MSYS is an option, and as it addresses the native Windows API instead of a POSIX emulation layer, results in a slightly faster toolchain. Some software packages will not build properly under MSYS as they were not designed for use with Windows. As far as this tutorial is concerned, everything that applies to Cygwin also applies to MSYS unless otherwise specified. Make sure you install the C and C++ compilers, and the MSYS Basic System.
</p><p>The "Windows Subsystem for Linux (Beta)", released with the Windows 10 Anniversary update is also an option for using a cross compiler. (Tested 08/08/2016 with GCC 6.1.0 and Binutils 2.27) This cross-compiler works reasonably fast, although being in beta state, it may not be ideal permanent development platform.
</p><p><b>Cygwin note:</b> Cygwin includes your Windows <tt>%PATH%</tt> in its bash <tt>$PATH.</tt> If you were using DJGPP before, this could result in confusion as e.g. calling <tt>GCC</tt> on the Cygwin bash command line would still call the DJGPP compiler. After uninstalling DJGPP, you should delete the DJGPP environment variable and clear the <tt>C:\djgpp</tt> entry (or wherever you installed it) from your <tt>%PATH%</tt>. Likewise, it might be a bad idea to mix build environments in your system PATH variable.
</p><p><b>MinGW note:</b> Some MinGW-specific information on building a cross-toolchain can be found on the <a rel="nofollow" class="external text" href="http://www.mingw.org/wiki/HostedCrossCompilerHOWTO">hosted cross-compiler how-to page</a> on the MinGW homepage.
</p><p><b>Windows Subsystem for Linux (Beta) Note:</b> You cannot have your cross compiler in the /mnt/c/ (or /mnt/"x") areas, as trying to compile your cross-compiler there will generate errors, whereas building to $HOME/opt/cross works perfectly. This is fixed with Windows Update KB3176929
</p>
<h3><span class="mw-headline" id="OpenBSD_Users">OpenBSD Users</span></h3>
<p>OpenBSD users might need to install "gcc" package from ports because base system's GCC is very outdated. If you want to build GCC, try to use the ports' version instead of the latest version available and apply all patches from ports to your build. Also, if the build fails during compiling lto-plugin, a temporary solution is to disable LTO altogether during configure stage of building GCC by adding <tt>--disable-lto</tt>
</p>
<h2><span class="mw-headline" id="The_Build">The Build</span></h2>
<p>You need to decide where to install your new compiler. It is dangerous to replace your current system compiler and installation into system directories is likely a very bad idea. You also need to decide whether the new compiler should be installed globally or just for you. If you want to install it just for you (recommended), installing into <tt>$HOME/opt/gcc-x.y.z</tt> is normally a good idea. If you want to install it globally, installing it into <tt>/usr/local/gcc-x.y.z</tt> is normally a good idea.
</p><p>Please note that we build everything out of the source directory tree, as is considered good practice. Some packages only support building outside, some only inside and some both (but may not offer extensive checking with make). Building GCC inside the source directory tree fails miserably, at least for older versions.
</p><p>As the build can take a long time, it is recommended to make use of make's "-jN" option. This will allow make to use multiple threads to compile the programs, which will speed up things a LOT. Substitute N with a number; a good guideline is the number of core you CPU has, plus one. So for a 4 core CPU, you'll want to use&#160;:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span>make -j5
</pre></div>
<h3><span class="mw-headline" id="Preparation">Preparation</span></h3>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span><span class="nb">export</span> <span class="nv">PREFIX</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$HOME</span><span class="s2">/opt/gcc-x.y.z&quot;</span>
</pre></div>
<h3><span class="mw-headline" id="Binutils">Binutils</span></h3>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span><span class="nb">cd</span> <span class="nv">$HOME</span>/src
mkdir build-binutils
<span class="nb">cd</span> build-binutils
../binutils-x.y.z/configure --prefix<span class="o">=</span><span class="s2">&quot;</span><span class="nv">$PREFIX</span><span class="s2">&quot;</span> --disable-nls --disable-werror
make
make install
</pre></div>
<p><b>--disable-nls</b> tells Binutils not not include native language support. This is basically optional, but reduces dependencies and compile time. It will also result in English-language diagnostics, which the people on the <a rel="nofollow" class="external text" href="http://forum.osdev.org/">Forum</a> understand when you ask your questions.
</p>
<h3><span class="mw-headline" id="GCC">GCC</span></h3>
<dl><dd><i>See also the <a rel="nofollow" class="external text" href="http://gcc.gnu.org/install/configure.html">offical instructions for configuring GCC</a>.</i></dd></dl>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span><span class="nb">cd</span> <span class="nv">$HOME</span>/src


<span class="c1"># If you wish to build these packages as part of GCC:</span>
mv libiconv-x.y.z gcc-x.y.z/libiconv <span class="c1"># Mac OS X users</span>
mv gmp-x.y.z gcc-x.y.z/gmp
mv mpfr-x.y.z gcc-x.y.z/mpfr
mv mpc-x.y.z gcc-x.y.z/mpc

<span class="c1"># Or in new GCC versions, you can ask gcc to download the prerequisites</span>
<span class="nb">cd</span> gcc-x.y.z
./contrib/download_prerequisites
<span class="nb">cd</span> <span class="nv">$HOME</span>/src <span class="c1"># Returning the main src folder</span>

mkdir build-gcc
<span class="nb">cd</span> build-gcc
../gcc-x.y.z/configure --prefix<span class="o">=</span><span class="s2">&quot;</span><span class="nv">$PREFIX</span><span class="s2">&quot;</span> --disable-nls --enable-languages<span class="o">=</span>c,c++
make
make install
</pre></div>
<p><b>--disable-nls</b> is the same as for Binutils above.
</p><p><b>--enable-languages</b> tells GCC to not to compile all the other language frontends it supports, but only C and C++. Even if you aren't going to use C++ to make your OS, you'll need it later on to port GCC.
</p><p><b>--disable-bootstrap</b> tells the compiler to not bootstrap itself against the current system compiler. This results in a much quicker compilation, but if the current and the new compiler differ too much in version, you will get a less robust compiler or weird errors.
</p><p>Building and bootstrapping GCC may take quite a while, so sit back and relax, and enjoy that you are about to use the latest and greatest version of the GNU Compiler Collection.
</p><p>Before you run <tt>make install</tt> and install the new compiler, if you have some additional patience, read the <a rel="nofollow" class="external text" href="http://gcc.gnu.org/install/test.html">official testing instructions</a> and test your compiler for defects.
</p>
<h2><span class="mw-headline" id="Using_the_new_Compiler">Using the new Compiler</span></h2>
<p>You can now run your new compiler by invoking something like:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span><span class="nv">$HOME</span>/opt/gcc-x.y.z/bin/gcc --version
</pre></div>
<p>To use your new compiler simply by invoking <tt>gcc</tt>, add <tt>$HOME/opt/gcc-x.y.z/bin</tt> to your <tt>$PATH</tt> by typing:
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$HOME</span><span class="s2">/opt/gcc-x.y.z/bin:</span><span class="nv">$PATH</span><span class="s2">&quot;</span>
</pre></div>
<p>This command will add your new compiler to your PATH for this shell session. If you wish to use it permanently, add the PATH command to your <tt>~/.profile</tt> configuration shell script or similar. Consult your shell documentation for more information.
</p>
<h2><span class="mw-headline" id="Building_the_Cross-Compiler">Building the Cross-Compiler</span></h2>
<dl><dd><i>Main article:</i> <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a></dd></dl>
<p>Now that you have a system compiler that is up to date, you can build your cross-compiler for your new operating system. You can use the latest and greatest version of GCC as your cross-compiler safely because you use the same version to build it. Once you have built the actual cross-compiler, you can uninstall the compiler we built in this tutorial by removing the installation directory. The cross-compiler will not depend on the compiler that built it, just like our new compiler doesn't depend on the old system compiler it replaced.
</p>
<!-- 
NewPP limit report
Cached time: 20250212010846
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.089 seconds
Real time usage: 1.735 seconds
Preprocessor visited node count: 238/1000000
Post‐expand include size: 15626/2097152 bytes
Template argument size: 106/2097152 bytes
Highest expansion depth: 16/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 4984/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00% 1704.831      1 -total
 38.34%  653.678      1 Preparing_GCC_Build
  0.30%    5.045      2 Template:Rating
  0.25%    4.252      4 Template:If
  0.21%    3.616      4 Template:Show1
  0.06%    1.067      4 Template:Eq
  0.04%    0.742      1 Template:Main
  0.03%    0.514      4 Template:Eq1
  0.02%    0.406      1 Template:Wikitable
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3363-0!canonical and timestamp 20250212010844 and revision id 25043.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Building_GCC&amp;oldid=25043">https://wiki.osdev.org/index.php?title=Building_GCC&amp;oldid=25043</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_duplicate_arguments_in_template_calls&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using duplicate arguments in template calls (page does not exist)">Pages using duplicate arguments in template calls</a></li><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_enclose_attributes&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated enclose attributes (page does not exist)">Pages using deprecated enclose attributes</a></li><li><a href="./Category:Level_1_Tutorials" title="Category:Level 1 Tutorials">Level 1 Tutorials</a></li><li><a href="./Category:Compilers" title="Category:Compilers">Compilers</a></li><li><a href="./Category:Tutorials" title="Category:Tutorials">Tutorials</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Building+GCC" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Building_GCC#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Building_GCC" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Talk:Building_GCC&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Building_GCC"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Building_GCC&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Building_GCC&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Building_GCC" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Building_GCC" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Building_GCC&amp;oldid=25043" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Building_GCC&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 6 August 2020, at 01:47.</li>
	<li id="footer-info-0">This page has been accessed 8,355 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Building_GCC&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.089","walltime":"1.735","ppvisitednodes":{"value":238,"limit":1000000},"postexpandincludesize":{"value":15626,"limit":2097152},"templateargumentsize":{"value":106,"limit":2097152},"expansiondepth":{"value":16,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":4984,"limit":5000000},"timingprofile":["100.00% 1704.831      1 -total"," 38.34%  653.678      1 Preparing_GCC_Build","  0.30%    5.045      2 Template:Rating","  0.25%    4.252      4 Template:If","  0.21%    3.616      4 Template:Show1","  0.06%    1.067      4 Template:Eq","  0.04%    0.742      1 Template:Main","  0.03%    0.514      4 Template:Eq1","  0.02%    0.406      1 Template:Wikitable"]},"cachereport":{"timestamp":"20250212010846","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":1838});});</script>
</body>
</html>