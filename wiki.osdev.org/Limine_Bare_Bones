<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Limine Bare Bones - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"51ec809ac56fd91bcc6c8022","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Limine_Bare_Bones","wgTitle":"Limine Bare Bones","wgCurRevisionId":29324,"wgRevisionId":29324,"wgArticleId":4702,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using duplicate arguments in template calls","Pages using deprecated source tags","Level 1 Tutorials","Bare bones tutorials","Bootloaders","C"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Limine_Bare_Bones","wgRelevantArticleId":4702,"wgIsProbablyEditable":false,
"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","mmv.head","mmv.bootstrap.autostart","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Limine_Bare_Bones rootpage-Limine_Bare_Bones skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Limine Bare Bones</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Limine_Bare_Bones#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Limine_Bare_Bones#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p><big><b>WAIT! Have you read <a href="Getting_Started" title="Getting Started">Getting Started</a>, <a href="Beginner_Mistakes" title="Beginner Mistakes">Beginner Mistakes</a>, and some of the related <a href="./Category:OS_theory" title="Category:OS theory">OS theory</a>?</b></big>
</p>
</td></tr></tbody></table>
</center><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear:right; border:1px solid #aaaaaa; background:#eee; text-align:center;;"><tbody><tr><th>Difficulty level</th></tr><tr><td><a href="./File:Difficulty_1.png" class="image"><img alt="Difficulty 1.png" src="images/d/d3/Difficulty_1.png" decoding="async" width="46" height="14" data-file-width="46" data-file-height="14" /></a><br />Beginner</td></tr></tbody></table>
<table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear: right; border:1px solid #aaaaaa; background:#eee; text-align:center; width:200px; ;"><tbody><tr><th style="background:#ffce7b; padding:0.3em; font-size:1.1em;"><a href="Kernels" class="mw-redirect" title="Kernels">Kernel Designs</a></th></tr><tr><th>Models</th></tr><tr><td><div>
<p><a href="Monolithic_Kernel" title="Monolithic Kernel">Monolithic Kernel</a><br />
<a href="Microkernel" title="Microkernel">Microkernel</a><br />
<a href="Hybrid_Kernel" title="Hybrid Kernel">Hybrid Kernel</a><br />
<a href="Exokernel" title="Exokernel">Exokernel</a><br />
<a href="Nanokernel" class="mw-redirect" title="Nanokernel">Nano/Picokernel</a><br />
<a href="Exokernel#Cache_Kernel" title="Exokernel">Cache Kernel</a><br />
<a href="Exokernel#Virtualizing_Kernel" title="Exokernel">Virtualizing Kernel</a><br />
<a href="Megalithic_Kernel" title="Megalithic Kernel">Megalithic Kernel</a><br />
</p>
</div></td></tr><tr><th>Other Concepts</th></tr><tr><td><div>
<p><a href="Modular_Kernel" title="Modular Kernel">Modular Kernel</a><br />
<a href="Higher_Half_Kernel" title="Higher Half Kernel">Higher Half Kernel</a><br />
<a href="Creating_a_64-bit_kernel" title="Creating a 64-bit kernel">64-bit Kernel</a><br />
</p>
</div></td></tr></tbody></table>
<p>The Limine Boot Protocol is the native boot protocol provided by the <a href="Limine" title="Limine">Limine</a> bootloader. It is designed to overcome shortcomings of common boot protocols used by hobbyist OS developers, such as <a href="Multiboot" title="Multiboot">Multiboot</a>.
</p><p>It provides cutting edge features such as 5-level paging support, 64-bit <a href="Long_Mode" class="mw-redirect" title="Long Mode">Long Mode</a> support, and direct higher half kernel loading.
</p><p>The Limine boot protocol is firmware and architecture agnostic. It supports x86-64, aarch64, riscv64, and loongarch64.
</p><p>This article will demonstrate how to write a small Limine-compliant x86-64 kernel in (GNU) <a href="C" title="C">C</a>, and boot it using the <a href="Limine" title="Limine">Limine</a> bootloader.
</p><p>Additionally, it is highly recommended to check out <a rel="nofollow" class="external text" href="https://github.com/limine-bootloader/limine-c-template-x86-64">this repository</a> as it provides more complete, buildable, portable template code to go along with this guide.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Limine_Bare_Bones#Overview"><span class="tocnumber">1</span> <span class="toctext">Overview</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="Limine_Bare_Bones#src/main.c"><span class="tocnumber">1.1</span> <span class="toctext">src/main.c</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="Limine_Bare_Bones#linker.ld"><span class="tocnumber">1.2</span> <span class="toctext">linker.ld</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="Limine_Bare_Bones#Building_the_kernel_and_creating_an_image"><span class="tocnumber">2</span> <span class="toctext">Building the kernel and creating an image</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="Limine_Bare_Bones#GNUmakefile"><span class="tocnumber">2.1</span> <span class="toctext">GNUmakefile</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="Limine_Bare_Bones#limine.conf"><span class="tocnumber">2.2</span> <span class="toctext">limine.conf</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Limine_Bare_Bones#Compiling_the_kernel"><span class="tocnumber">2.3</span> <span class="toctext">Compiling the kernel</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="Limine_Bare_Bones#Compiling_the_kernel_on_macOS"><span class="tocnumber">2.4</span> <span class="toctext">Compiling the kernel on macOS</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Limine_Bare_Bones#Creating_the_image"><span class="tocnumber">2.5</span> <span class="toctext">Creating the image</span></a>
<ul>
<li class="toclevel-3 tocsection-10"><a href="Limine_Bare_Bones#Creating_an_ISO"><span class="tocnumber">2.5.1</span> <span class="toctext">Creating an ISO</span></a></li>
<li class="toclevel-3 tocsection-11"><a href="Limine_Bare_Bones#Creating_a_hard_disk/USB_drive_image"><span class="tocnumber">2.5.2</span> <span class="toctext">Creating a hard disk/USB drive image</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-12"><a href="Limine_Bare_Bones#Conclusions"><span class="tocnumber">3</span> <span class="toctext">Conclusions</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="Limine_Bare_Bones#See_Also"><span class="tocnumber">4</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-14"><a href="Limine_Bare_Bones#Articles"><span class="tocnumber">4.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="Limine_Bare_Bones#External_Links"><span class="tocnumber">4.2</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Overview">Overview</span></h2>
<p>For this example, we will create these 2 files to create the basic directory tree of our project:
</p>
<ul><li>src/main.c</li>
<li>linker.ld</li></ul>
<p>As one may notice, there is no "entry point" assembly stub, as one is not necessary with the Limine protocol when using a language which can make use of a standard SysV x86 <a href="Calling_Conventions" title="Calling Conventions">calling convention</a>.
</p><p>Furthermore, we will download the header file <code>limine.h</code> which defines structures and constants that we will use to interact with the bootloader from <a rel="nofollow" class="external text" href="https://github.com/limine-bootloader/limine/raw/trunk/limine.h">here</a>, and place it in the <code>src</code> directory.
</p><p>Obviously, this is just a bare bones example, and one should always refer to the <a rel="nofollow" class="external text" href="https://github.com/limine-bootloader/limine/blob/trunk/PROTOCOL.md">Limine protocol specification</a> for more details and information.
</p>
<h3><span id="src.2Fmain.c"></span><span class="mw-headline" id="src/main.c">src/main.c</span></h3>
<p>This is the kernel "main".
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdint.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stddef.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdbool.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;limine.h&gt;</span><span class="cp"></span>

<span class="c1">// Set the base revision to 3, this is recommended as this is the latest</span>
<span class="c1">// base revision described by the Limine boot protocol specification.</span>
<span class="c1">// See specification for further info.</span>

<span class="n">__attribute__</span><span class="p">((</span><span class="n">used</span><span class="p">,</span><span class="w"> </span><span class="n">section</span><span class="p">(</span><span class="s">&quot;.limine_requests&quot;</span><span class="p">)))</span><span class="w"></span>
<span class="k">static</span><span class="w"> </span><span class="k">volatile</span><span class="w"> </span><span class="n">LIMINE_BASE_REVISION</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span><span class="w"></span>

<span class="c1">// The Limine requests can be placed anywhere, but it is important that</span>
<span class="c1">// the compiler does not optimise them away, so, usually, they should</span>
<span class="c1">// be made volatile or equivalent, _and_ they should be accessed at least</span>
<span class="c1">// once or marked as used with the &quot;used&quot; attribute as done here.</span>

<span class="n">__attribute__</span><span class="p">((</span><span class="n">used</span><span class="p">,</span><span class="w"> </span><span class="n">section</span><span class="p">(</span><span class="s">&quot;.limine_requests&quot;</span><span class="p">)))</span><span class="w"></span>
<span class="k">static</span><span class="w"> </span><span class="k">volatile</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">limine_framebuffer_request</span><span class="w"> </span><span class="n">framebuffer_request</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LIMINE_FRAMEBUFFER_REQUEST</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="p">.</span><span class="n">revision</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="w"></span>
<span class="p">};</span><span class="w"></span>

<span class="c1">// Finally, define the start and end markers for the Limine requests.</span>
<span class="c1">// These can also be moved anywhere, to any .c file, as seen fit.</span>

<span class="n">__attribute__</span><span class="p">((</span><span class="n">used</span><span class="p">,</span><span class="w"> </span><span class="n">section</span><span class="p">(</span><span class="s">&quot;.limine_requests_start&quot;</span><span class="p">)))</span><span class="w"></span>
<span class="k">static</span><span class="w"> </span><span class="k">volatile</span><span class="w"> </span><span class="n">LIMINE_REQUESTS_START_MARKER</span><span class="p">;</span><span class="w"></span>

<span class="n">__attribute__</span><span class="p">((</span><span class="n">used</span><span class="p">,</span><span class="w"> </span><span class="n">section</span><span class="p">(</span><span class="s">&quot;.limine_requests_end&quot;</span><span class="p">)))</span><span class="w"></span>
<span class="k">static</span><span class="w"> </span><span class="k">volatile</span><span class="w"> </span><span class="n">LIMINE_REQUESTS_END_MARKER</span><span class="p">;</span><span class="w"></span>

<span class="c1">// GCC and Clang reserve the right to generate calls to the following</span>
<span class="c1">// 4 functions even if they are not directly called.</span>
<span class="c1">// Implement them as the C specification mandates.</span>
<span class="c1">// DO NOT remove or rename these functions, or stuff will eventually break!</span>
<span class="c1">// They CAN be moved to a different .c file.</span>

<span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="nf">memcpy</span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">dest</span><span class="p">,</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">src</span><span class="p">,</span><span class="w"> </span><span class="kt">size_t</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="n">pdest</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="n">dest</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="n">psrc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="n">src</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">size_t</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">pdest</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">psrc</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">dest</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="nf">memset</span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">c</span><span class="p">,</span><span class="w"> </span><span class="kt">size_t</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="n">s</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">size_t</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint8_t</span><span class="p">)</span><span class="n">c</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">s</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="nf">memmove</span><span class="p">(</span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">dest</span><span class="p">,</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">src</span><span class="p">,</span><span class="w"> </span><span class="kt">size_t</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="n">pdest</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="n">dest</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="n">psrc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="n">src</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">src</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">dest</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">size_t</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">            </span><span class="n">pdest</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">psrc</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="w"></span>
<span class="w">        </span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">src</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">dest</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">size_t</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">--</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">            </span><span class="n">pdest</span><span class="p">[</span><span class="n">i</span><span class="mi">-1</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">psrc</span><span class="p">[</span><span class="n">i</span><span class="mi">-1</span><span class="p">];</span><span class="w"></span>
<span class="w">        </span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">dest</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="kt">int</span><span class="w"> </span><span class="nf">memcmp</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">s1</span><span class="p">,</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="n">s2</span><span class="p">,</span><span class="w"> </span><span class="kt">size_t</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="n">p1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="n">s1</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="n">p2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="n">s2</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">size_t</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">p1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">p2</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="n">p1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">p2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="mi">-1</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="c1">// Halt and catch fire function.</span>
<span class="k">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">hcf</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(;;)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="k">asm</span><span class="w"> </span><span class="p">(</span><span class="s">&quot;hlt&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="c1">// The following will be our kernel&#39;s entry point.</span>
<span class="c1">// If renaming kmain() to something else, make sure to change the</span>
<span class="c1">// linker script accordingly.</span>
<span class="kt">void</span><span class="w"> </span><span class="nf">kmain</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="c1">// Ensure the bootloader actually understands our base revision (see spec).</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">LIMINE_BASE_REVISION_SUPPORTED</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="nb">false</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">hcf</span><span class="p">();</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="c1">// Ensure we got a framebuffer.</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">framebuffer_request</span><span class="p">.</span><span class="n">response</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="nb">NULL</span><span class="w"></span>
<span class="w">     </span><span class="o">||</span><span class="w"> </span><span class="n">framebuffer_request</span><span class="p">.</span><span class="n">response</span><span class="o">-&gt;</span><span class="n">framebuffer_count</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">hcf</span><span class="p">();</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="c1">// Fetch the first framebuffer.</span>
<span class="w">    </span><span class="k">struct</span><span class="w"> </span><span class="nc">limine_framebuffer</span><span class="w"> </span><span class="o">*</span><span class="n">framebuffer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">framebuffer_request</span><span class="p">.</span><span class="n">response</span><span class="o">-&gt;</span><span class="n">framebuffers</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="w"></span>

<span class="w">    </span><span class="c1">// Note: we assume the framebuffer model is RGB with 32-bit pixels.</span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">size_t</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">100</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="k">volatile</span><span class="w"> </span><span class="kt">uint32_t</span><span class="w"> </span><span class="o">*</span><span class="n">fb_ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">framebuffer</span><span class="o">-&gt;</span><span class="n">address</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="n">fb_ptr</span><span class="p">[</span><span class="n">i</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">framebuffer</span><span class="o">-&gt;</span><span class="n">pitch</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">4</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0xffffff</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>

<span class="w">    </span><span class="c1">// We&#39;re done, just hang...</span>
<span class="w">    </span><span class="n">hcf</span><span class="p">();</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="linker.ld">linker.ld</span></h3>
<p>This is going to be our linker script describing where our sections will end up in memory.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cm">/* Tell the linker that we want an x86_64 ELF64 output file */</span><span class="w"></span>
<span class="n">OUTPUT_FORMAT</span><span class="p">(</span><span class="n">elf64</span><span class="o">-</span><span class="n">x86</span><span class="mi">-64</span><span class="p">)</span><span class="w"></span>

<span class="cm">/* We want the symbol kmain to be our entry point */</span><span class="w"></span>
<span class="n">ENTRY</span><span class="p">(</span><span class="n">kmain</span><span class="p">)</span><span class="w"></span>

<span class="cm">/* Define the program headers we want so the bootloader gives us the right */</span><span class="w"></span>
<span class="cm">/* MMU permissions; this also allows us to exert more control over the linking */</span><span class="w"></span>
<span class="cm">/* process. */</span><span class="w"></span>
<span class="n">PHDRS</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">limine_requests</span><span class="w"> </span><span class="n">PT_LOAD</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">text</span><span class="w"> </span><span class="n">PT_LOAD</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">rodata</span><span class="w"> </span><span class="n">PT_LOAD</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">data</span><span class="w"> </span><span class="n">PT_LOAD</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>

<span class="n">SECTIONS</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* We want to be placed in the topmost 2GiB of the address space, for optimisations */</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* and because that is what the Limine spec mandates. */</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* Any address in this region will do, but often 0xffffffff80000000 is chosen as */</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* that is the beginning of the region. */</span><span class="w"></span>
<span class="w">    </span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0xffffffff80000000</span><span class="p">;</span><span class="w"></span>

<span class="w">    </span><span class="cm">/* Define a section to contain the Limine requests and assign it to its own PHDR */</span><span class="w"></span>
<span class="w">    </span><span class="p">.</span><span class="n">limine_requests</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">KEEP</span><span class="p">(</span><span class="o">*</span><span class="p">(.</span><span class="n">limine_requests_start</span><span class="p">))</span><span class="w"></span>
<span class="w">        </span><span class="n">KEEP</span><span class="p">(</span><span class="o">*</span><span class="p">(.</span><span class="n">limine_requests</span><span class="p">))</span><span class="w"></span>
<span class="w">        </span><span class="n">KEEP</span><span class="p">(</span><span class="o">*</span><span class="p">(.</span><span class="n">limine_requests_end</span><span class="p">))</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="o">:</span><span class="n">limine_requests</span><span class="w"></span>

<span class="w">    </span><span class="cm">/* Move to the next memory page for .text */</span><span class="w"></span>
<span class="w">    </span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="n">CONSTANT</span><span class="p">(</span><span class="n">MAXPAGESIZE</span><span class="p">));</span><span class="w"></span>

<span class="w">    </span><span class="p">.</span><span class="n">text</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="o">*</span><span class="p">(.</span><span class="n">text</span><span class="w"> </span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="o">:</span><span class="n">text</span><span class="w"></span>

<span class="w">    </span><span class="cm">/* Move to the next memory page for .rodata */</span><span class="w"></span>
<span class="w">    </span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="n">CONSTANT</span><span class="p">(</span><span class="n">MAXPAGESIZE</span><span class="p">));</span><span class="w"></span>

<span class="w">    </span><span class="p">.</span><span class="n">rodata</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="o">*</span><span class="p">(.</span><span class="n">rodata</span><span class="w"> </span><span class="p">.</span><span class="n">rodata</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="o">:</span><span class="n">rodata</span><span class="w"></span>

<span class="w">    </span><span class="cm">/* Move to the next memory page for .data */</span><span class="w"></span>
<span class="w">    </span><span class="p">.</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ALIGN</span><span class="p">(</span><span class="n">CONSTANT</span><span class="p">(</span><span class="n">MAXPAGESIZE</span><span class="p">));</span><span class="w"></span>

<span class="w">    </span><span class="p">.</span><span class="n">data</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="o">*</span><span class="p">(.</span><span class="n">data</span><span class="w"> </span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="o">:</span><span class="n">data</span><span class="w"></span>

<span class="w">    </span><span class="cm">/* NOTE: .bss needs to be the last thing mapped to :data, otherwise lots of */</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* unnecessary zeros will be written to the binary. */</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* If you need, for example, .init_array and .fini_array, those should be placed */</span><span class="w"></span>
<span class="w">    </span><span class="cm">/* above this. */</span><span class="w"></span>
<span class="w">    </span><span class="p">.</span><span class="n">bss</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="o">*</span><span class="p">(.</span><span class="n">bss</span><span class="w"> </span><span class="p">.</span><span class="n">bss</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">        </span><span class="o">*</span><span class="p">(</span><span class="n">COMMON</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="o">:</span><span class="n">data</span><span class="w"></span>

<span class="w">    </span><span class="cm">/* Discard .note.* and .eh_frame* since they may cause issues on some hosts. */</span><span class="w"></span>
<span class="w">    </span><span class="o">/</span><span class="n">DISCARD</span><span class="o">/</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="o">*</span><span class="p">(.</span><span class="n">eh_frame</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">        </span><span class="o">*</span><span class="p">(.</span><span class="n">note</span><span class="w"> </span><span class="p">.</span><span class="n">note</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="Building_the_kernel_and_creating_an_image">Building the kernel and creating an image</span></h2>
<h3><span class="mw-headline" id="GNUmakefile">GNUmakefile</span></h3>
<p>In order to build our kernel, we are going to use a Makefile. Since we're going to use
GNU make specific features, we call this file <code>GNUmakefile</code> instead, so only
GNU make will process it.
</p>
<div class="mw-highlight mw-highlight-lang-make mw-content-ltr" dir="ltr"><pre><span></span><span class="c"># Nuke built-in rules and variables.</span>
<span class="nv">MAKEFLAGS</span> <span class="o">+=</span> -rR
<span class="nf">.SUFFIXES</span><span class="o">:</span>

<span class="c"># This is the name that our final executable will have.</span>
<span class="c"># Change as needed.</span>
<span class="nf">override OUTPUT </span><span class="o">:</span>= <span class="n">myos</span>

<span class="c"># User controllable C compiler command.</span>
<span class="nv">CC</span> <span class="o">:=</span> cc

<span class="c"># User controllable C flags.</span>
<span class="nv">CFLAGS</span> <span class="o">:=</span> -g -O2 -pipe

<span class="c"># User controllable C preprocessor flags. We set none by default.</span>
<span class="nv">CPPFLAGS</span> <span class="o">:=</span>

<span class="c"># User controllable nasm flags.</span>
<span class="nv">NASMFLAGS</span> <span class="o">:=</span> -F dwarf -g

<span class="c"># User controllable linker flags. We set none by default.</span>
<span class="nv">LDFLAGS</span> <span class="o">:=</span>

<span class="c"># Check if CC is Clang.</span>
<span class="nf">override CC_IS_CLANG </span><span class="o">:</span>= <span class="k">$(</span><span class="nv">shell</span>&#160;! <span class="k">$(</span><span class="nv">CC</span><span class="k">)</span> <span class="nv">--version</span> <span class="nv">2</span>&gt;/<span class="nv">dev</span>/<span class="nv">null</span> | <span class="nv">grep</span> &#39;<span class="nv">clang</span>&#39; &gt;/<span class="nv">dev</span>/<span class="nv">null</span> <span class="nv">2</span>&gt;&amp;<span class="nv">1</span>; <span class="nv">echo</span> <span class="k">$$</span>?<span class="k">)</span>

<span class="c"># If the C compiler is Clang, set the target as needed.</span>
<span class="cp">ifeq ($(CC_IS_CLANG),1)</span>
    override <span class="nv">CC</span> <span class="o">+=</span> <span class="se">\</span>
        -target x86_64-unknown-none
<span class="cp">endif</span>

<span class="c"># Internal C flags that should not be changed by the user.</span>
<span class="err">override</span><span class="w"> </span><span class="nv">CFLAGS</span> <span class="o">+=</span> <span class="se">\</span>
    -Wall <span class="se">\</span>
    -Wextra <span class="se">\</span>
    -std<span class="o">=</span>gnu11 <span class="se">\</span>
    -ffreestanding <span class="se">\</span>
    -fno-stack-protector <span class="se">\</span>
    -fno-stack-check <span class="se">\</span>
    -fno-PIC <span class="se">\</span>
    -m64 <span class="se">\</span>
    -march<span class="o">=</span>x86-64 <span class="se">\</span>
    -mno-80387 <span class="se">\</span>
    -mno-mmx <span class="se">\</span>
    -mno-sse <span class="se">\</span>
    -mno-sse2 <span class="se">\</span>
    -mno-red-zone <span class="se">\</span>
    -mcmodel<span class="o">=</span>kernel

<span class="c"># Internal C preprocessor flags that should not be changed by the user.</span>
<span class="nf">override CPPFLAGS </span><span class="o">:</span>= \
    -<span class="n">I</span> <span class="n">src</span> \
    <span class="k">$(</span><span class="nv">CPPFLAGS</span><span class="k">)</span> \
    -<span class="n">DLIMINE_API_REVISION</span>=2 \
    -<span class="n">MMD</span> \
    -<span class="n">MP</span>

<span class="c"># Internal nasm flags that should not be changed by the user.</span>
<span class="err">override</span><span class="w"> </span><span class="nv">NASMFLAGS</span> <span class="o">+=</span> <span class="se">\</span>
    -Wall <span class="se">\</span>
    -f elf64

<span class="c"># Internal linker flags that should not be changed by the user.</span>
<span class="err">override</span><span class="w"> </span><span class="nv">LDFLAGS</span> <span class="o">+=</span> <span class="se">\</span>
    -Wl,-m,elf_x86_64 <span class="se">\</span>
    -Wl,--build-id<span class="o">=</span>none <span class="se">\</span>
    -nostdlib <span class="se">\</span>
    -static <span class="se">\</span>
    -z max-page-size<span class="o">=</span>0x1000 <span class="se">\</span>
    -T linker.ld

<span class="c"># Use &quot;find&quot; to glob all *.c, *.S, and *.asm files in the tree and obtain the</span>
<span class="c"># object and header dependency file names.</span>
<span class="nf">override SRCFILES </span><span class="o">:</span>= <span class="k">$(</span><span class="nv">shell</span> <span class="nv">cd</span> <span class="nv">src</span> &amp;&amp; <span class="nv">find</span> <span class="nv">-L</span> * <span class="nv">-type</span> <span class="nv">f</span> | <span class="nv">LC_ALL</span>=<span class="nv">C</span> <span class="nv">sort</span><span class="k">)</span>
<span class="nf">override CFILES </span><span class="o">:</span>= <span class="k">$(</span><span class="nv">filter</span>&#160;%<span class="nv">.c</span>,<span class="k">$(</span><span class="nv">SRCFILES</span><span class="k">))</span>
<span class="nf">override ASFILES </span><span class="o">:</span>= <span class="k">$(</span><span class="nv">filter</span>&#160;%<span class="nv">.S</span>,<span class="k">$(</span><span class="nv">SRCFILES</span><span class="k">))</span>
<span class="nf">override NASMFILES </span><span class="o">:</span>= <span class="k">$(</span><span class="nv">filter</span>&#160;%<span class="nv">.asm</span>,<span class="k">$(</span><span class="nv">SRCFILES</span><span class="k">))</span>
<span class="nf">override OBJ </span><span class="o">:</span>= <span class="k">$(</span><span class="nv">addprefix</span> <span class="nv">obj</span>/,<span class="k">$(</span><span class="nv">CFILES</span>:<span class="nv">.c</span>=<span class="nv">.c.o</span><span class="k">)</span> <span class="k">$(</span><span class="nv">ASFILES</span>:<span class="nv">.S</span>=<span class="nv">.S.o</span><span class="k">)</span> <span class="k">$(</span><span class="nv">NASMFILES</span>:<span class="nv">.asm</span>=<span class="nv">.asm.o</span><span class="k">))</span>
<span class="nf">override HEADER_DEPS </span><span class="o">:</span>= <span class="k">$(</span><span class="nv">addprefix</span> <span class="nv">obj</span>/,<span class="k">$(</span><span class="nv">CFILES</span>:<span class="nv">.c</span>=<span class="nv">.c.d</span><span class="k">)</span> <span class="k">$(</span><span class="nv">ASFILES</span>:<span class="nv">.S</span>=<span class="nv">.S.d</span><span class="k">))</span>

<span class="c"># Default target. This must come first, before header dependencies.</span>
<span class="nf">.PHONY</span><span class="o">:</span> <span class="n">all</span>
<span class="nf">all</span><span class="o">:</span> <span class="n">bin</span>/<span class="k">$(</span><span class="nv">OUTPUT</span><span class="k">)</span>

<span class="c"># Include header dependencies.</span>
<span class="cp">-include $(HEADER_DEPS)</span>

<span class="c"># Link rules for the final executable.</span>
<span class="nf">bin/$(OUTPUT)</span><span class="o">:</span> <span class="n">GNUmakefile</span> <span class="n">linker</span>.<span class="n">ld</span> <span class="k">$(</span><span class="nv">OBJ</span><span class="k">)</span>
	mkdir -p <span class="s2">&quot;</span><span class="nv">$$</span><span class="s2">(dirname </span><span class="nv">$@</span><span class="s2">)&quot;</span>
	<span class="k">$(</span>CC<span class="k">)</span> <span class="k">$(</span>CFLAGS<span class="k">)</span> <span class="k">$(</span>LDFLAGS<span class="k">)</span> <span class="k">$(</span>OBJ<span class="k">)</span> -o <span class="nv">$@</span>

<span class="c"># Compilation rules for *.c files.</span>
<span class="nf">obj/%.c.o</span><span class="o">:</span> <span class="n">src</span>/%.<span class="n">c</span> <span class="n">GNUmakefile</span>
	mkdir -p <span class="s2">&quot;</span><span class="nv">$$</span><span class="s2">(dirname </span><span class="nv">$@</span><span class="s2">)&quot;</span>
	<span class="k">$(</span>CC<span class="k">)</span> <span class="k">$(</span>CFLAGS<span class="k">)</span> <span class="k">$(</span>CPPFLAGS<span class="k">)</span> -c $&lt; -o <span class="nv">$@</span>

<span class="c"># Compilation rules for *.S files.</span>
<span class="nf">obj/%.S.o</span><span class="o">:</span> <span class="n">src</span>/%.<span class="n">S</span> <span class="n">GNUmakefile</span>
	mkdir -p <span class="s2">&quot;</span><span class="nv">$$</span><span class="s2">(dirname </span><span class="nv">$@</span><span class="s2">)&quot;</span>
	<span class="k">$(</span>CC<span class="k">)</span> <span class="k">$(</span>CFLAGS<span class="k">)</span> <span class="k">$(</span>CPPFLAGS<span class="k">)</span> -c $&lt; -o <span class="nv">$@</span>

<span class="c"># Compilation rules for *.asm (nasm) files.</span>
<span class="nf">obj/%.asm.o</span><span class="o">:</span> <span class="n">src</span>/%.<span class="n">asm</span> <span class="n">GNUmakefile</span>
	mkdir -p <span class="s2">&quot;</span><span class="nv">$$</span><span class="s2">(dirname </span><span class="nv">$@</span><span class="s2">)&quot;</span>
	nasm <span class="k">$(</span>NASMFLAGS<span class="k">)</span> $&lt; -o <span class="nv">$@</span>

<span class="c"># Remove object files and the final executable.</span>
<span class="nf">.PHONY</span><span class="o">:</span> <span class="n">clean</span>
<span class="nf">clean</span><span class="o">:</span>
	rm -rf bin obj
</pre></div>
<h3><span class="mw-headline" id="limine.conf">limine.conf</span></h3>
<p>This file is parsed by Limine and it describes boot entries and other bootloader configuration variables. Further information <a rel="nofollow" class="external text" href="https://github.com/limine-bootloader/limine/blob/trunk/CONFIG.md">here</a>.
</p>
<div class="mw-highlight mw-highlight-lang-ini mw-content-ltr" dir="ltr"><pre><span></span><span class="c1"># Timeout in seconds that Limine will use before automatically booting.</span><span class="w"></span>
<span class="na">timeout: 5</span><span class="w"></span>

<span class="c1"># The entry name that will be displayed in the boot menu.</span><span class="w"></span>
<span class="na">/myOS</span><span class="w"></span>
<span class="w">    </span><span class="c1"># We use the Limine boot protocol.</span><span class="w"></span>
<span class="w">    </span><span class="na">protocol: limine</span><span class="w"></span>

<span class="w">    </span><span class="c1"># Path to the kernel to boot. boot():/ represents the partition on which limine.conf is located.</span><span class="w"></span>
<span class="w">    </span><span class="na">path: boot():/boot/myos</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="Compiling_the_kernel">Compiling the kernel</span></h3>
<p>We can now build our example kernel by running <code>make</code>. This command, if successful, should generate, inside the <code>bin</code> directory, a file called <code>myos</code> (or the chosen kernel name). This is our Limine protocol-compliant kernel executable.
</p>
<h3><span class="mw-headline" id="Compiling_the_kernel_on_macOS">Compiling the kernel on macOS</span></h3>
<p><i>If you are not using macOS, you can skip this section.</i>
</p><p>The macOS Xcode toolchain uses Mach-O binaries, and not the ELF binaries required for this Limine-compliant kernel. A solution is to build a <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a>, or to obtain one from <a rel="nofollow" class="external text" href="https://brew.sh">homebrew</a> by installing the <code>x86_64-elf-gcc</code> package. After one of these is done, build using <code>make CC=x86_64-elf-gcc</code>.
</p>
<h3><span class="mw-headline" id="Creating_the_image">Creating the image</span></h3>
<p>We can now create either an ISO or a hard disk/USB drive image with our kernel on it. <a href="Limine" title="Limine">Limine</a> can boot on both <a href="BIOS" title="BIOS">BIOS</a> and <a href="UEFI" title="UEFI">UEFI</a> if the image is set up to do so, which is what we are going to do.
</p>
<h4><span class="mw-headline" id="Creating_an_ISO">Creating an ISO</span></h4>
<p>In this example we are going to create a CD-ROM ISO capable of booting on both <a href="UEFI" title="UEFI">UEFI</a> and legacy <a href="BIOS" title="BIOS">BIOS</a> systems.
</p><p>For this to work, we will need the <code>xorriso</code> utility.
</p><p>These are shell commands. They can also be compiled into a script or Makefile.
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span><span class="c1"># Download the latest Limine binary release for the 8.x branch.</span>
git clone https://github.com/limine-bootloader/limine.git --branch<span class="o">=</span>v8.x-binary --depth<span class="o">=</span><span class="m">1</span>

<span class="c1"># Build &quot;limine&quot; utility.</span>
make -C limine

<span class="c1"># Create a directory which will be our ISO root.</span>
mkdir -p iso_root

<span class="c1"># Copy the relevant files over.</span>
mkdir -p iso_root/boot
cp -v bin/myos iso_root/boot/
mkdir -p iso_root/boot/limine
cp -v limine.conf limine/limine-bios.sys limine/limine-bios-cd.bin <span class="se">\</span>
      limine/limine-uefi-cd.bin iso_root/boot/limine/

<span class="c1"># Create the EFI boot tree and copy Limine&#39;s EFI executables over.</span>
mkdir -p iso_root/EFI/BOOT
cp -v limine/BOOTX64.EFI iso_root/EFI/BOOT/
cp -v limine/BOOTIA32.EFI iso_root/EFI/BOOT/

<span class="c1"># Create the bootable ISO.</span>
xorriso -as mkisofs -R -r -J -b boot/limine/limine-bios-cd.bin <span class="se">\</span>
        -no-emul-boot -boot-load-size <span class="m">4</span> -boot-info-table -hfsplus <span class="se">\</span>
        -apm-block-size <span class="m">2048</span> --efi-boot boot/limine/limine-uefi-cd.bin <span class="se">\</span>
        -efi-boot-part --efi-boot-image --protective-msdos-label <span class="se">\</span>
        iso_root -o image.iso

<span class="c1"># Install Limine stage 1 and 2 for legacy BIOS boot.</span>
./limine/limine bios-install image.iso
</pre></div>
<h4><span id="Creating_a_hard_disk.2FUSB_drive_image"></span><span class="mw-headline" id="Creating_a_hard_disk/USB_drive_image">Creating a hard disk/USB drive image</span></h4>
<p>In this example, we'll create a <a href="GPT" title="GPT">GPT</a> partition table using <code>sgdisk</code>, containing a single FAT partition, also known as the ESP in EFI terminology, which will store our kernel, configs, and bootloader.
</p><p>This example is more involved and is made up of more steps than creating an ISO image.
</p><p>These are shell commands. They can also be compiled into a script or Makefile.
</p>
<div class="mw-highlight mw-highlight-lang-bash mw-content-ltr" dir="ltr"><pre><span></span><span class="c1"># Create an empty zeroed-out 64MiB image file.</span>
dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">bs</span><span class="o">=</span>1M <span class="nv">count</span><span class="o">=</span><span class="m">0</span> <span class="nv">seek</span><span class="o">=</span><span class="m">64</span> <span class="nv">of</span><span class="o">=</span>image.hdd

<span class="c1"># Create a GPT partition table.</span>
<span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/sbin:/sbin sgdisk image.hdd -n <span class="m">1</span>:2048 -t <span class="m">1</span>:ef00

<span class="c1"># Download the latest Limine binary release for the 8.x branch.</span>
git clone https://github.com/limine-bootloader/limine.git --branch<span class="o">=</span>v8.x-binary --depth<span class="o">=</span><span class="m">1</span>

<span class="c1"># Build &quot;limine&quot; utility.</span>
make -C limine

<span class="c1"># Install the Limine BIOS stages onto the image.</span>
./limine/limine bios-install image.hdd

<span class="c1"># Format the image as fat32.</span>
mformat -i image.hdd@@1M

<span class="c1"># Make relevant subdirectories.</span>
mmd -i image.hdd@@1M&#160;::/EFI&#160;::/EFI/BOOT&#160;::/boot&#160;::/boot/limine

<span class="c1"># Copy over the relevant files.</span>
mcopy -i image.hdd@@1M bin/myos&#160;::/boot
mcopy -i image.hdd@@1M limine.conf limine/limine-bios.sys&#160;::/boot/limine
mcopy -i image.hdd@@1M limine/BOOTX64.EFI&#160;::/EFI/BOOT
mcopy -i image.hdd@@1M limine/BOOTIA32.EFI&#160;::/EFI/BOOT
</pre></div>
<h2><span class="mw-headline" id="Conclusions">Conclusions</span></h2>
<p>If everything above has been completed successfully, you should now have a bootable ISO or hard drive/USB image containing your 64-bit higher half Limine protocol-compliant kernel and Limine to boot it. Once the kernel is successfully booted, you should see a line printed on screen from the top left corner.
</p>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<h3><span class="mw-headline" id="Articles">Articles</span></h3>
<ul><li><a href="Limine" title="Limine">Limine</a></li>
<li><a href="Multiboot" title="Multiboot">Multiboot</a></li></ul>
<h3><span class="mw-headline" id="External_Links">External Links</span></h3>
<ul><li><a rel="nofollow" class="external text" href="https://github.com/limine-bootloader/limine/blob/trunk/PROTOCOL.md">Limine protocol specification</a></li>
<li><a rel="nofollow" class="external text" href="https://github.com/limine-bootloader/limine-c-template-x86-64">Buildable Limine protocol based kernel project template in C for x86-64</a></li></ul>
<!-- 
NewPP limit report
Cached time: 20250212010408
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.076 seconds
Real time usage: 0.869 seconds
Preprocessor visited node count: 457/1000000
Post‐expand include size: 3126/2097152 bytes
Template argument size: 2382/2097152 bytes
Highest expansion depth: 15/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 47169/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    8.897      1 -total
 61.88%    5.505     22 Template:If
 47.77%    4.250      1 Template:Kernel_designs
 46.03%    4.095     22 Template:Show1
 42.21%    3.755      1 Template:SmallNavBox
 38.67%    3.440      1 Template:Rating
 12.34%    1.098      1 Template:BeginnersWarning
  9.84%    0.875      2 Template:Eq
  4.99%    0.444      2 Template:Eq1
  4.11%    0.366      1 Template:NoteBox
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:4702-0!canonical and timestamp 20250212010407 and revision id 29324.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Limine_Bare_Bones&amp;oldid=29324">https://wiki.osdev.org/index.php?title=Limine_Bare_Bones&amp;oldid=29324</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_duplicate_arguments_in_template_calls&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using duplicate arguments in template calls (page does not exist)">Pages using duplicate arguments in template calls</a></li><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Level_1_Tutorials" title="Category:Level 1 Tutorials">Level 1 Tutorials</a></li><li><a href="./Category:Bare_bones_tutorials" title="Category:Bare bones tutorials">Bare bones tutorials</a></li><li><a href="./Category:Bootloaders" title="Category:Bootloaders">Bootloaders</a></li><li><a href="./Category:C" title="Category:C">C</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Limine+Bare+Bones" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Limine_Bare_Bones#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Limine_Bare_Bones" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:Limine_Bare_Bones" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Limine_Bare_Bones"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Limine_Bare_Bones&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Limine_Bare_Bones&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Limine_Bare_Bones" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="./Special:RecentChangesLinked/Limine_Bare_Bones" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Limine_Bare_Bones&amp;oldid=29324" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Limine_Bare_Bones&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 15 December 2024, at 18:59.</li>
	<li id="footer-info-0">This page has been accessed 27,254 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Limine_Bare_Bones&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.076","walltime":"0.869","ppvisitednodes":{"value":457,"limit":1000000},"postexpandincludesize":{"value":3126,"limit":2097152},"templateargumentsize":{"value":2382,"limit":2097152},"expansiondepth":{"value":15,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":47169,"limit":5000000},"timingprofile":["100.00%    8.897      1 -total"," 61.88%    5.505     22 Template:If"," 47.77%    4.250      1 Template:Kernel_designs"," 46.03%    4.095     22 Template:Show1"," 42.21%    3.755      1 Template:SmallNavBox"," 38.67%    3.440      1 Template:Rating"," 12.34%    1.098      1 Template:BeginnersWarning","  9.84%    0.875      2 Template:Eq","  4.99%    0.444      2 Template:Eq1","  4.11%    0.366      1 Template:NoteBox"]},"cachereport":{"timestamp":"20250212010408","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":966});});</script>
</body>
</html>