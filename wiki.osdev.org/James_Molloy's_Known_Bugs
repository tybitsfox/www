<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>James Molloy's Tutorial Known Bugs - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"f083d5bbf79c8681803b45f1","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"James_Molloy's_Tutorial_Known_Bugs","wgTitle":"James Molloy's Tutorial Known Bugs","wgCurRevisionId":25869,"wgRevisionId":25869,"wgArticleId":3459,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["OS Development","Troubleshooting","FAQ"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"James_Molloy's_Tutorial_Known_Bugs","wgRelevantArticleId":3459,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[]
,"wgRestrictionMove":[],"wgRedirectedFrom":"James_Molloy's_Known_Bugs","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgInternalRedirectTargetUrl":"/James_Molloy%27s_Tutorial_Known_Bugs","wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["mediawiki.action.view.redirect","site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook",
"ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<link rel="canonical" href="James_Molloy's_Tutorial_Known_Bugs"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-James_Molloy_s_Tutorial_Known_Bugs rootpage-James_Molloy_s_Tutorial_Known_Bugs skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">James Molloy's Tutorial Known Bugs</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"><span class="mw-redirectedfrom">(Redirected from <a href="https://wiki.osdev.org/index.php?title=James_Molloy%27s_Known_Bugs&amp;redirect=no" class="mw-redirect" title="James Molloy&#039;s Known Bugs">James Molloy&#039;s Known Bugs</a>)</span></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="James_Molloy's_Known_Bugs#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="James_Molloy's_Known_Bugs#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>Several sources - including this Wiki - point to <a rel="nofollow" class="external text" href="http://www.jamesmolloy.co.uk/tutorial_html/">James Molloy's Roll your own toy UNIX-clone OS</a> Tutorial as a starting point. This is fine, but the tutorial has some well-known weak points that cause trouble for people again and again. It's not uncommon that well-established members traced back mysterious bugs to early parts of their operating systems based on this tutorial. Nonetheless, it's one of the best introductory tutorials out there even if it has the occasional landmine. This article is meant to preempt issues arising from following the tutorial and to aid those that have encountered such problems. It is generally recommended to be sceptical of its advise on how to design your kernel and compare its information against this wiki. Some issues are quite subtle and only experts will recognize them.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="James_Molloy's_Known_Bugs#Before_you_follow_the_tutorial"><span class="tocnumber">1</span> <span class="toctext">Before you follow the tutorial</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="James_Molloy's_Known_Bugs#Problem:_Not_using_a_cross-compiler"><span class="tocnumber">2</span> <span class="toctext">Problem: Not using a cross-compiler</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="James_Molloy's_Known_Bugs#Problem:_cdecl_calling_convention"><span class="tocnumber">3</span> <span class="toctext">Problem: __cdecl calling convention</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="James_Molloy's_Known_Bugs#Problem:_CFLAGS"><span class="tocnumber">4</span> <span class="toctext">Problem: CFLAGS</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="James_Molloy's_Known_Bugs#Problem:_Not_using_libgcc"><span class="tocnumber">5</span> <span class="toctext">Problem: Not using libgcc</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="James_Molloy's_Known_Bugs#Problem:_Not_setting_a_stack"><span class="tocnumber">6</span> <span class="toctext">Problem: Not setting a stack</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="James_Molloy's_Known_Bugs#Problem:_main_function"><span class="tocnumber">7</span> <span class="toctext">Problem: main function</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="James_Molloy's_Known_Bugs#Problem:_Data_types"><span class="tocnumber">8</span> <span class="toctext">Problem: Data types</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="James_Molloy's_Known_Bugs#Problem:_Inline_Assembly"><span class="tocnumber">9</span> <span class="toctext">Problem: Inline Assembly</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="James_Molloy's_Known_Bugs#Problem:_Missing_functions"><span class="tocnumber">10</span> <span class="toctext">Problem: Missing functions</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="James_Molloy's_Known_Bugs#Problem:_Interrupt_handlers_corrupt_interrupted_state"><span class="tocnumber">11</span> <span class="toctext">Problem: Interrupt handlers corrupt interrupted state</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="James_Molloy's_Known_Bugs#Problem:_ISR_17_and_21_have_error_codes"><span class="tocnumber">12</span> <span class="toctext">Problem: ISR 17 and 21 have error codes</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="James_Molloy's_Known_Bugs#Problem:_struct_registers::esp_is_useless"><span class="tocnumber">13</span> <span class="toctext">Problem: struct registers::esp is useless</span></a></li>
<li class="toclevel-1 tocsection-14"><a href="James_Molloy's_Known_Bugs#Problem:_attribute_((packed))"><span class="tocnumber">14</span> <span class="toctext">Problem: __attribute__((packed))</span></a></li>
<li class="toclevel-1 tocsection-15"><a href="James_Molloy's_Known_Bugs#Problem:_cli_and_sti_in_interrupt_handlers"><span class="tocnumber">15</span> <span class="toctext">Problem: cli and sti in interrupt handlers</span></a></li>
<li class="toclevel-1 tocsection-16"><a href="James_Molloy's_Known_Bugs#Problem:_kmalloc_isn&#39;t_properly_aligned"><span class="tocnumber">16</span> <span class="toctext">Problem: kmalloc isn't properly aligned</span></a></li>
<li class="toclevel-1 tocsection-17"><a href="James_Molloy's_Known_Bugs#Problem:_Paging_Code"><span class="tocnumber">17</span> <span class="toctext">Problem: Paging Code</span></a></li>
<li class="toclevel-1 tocsection-18"><a href="James_Molloy's_Known_Bugs#Problem:_Heap_Code"><span class="tocnumber">18</span> <span class="toctext">Problem: Heap Code</span></a></li>
<li class="toclevel-1 tocsection-19"><a href="James_Molloy's_Known_Bugs#Problem:_VFS_Code"><span class="tocnumber">19</span> <span class="toctext">Problem: VFS Code</span></a></li>
<li class="toclevel-1 tocsection-20"><a href="James_Molloy's_Known_Bugs#Problem:_multiboot.h"><span class="tocnumber">20</span> <span class="toctext">Problem: multiboot.h</span></a></li>
<li class="toclevel-1 tocsection-21"><a href="James_Molloy's_Known_Bugs#Problem:_Multitasking"><span class="tocnumber">21</span> <span class="toctext">Problem: Multitasking</span></a>
<ul>
<li class="toclevel-2 tocsection-22"><a href="James_Molloy's_Known_Bugs#Inline_Assembly_optimiser_problem_with_GCC_4.8"><span class="tocnumber">21.1</span> <span class="toctext">Inline Assembly optimiser problem with GCC 4.8</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-23"><a href="James_Molloy's_Known_Bugs#Problem:_User_mode"><span class="tocnumber">22</span> <span class="toctext">Problem: User mode</span></a>
<ul>
<li class="toclevel-2 tocsection-24"><a href="James_Molloy's_Known_Bugs#Problem_1:_nasm_byte_keyword_causing_0x80_to_become_0xffffff80"><span class="tocnumber">22.1</span> <span class="toctext">Problem 1: nasm byte keyword causing 0x80 to become 0xffffff80</span></a></li>
<li class="toclevel-2 tocsection-25"><a href="James_Molloy's_Known_Bugs#Problem_2:_Don&#39;t_forget_to_allow_interrupts_in_user_mode_in_idt_set_gate"><span class="tocnumber">22.2</span> <span class="toctext">Problem 2: Don't forget to allow interrupts in user mode in idt_set_gate</span></a></li>
<li class="toclevel-2 tocsection-26"><a href="James_Molloy's_Known_Bugs#Problem_3:_regs_var_must_called_by_reference_instead_of_by_value_in_the_irq_and_isr_handlers"><span class="tocnumber">22.3</span> <span class="toctext">Problem 3: regs var must called by reference instead of by value in the irq and isr handlers</span></a></li>
<li class="toclevel-2 tocsection-27"><a href="James_Molloy's_Known_Bugs#Problem_4:_Missing_documentation_around_set_kernel_stack"><span class="tocnumber">22.4</span> <span class="toctext">Problem 4: Missing documentation around set_kernel_stack</span></a></li>
<li class="toclevel-2 tocsection-28"><a href="James_Molloy's_Known_Bugs#Problem_5:_find_smallest_hole()_bug_in_heap_code_causing_fork()_to_page_fault"><span class="tocnumber">22.5</span> <span class="toctext">Problem 5: find_smallest_hole() bug in heap code causing fork() to page fault</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-29"><a href="James_Molloy's_Known_Bugs#Conclusion"><span class="tocnumber">23</span> <span class="toctext">Conclusion</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Before_you_follow_the_tutorial">Before you follow the tutorial</span></h2>
<dl><dd><i>Main article:</i> <a href="Bare_Bones" title="Bare Bones">Bare Bones</a></dd></dl>
<p>It is recommended that you follow the this wiki's standard tutorial <a href="Bare_Bones" title="Bare Bones">Bare Bones</a> before you begin with the tutorial. This ensures you get the a proper cross-compiler and use the proper compilation options. If you have already followed the tutorial, please compare your current build environment against the recommended practices covered by <a href="Bare_Bones" title="Bare Bones">Bare Bones</a>.
</p>
<h2><span class="mw-headline" id="Problem:_Not_using_a_cross-compiler">Problem: Not using a cross-compiler</span></h2>
<dl><dd><i>Main article:</i> <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a></dd></dl>
<p>This tutorial was written years before it was recognized as standard practice to use a cross-compiler. As such, you should disregard most of the build instructions in Chapter 1 Environment Setup and instead follow <a href="Bare_Bones" title="Bare Bones">Bare Bones</a>. You should use the <a href="Bare_Bones" title="Bare Bones">Bare Bones</a> linker script instead as well as the the boot assembly from <a href="Bare_Bones" title="Bare Bones">Bare Bones</a>. Floppies are an obsolete technology and it is advisable to create a bootable cdrom image instead.
</p>
<h2><span class="mw-headline" id="Problem:_cdecl_calling_convention">Problem: __cdecl calling convention</span></h2>
<p>The tutorial states that the <tt>__cdecl</tt> calling convention is used. This is, however, a Windows term. Your cross-compiler uses a similar calling convention but it is called the System V ABI for i386. It is advisable to understand this calling convention in depth, especially parts about how the parameters on the stack are clobbered and how structure parameters are passed. This will be very useful later and will help you avoid a later subtle bug. The function call example in 2.3 neglects to add 12 to esp following the call instruction, so the three parameters are never popped.
</p>
<h2><span class="mw-headline" id="Problem:_CFLAGS">Problem: CFLAGS</span></h2>
<p>The tutorial recommends using these compilation options <tt>-nostdlib -nostdinc -fno-builtin -fno-stack-protector</tt>, but this is not the recommended practice. The tutorial neglects to pass the important <tt>-ffreestanding</tt> option. See <a href="Bare_Bones" title="Bare Bones">Bare Bones</a> on how to correctly compile C kernel files and how to correctly link the kernel.
</p>
<h2><span class="mw-headline" id="Problem:_Not_using_libgcc">Problem: Not using libgcc</span></h2>
<dl><dd><i>Main article:</i> <a href="Libgcc" title="Libgcc">libgcc</a></dd></dl>
<p>The tutorial disables libc and <a href="Libgcc" title="Libgcc">libgcc</a> through the <tt>-nodefaultlibs</tt> option (implied by <tt>-nostdlib</tt>) but neglects to add back libgcc during the link.
</p>
<h2><span class="mw-headline" id="Problem:_Not_setting_a_stack">Problem: Not setting a stack</span></h2>
<dl><dd><i>Main article:</i> <a href="Stack#Setup_the_stack" title="Stack">Stack#Setup the stack</a></dd></dl>
<p>The tutorial neglects to set a stack in the initial boot file and relies on the bootloader using an appropriate <a href="Stack" title="Stack">stack</a>. You should instead declare your own stack as an array and use that instead, such that you have control of the situation.
</p>
<h2><span class="mw-headline" id="Problem:_main_function">Problem: main function</span></h2>
<p>This isn't a regular <tt>main</tt> function: The name <tt>main</tt> is actually a special case in C and it would be inadvisable to call it that. You should call it something like <tt>kernel_main</tt> instead.
</p>
<h2><span class="mw-headline" id="Problem:_Data_types">Problem: Data types</span></h2>
<p>The tutorial uses non-standard data types such as <tt>u32int</tt> while the international C standard (99 revision) introduces standard fixed-width data types like <tt>uint32_t</tt> that you should use instead. Simply include <tt>&lt;stdint.h&gt;</tt> which comes with your cross-compiler and works even in freestanding mode. This is the reason you should not pass the <tt>-nostdinc</tt> option.
</p>
<h2><span class="mw-headline" id="Problem:_Inline_Assembly">Problem: Inline Assembly</span></h2>
<dl><dd><i>Main article:</i> <a href="Inline_Assembly/Examples" title="Inline Assembly/Examples">Inline Assembly/Examples</a></dd></dl>
<p>The tutorial uses inline assembly, which is notoriously hard to get exactly correct. The smallest error can emit assembly that fully works until one day the optimizer does things differently. While the inline assembly looks correct to me at a glance, please compare the inline assembly with the <a href="Inline_Assembly/Examples" title="Inline Assembly/Examples">examples on this wiki</a>.
</p>
<h2><span class="mw-headline" id="Problem:_Missing_functions">Problem: Missing functions</span></h2>
<p>The GCC documentation mentions that the <tt>memset</tt>, <tt>memcpy</tt>, <tt>memmove</tt> and <tt>memcmp</tt> functions must always be present. The compiler uses these automatically for certain optimization purposes and even code that doesn't use them can automatically generate calls to them. You should add them at your earliest convenience.
</p>
<h2><span class="mw-headline" id="Problem:_Interrupt_handlers_corrupt_interrupted_state">Problem: Interrupt handlers corrupt interrupted state</span></h2>
<p>This article previously told you to know the ABI. If you do you will see a huge problem in the interrupt.s suggested by the tutorial: It breaks the ABI for structure passing! It creates an instance of the <tt>struct registers</tt> on the stack and then passes it by value to the <tt>isr_handler</tt> function and then assumes the structure is intact afterwards. However, the function parameters on the stack belongs to the function and it is allowed to trash these values as it sees fit (if you need to know whether the compiler actually does this, you are thinking the wrong way, but it actually does).
There are two ways around this. The most practical method is to pass the structure as a pointer instead, which allows you to explicitly edit the register state when needed - very useful for system calls, without having the compiler randomly doing it for you. The compiler can still edit the pointer on the stack when it's not specifically needed. The second option is to make another copy the structure and pass that.
</p>
<h2><span class="mw-headline" id="Problem:_ISR_17_and_21_have_error_codes">Problem: ISR 17 and 21 have error codes</span></h2>
<p>The interrupt handling code in the downloadable code have a bug where it handles ISR 17 and 21 by pushing a fake error code, but the CPU does push error codes here.
</p>
<h2><span class="mw-headline" id="Problem:_struct_registers::esp_is_useless">Problem: struct registers::esp is useless</span></h2>
<p>The <tt>struct registers</tt> structure has a esp member that is one of the values pushed by pusha. This value is, however, ignored by popa for obvious reasons. You should rename it to <tt>useless_value</tt> and rename <tt>useresp</tt> to <tt>esp</tt> instead. The value is useless because it has to do with the current stack context, not what was interrupted.
</p>
<h2><span id="Problem:_attribute_.28.28packed.29.29"></span><span class="mw-headline" id="Problem:_attribute_((packed))">Problem: __attribute__((packed))</span></h2>
<p>This attribute packs the associated structure. This is useful in a few cases, such as the IDT and GDT code (actually just the IDT, GDT and TSS pointers). However, the tutorial tends to randomly attach it to every struct parameter, even where it isn't even needed. It is only needed where you badly want aligned structure members, it doesn't do anything if all the structure members were already naturally aligned. Otherwise, the compiler will automatically insert gaps between structure members so each begins at its own natural alignment.
</p>
<h2><span class="mw-headline" id="Problem:_cli_and_sti_in_interrupt_handlers">Problem: cli and sti in interrupt handlers</span></h2>
<p>The interrupt.s file invokes the <tt>cli</tt> and <tt>sti</tt> in the interrupt handler to disable and enable interrupts, as if the author didn't know whether the interrupt handlers were run with interrupts on or off. You can control whether they are run with interrupts on and off by simply deciding it in your IDT entry for the particular interrupt. The <tt>sti</tt> during the interrupt handler end is also useless as <tt>iret</tt> loads the eflags value from the stack, which contains a bit telling whether interrupts are on or off; in other words the interrupt handler automatically restores interrupts whether or not interrupts were enabled before this interrupt.
</p>
<h2><span id="Problem:_kmalloc_isn.27t_properly_aligned"></span><span class="mw-headline" id="Problem:_kmalloc_isn't_properly_aligned">Problem: kmalloc isn't properly aligned</span></h2>
<p>Each data type in C has its own natural alignment. For instance, on the ABI that you are using an int is a signed 32-bit value that must be 32-bit aligned in memory (4 byte alignment). The same applies for structures, where the alignment of the whole structure is the maximum alignment of all its members. It is undefined behavior to access an unaligned value. For instance, you could decide you want an int at a particular unaligned (for an int) memory address and construct a pointer to it. When you attempt to write an int value to that pointer, undefined behavior happens. Furthermore, SIMD registers have alignment needs that are bigger than their individual components.
</p><p>The <tt>kmalloc</tt> function in 6.4.1 only 1-byte aligns or page-aligns its memory address. This means you can only reliably use it allocate memories for chars (size 1), but not any larger types unless you use page-alignment. A proper malloc implementation returns pointers that are aligned such that they are suitable for all the common types, for instance it could be 64-bit (8-byte) aligned. You'll also want to modify the parameters such that it uses <tt>size_t</tt> appropriately rather than <tt>u32int</tt>.
</p><p>Additionally the check if the address is page aligned is wrong.
</p>
<pre>if (align == 1 &amp;&amp; (placement_address &amp; 0xFFFFF000)) // If the address is not already page-aligned
</pre>
<p>should be
</p>
<pre>if (align == 1 &amp;&amp; (placement_address &amp; 0x00000FFF)) // If the address is not already page-aligned
</pre>
<h2><span class="mw-headline" id="Problem:_Paging_Code">Problem: Paging Code</span></h2>
<p>The paging code isn't terribly good and it is worth it to fully understand paging and design it all yourself. Paging code tends to be quite ugly, but it'll probably be decent after your fifth design revision. There is no need to always re-enable paging in <tt>switch_page_directory</tt>, it is likely best to have a special function the first time paging is enabled. The Inline Assembly in 6.4.5. doesn't need to be volatile as it is simply reading a memory value, which has no side-effects and it is acceptable if the compiler optimizes it away if the value is never used.
</p>
<h2><span class="mw-headline" id="Problem:_Heap_Code">Problem: Heap Code</span></h2>
<p>It is probably best that you write your own heap implementation.
</p><p>There is an operator precedence bug in <tt>find_smallest_hole()</tt> that will cause bad allocations and memory overwrites if attempting to fork in user mode later on.
</p><p>To fix the problem, change this:
</p>
<pre>if ((location+sizeof(header_t)) &amp; 0xFFFFF000&#160;!= 0)
</pre>
<p>to this:
</p>
<pre>if ((location+sizeof(header_t) &amp; 0xFFFFF000)&#160;!= 0)
</pre>
<p>See the section on user mode below for more details.
</p>
<h2><span class="mw-headline" id="Problem:_VFS_Code">Problem: VFS Code</span></h2>
<p>The name of files on Unix are stored in the directory entries rather than the inode itself (<tt>struct fs_node</tt> here), this allows Unix files to have multiple names and even none if the file is deleted but the inode is not yet closed in all programs.
</p>
<h2><span class="mw-headline" id="Problem:_multiboot.h">Problem: multiboot.h</span></h2>
<p>It's advisable to get a copy of <tt>multiboot.h</tt> from the GRUB source code rather than copied from the tutorial. Beware, the copy in the GRUB documentation is out of date, use one from an official release.
</p><p><br />
</p>
<h2><span class="mw-headline" id="Problem:_Multitasking">Problem: Multitasking</span></h2>
<p>It is strongly recommended that you write your own implementation of this and disregard the tutorial. The tutorial attempts to implement forking kernel threads by searching for magic values on the stack, which is insanity. If you wish to create a new kernel thread, simply decide which registers it should have and point its stack pointer at its freshly allocated stack. It will then start executing at your desired entry point. The part where it disables paging is bad and you should just map the source and destination physical frames at appropriate virtual addresses and memcpy with paging on at all times. Section 9.3 in particular is insanity and has blown up at least one well-established hobby operating system.
</p><p><br />
</p>
<h3><span class="mw-headline" id="Inline_Assembly_optimiser_problem_with_GCC_4.8">Inline Assembly optimiser problem with GCC 4.8</span></h3>
<p>As mentioned above, writing Inline Assembly can be tricky. The original Inline Assembly is this:
</p>
<pre>   asm volatile("         \
     cli;                 \
     mov %0,&#160;%%ecx;       \
     mov %1,&#160;%%esp;       \
     mov %2,&#160;%%ebp;       \
     mov %3,&#160;%%cr3;       \
     mov $0x12345,&#160;%%eax; \
     sti;                 \
     jmp *%%ecx           "
               &#160;:&#160;: "r"(eip), "r"(esp), "r"(ebp), "r"(current_directory-&gt;physicalAddr)); 
</pre>
<p>Everything works fine when using gcc-4.2.4. However, the gcc-4.8.4 optimizer produces the following assembly (produced with <b>objdump -d src/kernel</b>):
</p>
<pre>  10387c:   fa                      cli
  10387d:   89 c1                   mov    %eax,%ecx
  10387f:   89 d4                   mov    %edx,%esp
  103881:   89 cd                   mov    %ecx,%ebp
  103883:   0f 22 db                mov    %ebx,%cr3
  103886:   b8 45 23 01 00          mov    $0x12345,%eax
  10388b:   fb                      sti
  10388c:   ff e1                   jmp    *%ecx
</pre>
<p>Note how the EAX register is assigned to the ECX register. However, later on the ECX register is assigned to EBP register. The reason for this is that the optimizer was using the EAX register to store the EIP variable and the ECX register to store the EBP variable. This results in the EIP variable being assigned to the ECX register <i>as well as</i> the EBP register. This leads to a subsequent <b>ret</b> statement sending the CPU to some invalid memory location.
</p><p>A way to fix this is to remove the Inline Assembly by, for example adding this to <b>process.s</b>:
</p>
<pre>; Here we:
; * Stop interrupts so we don't get interrupted.
; * Temporarily put the new EIP location in ECX.
; * Temporarily put the new page directory's physical address in EAX.
; * Set the base and stack pointers
; * Set the page directory
; * Put a dummy value (0x12345) in EAX so that above we can recognize that we've just
;   switched task.
; * Restart interrupts. The STI instruction has a delay - it doesn't take effect until after
;   the next instruction.
; * Jump to the location in ECX (remember we put the new EIP in there).

[GLOBAL perform_task_switch]
perform_task_switch:
     cli;
     mov ecx, [esp+4]  &#160;; EIP
     mov eax, [esp+8]  &#160;; physical address of current directory
     mov ebp, [esp+12] &#160;; EBP
     mov esp, [esp+16] &#160;; ESP
     mov cr3, eax      &#160;; set the page directory
     mov eax, 0x12345  &#160;; magic number to detect a task switch
     sti;
     jmp ecx
</pre>
<p>Then edit <b>task.c</b> and add this to the top of the file:
</p>
<pre>extern void perform_task_switch(u32int, u32int, u32int, u32int);
</pre>
<p>and replace the Inline Assembly with:
</p>
<pre>perform_task_switch(eip, current_directory-&gt;physicalAddr, ebp, esp);
</pre>
<h2><span class="mw-headline" id="Problem:_User_mode">Problem: User mode</span></h2>
<p>There are several problems. The downloadable code has everything fixed except a <tt>find_smallest_hole()</tt> page-aligned heap allocation bug.
</p>
<h3><span class="mw-headline" id="Problem_1:_nasm_byte_keyword_causing_0x80_to_become_0xffffff80">Problem 1: nasm byte keyword causing <tt>0x80</tt> to become <tt>0xffffff80</tt></span></h3>
<p>This code is at fault:
</p>
<pre> %macro ISR_NOERRCODE 1 &#160;; define a macro, taking one parameter
  [GLOBAL isr%1]       &#160;; %1 accesses the first parameter.
  isr%1:
    cli
    push byte 0
    push byte %1
    jmp isr_common_stub
%endmacro
</pre>
<p>It should be:
</p>
<pre>%macro ISR_NOERRCODE 1 &#160;; define a macro, taking one parameter
  [GLOBAL isr%1]       &#160;; %1 accesses the first parameter.
  isr%1:
    cli
    push byte 0
    push %1
    jmp isr_common_stub
%endmacro
</pre>
<h3><span id="Problem_2:_Don.27t_forget_to_allow_interrupts_in_user_mode_in_idt_set_gate"></span><span class="mw-headline" id="Problem_2:_Don't_forget_to_allow_interrupts_in_user_mode_in_idt_set_gate">Problem 2: Don't forget to allow interrupts in user mode in idt_set_gate</span></h3>
<p>Find this comment in chapter 4 and uncomment the code:
</p>
<pre>   // We must uncomment the OR below when we get to using user-mode.
   // It sets the interrupt gate's privilege level to 3.
   idt_entries[num].flags   = flags /* | 0x60 */;
</pre>
<h3><span class="mw-headline" id="Problem_3:_regs_var_must_called_by_reference_instead_of_by_value_in_the_irq_and_isr_handlers">Problem 3: regs var must called by reference instead of by value in the irq and isr handlers</span></h3>
<p>Various changes are needed.
</p><p>Change this in <tt>page_fault()</tt>:
</p>
<pre>void page_fault(registers_t regs)
// to
void page_fault(registers_t *regs)
</pre>
<p>And in
<tt>isr_handler()</tt> and <tt>irq_handler()</tt>, change
</p>
<pre>handler(regs);
</pre>
<p>to
</p>
<pre>handler(&amp;regs);
</pre>
<p>This fixes a problem where the syscall hander won't get called.
</p>
<h3><span class="mw-headline" id="Problem_4:_Missing_documentation_around_set_kernel_stack">Problem 4: Missing documentation around set_kernel_stack</span></h3>
<p><tt>KERNEL_STACK_SIZE</tt> needs defining in <tt>task.h</tt>:
</p>
<pre>#define KERNEL_STACK_SIZE 2048       // Use a 2kb kernel stack.
</pre>
<p>Also, some code needs to be added to four sections in <tt>task.c</tt>
</p><p>In <tt>initialise_tasking()</tt>
</p>
<pre> current_task-&gt;kernel_stack = kmalloc_a(KERNEL_STACK_SIZE);
</pre>
<p>In <tt>fork()</tt>
</p>
<pre>current_task-&gt;kernel_stack = kmalloc_a(KERNEL_STACK_SIZE);
</pre>
<p>In <tt>switch_task()</tt>
</p>
<pre>set_kernel_stack(current_task-&gt;kernel_stack+KERNEL_STACK_SIZE);
</pre>
<p>In <tt>switch_to_user_mode()</tt>
</p>
<pre>set_kernel_stack(current_task-&gt;kernel_stack+KERNEL_STACK_SIZE);
</pre>
<h3><span id="Problem_5:_find_smallest_hole.28.29_bug_in_heap_code_causing_fork.28.29_to_page_fault"></span><span class="mw-headline" id="Problem_5:_find_smallest_hole()_bug_in_heap_code_causing_fork()_to_page_fault">Problem 5: find_smallest_hole() bug in heap code causing fork() to page fault</span></h3>
<p>This bug from the heap chapter may not hit you until now. The bug results in the newly allocated <tt>kernel_stack</tt> messing up the page directory, causing <tt>clone_directory()</tt> to fail in <tt>fork()</tt>. See the heap section above for the details.
</p>
<h2><span class="mw-headline" id="Conclusion">Conclusion</span></h2>
<p>The tutorial isn't bad as an example, but its design is not optimal and some parts of it are just plain bad (see multitasking). Indeed, you should just use it to get started and diverge from it as fast as possible, only using the tutorial when you need an example or can't implement it yourself. You should prefer consulting information on this wiki if possible. I haven't yet located all the problems in the tutorial, and some are quite minor and not technically problems but just small subjective design flaws. It is worth anticipating whether your future self will be removing tutorial code from your operating system and thus saving effort by never putting it there in the first place.
</p>
<!-- 
NewPP limit report
Cached time: 20250211170346
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.022 seconds
Real time usage: 0.022 seconds
Preprocessor visited node count: 226/1000000
Post‐expand include size: 194/2097152 bytes
Template argument size: 79/2097152 bytes
Highest expansion depth: 3/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 3079/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.945      1 -total
 73.36%    0.693      5 Template:Main
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3459-0!canonical and timestamp 20250211170346 and revision id 25869.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=James_Molloy%27s_Tutorial_Known_Bugs&amp;oldid=25869">https://wiki.osdev.org/index.php?title=James_Molloy%27s_Tutorial_Known_Bugs&amp;oldid=25869</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="./Category:OS_Development" title="Category:OS Development">OS Development</a></li><li><a href="./Category:Troubleshooting" title="Category:Troubleshooting">Troubleshooting</a></li><li><a href="./Category:FAQ" title="Category:FAQ">FAQ</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=James+Molloy%27s+Tutorial+Known+Bugs" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="James_Molloy's_Known_Bugs#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="James_Molloy's_Tutorial_Known_Bugs" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:James_Molloy's_Tutorial_Known_Bugs" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="James_Molloy's_Tutorial_Known_Bugs"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=James_Molloy%27s_Tutorial_Known_Bugs&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=James_Molloy%27s_Tutorial_Known_Bugs&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/James_Molloy's_Tutorial_Known_Bugs" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/James_Molloy%27s_Tutorial_Known_Bugs" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=James_Molloy%27s_Tutorial_Known_Bugs&amp;oldid=25869" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=James_Molloy%27s_Tutorial_Known_Bugs&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 18 May 2021, at 22:17.</li>
	<li id="footer-info-0">This page has been accessed 6,486 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=James_Molloy%27s_Tutorial_Known_Bugs&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.022","walltime":"0.022","ppvisitednodes":{"value":226,"limit":1000000},"postexpandincludesize":{"value":194,"limit":2097152},"templateargumentsize":{"value":79,"limit":2097152},"expansiondepth":{"value":3,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":3079,"limit":5000000},"timingprofile":["100.00%    0.945      1 -total"," 73.36%    0.693      5 Template:Main"]},"cachereport":{"timestamp":"20250211170346","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":132});});</script>
</body>
</html>