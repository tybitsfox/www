<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>User:H0bby1 - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"c7cc8c81e6851b3b98500f7b","wgCSPNonce":false,"wgCanonicalNamespace":"User","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":2,"wgPageName":"User:H0bby1","wgTitle":"H0bby1","wgCurRevisionId":17233,"wgRevisionId":17233,"wgArticleId":3404,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Lovecraftian","Disputed Pages"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"User:H0bby1","wgRelevantArticleId":3404,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],
"wgRelevantUserName":"H0bby1","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-2 ns-subject page-User_H0bby1 rootpage-User_H0bby1 skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-namespace">User</span><span class="mw-page-title-separator">:</span><span class="mw-page-title-main">H0bby1</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="./User:H0bby1#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="./User:H0bby1#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><center>
<table style="border: 1px solid #8f9f8f; padding: .0em .25em .0em; background-color: #a0aaa0; text-align: center;">
<tbody><tr>
<td>
<p><img src="http://i.imgur.com/4oMm5jg.png" alt="4oMm5jg.png" />
</p>
</td>
<td>
<p><b>Ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fhtagn!</b>
</p><p><font color="black">The content of this article or section is <a href="./Category:Lovecraftian" title="Category:Lovecraftian">Lovecraftian</a>.</font><br />
</p>
</td>
<td>
</td></tr></tbody></table>
</center>
<p><br />
</p>
<center>
<table style="border: 1px solid #cfcfbf; padding: .0em .25em .0em; background-color: #f0f0ff; text-align: center;">
<tbody><tr>
<td>
<p><font color="black">The factual accuracy of this article or section is <a href="./Category:Disputed_Pages" title="Category:Disputed Pages">disputed</a>.</font><br /><small><font color="red">Please see the relevant discussion on the [[Talk:User:H0bby1|talk page]].</font></small>
</p>
</td>
<td>
</td></tr></tbody></table>
</center>
<p><br />
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="./User:H0bby1#how_to_prevent_dependence_on_build_environment_in_C"><span class="tocnumber">1</span> <span class="toctext">how to prevent dependence on build environment in C</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="./User:H0bby1#what_part_of_the_build_can_be_specific"><span class="tocnumber">2</span> <span class="toctext">what part of the build can be specific</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="./User:H0bby1#different_configurations"><span class="tocnumber">3</span> <span class="toctext">different configurations</span></a>
<ul>
<li class="toclevel-2 tocsection-4"><a href="./User:H0bby1#programming_regular_application"><span class="tocnumber">3.1</span> <span class="toctext">programming regular application</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="./User:H0bby1#programming_a_shared_library"><span class="tocnumber">3.2</span> <span class="toctext">programming a shared library</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="./User:H0bby1#programming_a_kernel"><span class="tocnumber">3.3</span> <span class="toctext">programming a kernel</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="./User:H0bby1#programming_a_operating_system"><span class="tocnumber">3.4</span> <span class="toctext">programming a operating system</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-8"><a href="./User:H0bby1#how_C_compiler_deal_with_call_to_the_standard_lib_C"><span class="tocnumber">4</span> <span class="toctext">how C compiler deal with call to the standard lib C</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="./User:H0bby1#how_to_avoid_problems"><span class="tocnumber">5</span> <span class="toctext">how to avoid problems</span></a>
<ul>
<li class="toclevel-2 tocsection-10"><a href="./User:H0bby1#always_using_the_headers_and_C_library_specific_to_a_build_environment_to_build_everything"><span class="tocnumber">5.1</span> <span class="toctext">always using the headers and C library specific to a build environment to build everything</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="./User:H0bby1#not_using_the_build_environment_specific_headers_and_C_library_nor_runtime"><span class="tocnumber">5.2</span> <span class="toctext">not using the build environment specific headers and C library nor runtime</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-12"><a href="./User:H0bby1#the_make_up_of_a_typical_C_Library"><span class="tocnumber">6</span> <span class="toctext">the make up of a typical C Library</span></a>
<ul>
<li class="toclevel-2 tocsection-13"><a href="./User:H0bby1#the_standard_C_library"><span class="tocnumber">6.1</span> <span class="toctext">the standard C library</span></a>
<ul>
<li class="toclevel-3 tocsection-14"><a href="./User:H0bby1#stddef.h"><span class="tocnumber">6.1.1</span> <span class="toctext">stddef.h</span></a></li>
<li class="toclevel-3 tocsection-15"><a href="./User:H0bby1#malloc.h"><span class="tocnumber">6.1.2</span> <span class="toctext">malloc.h</span></a></li>
<li class="toclevel-3 tocsection-16"><a href="./User:H0bby1#string.h"><span class="tocnumber">6.1.3</span> <span class="toctext">string.h</span></a></li>
<li class="toclevel-3 tocsection-17"><a href="./User:H0bby1#math.h"><span class="tocnumber">6.1.4</span> <span class="toctext">math.h</span></a></li>
<li class="toclevel-3 tocsection-18"><a href="./User:H0bby1#stdio.h"><span class="tocnumber">6.1.5</span> <span class="toctext">stdio.h</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-19"><a href="./User:H0bby1#the_C_runtime"><span class="tocnumber">6.2</span> <span class="toctext">the C runtime</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-20"><a href="./User:H0bby1#how_to_write_build_environment_independent_code"><span class="tocnumber">7</span> <span class="toctext">how to write build environment independent code</span></a>
<ul>
<li class="toclevel-2 tocsection-21"><a href="./User:H0bby1#intel_calling_conventions"><span class="tocnumber">7.1</span> <span class="toctext">intel calling conventions</span></a></li>
<li class="toclevel-2 tocsection-22"><a href="./User:H0bby1#creating_simple_header_file_to_replace_the_standard_C_library_declarations_for_i386"><span class="tocnumber">7.2</span> <span class="toctext">creating simple header file to replace the standard C library declarations for i386</span></a></li>
<li class="toclevel-2 tocsection-23"><a href="./User:H0bby1#adding_compiler_specific_directive"><span class="tocnumber">7.3</span> <span class="toctext">adding compiler specific directive</span></a></li>
<li class="toclevel-2 tocsection-24"><a href="./User:H0bby1#implementing_the_function"><span class="tocnumber">7.4</span> <span class="toctext">implementing the function</span></a></li>
<li class="toclevel-2 tocsection-25"><a href="./User:H0bby1#using_it_in_an_application"><span class="tocnumber">7.5</span> <span class="toctext">using it in an application</span></a></li>
<li class="toclevel-2 tocsection-26"><a href="./User:H0bby1#making_port_easier"><span class="tocnumber">7.6</span> <span class="toctext">making port easier</span></a></li>
<li class="toclevel-2 tocsection-27"><a href="./User:H0bby1#handling_import/export"><span class="tocnumber">7.7</span> <span class="toctext">handling import/export</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-28"><a href="./User:H0bby1#implementing_the_base_C_functions_for_intel_cpu"><span class="tocnumber">8</span> <span class="toctext">implementing the base C functions for intel cpu</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="how_to_prevent_dependence_on_build_environment_in_C">how to prevent dependence on build environment in C</span></h2>
<p>When a program is compiled to produce executable machine code, there is some part of the building process that is not described in the C language, but are left to the build chain to generate the executable code for a particular architecture.
</p>
<h2><span class="mw-headline" id="what_part_of_the_build_can_be_specific">what part of the build can be specific</span></h2>
<ul><li><b>calling convention and data types</b>: Calling convention are the way function are called, that specify how return address and parameters are passed to the function, as well as how the return value will be passed back to the caller. There are some calling convention that most compiler will recognize, but they are cpu dependent, and compilers might not use them by default in all cases, some compiler can allow for compiler specific calling conventions, using register instead of the stack to pass parameters for example. The way the compiler will deal with structure can also vary, regarding member alignment, and packing of members. Some compiler can also use specific data type declaration, for example for 64 bit integer, or have specific 16 bit char type for unicode strings.</li></ul>
<ul><li><b>the C runtime</b>&#160;: (crt, libgcc for linux), They are functions that are not part of the C standard, often made in assembler for the specific cpu target.The compiler uses them to perform an operation with an internal routine specific to the compiler and to the target architecture. It is also used to perform system specific application initialization before the 'main' function is entered and after the main function return to handle system specific process shutdown.</li></ul>
<ul><li><b>the standard C library </b>: (stdc, glibc for linux), The C Library is used to provide a set of standard functions that C program can use to access system specific resources. It is part of the build environment for the particular target, all C compilers who want to enable program to use the set of standard C functions must use an implementation of the C Library for the target they want to produce working executable for. This include the string and memory management functions (strcpy,memcpy,strtol,itoa) , memory allocation functions (malloc,calloc,realloc,free), floating point math and the ALU, i/o function (printf/sscanf/fopen/fread/fwrite/fclose) , as well as functions used to program sockets. The C Library is generally build on top of the kernel, and is used to provide a standard interface to make in sort C program are independent of any kernel specific functions.</li></ul>
<p><br />
Only the C runtime is generally linked statically because it's small enough, and those functions are totally specific to the compiler. The C library is generally linked dynamically, and has to be present and loaded by the target system at runtime. 
</p><p>The C library can also be linked statically alongside with the executable, in which case the exe will depend only on lower level system api or kernel that the C Library used is programmed for.As the C Library is made for the purpose to avoid direct kernel dependencies from the executable, and to provide a standard API to C program, it's more meant to be linked dynamically, to make it possible for the executable to be run on different system that implement the set of standard C functions. If it's linked statically, the executable will then depend on any lower level functions that the C Library use internally.
</p>
<ul><li>On windows before visual studio 2005, the C library of visual studio was shipped in windows by default, so you didn't have to worry about it, but since vc2005, applications have to distribute the C library (msvc.lib) with them, either as a dll or linked statically in the application if they want to use visual studio C library.</li></ul>
<ul><li>On linux and bsd, application are generally compiled and linked on the host plateform before to be used, so it make sure all the functions definition are compiled according to the host configuration.</li></ul>
<hr />
<h2><span class="mw-headline" id="different_configurations">different configurations</span></h2>
<h4><span class="mw-headline" id="programming_regular_application">programming regular application</span></h4>
<p>If you are programming an application, what you want is to take advantage of a particular development environment , and to use a maximum of compiler specific features and rely entirely on the C building suit to compile optimized code for the platform targeted by the build. The application need to be linked statically with the compiler's C runtime, and to either be distributed with the C library used to to build it, or to rely on the C Library implementation present on the target system to be compatible with the definitions of the C Function from the C Library used to build it.
</p>
<h4><span class="mw-headline" id="programming_a_shared_library">programming a shared library</span></h4>
<p>If you are programming a library, or a framework, the 'guest' C program (the application using the library) will have to use shared data structures passed as function arguments with the framework, then you want to make sure the compiler use the specified calling convention to use the functions of the framework as well as identical structure packing if shared structure are involved.
</p><p>Eventually you may want to avoid using Standard C functions to avoid the client application to have to include the C Library used to compile the framework as a dependence. 
</p><p>If the framework has to be linked statically, the C runtime can create conflicts between the framework library and the C runtime of the application's compiler, because both the framework and the application need their respective compiler's version of the runtime to be linked statically in the executable.
</p>
<h4><span class="mw-headline" id="programming_a_kernel">programming a kernel</span></h4>
<p>A kernel generally cannot use the standard C library of the compiler, but some of the functions can be linked statically or implemented fully in the kernel code, in which case it shouldn't be a problem because it's unlikely the kernel's C routines will be compiled with a different building environment than the kernel itself.
</p><p>However if those kernel functions have to be used as 'functions of the standard C library' by other programs, need to make sure the declaration of the standard C functions contained in the standard C header (stddef.h, string.h, math.h) used to build the client program are consistent with how the functions are defined in the kernel.
</p><p>If the client program's compiler need to use kernel specific declaration of the function of the C Library, need to make sure it treat the call to those functions according to the explicit declaration of the header used , compilers often expects a specific implementation of the standard C library functions, so need to make sure the compiler follow the explicit declaration of the functions present in the header files and not the implicit declaration that the compiler might expect. 
</p>
<h4><span class="mw-headline" id="programming_a_operating_system">programming a operating system</span></h4>
<p>Applications will have to use some data type and functions defined in the os source code, and to be able to use them in it's own source code. The calling convention attribute and parameters of how structure are aligned and packed, and how parameters and return address are expected to be passed to function of the os need to be specified explicitly in the shared function and data type declarations. 
</p><p>The compiler used to build the 'guest' application will expect that his own version of the standard C library will be used at runtime on the target system. So either the os will have to load the application's version of the C Library to run it, or either assume that the definitions of the C functions used by the application are consistent with the C library used at runtime. 
</p><p>If specific declaration of the function of the C Library are used, need to be sure the guest compiler use those definitions to compile the application, sometime compilers can override the definitions of the standard C functions with the type it expects from the standard C library used to build it, because it has certain specific way to optimize or deal with the call to those functions.
</p><p>The configuration for an operating system is similar to the one of a framework, but need to take extra care about compiler specifics, because several version of a framework can be distributed to fit a particular building environment, but it's much harder to ship a version of the OS for each building environment that can be used to build an application or a component/module for it.
</p>
<hr />
<h2><span class="mw-headline" id="how_C_compiler_deal_with_call_to_the_standard_lib_C">how C compiler deal with call to the standard lib C</span></h2>
<p>As mentioned previously, compilers can sometime have a specific behavior when they encounter a call to a functions of the standard C library, and won't always behave exactly as expected from function declaration. This behavior is very compiler specific, and depend on options used for compilation, but it can either totally inline code, or use specific functions of the runtime to replace the call, or even optimize successive call in function or whole program level.
</p><p>For example, given the following code
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">float</span><span class="w"> </span><span class="n">c</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">a</span><span class="p">;</span><span class="w"></span>
<span class="n">a</span><span class="o">=</span><span class="mf">1.0</span><span class="p">;</span><span class="w"></span>

<span class="n">c</span><span class="o">=</span><span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="p">);</span><span class="w"></span>
<span class="n">s</span><span class="o">=</span><span class="n">sin</span><span class="p">(</span><span class="n">a</span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>The compiler can optimize into
</p>
<div class="mw-highlight mw-highlight-lang-asm mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">fld</span><span class="w"> </span><span class="p">[</span><span class="no">a</span><span class="p">]</span><span class="w"></span>
<span class="nf">fsincos</span><span class="w"></span>
<span class="nf">fstp</span><span class="w"> </span><span class="p">[</span><span class="no">c</span><span class="p">]</span><span class="w"></span>
<span class="nf">fstp</span><span class="w"> </span><span class="p">[</span><span class="no">s</span><span class="p">]</span><span class="w"></span>
</pre></div>
<p>And use the fsincos instruction instead of two successive call to the standard C sin and cos functions.
</p><p>The compiler can just inline some assembler routine to optimize call at function or whole program level, and/or insert call to its own C runtime library. It can use implicit declaration of the standard C function instead of the one explicitly defined in the header , or issue warnings if some of it's internal functions are redefined. If the program compiled has to be inter - compiler compatible on a binary level with the OS implementation of the C Library, it's safer to use functions with a different name than the functions of the compiler's standard C library.
</p><p>There are many problems that can arise on the assembly level regarding what a compiler will do when encountering a call to a function of the C library. What it will expect of the C library code is not always defined explicitly, and that can break compatibility between an application and the host system due to the C library of the host used at runtime being incompatible with what the compiler expects.Even if the application use functions declarations consistent with the definition of the function in the host system.
</p>
<hr />
<h2><span class="mw-headline" id="how_to_avoid_problems">how to avoid problems</span></h2>
<h4><span class="mw-headline" id="always_using_the_headers_and_C_library_specific_to_a_build_environment_to_build_everything">always using the headers and C library specific to a build environment to build everything</span></h4>
<p>The system will contain a single C library, and all programs compiled must use the corresponding C headers to declare function of the C library present in the system.
</p>
<ul><li>pro</li></ul>
<ol><li>Can use the C library and headers of the building environment.</li>
<li>Can take full advantage of compiler and building options.</li>
<li>The compiler will be able to optimize the code that use functions of the C Library.</li></ol>
<ul><li>con</li></ul>
<ol><li>C library headers often contain compiler specific directive, so it's most likely you need to use the same compiler to use the same headers file to declare the functions of the C library.</li>
<li>Errors or inconsistencies can happen if two programs that need to use the same C library use different C Library headers, or use same C Library headers but are compiled by different compilers or with different options.</li>
<li>Need to make sure the C Library used at runtime is compatible with the one that is used to build it.</li></ol>
<h4><span class="mw-headline" id="not_using_the_build_environment_specific_headers_and_C_library_nor_runtime">not using the build environment specific headers and C library nor runtime</span></h4>
<p>Not using any functions or data type declaration that depend on the build environment specific implementation of the standard C function.
</p>
<ul><li>pro</li></ul>
<ol><li>all programs can be compiled with any compilers without having inconsistencies and can include the same cross compiled headers to declare the equivalent of the C functions.</li>
<li>Executable file will be smaller because they don't need to incorporate the runtime</li>
<li>Two program compiled with different compilers can be linked statically with each others</li>
<li>Can control entierly the way the compiler will process calls to the C library functions</li></ol>
<ul><li>con</li></ul>
<ol><li>Compiler can't optimize the calls to the function of the C library.</li>
<li>Need to rewrite the function of the C library that program uses and eventually part of the runtime of each compilers that you want to be compatible with, or making explicit call to specific function to perform the operation instead of using the compiler runtime library implicitly.</li>
<li>Compiler's C library are generally more optimized, and can be adapted automatically by compiler depending on compilation options.</li>
<li>Can make the port of application a bit harder, but most of the job can be done using preprocessor directives, and lot of application and library that are 'portable' give an easy way to use system specific function to replace the standard C library.</li></ol>
<p><br />
</p>
<hr />
<h2><span class="mw-headline" id="the_make_up_of_a_typical_C_Library">the make up of a typical C Library</span></h2>
<p>Even if you want to get rid of building environment dependence, you still want to implement functions with an identical behavior to be able to port easily applications that use the standard C library to your os, but without depending on anything specific to the build environment for declaring , implementing and compiling them.
</p><p>It is also preferable to declare the replacement for the standard C functions in header file which name are different from the standard library include file name (stdlib.h,string.h,math.h etc) , because the wrong one could be selected if include path are not configured properly, so it's better to use a different name for both the name of the header file in which the function are declared, and a different name for the C function themselves, to make sure the compiler will effectively deal with the functions as defined explicitly in their declarations and that they will not conflict with compiler internal/built in definitions.
</p>
<h4><span class="mw-headline" id="the_standard_C_library">the standard C library</span></h4>
<h6><span class="mw-headline" id="stddef.h">stddef.h</span></h6>
<p>This file is mainly used to define basic type that other functions definitions will use, it must be included first as all the declaration of the C standard library depend on them.
</p><p>It often include compiler and system detection using preprocessor conditional compilation.
</p><p>Each compiler will define a certain number of preprocessor variables automatically, and some code can be compiled conditionally depending on the target arch, operating system, version of the compiler , that are expected to be set by the compiler or the building environment. Like this, the same header files can be used to compile for different platforms.
</p><p>The exact interpretation of the C library header depend on many variables that are expected to be set by the compilers and that are specific to each compiler.
</p>
<h6><span class="mw-headline" id="malloc.h">malloc.h</span></h6>
<p>This file contain declaration for functions related to memory allocation, such as malloc, calloc, realloc, and free. According to the C standard, this file should not be included directly, and the declaration of those function should be used by including stdlib.h, as malloc.h will not always be present in all C Library. 
</p>
<h6><span class="mw-headline" id="string.h">string.h</span></h6>
<p>This file contain declaration for functions related to string and memory manipulation, such as memcpy, strcpy, memset, strcat, strtol, itoa etc
</p><p><br />
Most C Library will use a very complex syntax to declare these functions, because the good declaration depend on variable set for a specific build, and will contain lot of compiler specific directive that will often be hard to use with other compilers. It can be use to toggle feature used for debugging, or feature of the compiler's C runtime, which tend to make it hard to have standard C functions declaration that are consistent across different version of C headers from different implementation of the C Library, and it's most likely each building environment will require his own version of the C function header declaration to function properly with all possible compilations options.
</p><p>This is an example of string.h from android glibc2.7-4.6
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define strcpy(dest, src) \</span>
<span class="cp">  ((__ssp_bos (dest)&#160;!= (size_t) -1)                                    \</span>
<span class="cp">  &#160;? __builtin___strcpy_chk (dest, src, __ssp_bos (dest))               \</span>
<span class="cp">  &#160;: __strcpy_ichk (dest, src))</span>
<span class="k">static</span><span class="w"> </span><span class="kr">inline</span><span class="w"> </span><span class="n">__attribute__</span><span class="p">((</span><span class="n">__always_inline__</span><span class="p">))</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"></span>
<span class="n">__strcpy_ichk</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">__restrict__</span><span class="w"> </span><span class="n">__dest</span><span class="p">,</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">__restrict__</span><span class="w"> </span><span class="n">__src</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="n">__builtin___strcpy_chk</span><span class="w"> </span><span class="p">(</span><span class="n">__dest</span><span class="p">,</span><span class="w"> </span><span class="n">__src</span><span class="p">,</span><span class="w"> </span><span class="n">__ssp_bos</span><span class="w"> </span><span class="p">(</span><span class="n">__dest</span><span class="p">));</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h6><span class="mw-headline" id="math.h">math.h</span></h6>
<p>This file contain declaration for functions related to math functions, either to deal with floating point numbers, trigonometric functions, or arithmetic/logical operations
</p>
<h6><span class="mw-headline" id="stdio.h">stdio.h</span></h6>
<p>This file contain declaration for functions related to i/o functions, mostly used to deal with file and text formatting functions, such as fopen, fread, fwrite, fclose, printf, sscanf etc
</p><p><br />
</p><p><br />
</p>
<h4><span class="mw-headline" id="the_C_runtime">the C runtime</span></h4>
<p>It often take the form of a static library that will be linked statically into the executable file generated. Any specific functions the compiler need to generate executable code for a particular plateform that is not part of the set of standard C functions will be part of the compiler's C runtime.
</p><p>Features of C compilers that will require some functions from the C runtime:
</p>
<ul><li>memory and stack runtime security check</li>
<li>performance profiling</li>
<li>RTTI (run time type information for c++ class using virtual functions)</li>
<li>64 bit integer arithmetic or logical operation on 32 bit arch</li>
<li>system specific functions to initialize and terminate the application before and after the execution of the 'main' function.</li></ul>
<p>to have compiler independent executable either&#160;:
</p>
<ul><li>Those feature must be disabled.</li>
<li>Write an implementation of the compiler's runtime, the source of the runtime is often shipped with compilers, so you can copy / paste the code of the runtime function used, and declare them either statically in the exe/shared lib, or resolve reference to them at runtime as imported function.</li>
<li>Make your own version of the functions to replace the compiler's specific runtime function in sort that it doesn't have to generate any call to its runtime during compilation.</li></ul>
<p><br />
It's not absolutely necessary to avoid dependence on a C Compiler runtime for executable or shared library, as the code will be linked statically with them, but they can include code that reference system specific functions, specially for the code that relate to application initialization and termination, and it can be a bit of overhead in the exe file. Some of the runtime function can be ok, but it's hard to make sure which one the compiler will use unless you prevent it to link it's runtime in the exe, in which case you'll see the reference to the runtime as unresolved symbol at link time. And you might not want to have to deal with specific initialization code that compiler's runtime may need to run the executable.
</p><p>For static library, it is necessary if the static library has to be linked with a program compiled with a different compiler. Because the runtime of the library's compiler will conflict with the runtime of the other program's compiler.
</p>
<h2><span class="mw-headline" id="how_to_write_build_environment_independent_code">how to write build environment independent code</span></h2>
<p>Most program made in C will use some functions of the standard C Library, the policy can either be&#160;:
</p>
<ul><li>Making it easy to port dependence on the functions of the C library in existing application. Then need to implement a library that is as compatible as possible with other C Libraries, but without using anything specific to the build environment to implement it.</li>
<li>To provide a totally different internal api to manipulate memory, strings , math and file, and then need to totally rewrite code that use them in an application to port it.</li>
<li>To provide a specific internal api, but also providing the functions compliant with standard C library.</li></ul>
<p>The simplest is to declare functions with the same parameters and return type than the ones of the standard C Library, but with a different name. Using a suffix or prefix in the name of the function declaration is generally convenient, application will have to use this name instead of the standard C function name.
</p><p>Those functions should be defined in header files that have the same organisation than the standard C library to make porting easier.
</p><p>The header file of the standard C library used to compile the applications will not be the ones the C compiler expect as the C Library header, but an os specific version of the header containing the declaration of the standard C functions replacement, and all dependences to the functions of Standard C Library in the application will be switched to this specific library that the compiler will not recognize as functions of the standard C Library.
</p>
<h4><span class="mw-headline" id="intel_calling_conventions">intel calling conventions</span></h4>
<p>Each cpu architecture have their own set of calling convention, most intel compiler will support any of those in a standard manner:
</p>
<ul><li>for intel i386</li></ul>
<ol><li>__cdecl&#160;: arguments are passed on the stack, and the stack is restored by the caller after the call, integer return value in eax</li>
<li>__stdcall&#160;: the argument are passed on the stack, and the stack is restored by the function ,integer return value in eax</li></ol>
<p>__cdecl is safer, because the functions have no way to know how the caller passed the argument, but __stdcall is faster and more compatible even with older compilers. on i386 linux, gcc will use a calling convention identical to __cdecl by default.
</p>
<ul><li>for intel x64</li></ul>
<ol><li>sysv&#160;: calling convention used by default in intel 64 bit sysV platform.</li>
<li>microsoft&#160;: calling convention supported by microsoft 64 bit compilers and 64 bit system.</li></ol>
<p><br />
</p>
<h4><span class="mw-headline" id="creating_simple_header_file_to_replace_the_standard_C_library_declarations_for_i386">creating simple header file to replace the standard C library declarations for i386</span></h4>
<p>so this declaration in string.h from gcc C Library header file
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define strcpy(dest, src) \</span>
<span class="cp">  ((__ssp_bos (dest)&#160;!= (size_t) -1)                                    \</span>
<span class="cp">  &#160;? __builtin___strcpy_chk (dest, src, __ssp_bos (dest))               \</span>
<span class="cp">  &#160;: __strcpy_ichk (dest, src))</span>
<span class="k">static</span><span class="w"> </span><span class="kr">inline</span><span class="w"> </span><span class="n">__attribute__</span><span class="p">((</span><span class="n">__always_inline__</span><span class="p">))</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"></span>
<span class="n">__strcpy_ichk</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">__restrict__</span><span class="w"> </span><span class="n">__dest</span><span class="p">,</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">__restrict__</span><span class="w"> </span><span class="n">__src</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="n">__builtin___strcpy_chk</span><span class="w"> </span><span class="p">(</span><span class="n">__dest</span><span class="p">,</span><span class="w"> </span><span class="n">__src</span><span class="p">,</span><span class="w"> </span><span class="n">__ssp_bos</span><span class="w"> </span><span class="p">(</span><span class="n">__dest</span><span class="p">));</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>would become this in build independent os_string.h
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="nf">os_strcpy</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">dest</span><span class="p">,</span><span class="w">  </span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">src</span><span class="p">);</span><span class="w"></span>
</pre></div>
<p><br />
</p>
<h4><span class="mw-headline" id="adding_compiler_specific_directive">adding compiler specific directive</span></h4>
<p>now it still need to specify the functions attribute like calling convention , if the function is local, imported or exported, in a way that every compilers will understand and apply, so you need the equivalent of an stddef.h 
</p><p>os_def.h
</p><p>if compiling for x64, the calling convention for x64 need to be used instead of __cdecl. the Microsoft calling convention will be supported as well by gcc, so it would be preferable to use, as Microsoft compilers do not support the sysV calling convention.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#ifdef MSVC_VER</span>
<span class="cp">#define OS_API_CALL __cdecl</span>
<span class="cp">#endif</span>

<span class="cp">#ifdef GNU_C</span>
<span class="cp">#define OS_API_CALL attribute(&#39;__cdecl&#39;)</span>
<span class="cp">#endif</span>
</pre></div>
<p>The further declaration of the C functions then use preprocessor variable to generate the code specific to the compiler used to compile it.
</p><p>os_string.h
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">OS_API_CALL</span><span class="w"> </span><span class="n">os_strcpy</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">dest</span><span class="p">,</span><span class="w">  </span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">src</span><span class="p">);</span><span class="w"></span>
</pre></div>
<p><br />
</p>
<h4><span class="mw-headline" id="implementing_the_function">implementing the function</span></h4>
<p>Compiler specific attributes doesn't need to be specified in the function implementation, because the header file containing its declaration is included so the compiler will consider automatically that this function is the implementation of the one being declared in the header, and apply automatically all the attribute present in the declaration. If the return type, name and argument type of the function definition match the declaration, the compiler will apply automatically all the attributes of the declaration to the implementation.
</p><p><br />
os_string.c
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;os_def.h&quot;</span><span class="c1"> </span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;os_string.h&quot;</span><span class="cp"></span>

<span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">os_strcpy</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">dest</span><span class="p">,</span><span class="w">  </span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">src</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">      </span><span class="c1">//copy the string and return;</span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p><br />
</p>
<h4><span class="mw-headline" id="using_it_in_an_application">using it in an application</span></h4>
<p>main.c
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;os_def.h&quot;</span><span class="c1"> </span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;os_string.h&quot;</span><span class="cp"></span>

<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">argc</span><span class="p">,</span><span class="kt">char</span><span class="w"> </span><span class="o">**</span><span class="n">argv</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">   </span><span class="kt">char</span><span class="w"> </span><span class="n">my_string</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span><span class="w"></span>

<span class="w">   </span><span class="n">os_strcpy</span><span class="p">(</span><span class="n">my_string</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="w"></span>

<span class="p">}</span><span class="w"></span>
</pre></div>
<p><br />
Like this, it make sure the compiler will use the good declaration of os_strcpy , and any specific syntax needed by the compiler for the particular build is handled in os_def.h.
</p><p>Then program should be compiled with '-nodefaultlibs' with gcc, or 'nodefaultlibrary' (ignore all default library in the linker settings) with visual studio , in sort that it doesn't attempt to link either the runtime or any build specific library in the generated executable code, which make the executable generated as independent as possible on the build environment, and dependent explicitly on your os specific implementation of the C Library functions.
</p><p><br />
</p>
<h4><span class="mw-headline" id="making_port_easier">making port easier</span></h4>
<p>Some preprocessor directives can be used to automatically transform call to the functions of the standard C library to call made to the os specific function.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">OS_API_CALL</span><span class="w"> </span><span class="n">os_strcpy</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">dest</span><span class="p">,</span><span class="w">  </span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">src</span><span class="p">);</span><span class="w"></span>

<span class="cp">#define strcpy os_strcpy</span>
</pre></div>
<p>Like this, the preprocessor will transform any direct call to strcpy to os_strcpy automatically before the compiler start to parse the file, so all references to standard C functions can easily be translated to call to the os specific functions to make the port of application that make direct call to function of the C library easier.
</p><p>Using a preprocessor definition is not always reliable, because some library or other programs can redefine the C functions as macros, but normally it should issue a warning if that happen, and either the redefinition in the library should be ignored, or either the definition of those macros should be set to use the os function. 
</p>
<h4><span id="handling_import.2Fexport"></span><span class="mw-headline" id="handling_import/export">handling import/export</span></h4>
<p>Imports and exports are not essentially handled by the compiler, they are handled by the linker and depend on the ABI used, but compilers often have a way to tell the linker how the functions should be resolved at runtime. 
</p><p>When using imported function, the os will be responsible for resolving the address of all imported symbols at runtime.
</p><p>If the C library is to be compiled as a shared Library, then the function need to be declared as local exported functions when compiling the C library, and as imported function in all the programs that will be linked with it.
</p><p>os_def.h
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#ifdef MSVC_VER</span>

<span class="w">  </span><span class="cp">#define OS_API_CALL __cdecl</span>

<span class="w">  </span><span class="cp">#define OS_SHARED __decslspec(dllimport) </span>
<span class="w">  </span><span class="cp">#define OS_EXPORT __decslspec(dllexport) </span>

<span class="cp">#endif</span>

<span class="cp">#ifdef __GNU_C__</span>
<span class="w">  </span><span class="cp">#define OS_API_CALL attribute(&#39;__cdecl&#39;)</span>

<span class="w">  </span><span class="cm">/* </span>
<span class="cm">   All symbols are exported by default in elf and symbols are just set as unresolved at link time if they are not defined, so empty declaration. </span>
<span class="cm">  */</span><span class="w"></span>
<span class="w">  </span><span class="cp">#define OS_SHARED                                  </span>
<span class="w">  </span><span class="cp">#define OS_EXPORT </span>
<span class="cp">#endif</span>


<span class="cp">#ifndef OS_LIBC_FUNC</span>
<span class="w">  </span><span class="cp">#define OS_LIBC_FUNC OS_SHARED</span>
<span class="cp">#endif</span>
</pre></div>
<p>os_string.h
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="n">OS_LIBC_FUNC</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">OS_API_CALL</span><span class="w"> </span><span class="n">os_strcpy</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">dest</span><span class="p">,</span><span class="w">  </span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">src</span><span class="p">);</span><span class="w"></span>

<span class="cp">#define strcpy os_strcpy</span>
</pre></div>
<p><br />
os_string.c
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#define OS_LIBC_FUNC OS_EXPORT</span>

<span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;os_def.h&quot;</span><span class="c1"> </span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;os_string.h&quot;</span><span class="cp"></span>

<span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">os_strcpy</span><span class="w"> </span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">dest</span><span class="p">,</span><span class="w">  </span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">src</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">      </span><span class="c1">//copy the string and return;</span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p><br />
</p><p>main.c
</p><p>The source of the application shouldn't change, excepted the standard C function name can be used due to the preprocessor definition. 
</p><p><br />
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;os_def.h&quot;</span><span class="c1"> </span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;os_string.h&quot;</span><span class="cp"></span>
<span class="w"> </span>
<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">argc</span><span class="p">,</span><span class="kt">char</span><span class="w"> </span><span class="o">**</span><span class="n">argv</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">   </span><span class="kt">char</span><span class="w"> </span><span class="n">my_string</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span><span class="w"></span>
<span class="w"> </span>
<span class="w">   </span><span class="n">strcpy</span><span class="p">(</span><span class="n">my_string</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="w"></span>
<span class="w"> </span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p><br />
</p>
<h2><span class="mw-headline" id="implementing_the_base_C_functions_for_intel_cpu">implementing the base C functions for intel cpu</span></h2>
<!-- 
NewPP limit report
Cached time: 20250212013400
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.081 seconds
Real time usage: 1.739 seconds
Preprocessor visited node count: 172/1000000
Post‐expand include size: 816/2097152 bytes
Template argument size: 9/2097152 bytes
Highest expansion depth: 4/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 15229/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    5.990      1 -total
 88.36%    5.293      1 Template:Disputed
 38.33%    2.296      1 Template:DiscussThis
 10.22%    0.612      1 Template:Lovecraftian
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3404-0!canonical and timestamp 20250212013358 and revision id 17233.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=User:H0bby1&amp;oldid=17233">https://wiki.osdev.org/index.php?title=User:H0bby1&amp;oldid=17233</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Lovecraftian" title="Category:Lovecraftian">Lovecraftian</a></li><li><a href="./Category:Disputed_Pages" title="Category:Disputed Pages">Disputed Pages</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=User%3AH0bby1" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="./User:H0bby1#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-user" class="selected mw-list-item"><a href="./User:H0bby1" title="View the user page [c]" accesskey="c"><span>User page</span></a></li><li id="ca-talk" class="new mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User_talk:H0bby1&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page (page does not exist) [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="./User:H0bby1"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:H0bby1&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:H0bby1&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="https://wiki.osdev.org/Special:WhatLinksHere/User:H0bby1" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/User:H0bby1" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-contributions" class="mw-list-item"><a href="./Special:Contributions/H0bby1" title="A list of contributions by this user"><span>User contributions</span></a></li><li id="t-log" class="mw-list-item"><a href="./Special:Log/H0bby1"><span>Logs</span></a></li><li id="t-userrights" class="mw-list-item"><a href="./Special:UserRights/H0bby1"><span>View user groups</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:H0bby1&amp;oldid=17233" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=User:H0bby1&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	
</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 2 December 2014, at 22:26.</li>
	<li id="footer-info-0">This page has been accessed 2,248 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=User:H0bby1&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.081","walltime":"1.739","ppvisitednodes":{"value":172,"limit":1000000},"postexpandincludesize":{"value":816,"limit":2097152},"templateargumentsize":{"value":9,"limit":2097152},"expansiondepth":{"value":4,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":15229,"limit":5000000},"timingprofile":["100.00%    5.990      1 -total"," 88.36%    5.293      1 Template:Disputed"," 38.33%    2.296      1 Template:DiscussThis"," 10.22%    0.612      1 Template:Lovecraftian"]},"cachereport":{"timestamp":"20250212013400","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":1852});});</script>
</body>
</html>