<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Inline Assembly - OSDev Wiki</title>
<script>document.documentElement.className="client-js";RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"31fe40ffaa4a59a79d72c5a5","wgCSPNonce":false,"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Inline_Assembly","wgTitle":"Inline Assembly","wgCurRevisionId":29235,"wgRevisionId":29235,"wgArticleId":1706,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using deprecated source tags","Assembly"],"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Inline_Assembly","wgRelevantArticleId":1706,"wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRedirectedFrom":
"Inline_assembly","wgMFDisplayWikibaseDescriptions":{"search":false,"nearby":false,"watchlist":false,"tagline":false},"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgVector2022PreviewPages":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgInternalRedirectTargetUrl":"/Inline_Assembly","wgEditSubmitButtonLabelPublish":false};RLSTATE={"site.styles":"ready","user.styles":"ready","user":"ready","user.options":"loading","ext.pygments":"ready","skins.vector.styles.legacy":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.DarkMode.styles":"ready"};RLPAGEMODULES=["mediawiki.action.view.redirect","site","mediawiki.page.ready","mediawiki.toc","skins.vector.legacy.js","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.DarkMode","ext.moderation.notify","ext.moderation.ve","ext.moderation.ajaxhook","ext.moderation.notify.desktop"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.implement("user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});});});</script>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=ext.DarkMode.styles%7Cext.pygments%7Cext.visualEditor.desktopArticleTarget.noscript%7Cskins.vector.styles.legacy&amp;only=styles&amp;skin=vector"/>
<script async="" src="https://wiki.osdev.org/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="https://wiki.osdev.org/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.39.7"/>
<meta name="format-detection" content="telephone=no"/>
<meta name="viewport" content="width=1000"/>
<link rel="icon" href="favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="opensearch_desc.php" title="OSDev Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="api.php?action=rsd"/>
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="https://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<link rel="canonical" href="Inline_Assembly"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Inline_Assembly rootpage-Inline_Assembly skin-vector action-view skin-vector-legacy vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-language-alert-in-sidebar-disabled vector-feature-sticky-header-disabled vector-feature-sticky-header-edit-disabled vector-feature-table-of-contents-disabled vector-feature-visual-enhancement-next-disabled"><div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
<div id="content" class="mw-body" role="main">
	<a id="top"></a>
	<div id="siteNotice"></div>
	<div class="mw-indicators">
	</div>
	<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Inline Assembly</span></h1>
	<div id="bodyContent" class="vector-body">
		<div id="siteSub" class="noprint">From OSDev Wiki</div>
		<div id="contentSub"><span class="mw-redirectedfrom">(Redirected from <a href="https://wiki.osdev.org/index.php?title=Inline_assembly&amp;redirect=no" class="mw-redirect" title="Inline assembly">Inline assembly</a>)</span></div>
		<div id="contentSub2"></div>
		
		<div id="jump-to-nav"></div>
		<a class="mw-jump-link" href="Inline_assembly#mw-head">Jump to navigation</a>
		<a class="mw-jump-link" href="Inline_assembly#searchInput">Jump to search</a>
		<div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><p>The idea behind <b>Inline Assembly</b> is to embed assembler instructions in your C/C++ code, using the <tt>asm</tt> keyword, when there's no option but to use <a href="Assembly" title="Assembly">Assembly</a> language.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" /><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Inline_assembly#Overview"><span class="tocnumber">1</span> <span class="toctext">Overview</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Inline_assembly#Syntax"><span class="tocnumber">2</span> <span class="toctext">Syntax</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="Inline_assembly#Assembler_Template"><span class="tocnumber">2.1</span> <span class="toctext">Assembler Template</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="Inline_assembly#Output_Operands"><span class="tocnumber">2.2</span> <span class="toctext">Output Operands</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="Inline_assembly#Input_Operands"><span class="tocnumber">2.3</span> <span class="toctext">Input Operands</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="Inline_assembly#Clobbered_Registers_List"><span class="tocnumber">2.4</span> <span class="toctext">Clobbered Registers List</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Inline_assembly#Wildcards:_How_you_can_let_the_compiler_choose"><span class="tocnumber">2.5</span> <span class="toctext">Wildcards: How you can let the compiler choose</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-8"><a href="Inline_assembly#Using_C99"><span class="tocnumber">3</span> <span class="toctext">Using C99</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="Inline_assembly#Assigning_Labels"><span class="tocnumber">4</span> <span class="toctext">Assigning Labels</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="Inline_assembly#asm_goto"><span class="tocnumber">5</span> <span class="toctext">asm goto</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="Inline_assembly#Intel_Syntax"><span class="tocnumber">6</span> <span class="toctext">Intel Syntax</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="Inline_assembly#See_Also"><span class="tocnumber">7</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-13"><a href="Inline_assembly#Articles"><span class="tocnumber">7.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="Inline_assembly#Forum_Threads"><span class="tocnumber">7.2</span> <span class="toctext">Forum Threads</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="Inline_assembly#External"><span class="tocnumber">7.3</span> <span class="toctext">External</span></a></li>
</ul>
</li>
</ul>
</div>

<h2><span class="mw-headline" id="Overview">Overview</span></h2>
<p>Sometimes, even though C/C++ is your language of choice, you <b>need</b> to use some assembler code in your operating system. Be it because of extreme optimization needs or because the code you're implementing is highly hardware-specific (like, say, outputting data through a port), the result is the same: there's no way around it. You must use assembly.
</p><p>One of the options you have is writing an assembly function and calling it, however there can be times when even the "call" overhead is too much for you. In that case, what you need is inline assembly, which means inserting arbitrary assembly snippets in the middle of your code, using the <tt>asm()</tt> keyword. The way this keyword works is compiler-specific. This article describes the way it works in GCC since it is by far the most used compiler in the OS world.
</p>
<h2><span class="mw-headline" id="Syntax">Syntax</span></h2>
<p>This is the syntax for using the <tt>asm()</tt> keyword in your C/C++ code:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">asm</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">assembler</span><span class="w"> </span><span class="n">template</span><span class="w"></span>
<span class="w">    </span><span class="o">:</span><span class="w"> </span><span class="n">output</span><span class="w"> </span><span class="n">operands</span><span class="w">                   </span><span class="p">(</span><span class="n">optional</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="o">:</span><span class="w"> </span><span class="n">input</span><span class="w"> </span><span class="n">operands</span><span class="w">                    </span><span class="p">(</span><span class="n">optional</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="o">:</span><span class="w"> </span><span class="n">clobbered</span><span class="w"> </span><span class="n">registers</span><span class="w"> </span><span class="n">list</span><span class="w">          </span><span class="p">(</span><span class="n">optional</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>Assembler template is basically <a href="GAS" title="GAS">GAS</a>-compatible code, except when you have constraints, in which case register names must start with&#160;%% instead of&#160;%. This means that the following two lines of code will both move the contents of the <tt>eax</tt> register into <tt>ebx</tt>:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">asm</span><span class="w"> </span><span class="p">(</span><span class="s">&quot;movl %eax, %ebx&quot;</span><span class="p">);</span><span class="w"></span>
<span class="k">asm</span><span class="w"> </span><span class="p">(</span><span class="s">&quot;movl&#160;%%eax,&#160;%%ebx&quot;</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>Now, you may wonder why this&#160;%% comes in. This is where an interesting feature of inline assembly comes in: you can make use of some of your C variables in your assembly code. And since, in order to make implementation of this mechanism simpler, GCC names these variables %0, %1, and so on in your assembly code, starting from the first variable mentioned in the input/output operand sections. You're required to use this&#160;%% syntax in order to help GCC differentiate between registers and parameters.
</p><p>How exactly operands work will be explained in more details in later sections. For now, it is sufficient to say that if you write something like that:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">int</span><span class="w"> </span><span class="n">a</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="p">;</span><span class="w"></span>
<span class="k">asm</span><span class="w"> </span><span class="p">(</span><span class="s">&quot;movl %1,&#160;%%eax; </span>
<span class="w">      </span><span class="n">movl</span><span class="w"> </span><span class="o">%%</span><span class="n">eax</span><span class="p">,</span><span class="w"> </span><span class="o">%</span><span class="mi">0</span><span class="p">;</span><span class="s">&quot;</span>
<span class="w">     </span><span class="o">:</span><span class="s">&quot;=r&quot;</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="w">        </span><span class="cm">/* output */</span><span class="w"></span>
<span class="w">     </span><span class="o">:</span><span class="s">&quot;r&quot;</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="w">         </span><span class="cm">/* input */</span><span class="w"></span>
<span class="w">     </span><span class="o">:</span><span class="s">&quot;%eax&quot;</span><span class="w">         </span><span class="cm">/* clobbered register */</span><span class="w"></span>
<span class="w">     </span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>then you've managed to copy the value of "a" into "b" using assembly code, effectively using some C variables in your assembly code. Congratulations!
</p><p>The last "clobbered register" section is used in order to tell GCC that your code is using some of the processor's registers, and that it should move any active data from the running program out of this register before executing the asm snippet. In the example above, we move <tt>a</tt> to eax in the first instruction, effectively erasing its content, so we need to ask GCC to clear this register from unsaved data before operation.
</p>
<h3><span class="mw-headline" id="Assembler_Template">Assembler Template</span></h3>
<p>The Assembler Template defines the assembler instructions to inline. The default is to use AT&amp;T syntax here. If you want to use Intel syntax, <tt>-masm=intel</tt> should be specified as a command-line option.
</p><p>As an example, to halt the CPU, you just have to use the following command:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">asm</span><span class="p">(</span><span class="w"> </span><span class="s">&quot;hlt&quot;</span><span class="w"> </span><span class="p">);</span><span class="w"></span>
</pre></div>
<h3><span class="mw-headline" id="Output_Operands">Output Operands</span></h3>
<p>The Output Operands section is used in order to tell the compiler / assembler how it should handle C variables used to store some output from the ASM code. The Output Operands are a list of pairs, each operand consisting of a string literal, known as "constraint", stating where the C variable should be mapped (registers are generally used for optimal performance), and a C variable to map to (in parentheses).
</p><p>In the constraint, 'a' refers to EAX, 'b' to EBX, 'c' to ECX, 'd' to EDX, 'S' to ESI, and 'D' to EDI (read the GCC manual for a full list), assuming that you are coding for the IA32 architecture. An equation sign indicates that your assembly code does not care about the initial value of the mapped variable (which allows some optimization). With all that in mind, it's now pretty clear that the following code sets EAX = 0.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">int</span><span class="w"> </span><span class="n">EAX</span><span class="p">;</span><span class="w"></span>
<span class="k">asm</span><span class="p">(</span><span class="w"> </span><span class="s">&quot;movl $0, %0&quot;</span><span class="w"></span>
<span class="w">   </span><span class="o">:</span><span class="w"> </span><span class="s">&quot;=a&quot;</span><span class="w"> </span><span class="p">(</span><span class="n">EAX</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>Notice that the compiler enumerates the operand starting with %0, and that you don't have to add a register to the clobbered register list if it's used to store an output operand. GCC is smart enough to figure out what to do all by itself.
</p><p>Starting with GCC 3.1, you can use more readable labels instead of the error-prone enumeration:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">int</span><span class="w"> </span><span class="n">current_task</span><span class="p">;</span><span class="w"></span>
<span class="k">asm</span><span class="p">(</span><span class="w"> </span><span class="s">&quot;str&#160;%[output]&quot;</span><span class="w"></span>
<span class="w">   </span><span class="o">:</span><span class="w"> </span><span class="p">[</span><span class="n">output</span><span class="p">]</span><span class="w"> </span><span class="s">&quot;=r&quot;</span><span class="w"> </span><span class="p">(</span><span class="n">current_task</span><span class="p">)</span><span class="w"></span>
<span class="w">    </span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>These labels are in a namespace of their own, and will not collide with any C identifiers. The same can be done for input operands, too.
</p>
<h3><span class="mw-headline" id="Input_Operands">Input Operands</span></h3>
<p>While the Output Operands are generally used for... well... output, the Input Operands allows to parametrize the ASM code; i.e., passing read-only parameters from C code to ASM block. Again, string literals are used to specify the details.
</p><p>If you want to move some value to EAX, you can do it the following way (even though it would certainly be pretty useless to do so instead of directly mapping the value to EAX):
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">int</span><span class="w"> </span><span class="n">randomness</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span><span class="w"></span>
<span class="k">asm</span><span class="p">(</span><span class="w"> </span><span class="s">&quot;movl %0,&#160;%%eax&quot;</span><span class="w"></span>
<span class="w">   </span><span class="o">:</span><span class="w"></span>
<span class="w">   </span><span class="o">:</span><span class="w"> </span><span class="s">&quot;b&quot;</span><span class="w"> </span><span class="p">(</span><span class="n">randomness</span><span class="p">)</span><span class="w"></span>
<span class="w">   </span><span class="o">:</span><span class="w"> </span><span class="s">&quot;eax&quot;</span><span class="w"></span>
<span class="w">    </span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>Note that GCC will always assume that input operands are read-only (unchanged). The correct thing to do when input operands are written to is to list them as outputs, but without using the equation sign because this time their original value matters. Here is a simple example:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">asm</span><span class="p">(</span><span class="s">&quot;mov&#160;%%eax,%%ebx&quot;</span><span class="o">:</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="s">&quot;a&quot;</span><span class="w"> </span><span class="p">(</span><span class="n">amount</span><span class="p">));</span><span class="c1">//useless but it gets the idea</span>
</pre></div>
<p>Eax will contain "amount" and be moved into ebx.
</p>
<h3><span class="mw-headline" id="Clobbered_Registers_List">Clobbered Registers List</span></h3>
<p>It is important to remember one thing: <i>The C/C++ compiler knows nothing about Assembler</i>. For the compiler, the asm statement is opaque, and if you did not specify any output, it might even come to the conclusion that it's a no-op and optimize it away. Some third-party docs indicate that using asm volatile will cause the keyword to not be moved. However, according to the GCC documentation, <i>The volatile keyword indicates that the instruction has important side-effects. GCC will not delete a volatile asm if it is reachable.</i>, which only indicates that it will not be deleted (i.e. whether it may still be moved is an unanswered question). An approach that should work is to use asm (volatile) and put <b>memory</b> in the clobber registers, like so:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="n">__asm__</span><span class="p">(</span><span class="s">&quot;cli&quot;</span><span class="o">:</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="o">:</span><span class="s">&quot;memory&quot;</span><span class="p">);</span><span class="w"> </span><span class="c1">// Will cause the statement not to be moved, but it may be optimized away.</span>
<span class="n">__asm__</span><span class="w"> </span><span class="nf">__volatile__</span><span class="p">(</span><span class="s">&quot;cli&quot;</span><span class="o">:</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="o">:</span><span class="s">&quot;memory&quot;</span><span class="p">);</span><span class="w"> </span><span class="c1">// Will cause the statement not to be moved nor optimized away.</span>
</pre></div>
<p>Since the compiler uses CPU registers for internal optimization of your C/C++ variables, and doesn't know about ASM opcodes, you have to warn it about any registers that might get clobbered as a side effect, so the compiler can save their contents before making your ASM call.
</p><p>The Clobbered Registers List is a comma-separated list of register names, as string literals.
</p>
<h3><span class="mw-headline" id="Wildcards:_How_you_can_let_the_compiler_choose">Wildcards: How you can let the compiler choose</span></h3>
<p>You don't need to tell the compiler which specific register it should use in each operation, and in general, except you have good reasons to prefer one register specifically, you should better let the compiler decide for you.
</p><p>Forcing to use EAX over any other register, for instance, may force the compiler to issue code that will save what was previously in eax in some other register or may introduce unwanted dependencies between operations (pipeline optimization broken)
</p><p>The 'wildcards' constraints allows you to give more freedom to GCC when it comes to input/output mapping:
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1&#125;&#125;&#125;">

<tbody><tr>
<td>The "g" constraint&#160;: <div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="s">&quot;movl $0, %0&quot;</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="s">&quot;=g&quot;</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"></span>
</pre></div>
</td>
<td>x can be whatever the compiler prefers: a register, a memory reference. It could even be a literal constant in another context.
</td></tr>
<tr>
<td>The "r" constraint&#160;: <div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="s">&quot;movl&#160;%%es, %0&quot;</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="s">&quot;=r&quot;</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"></span>
</pre></div>
</td>
<td>you want x to go through a register. If x wasn't optimized as a register, the compiler will then move it to the place it should be. This means that <code>"movl %0,&#160;%%es"&#160;:&#160;: "r" (0x38)</code> is enough to load a segment register.
</td></tr>
<tr>
<td>The "N" constraint&#160;: <div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="s">&quot;outl %0, %1&quot;</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="s">&quot;a&quot;</span><span class="w"> </span><span class="p">(</span><span class="mh">0xFE</span><span class="p">),</span><span class="w"> </span><span class="s">&quot;N&quot;</span><span class="w"> </span><span class="p">(</span><span class="mh">0x21</span><span class="p">)</span><span class="w"></span>
</pre></div>
</td>
<td>tells the value '0x21' can be used as a constant in the out or in operation if ranging from 0 to 255
</td></tr></tbody></table>
<p>There are of course a lot more constraints you can put on the operand selection, machine-dependent or not, which are listed in GCC's manual (see <a rel="nofollow" class="external autonumber" href="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/Simple-Constraints.html#Simple-Constraints">[1]</a>, <a rel="nofollow" class="external autonumber" href="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/Modifiers.html#Modifiers">[2]</a>, <a rel="nofollow" class="external autonumber" href="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/Multi_002dAlternative.html#Multi_002dAlternative">[3]</a>, and <a rel="nofollow" class="external autonumber" href="http://gcc.gnu.org/onlinedocs/gcc-4.4.4/gcc/Machine-Constraints.html#Machine-Constraints">[4]</a>).
</p>
<h2><span class="mw-headline" id="Using_C99">Using C99</span></h2>
<p><tt>asm</tt> is not a keyword when using <tt>gcc -std=c99</tt>. Simply use <tt>gcc -std=gnu99</tt> to use C99 with GNU extensions. Alternatively, you can use <tt>__asm__</tt> as an alternate keyword that works even when the compiler strictly adheres to the standard.
</p>
<h2><span class="mw-headline" id="Assigning_Labels">Assigning Labels</span></h2>
<p>It is possible to assign so-called ASM labels to C/C++ keywords. You can do this by using the <tt>asm</tt> command on variable definitions, as seen in this example:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">int</span><span class="w"> </span><span class="n">some_obscure_name</span><span class="w"> </span><span class="nf">asm</span><span class="p">(</span><span class="s">&quot;param&quot;</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">5</span><span class="p">;</span><span class="w"> </span><span class="c1">// &quot;param&quot; will be accessible in inline Assembly.</span>

<span class="kt">void</span><span class="w"> </span><span class="nf">foo</span><span class="p">()</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">   </span><span class="k">asm</span><span class="p">(</span><span class="s">&quot;mov param,&#160;%%eax&quot;</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>Here's an example of how you can access these variables if you don't explicitly state a name:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">int</span><span class="w"> </span><span class="n">some_obscure_name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">5</span><span class="p">;</span><span class="w"></span>

<span class="kt">void</span><span class="w"> </span><span class="nf">foo</span><span class="p">()</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">   </span><span class="k">asm</span><span class="p">(</span><span class="s">&quot;mov some_obscure_name,&#160;%%eax&quot;</span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>Note that you might also be obliged to use <b>_some_obscure_name</b> (with a leading underscore), depending on your linkage options.
</p>
<h2><span class="mw-headline" id="asm_goto">asm goto</span></h2>
<p>Before GCC 4.5, jumping across inline assembly blocks is not supported. The compiler has no way of keeping track of what's going on,
so incorrect code is almost guaranteed to be generated.
<br />You might have been told that "gotos are evil". If you believe that is so, then asm gotos are your worst nightmare coming true.
However, they do offer some interesting code optimization options.
</p><p>asm goto's are not well documented, but their syntax is as follows:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="w"> </span><span class="k">asm</span><span class="w"> </span><span class="k">goto</span><span class="p">(</span><span class="w"> </span><span class="s">&quot;jmp %l[labelname]&quot;</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="cm">/* no outputs */</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="cm">/* inputs */</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="s">&quot;memory&quot;</span><span class="w"> </span><span class="cm">/* clobbers */</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="n">labelname</span><span class="w"> </span><span class="cm">/* any labels used */</span><span class="w"> </span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>One example where this can be useful, is the CMPXCHG instruction (see <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Compare-and-swap">Compare and Swap</a>), which the Linux kernel source code defines as follows:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cm">/* TODO: You should use modern GCC atomic instruction builtins instead of this. */</span><span class="w"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdint.h&gt;</span><span class="cp"></span>
<span class="cp">#define cmpxchg( ptr, _old, _new ) { \</span>
<span class="cp">  volatile uint32_t *__ptr = (volatile uint32_t *)(ptr);   \</span>
<span class="cp">  uint32_t __ret;                                     \</span>
<span class="cp">  asm volatile( &quot;lock; cmpxchgl %2,%1&quot;           \</span>
<span class="cp">   &#160;: &quot;=a&quot; (__ret), &quot;+m&quot; (*__ptr)                \</span>
<span class="cp">   &#160;: &quot;r&quot; (_new), &quot;0&quot; (_old)                     \</span>
<span class="cp">   &#160;: &quot;memory&quot;);				 \</span>
<span class="cp">  );                                             \</span>
<span class="cp">  __ret;                                         \</span>
<span class="cp">}</span>
</pre></div>
<p>In addition to returning the current value in EAX, CMPXCHG sets the zero flag (Z) when successful. Without asm gotos, your code will have to check the returned value; 
this CMP instruction can be avoided as follows:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cm">/* TODO: You should use modern GCC atomic instruction builtins instead of this. */</span><span class="w"></span>
<span class="c1">// Works for both 32 and 64 bit</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdint.h&gt;</span><span class="cp"></span>
<span class="cp">#define cmpxchg( ptr, _old, _new, fail_label ) { \</span>
<span class="cp">  volatile uint32_t *__ptr = (volatile uint32_t *)(ptr);   \</span>
<span class="cp">  asm goto( &quot;lock; cmpxchg %1,%0 \t\n&quot;           \</span>
<span class="cp">    &quot;jnz %l[&quot; #fail_label &quot;] \t\n&quot;               \</span>
<span class="cp">   &#160;: </span><span class="cm">/* empty */</span><span class="cp">                                \</span>
<span class="cp">   &#160;: &quot;m&quot; (*__ptr), &quot;r&quot; (_new), &quot;a&quot; (_old)       \</span>
<span class="cp">   &#160;: &quot;memory&quot;, &quot;cc&quot;                             \</span>
<span class="cp">   &#160;: fail_label );                              \</span>
<span class="cp">}</span>
</pre></div>
<p>This new macro could then be used as follows:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">struct</span><span class="w"> </span><span class="nc">Item</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">  </span><span class="k">volatile</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">Item</span><span class="o">*</span><span class="w"> </span><span class="n">next</span><span class="p">;</span><span class="w"></span>
<span class="p">};</span><span class="w"></span>

<span class="k">volatile</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">Item</span><span class="w"> </span><span class="o">*</span><span class="n">head</span><span class="p">;</span><span class="w"></span>

<span class="kt">void</span><span class="w"> </span><span class="nf">addItem</span><span class="p">(</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">Item</span><span class="w"> </span><span class="o">*</span><span class="n">i</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">  </span><span class="k">volatile</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">Item</span><span class="w"> </span><span class="o">*</span><span class="n">oldHead</span><span class="p">;</span><span class="w"></span>
<span class="nl">again</span><span class="p">:</span><span class="w"></span>
<span class="w">  </span><span class="n">oldHead</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">head</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="n">i</span><span class="o">-&gt;</span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">oldHead</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="n">cmpxchg</span><span class="p">(</span><span class="w"> </span><span class="o">&amp;</span><span class="n">head</span><span class="p">,</span><span class="w"> </span><span class="n">oldHead</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">again</span><span class="w"> </span><span class="p">);</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="Intel_Syntax">Intel Syntax</span></h2>
<p>You can let GCC use intel syntax by enabling it in inline Assembly, like so:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">asm</span><span class="p">(</span><span class="s">&quot;.intel_syntax noprefix&quot;</span><span class="p">);</span><span class="w"></span>
<span class="k">asm</span><span class="p">(</span><span class="s">&quot;mov eax, ebx&quot;</span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>Similarly, you can switch back to AT&amp;T syntax by using the following snippet:
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">asm</span><span class="p">(</span><span class="s">&quot;.att_syntax prefix&quot;</span><span class="p">);</span><span class="w"></span>
<span class="k">asm</span><span class="p">(</span><span class="s">&quot;mov %ebx, %eax&quot;</span><span class="p">);</span><span class="w"></span>
</pre></div>
<p>This way you can combine Intel syntax and AT&amp;T syntax inline Assembly. Note that once you trigger one of these syntax types, everything below the command in the source file will be assembled using this syntax, so don't forget to switch back when necessary, or you might get lots of compile errors!
</p><p>There is also a command-line option <tt>-masm=intel</tt> to globally trigger Intel syntax.
</p><p>GCC also supports multiple assembler dialects by wrapping text in braces separated by a vertical bar. The two examples above can be combined as follows, where the first version will be emitted when <tt>-masm=att</tt> is used, or no <tt>-masm</tt> is provided, and the second will be used when <tt>-masm=intel</tt> is provided.
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="k">asm</span><span class="p">(</span><span class="s">&quot;{mov %ebx, %eax|mov eax, ebx}&quot;</span><span class="p">);</span><span class="w"></span>
</pre></div>
<h2><span class="mw-headline" id="See_Also">See Also</span></h2>
<h3><span class="mw-headline" id="Articles">Articles</span></h3>
<ul><li><a href="Inline_Assembly/Examples" title="Inline Assembly/Examples">Inline Assembly/Examples</a> - useful and commonly used functions</li></ul>
<h3><span class="mw-headline" id="Forum_Threads">Forum Threads</span></h3>
<ul><li><a rel="nofollow" class="external text" href="http://forum.osdev.org/viewtopic.php?f=11&amp;t=24168&amp;p=196655&amp;hilit=asm+volatile+moved">asm volatile being moved</a></li></ul>
<h3><span class="mw-headline" id="External">External</span></h3>
<ul><li><a rel="nofollow" class="external text" href="http://gcc.gnu.org/onlinedocs/">GCC Manuals</a></li>
<li><a rel="nofollow" class="external text" href="http://web.archive.org/web/20041210030000/http://www-106.ibm.com/developerworks/library/l-ia.html">Inline assembly for x86 in Linux (by IBM)</a></li>
<li><a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-us/library/26td21ds(VS.80).aspx">Visual C++ Compiler Intrinsics</a></li></ul>
<!-- 
NewPP limit report
Cached time: 20250212011321
Cache expiry: 86400
Reduced expiry: false
Complications: [show‐toc]
CPU time usage: 0.097 seconds
Real time usage: 2.684 seconds
Preprocessor visited node count: 158/1000000
Post‐expand include size: 162/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 3/100
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 18509/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.834      1 Template:Wikitable
100.00%    0.834      1 -total
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1706-0!canonical and timestamp 20250212011319 and revision id 29235.
 -->
</div>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://wiki.osdev.org/index.php?title=Inline_Assembly&amp;oldid=29235">https://wiki.osdev.org/index.php?title=Inline_Assembly&amp;oldid=29235</a>"</div></div>
		<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="./Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="https://wiki.osdev.org/index.php?title=Category:Pages_using_deprecated_source_tags&amp;action=edit&amp;redlink=1" class="new" title="Category:Pages using deprecated source tags (page does not exist)">Pages using deprecated source tags</a></li><li><a href="./Category:Assembly" title="Category:Assembly">Assembly</a></li></ul></div></div>
	</div>
</div>

<div id="mw-navigation">
	<h2>Navigation menu</h2>
	<div id="mw-head">
		

<nav id="p-personal" class="vector-menu mw-portlet mw-portlet-personal vector-user-menu-legacy" aria-labelledby="p-personal-label" role="navigation"  >
	<h3
		id="p-personal-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Personal tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="pt-login" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Inline+Assembly" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o"><span>Log in</span></a></li><li id="pt-darkmode" class="mw-list-item"><a href="Inline_assembly#" class="ext-darkmode-link"><span>Dark mode</span></a></li></ul>
		
	</div>
</nav>

		<div id="left-navigation">
			

<nav id="p-namespaces" class="vector-menu mw-portlet mw-portlet-namespaces vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-namespaces-label" role="navigation"  >
	<h3
		id="p-namespaces-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Namespaces</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-nstab-main" class="selected mw-list-item"><a href="Inline_Assembly" title="View the content page [c]" accesskey="c"><span>Page</span></a></li><li id="ca-talk" class="mw-list-item"><a href="./Talk:Inline_Assembly" rel="discussion" title="Discussion about the content page [t]" accesskey="t"><span>Discussion</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet vector-menu-dropdown" aria-labelledby="p-variants-label" role="navigation"  >
	<input type="checkbox"
		id="p-variants-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-variants"
		class="vector-menu-checkbox"
		aria-labelledby="p-variants-label"
	/>
	<label
		id="p-variants-label"
		 aria-label="Change language variant"
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">English</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

		</div>
		<div id="right-navigation">
			

<nav id="p-views" class="vector-menu mw-portlet mw-portlet-views vector-menu-tabs vector-menu-tabs-legacy" aria-labelledby="p-views-label" role="navigation"  >
	<h3
		id="p-views-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Views</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="ca-view" class="selected mw-list-item"><a href="Inline_Assembly"><span>Read</span></a></li><li id="ca-viewsource" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Inline_Assembly&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e"><span>View source</span></a></li><li id="ca-history" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Inline_Assembly&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li></ul>
		
	</div>
</nav>

			

<nav id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-menu-dropdown" aria-labelledby="p-cactions-label" role="navigation"  title="More options" >
	<input type="checkbox"
		id="p-cactions-checkbox"
		role="button"
		aria-haspopup="true"
		data-event-name="ui.dropdown-p-cactions"
		class="vector-menu-checkbox"
		aria-labelledby="p-cactions-label"
	/>
	<label
		id="p-cactions-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">More</span>
	</label>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"></ul>
		
	</div>
</nav>

			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<div>
			<h3 >
				<label for="searchInput">Search</label>
			</h3>
		<form action="https://wiki.osdev.org/index.php" id="searchform"
			class="vector-search-box-form">
			<div id="simpleSearch"
				class="vector-search-box-inner"
				 data-search-loc="header-navigation">
				<input class="vector-search-box-input"
					 type="search" name="search" placeholder="Search OSDev Wiki" aria-label="Search OSDev Wiki" autocapitalize="sentences" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput"
				>
				<input type="hidden" name="title" value="Special:Search">
				<input id="mw-searchButton"
					 class="searchButton mw-fallbackSearchButton" type="submit" name="fulltext" title="Search the pages for this text" value="Search">
				<input id="searchButton"
					 class="searchButton" type="submit" name="go" title="Go to a page with this exact name if it exists" value="Go">
			</div>
		</form>
	</div>
</div>

		</div>
	</div>
	

<div id="mw-panel">
	<div id="p-logo" role="banner">
		<a class="mw-wiki-logo" href="index.html"
			title="Visit the main page"></a>
	</div>
	

<nav id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation vector-menu-portal portal" aria-labelledby="p-navigation-label" role="navigation"  >
	<h3
		id="p-navigation-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Navigation</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-mainpage" class="mw-list-item"><a href="index.html" title="Visit the main page [z]" accesskey="z"><span>Main Page</span></a></li><li id="n-portal" class="mw-list-item"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things"><span>Forums</span></a></li><li id="n-FAQ" class="mw-list-item"><a href="./Category:FAQ"><span>FAQ</span></a></li><li id="n-OS-Projects" class="mw-list-item"><a href="Projects"><span>OS Projects</span></a></li><li id="n-randompage" class="mw-list-item"><a href="https://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x"><span>Random page</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-about" class="vector-menu mw-portlet mw-portlet-about vector-menu-portal portal" aria-labelledby="p-about-label" role="navigation"  >
	<h3
		id="p-about-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">About</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="n-This-site" class="mw-list-item"><a href="./OSDevWiki:About"><span>This site</span></a></li><li id="n-Joining" class="mw-list-item"><a href="./OSDevWiki:Joining"><span>Joining</span></a></li><li id="n-Editing-help" class="mw-list-item"><a href="./OSDevWiki:Editing"><span>Editing help</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="./Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r"><span>Recent changes</span></a></li></ul>
		
	</div>
</nav>


<nav id="p-tb" class="vector-menu mw-portlet mw-portlet-tb vector-menu-portal portal" aria-labelledby="p-tb-label" role="navigation"  >
	<h3
		id="p-tb-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">Tools</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li id="t-whatlinkshere" class="mw-list-item"><a href="./Special:WhatLinksHere/Inline_Assembly" title="A list of all wiki pages that link here [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="https://wiki.osdev.org/Special:RecentChangesLinked/Inline_Assembly" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-specialpages" class="mw-list-item"><a href="./Special:SpecialPages" title="A list of all special pages [q]" accesskey="q"><span>Special pages</span></a></li><li id="t-print" class="mw-list-item"><a href="javascript:print();" rel="alternate" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li><li id="t-permalink" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Inline_Assembly&amp;oldid=29235" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="https://wiki.osdev.org/index.php?title=Inline_Assembly&amp;action=info" title="More information about this page"><span>Page information</span></a></li></ul>
		
	</div>
</nav>

	

<nav id="p-lang" class="vector-menu mw-portlet mw-portlet-lang vector-menu-portal portal" aria-labelledby="p-lang-label" role="navigation"  >
	<h3
		id="p-lang-label"
		
		class="vector-menu-heading "
	>
		<span class="vector-menu-heading-label">In other languages</span>
	</h3>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list"><li class="interlanguage-link interwiki-de mw-list-item"><a href="http://www.lowlevel.eu/wiki/Inline-Assembler_mit_GCC" title="Inline-Assembler mit GCC – Deutsch" lang="de" hreflang="de" class="interlanguage-link-target"><span>Deutsch</span></a></li></ul>
		
	</div>
</nav>

</div>

</div>

<footer id="footer" class="mw-footer" role="contentinfo" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 29 August 2024, at 07:40.</li>
	<li id="footer-info-0">This page has been accessed 19,499 times.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="./OSDev_Wiki:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="./OSDev_Wiki:About">About OSDev Wiki</a></li>
	<li id="footer-places-disclaimer"><a href="./OSDev_Wiki:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-mobileview"><a href="https://wiki.osdev.org/index.php?title=Inline_Assembly&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/"><img src="resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="resources/assets/poweredby_mediawiki_132x47.png 1.5x, resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" loading="lazy"/></a></li>
</ul>

</footer>

<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.097","walltime":"2.684","ppvisitednodes":{"value":158,"limit":1000000},"postexpandincludesize":{"value":162,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":3,"limit":100},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":18509,"limit":5000000},"timingprofile":["100.00%    0.834      1 Template:Wikitable","100.00%    0.834      1 -total"]},"cachereport":{"timestamp":"20250212011321","ttl":86400,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":2785});});</script>
</body>
</html>