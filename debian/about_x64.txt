GCC 64位程序的makefile条件编译心得——32位版与64位版、debug版与release版（兼容MinGW、TDM-GCC）
转自：作者：zyl910
　　为了适应现在越来越流行的64位系统，经常需要将代码分别编译为32位版和64位版。其次，除了需要生成debug版用于开发测试外，
还需要生成release版用于发布。本文介绍了如何利用makefile条件编译来生成这些版本，而且不仅兼容Linux下的GCC，还支持MinGW、
TDM-GCC等Windows下的GCC编译器。
一、C程序代码
　　为了测试条件编译的效果，以下面这个C语言程序为例（gcc64_make.c）
#include <stdio.h>
#include <assert.h>
// 获取程序位数（被编译为多少位的代码）
int GetProgramBits()
{
    return sizeof(int*) * 8;
}
int main(int argc, char* argv[])
{
    printf("bits:\t%d\n", GetProgramBits());
    assert( argc>1 );
    return 0;
}
main函数中，前两条语句的含义为——
第一条语句用于显示当前程序的位数。如果编译为32位版，将会显示"bits: 32";如果编译为64位版，将会显示“"bits: 64"。
第二条语句是一条断言，需要argc变量大于1。如果编译为debug版，若运行时未加命令参数，该断言失败，于是输出错误信息并终止程序;
如果编译为release版，所有断言被屏蔽，不会有错误信息。

二、GCC命令行参数
　　复习一下GCC命令行参数，看看各个版本的区别——
32位版：加上 -m32 参数，生成32位的代码。
64位版：加上 -m64 参数，生成64位的代码。
debug版：加上 -g 参数，生成调试信息。
release版：加上 -static 参数，进行静态链接，使程序不再依赖动态库。加上 -O3 参数，进行最快速度优化。
	加上-DNDEBUG参数，定义NDEBUG宏，屏蔽断言。
　　当没有-m32或-m64参数时，一般情况下会生成跟操作系统位数一致的代码，但某些编译器存在例外，例如——
32位Linux下的GCC，默认是编译为32位代码。
64位Linux下的GCC，默认是编译为64位代码。
Window系统下的MinGW，总是编译为32位代码。因为MinGW只支持32位代码。
Window系统下的MinGW-w64（例如安装了TDM-GCC，选择MinGW-w64），默认是编译为64位代码，包括在32位的Windows系统下。

三、makefile代码
　　makefile的代码为——
# flags
CC = gcc
CFLAGS = -Wall
LFLAGS = 
# args
RELEASE =0
BITS =
# [args] 生成模式. 0代表debug模式, 1代表release模式. make RELEASE=1.
ifeq ($(RELEASE),0)
    # debug
    CFLAGS += -g
else
    # release
    CFLAGS += -static -O3 -DNDEBUG
    LFLAGS += -static
endif
# [args] 程序位数. 32代表32位程序, 64代表64位程序, 其他默认. make BITS=32.
ifeq ($(BITS),32)
    CFLAGS += -m32
    LFLAGS += -m32
else
    ifeq ($(BITS),64)
        CFLAGS += -m64
        LFLAGS += -m64
    else
    endif
endif
.PHONY : all clean
# files
TARGETS = gcc64_make
OBJS = gcc64_make.o
all : $(TARGETS)
gcc64_make : $(OBJS)
    $(CC) $(LFLAGS) -o $@ $^
gcc64_make.o : gcc64_make.c
    $(CC) $(CFLAGS) -c $<
clean :
    rm -f $(OBJS) $(TARGETS) $(addsuffix .exe,$(TARGETS))

    为了控制条件编译，定义了RELEASE、BITS这两个变量，分别赋初值。然后用ifeq判断RELEASE、BITS变量的值，分别
加上不同的参数。因赋有初值，直接执行“make”时，编译得到的是默认位数的debug版。
若在执行make时给变量赋值，将会得到不同的版本——
make RELEASE=0：（默认位数的）debug版。
make RELEASE=1：（默认位数的）release版。
make BITS=32：32位（的debug）版。
make BITS=64：64位（的debug）版。
make RELEASE=0 BITS=32：32位的debug版。
make RELEASE=0 BITS=64：64位的debug版。
make RELEASE=1 BITS=32：32位的release版。
make RELEASE=1 BITS=64：64位的release版。
　　该makefile的代码风格是精心设计的，可以很方便的扩展——
需要增加代码文件或依赖关系时，修改“# files”之后的内容。
需要调整编译参数时，修改前半部分的参数变量。
需要增加新的条件编译参数时，在“# args”定义一个变量并赋初值，然后再在后面用“ifeq”判断变量来调整编译参数。
　　最后的“rm -f $(OBJS) $(TARGETS) $(addsuffix .exe,$(TARGETS))”是为了兼容MinGW、TDM-GCC等Windows下的GCC编译器而设计的——
装好MSYS，再配置一下PATH环境变量，Windows中也可以使用rm命令删除文件。
因Windows下的可执行文件的扩展名是exe，所以使用了addsuffix函数增加“.exe”扩展名。
因Linux下不会生成.exe可执行文件，而Windows下不会生成无扩展名的可执行文件，导致rm会因找不到文件而报错。这时可以加上-f参数忽略该错误。

------------------------------------以上内容转自网络------------------------------------------------------

当我在32位debian上测试时，make过程提示缺少头文件： sys/cdefs.h,这是因为我没有安装gcc-multilib的缘故，安装完改包即可，但是在32位系统上编译
生成的64位程序还是不能执行的。
另：在windows下使用vs2010生成64位可执行程序的方法：
1、在菜单的"生成"菜单栏中选择"配置管理器"
2、在"解决方案平台"中选择"新建"
3、选择"x64"并确定即可。

