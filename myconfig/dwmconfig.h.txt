static const char font[] = "YaHei Consolas Hybrid:size=10"; //定义字体
#define NUMCOLORS	8	//定义程序中使用几种颜色
static const char colors[NUMCOLORS][ColLast][8]	= {
   { "#cccccc", "#000000", "#dddddd" }, // 0 = normal 正常使用的颜色，系统托盘也是使用这种颜色
   { "#0000ff", "#ffffff", "#cc6600" }, // 1 = selected被选择的标签页，其中边的颜色指获得焦点的窗口的包围颜色
   { "#ff6600", "#ffffff", "#ff6600" }, // 2 = 红底白字，CPU利用率大于80％
   { "#ffffff", "#00BFFF", "#dddddd" }, // 3 = 信息之间的"|"
   { "#ffffff", "#0000ff", "#dddddd" }, // 4 = 时间、电源、网络下载
   { "#ffffff", "#000000", "#ffff00" }, // 5 = CPU利用率大于60％
   { "#ffffff", "#cc3300", "#dddddd" }, // 6 = 网络上传
   { "#ffffff", "#000000", "#cae682" }, // 7 = window title text 窗口标题颜色(#cae682)*/
};
static const unsigned int borderpx           = 1; /* border pixel of windows 边的宽度*/
static const unsigned int snap               = 32; /* snap pixel */
static const Bool         showbar            = True; /* False means no bar 是否显示面板*/
static const Bool         topbar             = True; /* False means bottom bar 面板的显示位置：上或下*/
/* 系统托盘相关 */
// 是否允许系统托盘
static const Bool systray_enable  = True;
// 托盘图标之间的间隔
static const int  systray_spacing = 2;
/* 状态栏的高度 注意：当状态栏的高度值小于字体的高度时，以字体的高度为准，防止文字显示被遮盖*/
static const int status_height = 0;
/* 标签页tagging */
static const char *tags[]	= { "终端", "Web", "文档", "娱乐" };
//自动隐藏没有内容的tag（Hide empty tags in tag list）
Bool autohide    = False; //True;
//自定义一些程序的默认展现方式，注意程序的第一个字母必须为大写，否则无效！
static const Rule rules[] = {
  /* class       instance    title       tags mask     isfloating   monitor */
  // 始终在标签3上打开firefox
   { "Firefox",   NULL,        NULL,       1 << 1,    False,      -1 },
  // 始终在标签2上打开emacs；窗口浮动，否则emacs记忆光标的位置会出问题
   { "XTerm",   NULL,        NULL,       1,    False,      -1 },
  // 
   { "Xpdf",   NULL,        NULL,       1 << 2,    True,      -1 },
   { "MPlayer",   NULL,        NULL,       1 << 3,    True,      -1 },
   { "feh",   NULL,        NULL,       1 << 3,    True,      -1 },
   { "Audacious",   NULL,        NULL,       1 << 3,    True,      -1 },
	
};
/* layout(s) */
static const float mfact       = 0.55; /* 窗口开启时所占的屏幕比例，默认为0.55 factor of master area size [0.05..0.95] */
static const Bool  resizehints = False; /*如果为True则某些应用程序不能最大化地占据屏幕，比如：xterm等。(True means respect size hints in tiled resizals )*/
// 定义窗口的展现（平铺）方式，具体的实现在诸如tile等函数里面
static const Layout layouts[]  = {
    /* symbol     arrange function */
    { "[M]",       monocle },    //缺省：单个窗口最大化显示
    { "><>",      NULL },        //保持窗口的原始风貌（no layout function means floating behavior）
    { "[]=",        tile },      //左右平铺 
    { "[=]",        bstackhoriz }, //水平上下平铺
    { "[#]" ,       grid },
    { "[||]" ,       bstack },
};
/* key definitions */
#define MODKEY Mod4Mask // use windows key
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/bash", "-c", cmd, NULL } }

//快捷键定义
static Key keys[] = {
	/* modifier                     key        function        argument */
	{ MODKEY,                       XK_q,  spawn,          SHCMD("scrot %Y%m%d-%H.%M.%S.png -t 280x175 -e 'mv $f $m ~/tmp/'") },
	{ MODKEY,                       XK_z,  spawn,          SHCMD("xterm -fa 'YaHei Consolas Hybrid:charwidth=9' -fs 11 -bg black -fg gray90 -geometry 75x24") },
	{ MODKEY,                       XK_x,  spawn,          SHCMD("xterm -fa 'YaHei Consolas Hybrid:charwidth=10' -fs 13 -bg black -fg gray90") },
	{ MODKEY,                       XK_a,  spawn,          SHCMD("firefox") },
	{ MODKEY,                       XK_s,  spawn,          SHCMD("xpdf -papercolor '#6c6c6c'") },
	{ MODKEY,                       XK_c,  spawn,          SHCMD("audacious") },
	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
	// 左右箭头键循环切换tag
	{ MODKEY,                       XK_Left,   view_prev_tag,  {0} },
	{ MODKEY,                       XK_Right,  view_next_tag,  {0} },
	//关闭当前正在使用的窗口
	{ MODKEY,                       XK_Escape, killclient ,     {0} },
	{ MODKEY,                       XK_y,      setlayout,      {.v = &layouts[4]} },
	{ MODKEY,                       XK_u,      setlayout,      {.v = &layouts[3]} },
	{ MODKEY,                       XK_i,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY,                       XK_o,      setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                       XK_p,      setlayout,      {.v = &layouts[0]} },
	//重启dwm，无需登出dwm
	{ MODKEY|ShiftMask,             XK_r,      restart,        {0} },
};
/* 鼠标动作定义 button definitions */
/* click can be ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[]															= {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,           0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,           0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,           0,              Button2,        zoom,           {0} },
	//{ ClkStatusText,       0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,              0,              Button1,        view,           {0} },
	{ ClkTagBar,              0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,              MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,              MODKEY,         Button3,        toggletag,      {0} },

	// 用鼠标滚轮在标签页区域滚动时切换标签页
	//xlib中 鼠标的前滚和后滚被映射到了鼠标的第 4 和第 5 按键上，如果需要进行鼠标滚轮事件的处理，只需要在 ButtonPress 里面进行即可。这点与Windows不同，Windows里面有专门的鼠标滚动处理事件WM_MOUSEWHEEL。
	{ ClkTagBar,            0,              Button4,        view_prev_tag ,           {0} },
	{ ClkTagBar,            0,              Button5,        view_next_tag ,           {0} },
	// 鼠标滚轮在窗口标题显示区域滚动时切换窗口焦点
	{ ClkWinTitle,          0,              Button4,       focusstack,      {.i = -1 } },
	{ ClkWinTitle,          0,              Button5,       focusstack,      {.i = +1 } },
	// 鼠标左键单击窗口标题显示区域，切换窗口
	{ ClkWinTitle,          0,              Button1,       focusonclick,   {0} },
    // 鼠标右键单击窗口标题关闭当前活动窗口
    { ClkWinTitle,          0 ,             Button3 ,      closeonclick ,     {0} },

};










