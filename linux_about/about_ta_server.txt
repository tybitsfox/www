<a name=server01></a><font size=4><pre>
<font color=red size=4>这里记录下所有服务器设置操作的细节及问题</font>

一、关于修改ssh端口后登录的问题：
服务器暂时设置643端口为ssh的通讯端口，修改端口后连接服务器时命令为：
<font color=red size=3>ssh root@192.168.1.120 -p643</font>
目前没有测试的是这种方式用于git该是怎样的书写形式？
二、关于mysql的相关问题：
1、带用户名和密码的登录，由于以前我个人使用都是不设置密码的，所以这回还是有些小小的麻烦，首先登录形式为：
<font color=red size=3>mysql -uroot -ppassword</font>
根据测试结果，用户名和密码必须紧跟在相关参数后，不能有空格。但是密码可以不输入：
<font color=red size=3>mysql -uroot -p</font>
这样会比较安全的输入密码。
<font color='#0000ff' size=3>2016-4-18添加，关于新增用户的说明：
create user 'sdhl'@'localhost' identified by 'sdhl2016';
grant all on env2016.* to 'sdhl'@'localhost';
以上两条命令就是建立一个新用户sdhl并设置其密码，然后将数据库env2016的所有操作权限赋予该用户。</font>
2、php和mysql乱码的问题，这个问题相当普遍，但是只要能做到php文件所用编码和mysql编码一致就没有这些问题了。
我的php一直使用utf-8，所以，在不更改默认mysql的编码设置时会有乱码产生的。这里有两种方式可以避免：
（1）在php文件中需要对数据库进行操作时加入：
<font color=red size=3>mysql_query("SET NAMES 'UTF-8'");</font>这样可以保持两者编码的一致，这时在php中不会产生乱码了，但是如果使用mysql
的shell环境查看数据库时显示的仍然是乱码，这是因为默认的mysql编码没有改变，在shell下通过命令：
<font color=red size=3>show variables like '%char%';</font>查看mysql的编码设置会有如下设置：
| Variable_name | Value |
+--------------------------+----------------------------+
| character_set_client | utf8 |
| character_set_connection | utf8 |
| character_set_database | latin1 |
| character_set_filesystem | binary |
| character_set_results | utf8 |
| character_set_server | latin1 |
| character_set_system | utf8 |
| character_sets_dir | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+

此时一个奇怪的现象是，这些由php写入的记录在shell下看起来是乱码，但是在php中显示正常，如果在shell下手动添加一
条记录，这条记录在shell下会正常显示没有乱码，因此这里出现的乱码问题应该是shell所用编码的不同造成的，我尝试
使用不同的编码方式显示：在mysql下输入命令： <font color=red size=3>set names gbk</font>(gb2312\utf8)都有不同的乱码显示，但当我使用latin1编码
时竟然正常的显示中文了，看来shell还是保持了mysql默认的编码格式。我们无需对shell进行永久的修改，仅仅在我们使用
shell时输入该命令能正常查看即可。从上面的编码设置来看，我们知道database和server仍然使用其默认的编码latin1，这
就是我们要在php中使用第一种方法避免乱码的原因，因此要彻底改变这一状况，我们需要用就修改设置，如此我们就能不再
通过第一种方式就可达到编码一致，这就是第二种方式：
（2）通过修改mysql的配置文件实现编码一致：
以debian为例，mysql的配置为/etc/mysql/my.cnf，在[mysqld]节下添加：
character-set-server=utf8
保存修改，重启服务 /etc/init.d/mysql restart，此时在查看编码设置会有如下显示：
mysql> <font color=red size=3>show variables like '%char%';</font>
+--------------------------+----------------------------+
| Variable_name | Value |
+--------------------------+----------------------------+
| character_set_client | utf8 |
| character_set_connection | utf8 |
| character_set_database | utf8 |
| character_set_filesystem | binary |
| character_set_results | utf8 |
| character_set_server | utf8 |
| character_set_system | utf8 |
| character_sets_dir | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+
此时dayabase和server都已修改为utf8编码了，这时在php文件中就可以不需要第一种的做法仍可以保持编码一致了，但是要注意
的是修改之前建立的数据库其编码格式仍然是原来的latin1。
这里还应注意的一点是，在mysql5.1之前，对配置文件修改是如下形式：
default-character-set=utf8
而其后版本对[mysqld]的修改不能在是这条语句了，不然重启mysql服务时会失败。必须改为character-set-server=utf8

三、服务器的一些密码设置：
mysql : root taenv2014
login : 默认
apache 默认端口修改为：8053
ssh 默认端口修改为：643
服务器配置的eth0：192.168.1.120
服务器配置的eth1：dhcp

ssh连接方式： <font color=red size=3>ssh root@192.168.1.120 -p643</font>
git连接方式： <font color=red size=3>git remote add origin ssh://root@192.168.1.120:643/workarea/git-depot/www.git</font>
scp链接方式： <font color=red size=3>scp -P643 -r root@192.168.1.120:/var/www/php ./</font>
git远程空仓库的建立：<font color=red size=3>git init --bare workdir.git</font>这样建立起来的空仓库才能将本地分支remote 到 origin


数据库备份及恢复:
几个常用用例：
1.导出整个数据库
(1)  mysqldump -u 用户名 -p 数据库名 > 导出的文件名    
	 <font color=red size=3>mysqldump -u wcnc -p ta_test > ta_test.sql</font>
(2)  mysqldump --tab=/path/to/som/dir --opt db_name 这种导出方式好像比上面的操作麻烦些，但是好处是
	 数据库中每张表的结构，数据都是单独的文件。便于取舍。每张表的结构保存于*.sql文件中，而数据则保存于
	 对应的txt文件中。例如将数据库ta_test全部导出： <font color=red size=3>mysqldump --tab=/tmp/ta_test_bak/ --opt ta_test</font>
	 ls查看目录ta_test_bak:<font color=blue size=3>
-rw-rw-rw- 1 mysql mysql    0  5月 12 23:16 vdmsg.txt
-rw-r--r-- 1 root  root  1499  5月 12 23:16 vdmsg.sql
-rw-rw-rw- 1 mysql mysql   91  5月 12 23:16 usrtab.txt
-rw-r--r-- 1 root  root  1472  5月 12 23:16 usrtab.sql
-rw-rw-rw- 1 mysql mysql    0  5月 12 23:16 station.txt
-rw-r--r-- 1 root  root  1611  5月 12 23:16 station.sql</font>
	 可以看到该数据库有三个表，其中vdmsg和station表没有记录。这种备份在数据迁移时可以方便的对表和数据进行取舍。
	 相对于这种方式的备份操作，恢复时，可以逐个表恢复：
	 恢复usrtab表时：
	 <1>恢复结构： <font color=red size=3>mysql ta_test < usrtab.sql</font>
	 <2>回复数据： <font color=red size=3>>load data infile '/tmp/ta_test_bak/usrtab.txt' into table usrtab;</font>
		这里注意如果是不同数据库的数据迁移，不能使用load data local infile,只能是load data infile.
   		另外备份时注意建立的目录ta_test_bak的属性，有问题的话可以更改为：chmod 0777
		使用逗号作为分割符时：<font color=red size=3>load data infile '/tmp/aaa.txt' into table usertab fields terminated by',';</font>
		<font size=5 color=red><strong>注意：load data的操作是添加数据库，而非新建，如需用该操作更新数据库时，应先手动delete已有的数据！</strong></font>
2.导出一个表
 mysqldump -u 用户名 -p 数据库名 表名> 导出的文件名
 <font color=red size=3>mysqldump -u wcnc -p ta_test usrtab> ta_test_usrtab.sql</font>
3.导出一个数据库结构
  <font color=red size=3>mysqldump -u wcnc -p -d --add-drop-table ta_test >d:\ta_test_struct.sql</font>
 -d 没有数据 --add-drop-table 在每个create语句之前增加一个drop table 
4.导入数据库
  常用source 命令
  进入mysql数据库控制台，
  如mysql -u root -p 
  
  mysql>use 数据库
  然后使用source命令，后面参数为脚本文件（如这里用到的.sql）
  <font color=red size=3>mysql>source d:\ta_test.sql</font>
数据库表结构的修改及查看comment
1.添加一个字段：
<font color=red size=3>alter table station add transcode varchar(20) comment '传输标志字段';</font>
2.查看备注信息：
<font color=red size=3>mysql> show full fields from station;</font>
+-----------+-------------+-----------------+------+-----+---------+----------------+---------------------------------+--------------------+
| Field     | Type        | Collation       | Null | Key | Default | Extra          | Privileges                      | Comment            |
+-----------+-------------+-----------------+------+-----+---------+----------------+---------------------------------+--------------------+
| sname     | varchar(20) | utf8_general_ci | YES  |     | NULL    |                | select,insert,update,references | 站点名称           |
| sid       | int(11)     | NULL            | NO   | PRI | NULL    | auto_increment | select,insert,update,references |                    |
| phone     | varchar(12) | utf8_general_ci | YES  |     | NULL    |                | select,insert,update,references |                    |
| addr      | varchar(40) | utf8_general_ci | YES  |     | NULL    |                | select,insert,update,references |                    |
| contact   | varchar(10) | utf8_general_ci | YES  |     | NULL    |                | select,insert,update,references | 联系人             |
| transcode | varchar(20) | utf8_general_ci | YES  |     | NULL    |                | select,insert,update,references | 传输标志字节       |
+-----------+-------------+-----------------+------+-----+---------+----------------+---------------------------------+--------------------+
6 rows in set (0.00 sec)
或者：
<font color=red size=3>show create table soil_val;
 CREATE TABLE `soil_val` (
  `sid` varchar(24) NOT NULL COMMENT '站点id',
  `iid` int(12) unsigned NOT NULL COMMENT '污染项目id',
  `date` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '监测时间',
  `val` double(7,2) NOT NULL COMMENT '监测值',
  `aid` int(6) unsigned NOT NULL COMMENT '行政区划',
  PRIMARY KEY (`sid`,`iid`),
  KEY `soil_aid_iid` (`aid`,`iid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
</font>
3.修改一个字段：
可以使用change和modify两种方式，区别在于，change可以修改指定字段的名称和属性。而modify只修改属性：
用change如果不修改字段名的时候也要写两次字段名（相同的）：
<font color=red size=3>alter table station change sname sname varchar(20) comment '站点名称';</font>
或者使用：
<font color=red size=3>alter table station modify sname varchar(20) comment '站点名称';</font>
4.建立一个表索引：
<font color=red size=3>create index pt_link_sid_lid on pt_link(sid,lid);</font>
5.查看索引表：
<font color=red size=3>show index from pt_link;</font>
6.查看一个索引表是否起作用：
<font color=red size=3>explain select * from pt_link where sid='370915010543' and lid > 1000;</font>
7.删除一个索引：
<font color=red size=3>drop index soil_val_iid on soil_val;</font>
8.将mysql下的执行结果重定向到指定文件：
<font color=red size=3>mysql>tee /tmp/aaa.txt</font>



 门禁系统所用的数据库账户： 
<font color=red size=3>grant select,insert,update,delete,create,drop on ta_test.* to 'taenv'@'localhost' identified by 'taenv2014';</font>
</pre></font><br>
<a name=server02></a><font size=4><pre>
<font color=red size=4>ip摄像头视频流的存储和转换</font>
ip摄像头一般是以服务端的形式提供视频访问的，也就是他自身实现一个web服务端，固定一个端口来侦听客户端的访问请求的。
为了对内网和外网提供访问，他一般还具有upnp和动态域名解析功能。一个典型的实例就是我刚进行过测试的easyN系列ip摄像头。
基于这一特点，他所提供的视频流数据是一种被动式的（服务器形式的）。而数据形式一般为videostream.cgi和videostream.asf等形式。
其中前一种形式的数据流可直接被主流浏览器直接以视频资料形式显示播放（测试的结果在window下的播放效果明显强于linux下）。
而后一种asf文件格式的数据流是可由mplayer之类的视频播放器直接播放的，当然这两种格式的数据流都可以抓取并保存为文件。
下面为在linux下抓取、保存、转换视频类型的操作：

对cgi格式的直接播放，在firefox等浏览器下直接输入待播放的流文件地址：
<font color=red size=3>http://192.168.1.103:81/videostream.cgi?user=admin&pwd= </font>即可播放，在linux下流畅度差些。
对asf格式的直接播放，使用mplayer:
<font color=red size=3>mplayer http://admin:@192.168.1.103:81/videostream.asf</font>

对asf（cgi的同样操作）格式的流文件抓取保存：
<font color=red size=3>wget http://admin:@192.168.1.103:81/videostream.asf</font>
手动操作时抓取一定时间后CTRL_C结束抓取。

为便于对抓取的文件在web上进行应用，可将抓取的asf文件转换为mp4文件，以便与使用html5的特性轻松的播放。
<font color=red size=3>ffmpeg -i videostream.asf -f mp4 -an aaa.mp4</font>
注意：该操作的关键参数就是an,他是audio no的简写，知道了他的简写他的意义就很明白了，还有个参数是-vn video no的简写，
只生成音频文件，哈哈。能够实现这个操作的没几个人！我也是费劲艰辛在某个英文资料网站上才学到的。^-^
说到了ffmpeg,在提下他的屏幕录像吧：
<font color=red size=3>ffmpeg -f x11grab -r 24 -s 800x600 -i :0.0 ./kkk.mpg</font>















</pre></font><br>
