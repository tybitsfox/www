<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<?php
echo "<center><font size=5 color=#0000ff>Debian下老旧程序的迁移</font></center><br>";
echo "ePSxe 这是我最爱的一款sonyPS模拟器，然而在2016年之后其开发团队就停止了
对其的维护和更新<br>
这款史上最优秀的模拟器停止在了2.05版本。虽然在debian的软件仓库中还有其他的ps模拟器，但是根本无法与这款优秀的软件媲美。<br>
虽然epsxe一直没有出现在debian的软件仓库中，但是在debian9之前都能一直在debian系统中完美的运行，其完美的画面，几乎0bug的运行，<br>
以及超低的资源占用，都使这款软件成为极品！然而自debian9开始，随着系统的升级，使其所依赖的链接库都不再支持这款软件了，<br>我当时为了继续保留这款软件，在升级到debian9时，从之前的发行版中拷贝了两个其所依赖的库文件。<br>现在我的debian已经用到了版本10,这回有更多的依赖不能使用了。可我实在又不想放弃。在了解了snapd和flatpak之后，我也考虑到跨版本对他继续使用<br>
于是，我将他之前能用的各个链接库文件都拷贝至一个文件夹中。
并将该文件夹的路径添加至/etc/ld.so.conf.d/目录下，使用ldconfig更新搜索路径
终于，这款经典软件又在debian10中能正常运行了！";
echo "<br><br><center><font size=5 color=blue>debian20.04安装fluxbox出现的问题及解决方法</font></center><br><pre>
我在我三台机器上都安装了fluxbox,其中单位本本安装完成后，即将原有的配置.fluxbox整个拷贝过去，直接可以运行
家里的一台服务器在安装完ubuntu20.04后也安装了fluxbox.操作如前，依然没有任何问题。
家里刚买的一台dell台式机，2k屏，安装了fluxbox后直接拷贝服务器上的配置，启动后发现壁纸没有设置，并且除了底
边任务栏其他桌面一律不能刷新。使用xrandr 查看了分辨率没有问题，但是不能重新设置。一开始我以为fluxbox不能支持2k屏
上网查询也没有实质性的解决方法。我又仔细分析了其中每个步骤。突然想起在首次安装完成后，每拷贝配置文件之前启动了一次
fluxbox当时最起码没有无法刷新的情况。因此我感觉应该是配置文件的问题。于是我将拷贝过来的配置文件改名另存，让系统自
动生成一个配置文件。这回果然没有了刷新的问题，但壁纸的设置仍然不稳定，生成配置文件首次运行时，可以显示壁纸，但是再
次启动则壁纸就不能显示了，而且当壁纸无法显示时，桌面的刷新问题也出现了，于是我尝试在终端下（此时除了刷新和壁纸，
其他都可运行）执行feh设定壁纸，成功！并且一旦设置了壁纸，刷新的问题也随之消失。反复比较配置文件，反复尝试修改
lastwallpaper,init,startup等文件，都没有效果。没办法只能翻墙去自由世界寻求帮助。终于在一个相似问题的讨论中发现了
可能的问题所在:查看文件overlay中是否存在这一行：background:none,并且没有被注释掉。
另外：在init文件中RootCommand的写法已经不适用新版的fluxbox了，要改写为：
background: aspect|tiled|centerd
background.pixmap:/path/to/wallpaper
于是我先尝试修改了overlay,去掉了之前所有测试的配置修改，重启成功！！之后我又查看了备份的之前一直可用的配置文件，也
确实在overlay中有这项设置的。但为什么拷贝过来不能使用？我也找到的问题所在：lastwallpaper文件中设置的默认显示器是0:0
而我的dell 2k屏使用的HDMI接口，查看其显示编号为1：0
在64位系统下运行32位程序:
其实超简单：）只是我之前没有尝试过。在软件仓库中有很多后缀:i386的软件包，这些就是32位的软件包，最简单的就是直接安装
这些安装包，一切依赖都自动解决。我首先安装的ps2游戏模拟器PCSX2,然后运行完美。于是我又想将我最爱的ps1模拟器ePSXe移植
过来，epsxe就有些麻烦了。因为在仓库中没有这个安装包，所以只能自己解决依赖问题。如果有确实找不到的老版运行库则移植的
希望就破灭了，然而我还是很幸运的。因为这个软件已经很久不更新了，所以我在使用32位系统debian8时，有些依赖就不好找了，
而幸亏我一直在用这个模拟器，所以我将debian7下的依赖库早早的都做了备份。由于有些库在新的系统中有版本冲突因此，我在32位
系统下的做法是将老版的依赖库放置在一个专门的目录下，以保证不影响系统中其他使用该库的软件依然使用新版的库。而在运行
模拟器时，我在写个脚本，通过LD_LIBRARY_PATH指定老版的库的所在路径，而保证了模拟器仍可使用他所需的库文件！所以这些老旧的
依赖库就这样保存下来了；）</pre>
";

?>
